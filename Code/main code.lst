0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Dec 11 2012) (MSVC)
0000              4   ; This file was generated Mon Mar 30 08:43:18 2015
0000              5   ;--------------------------------------------------------
                  5   $name main_code
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _execute
0000             29            public _stop
0000             30            public _turn_right
0000             31            public _turn_left
0000             32            public _display_LCD
0000             33            public _Timer0ISR
0000             34            public _InitTimer0
0000             35            public _InitADC
0000             36            public _InitSerialPort
0000             37            public _Wait1S
0000             38            public _LCDprint
0000             39            public _LCD_8BIT
0000             40            public _WriteCommand
0000             41            public _WriteData
0000             42            public _LCD_byte
0000             43            public _LCD_pulse
0000             44            public _waitms
0000             45            public _Wait50us
0000             46            public _InitPorts
0000             47            public _LCDprint_PARM_3
0000             48            public _start_timer
0000             49            public _start
0000             50            public _turn_time_update
0000             51            public _time_update_flag
0000             52            public _LCDprint_PARM_2
0000             53            public _line_counter
0000             54            public _action_timer
0000             55            public _turn_timer
0000             56            public _pwm_right
0000             57            public _pwm_left
0000             58            public _pwmcount
0000             59            public _mins
0000             60            public _secs
0000             61            public _msCount
0000             62   ;--------------------------------------------------------
0000             63   ; Special Function Registers
0000             64   ;--------------------------------------------------------
0000             65   _ACC            DATA 0xe0
0000             66   _ADCON0         DATA 0x8e
0000             67   _ADCON1         DATA 0x97
0000             68   _ADINS          DATA 0xa3
0000             69   _ADMODA         DATA 0xc0
0000             70   _ADMODB         DATA 0xa1
0000             71   _AD0BH          DATA 0xbb
0000             72   _AD0BL          DATA 0xa6
0000             73   _AD0DAT0        DATA 0xc5
0000             74   _AD0DAT1        DATA 0xc6
0000             75   _AD0DAT2        DATA 0xc7
0000             76   _AD0DAT3        DATA 0xf4
0000             77   _AD1BH          DATA 0xc4
0000             78   _AD1BL          DATA 0xbc
0000             79   _AD1DAT0        DATA 0xd5
0000             80   _AD1DAT1        DATA 0xd6
0000             81   _AD1DAT2        DATA 0xd7
0000             82   _AD1DAT3        DATA 0xf5
0000             83   _AUXR1          DATA 0xa2
0000             84   _B              DATA 0xf0
0000             85   _BRGR0          DATA 0xbe
0000             86   _BRGR1          DATA 0xbf
0000             87   _BRGCON         DATA 0xbd
0000             88   _CCCRA          DATA 0xea
0000             89   _CCCRB          DATA 0xeb
0000             90   _CCCRC          DATA 0xec
0000             91   _CCCRD          DATA 0xed
0000             92   _CMP1           DATA 0xac
0000             93   _CMP2           DATA 0xad
0000             94   _DEECON         DATA 0xf1
0000             95   _DEEDAT         DATA 0xf2
0000             96   _DEEADR         DATA 0xf3
0000             97   _DIVM           DATA 0x95
0000             98   _DPH            DATA 0x83
0000             99   _DPL            DATA 0x82
0000            100   _FMADRH         DATA 0xe7
0000            101   _FMADRL         DATA 0xe6
0000            102   _FMCON          DATA 0xe4
0000            103   _FMDATA         DATA 0xe5
0000            104   _I2ADR          DATA 0xdb
0000            105   _I2CON          DATA 0xd8
0000            106   _I2DAT          DATA 0xda
0000            107   _I2SCLH         DATA 0xdd
0000            108   _I2SCLL         DATA 0xdc
0000            109   _I2STAT         DATA 0xd9
0000            110   _ICRAH          DATA 0xab
0000            111   _ICRAL          DATA 0xaa
0000            112   _ICRBH          DATA 0xaf
0000            113   _ICRBL          DATA 0xae
0000            114   _IEN0           DATA 0xa8
0000            115   _IEN1           DATA 0xe8
0000            116   _IP0            DATA 0xb8
0000            117   _IP0H           DATA 0xb7
0000            118   _IP1            DATA 0xf8
0000            119   _IP1H           DATA 0xf7
0000            120   _KBCON          DATA 0x94
0000            121   _KBMASK         DATA 0x86
0000            122   _KBPATN         DATA 0x93
0000            123   _OCRAH          DATA 0xef
0000            124   _OCRAL          DATA 0xee
0000            125   _OCRBH          DATA 0xfb
0000            126   _OCRBL          DATA 0xfa
0000            127   _OCRCH          DATA 0xfd
0000            128   _OCRCL          DATA 0xfc
0000            129   _OCRDH          DATA 0xff
0000            130   _OCRDL          DATA 0xfe
0000            131   _P0             DATA 0x80
0000            132   _P1             DATA 0x90
0000            133   _P2             DATA 0xa0
0000            134   _P3             DATA 0xb0
0000            135   _P0M1           DATA 0x84
0000            136   _P0M2           DATA 0x85
0000            137   _P1M1           DATA 0x91
0000            138   _P1M2           DATA 0x92
0000            139   _P2M1           DATA 0xa4
0000            140   _P2M2           DATA 0xa5
0000            141   _P3M1           DATA 0xb1
0000            142   _P3M2           DATA 0xb2
0000            143   _PCON           DATA 0x87
0000            144   _PCONA          DATA 0xb5
0000            145   _PSW            DATA 0xd0
0000            146   _PT0AD          DATA 0xf6
0000            147   _RSTSRC         DATA 0xdf
0000            148   _RTCCON         DATA 0xd1
0000            149   _RTCH           DATA 0xd2
0000            150   _RTCL           DATA 0xd3
0000            151   _SADDR          DATA 0xa9
0000            152   _SADEN          DATA 0xb9
0000            153   _SBUF           DATA 0x99
0000            154   _SCON           DATA 0x98
0000            155   _SSTAT          DATA 0xba
0000            156   _SP             DATA 0x81
0000            157   _SPCTL          DATA 0xe2
0000            158   _SPSTAT         DATA 0xe1
0000            159   _SPDAT          DATA 0xe3
0000            160   _TAMOD          DATA 0x8f
0000            161   _TCON           DATA 0x88
0000            162   _TCR20          DATA 0xc8
0000            163   _TCR21          DATA 0xf9
0000            164   _TH0            DATA 0x8c
0000            165   _TH1            DATA 0x8d
0000            166   _TH2            DATA 0xcd
0000            167   _TICR2          DATA 0xc9
0000            168   _TIFR2          DATA 0xe9
0000            169   _TISE2          DATA 0xde
0000            170   _TL0            DATA 0x8a
0000            171   _TL1            DATA 0x8b
0000            172   _TL2            DATA 0xcc
0000            173   _TMOD           DATA 0x89
0000            174   _TOR2H          DATA 0xcf
0000            175   _TOR2L          DATA 0xce
0000            176   _TPCR2H         DATA 0xcb
0000            177   _TPCR2L         DATA 0xca
0000            178   _TRIM           DATA 0x96
0000            179   _WDCON          DATA 0xa7
0000            180   _WDL            DATA 0xc1
0000            181   _WFEED1         DATA 0xc2
0000            182   _WFEED2         DATA 0xc3
0000            183   ;--------------------------------------------------------
0000            184   ; special function bits
0000            185   ;--------------------------------------------------------
0000            186   _ACC_7          BIT 0xe7
0000            187   _ACC_6          BIT 0xe6
0000            188   _ACC_5          BIT 0xe5
0000            189   _ACC_4          BIT 0xe4
0000            190   _ACC_3          BIT 0xe3
0000            191   _ACC_2          BIT 0xe2
0000            192   _ACC_1          BIT 0xe1
0000            193   _ACC_0          BIT 0xe0
0000            194   _ADMODA_7       BIT 0xc7
0000            195   _ADMODA_6       BIT 0xc6
0000            196   _ADMODA_5       BIT 0xc5
0000            197   _ADMODA_4       BIT 0xc4
0000            198   _ADMODA_3       BIT 0xc3
0000            199   _ADMODA_2       BIT 0xc2
0000            200   _ADMODA_1       BIT 0xc1
0000            201   _ADMODA_0       BIT 0xc0
0000            202   _BNDI1          BIT 0xc7
0000            203   _BURST1         BIT 0xc6
0000            204   _SCC1           BIT 0xc5
0000            205   _SCAN1          BIT 0xc4
0000            206   _BNDI0          BIT 0xc3
0000            207   _BURST0         BIT 0xc2
0000            208   _SCC0           BIT 0xc1
0000            209   _SCAN0          BIT 0xc0
0000            210   _B_7            BIT 0xf7
0000            211   _B_6            BIT 0xf6
0000            212   _B_5            BIT 0xf5
0000            213   _B_4            BIT 0xf4
0000            214   _B_3            BIT 0xf3
0000            215   _B_2            BIT 0xf2
0000            216   _B_1            BIT 0xf1
0000            217   _B_0            BIT 0xf0
0000            218   _I2CON_7        BIT 0xdf
0000            219   _I2CON_6        BIT 0xde
0000            220   _I2CON_5        BIT 0xdd
0000            221   _I2CON_4        BIT 0xdc
0000            222   _I2CON_3        BIT 0xdb
0000            223   _I2CON_2        BIT 0xda
0000            224   _I2CON_1        BIT 0xd9
0000            225   _I2CON_0        BIT 0xd8
0000            226   _I2EN           BIT 0xde
0000            227   _STA            BIT 0xdd
0000            228   _STO            BIT 0xdc
0000            229   _SI             BIT 0xdb
0000            230   _AA             BIT 0xda
0000            231   _CRSEL          BIT 0xd8
0000            232   _IEN0_7         BIT 0xaf
0000            233   _IEN0_6         BIT 0xae
0000            234   _IEN0_5         BIT 0xad
0000            235   _IEN0_4         BIT 0xac
0000            236   _IEN0_3         BIT 0xab
0000            237   _IEN0_2         BIT 0xaa
0000            238   _IEN0_1         BIT 0xa9
0000            239   _IEN0_0         BIT 0xa8
0000            240   _EA             BIT 0xaf
0000            241   _EWDRT          BIT 0xae
0000            242   _EBO            BIT 0xad
0000            243   _ES             BIT 0xac
0000            244   _ESR            BIT 0xac
0000            245   _ET1            BIT 0xab
0000            246   _EX1            BIT 0xaa
0000            247   _ET0            BIT 0xa9
0000            248   _EX0            BIT 0xa8
0000            249   _IEN1_7         BIT 0xef
0000            250   _IEN1_6         BIT 0xee
0000            251   _IEN1_5         BIT 0xed
0000            252   _IEN1_4         BIT 0xec
0000            253   _IEN1_3         BIT 0xeb
0000            254   _IEN1_2         BIT 0xea
0000            255   _IEN1_1         BIT 0xe9
0000            256   _IEN1_0         BIT 0xe8
0000            257   _EADEE          BIT 0xef
0000            258   _EST            BIT 0xee
0000            259   _ECCU           BIT 0xec
0000            260   _ESPI           BIT 0xeb
0000            261   _EC             BIT 0xea
0000            262   _EKBI           BIT 0xe9
0000            263   _EI2C           BIT 0xe8
0000            264   _IP0_7          BIT 0xbf
0000            265   _IP0_6          BIT 0xbe
0000            266   _IP0_5          BIT 0xbd
0000            267   _IP0_4          BIT 0xbc
0000            268   _IP0_3          BIT 0xbb
0000            269   _IP0_2          BIT 0xba
0000            270   _IP0_1          BIT 0xb9
0000            271   _IP0_0          BIT 0xb8
0000            272   _PWDRT          BIT 0xbe
0000            273   _PBO            BIT 0xbd
0000            274   _PS             BIT 0xbc
0000            275   _PSR            BIT 0xbc
0000            276   _PT1            BIT 0xbb
0000            277   _PX1            BIT 0xba
0000            278   _PT0            BIT 0xb9
0000            279   _PX0            BIT 0xb8
0000            280   _IP1_7          BIT 0xff
0000            281   _IP1_6          BIT 0xfe
0000            282   _IP1_5          BIT 0xfd
0000            283   _IP1_4          BIT 0xfc
0000            284   _IP1_3          BIT 0xfb
0000            285   _IP1_2          BIT 0xfa
0000            286   _IP1_1          BIT 0xf9
0000            287   _IP1_0          BIT 0xf8
0000            288   _PADEE          BIT 0xff
0000            289   _PST            BIT 0xfe
0000            290   _PCCU           BIT 0xfc
0000            291   _PSPI           BIT 0xfb
0000            292   _PC             BIT 0xfa
0000            293   _PKBI           BIT 0xf9
0000            294   _PI2C           BIT 0xf8
0000            295   _P0_7           BIT 0x87
0000            296   _P0_6           BIT 0x86
0000            297   _P0_5           BIT 0x85
0000            298   _P0_4           BIT 0x84
0000            299   _P0_3           BIT 0x83
0000            300   _P0_2           BIT 0x82
0000            301   _P0_1           BIT 0x81
0000            302   _P0_0           BIT 0x80
0000            303   _T1             BIT 0x87
0000            304   _KB7            BIT 0x87
0000            305   _CMP_1          BIT 0x86
0000            306   _KB6            BIT 0x86
0000            307   _CMPREF         BIT 0x85
0000            308   _KB5            BIT 0x85
0000            309   _CIN1A          BIT 0x84
0000            310   _KB4            BIT 0x84
0000            311   _CIN1B          BIT 0x83
0000            312   _KB3            BIT 0x83
0000            313   _CIN2A          BIT 0x82
0000            314   _KB2            BIT 0x82
0000            315   _CIN2B          BIT 0x81
0000            316   _KB1            BIT 0x81
0000            317   _CMP_2          BIT 0x80
0000            318   _KB0            BIT 0x80
0000            319   _P1_7           BIT 0x97
0000            320   _P1_6           BIT 0x96
0000            321   _P1_5           BIT 0x95
0000            322   _P1_4           BIT 0x94
0000            323   _P1_3           BIT 0x93
0000            324   _P1_2           BIT 0x92
0000            325   _P1_1           BIT 0x91
0000            326   _P1_0           BIT 0x90
0000            327   _OCC            BIT 0x97
0000            328   _OCB            BIT 0x96
0000            329   _RST            BIT 0x95
0000            330   _INT1           BIT 0x94
0000            331   _INT0           BIT 0x93
0000            332   _SDA            BIT 0x93
0000            333   _T0             BIT 0x92
0000            334   _SCL            BIT 0x92
0000            335   _RXD            BIT 0x91
0000            336   _TXD            BIT 0x90
0000            337   _P2_7           BIT 0xa7
0000            338   _P2_6           BIT 0xa6
0000            339   _P2_5           BIT 0xa5
0000            340   _P2_4           BIT 0xa4
0000            341   _P2_3           BIT 0xa3
0000            342   _P2_2           BIT 0xa2
0000            343   _P2_1           BIT 0xa1
0000            344   _P2_0           BIT 0xa0
0000            345   _ICA            BIT 0xa7
0000            346   _OCA            BIT 0xa6
0000            347   _SPICLK         BIT 0xa5
0000            348   _SS             BIT 0xa4
0000            349   _MISO           BIT 0xa3
0000            350   _MOSI           BIT 0xa2
0000            351   _OCD            BIT 0xa1
0000            352   _ICB            BIT 0xa0
0000            353   _P3_7           BIT 0xb7
0000            354   _P3_6           BIT 0xb6
0000            355   _P3_5           BIT 0xb5
0000            356   _P3_4           BIT 0xb4
0000            357   _P3_3           BIT 0xb3
0000            358   _P3_2           BIT 0xb2
0000            359   _P3_1           BIT 0xb1
0000            360   _P3_0           BIT 0xb0
0000            361   _XTAL1          BIT 0xb1
0000            362   _XTAL2          BIT 0xb0
0000            363   _PSW_7          BIT 0xd7
0000            364   _PSW_6          BIT 0xd6
0000            365   _PSW_5          BIT 0xd5
0000            366   _PSW_4          BIT 0xd4
0000            367   _PSW_3          BIT 0xd3
0000            368   _PSW_2          BIT 0xd2
0000            369   _PSW_1          BIT 0xd1
0000            370   _PSW_0          BIT 0xd0
0000            371   _CY             BIT 0xd7
0000            372   _AC             BIT 0xd6
0000            373   _F0             BIT 0xd5
0000            374   _RS1            BIT 0xd4
0000            375   _RS0            BIT 0xd3
0000            376   _OV             BIT 0xd2
0000            377   _F1             BIT 0xd1
0000            378   _P              BIT 0xd0
0000            379   _SCON_7         BIT 0x9f
0000            380   _SCON_6         BIT 0x9e
0000            381   _SCON_5         BIT 0x9d
0000            382   _SCON_4         BIT 0x9c
0000            383   _SCON_3         BIT 0x9b
0000            384   _SCON_2         BIT 0x9a
0000            385   _SCON_1         BIT 0x99
0000            386   _SCON_0         BIT 0x98
0000            387   _SM0            BIT 0x9f
0000            388   _FE             BIT 0x9f
0000            389   _SM1            BIT 0x9e
0000            390   _SM2            BIT 0x9d
0000            391   _REN            BIT 0x9c
0000            392   _TB8            BIT 0x9b
0000            393   _RB8            BIT 0x9a
0000            394   _TI             BIT 0x99
0000            395   _RI             BIT 0x98
0000            396   _TCON_7         BIT 0x8f
0000            397   _TCON_6         BIT 0x8e
0000            398   _TCON_5         BIT 0x8d
0000            399   _TCON_4         BIT 0x8c
0000            400   _TCON_3         BIT 0x8b
0000            401   _TCON_2         BIT 0x8a
0000            402   _TCON_1         BIT 0x89
0000            403   _TCON_0         BIT 0x88
0000            404   _TF1            BIT 0x8f
0000            405   _TR1            BIT 0x8e
0000            406   _TF0            BIT 0x8d
0000            407   _TR0            BIT 0x8c
0000            408   _IE1            BIT 0x8b
0000            409   _IT1            BIT 0x8a
0000            410   _IE0            BIT 0x89
0000            411   _IT0            BIT 0x88
0000            412   _TCR20_7        BIT 0xcf
0000            413   _TCR20_6        BIT 0xce
0000            414   _TCR20_5        BIT 0xcd
0000            415   _TCR20_4        BIT 0xcc
0000            416   _TCR20_3        BIT 0xcb
0000            417   _TCR20_2        BIT 0xca
0000            418   _TCR20_1        BIT 0xc9
0000            419   _TCR20_0        BIT 0xc8
0000            420   _PLEEN          BIT 0xcf
0000            421   _HLTRN          BIT 0xce
0000            422   _HLTEN          BIT 0xcd
0000            423   _ALTCD          BIT 0xcc
0000            424   _ALTAB          BIT 0xcb
0000            425   _TDIR2          BIT 0xca
0000            426   _TMOD21         BIT 0xc9
0000            427   _TMOD20         BIT 0xc8
0000            428   ;--------------------------------------------------------
0000            429   ; overlayable register banks
0000            430   ;--------------------------------------------------------
0000            431            rbank0 segment data overlay
0000            432   ;--------------------------------------------------------
0000            433   ; internal ram data
0000            434   ;--------------------------------------------------------
0000            435            rseg R_DSEG
0000            436   _msCount:
0000            437            ds 2
0002            438   _secs:
0002            439            ds 1
0003            440   _mins:
0003            441            ds 1
0004            442   _pwmcount:
0004            443            ds 1
0005            444   _pwm_left:
0005            445            ds 1
0006            446   _pwm_right:
0006            447            ds 1
0007            448   _turn_timer:
0007            449            ds 2
0009            450   _action_timer:
0009            451            ds 2
000B            452   _line_counter:
000B            453            ds 2
000D            454   _LCDprint_PARM_2:
000D            455            ds 1
000E            456   _display_LCD_buff_1_96:
000E            457            ds 17
001F            458   _main_cor_1_110:
001F            459            ds 4
0023            460   _main_cur_error_1_110:
0023            461            ds 4
0027            462   _main_pre_error_1_110:
0027            463            ds 4
002B            464   _main_q_1_110:
002B            465            ds 2
002D            466   _main_m_1_110:
002D            467            ds 2
002F            468   _main_left_1_110:
002F            469            ds 4
0033            470   _main_right_1_110:
0033            471            ds 4
0037            472   _main_line_sensor_1_110:
0037            473            ds 4
003B            474   _main_diff_1_110:
003B            475            ds 4
003F            476   _main_command_1_110:
003F            477            ds 2
0041            478   _main_state_1_110:
0041            479            ds 2
0043            480   ;--------------------------------------------------------
0043            481   ; overlayable items in internal ram 
0043            482   ;--------------------------------------------------------
0000            483            rseg R_OSEG
0000            484   ;--------------------------------------------------------
0000            485   ; indirectly addressable internal ram data
0000            486   ;--------------------------------------------------------
0000            487            rseg R_ISEG
0000            488   ;--------------------------------------------------------
0000            489   ; absolute internal ram data
0000            490   ;--------------------------------------------------------
0000            491            DSEG
0000            492   ;--------------------------------------------------------
0000            493   ; bit data
0000            494   ;--------------------------------------------------------
0000            495            rseg R_BSEG
0000            496   _time_update_flag:
0000            497            DBIT    1
0001            498   _turn_time_update:
0001            499            DBIT    1
0002            500   _start:
0002            501            DBIT    1
0003            502   _start_timer:
0003            503            DBIT    1
0004            504   _LCDprint_PARM_3:
0004            505            DBIT    1
0005            506   ;--------------------------------------------------------
0005            507   ; paged external ram data
0005            508   ;--------------------------------------------------------
0000            509            rseg R_PSEG
0000            510   ;--------------------------------------------------------
0000            511   ; external ram data
0000            512   ;--------------------------------------------------------
0000            513            rseg R_XSEG
FFC8            514            XSEG at 0xffc8
FFC8            515   _BODCFG: ds 1
FFC9            516            public _BODCFG
0000            517            rseg R_XSEG
FFDE            518            XSEG at 0xffde
FFDE            519   _CLKCON: ds 1
FFDF            520            public _CLKCON
0000            521            rseg R_XSEG
FFE1            522            XSEG at 0xffe1
FFE1            523   _PGACON1: ds 1
FFE2            524            public _PGACON1
0000            525            rseg R_XSEG
FFE4            526            XSEG at 0xffe4
FFE4            527   _PGACON1B: ds 1
FFE5            528            public _PGACON1B
0000            529            rseg R_XSEG
FFE3            530            XSEG at 0xffe3
FFE3            531   _PGA1TRIM8X16X: ds 1
FFE4            532            public _PGA1TRIM8X16X
0000            533            rseg R_XSEG
FFE2            534            XSEG at 0xffe2
FFE2            535   _PGA1TRIM2X4X: ds 1
FFE3            536            public _PGA1TRIM2X4X
0000            537            rseg R_XSEG
FFCA            538            XSEG at 0xffca
FFCA            539   _PGACON0: ds 1
FFCB            540            public _PGACON0
0000            541            rseg R_XSEG
FFCE            542            XSEG at 0xffce
FFCE            543   _PGACON0B: ds 1
FFCF            544            public _PGACON0B
0000            545            rseg R_XSEG
FFCD            546            XSEG at 0xffcd
FFCD            547   _PGA0TRIM8X16X: ds 1
FFCE            548            public _PGA0TRIM8X16X
0000            549            rseg R_XSEG
FFCC            550            XSEG at 0xffcc
FFCC            551   _PGA0TRIM2X4X: ds 1
FFCD            552            public _PGA0TRIM2X4X
0000            553            rseg R_XSEG
FFBF            554            XSEG at 0xffbf
FFBF            555   _RTCDATH: ds 1
FFC0            556            public _RTCDATH
0000            557            rseg R_XSEG
FFBE            558            XSEG at 0xffbe
FFBE            559   _RTCDATL: ds 1
FFBF            560            public _RTCDATL
0000            561            rseg R_XSEG
0000            562   ;--------------------------------------------------------
0000            563   ; absolute external ram data
0000            564   ;--------------------------------------------------------
FFBF            565            XSEG
FFBF            566   ;--------------------------------------------------------
FFBF            567   ; external initialized ram data
FFBF            568   ;--------------------------------------------------------
0000            569            rseg R_IXSEG
0000            570            rseg R_HOME
0000            571            rseg R_GSINIT
0000            572            rseg R_CSEG
0000            573   ;--------------------------------------------------------
0000            574   ; Reset entry point and interrupt vectors
0000            575   ;--------------------------------------------------------
0000            576            CSEG at 0x0000
0000 020100     577            ljmp    _crt0
000B            578            CSEG at 0x000b
000B 020100     579            ljmp    _Timer0ISR
000E            580   ;--------------------------------------------------------
000E            581   ; global & static initialisations
000E            582   ;--------------------------------------------------------
0000            583            rseg R_HOME
0000            584            rseg R_GSINIT
0000            585            rseg R_GSINIT
0000            586   ;--------------------------------------------------------
0000            587   ; data variables initialization
0000            588   ;--------------------------------------------------------
0000            589            rseg R_DINIT
0000            590   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:49: volatile int msCount=0; // Volatiles can be changed by stuff outside our program, like memory registers
0000 E4         591            clr     a
0001 F548       592            mov     _msCount,a
0003 F549       593            mov     (_msCount + 1),a
0005            594   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:50: volatile unsigned char secs=0, mins=0; // They are like global variables, kinda 
0005 750800     595            mov     _secs,#0x00
0008            596   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:50: volatile bit time_update_flag=0;
0008 75C800     597            mov     _mins,#0x00
000B            598   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:55: volatile int turn_timer = 0;
000B E4         599            clr     a
000C F5C8       600            mov     _turn_timer,a
000E F5C9       601            mov     (_turn_timer + 1),a
0010            602   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:59: volatile int action_timer = 0;
0010 E4         603            clr     a
0011 F588       604            mov     _action_timer,a
0013 F589       605            mov     (_action_timer + 1),a
0015            606   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:60: volatile int line_counter = 0;
0015 E4         607            clr     a
0016 F548       608            mov     _line_counter,a
0018 F549       609            mov     (_line_counter + 1),a
001A            610   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:51: volatile bit time_update_flag=0;
001A C2B8       611            clr     _time_update_flag
001C            612   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:56: volatile bit turn_time_update=0;
001C C268       613            clr     _turn_time_update
001E            614   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:57: volatile bit start = 1;
001E D218       615            setb    _start
0020            616   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:58: volatile bit start_timer = 0;
0020 C2D8       617            clr     _start_timer
0022            618            ; The linker places a 'ret' at the end of segment R_DINIT.
0022            619   ;--------------------------------------------------------
0022            620   ; code
0022            621   ;--------------------------------------------------------
0000            622            rseg R_CSEG
0000            623   ;------------------------------------------------------------
0000            624   ;Allocation info for local variables in function 'InitPorts'
0000            625   ;------------------------------------------------------------
0000            626   ;------------------------------------------------------------
0000            627   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:62: void InitPorts(void){
0000            628   ;        -----------------------------------------
0000            629   ;         function InitPorts
0000            630   ;        -----------------------------------------
0000            631   _InitPorts:
0000            632            using   0
0000            633   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:63: P0M1=0x1E;
0000 75841E     634            mov     _P0M1,#0x1E
0003            635   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:64: P0M2=0x00;
0003 758500     636            mov     _P0M2,#0x00
0006            637   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:65: P1M1=0;
0006 759100     638            mov     _P1M1,#0x00
0009            639   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:66: P1M2=0;
0009 759200     640            mov     _P1M2,#0x00
000C            641   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:67: P2M1=0;
000C 75A400     642            mov     _P2M1,#0x00
000F            643   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:68: P2M2=0;
000F 75A500     644            mov     _P2M2,#0x00
0012            645   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:69: P3M1=0;
0012 75B100     646            mov     _P3M1,#0x00
0015            647   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:70: P3M2=0;
0015 75B200     648            mov     _P3M2,#0x00
0018 22         649            ret
0019            650   ;------------------------------------------------------------
0019            651   ;Allocation info for local variables in function 'Wait50us'
0019            652   ;------------------------------------------------------------
0019            653   ;------------------------------------------------------------
0019            654   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:73: void Wait50us (void){
0019            655   ;        -----------------------------------------
0019            656   ;         function Wait50us
0019            657   ;        -----------------------------------------
0019            658   _Wait50us:
0019            659   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:77: _endasm;
0019            660            
0019 7852       661             mov R0, #82
001B            662             L0:
001B D898       663            djnz R0, L0 ; 2 machine cycles-> 2*0.27126us*92=50us
001D            664             
001D 22         665            ret
001E            666   ;------------------------------------------------------------
001E            667   ;Allocation info for local variables in function 'waitms'
001E            668   ;------------------------------------------------------------
001E            669   ;ms                        Allocated to registers r2 r3 
001E            670   ;j                         Allocated to registers r4 r5 
001E            671   ;k                         Allocated to registers r6 
001E            672   ;------------------------------------------------------------
001E            673   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:80: void waitms (unsigned int ms){
001E            674   ;        -----------------------------------------
001E            675   ;         function waitms
001E            676   ;        -----------------------------------------
001E            677   _waitms:
001E AA82       678            mov     r2,dpl
0020 AB83       679            mov     r3,dph
0022            680   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:85: for(j=0; j<ms; j++)
0022 7C00       681            mov     r4,#0x00
0024 7D00       682            mov     r5,#0x00
0026            683   L004004?:
0026 C3         684            clr     c
0027 EC         685            mov     a,r4
0028 9A         686            subb    a,r2
0029 ED         687            mov     a,r5
002A 9B         688            subb    a,r3
002B 5001       689            jnc     L004008?
002D            690   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:86: for (k=0; k<20; k++) Wait50us();
002D 7E14       691            mov     r6,#0x14
002F            692   L004003?:
002F C002       693            push    ar2
0031 C003       694            push    ar3
0033 C004       695            push    ar4
0035 C005       696            push    ar5
0037 C006       697            push    ar6
0039 120100     698            lcall   _Wait50us
003C D006       699            pop     ar6
003E D005       700            pop     ar5
0040 D004       701            pop     ar4
0042 D003       702            pop     ar3
0044 D002       703            pop     ar2
0046 DED8       704            djnz    r6,L004003?
0048            705   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:85: for(j=0; j<ms; j++)
0048 0C         706            inc     r4
0049 BC0058     707            cjne    r4,#0x00,L004004?
004C 0D         708            inc     r5
004D 8001       709            sjmp    L004004?
004F            710   L004008?:
004F 22         711            ret
0050            712   ;------------------------------------------------------------
0050            713   ;Allocation info for local variables in function 'LCD_pulse'
0050            714   ;------------------------------------------------------------
0050            715   ;------------------------------------------------------------
0050            716   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:89: void LCD_pulse (void){
0050            717   ;        -----------------------------------------
0050            718   ;         function LCD_pulse
0050            719   ;        -----------------------------------------
0050            720   _LCD_pulse:
0050            721   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:90: LCD_E=1;
0050 D2A5       722            setb    _P2_5
0052            723   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:91: Wait50us();
0052 120100     724            lcall   _Wait50us
0055            725   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:92: LCD_E=0;
0055 C2A5       726            clr     _P2_5
0057 22         727            ret
0058            728   ;------------------------------------------------------------
0058            729   ;Allocation info for local variables in function 'LCD_byte'
0058            730   ;------------------------------------------------------------
0058            731   ;x                         Allocated to registers 
0058            732   ;------------------------------------------------------------
0058            733   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:95: void LCD_byte (unsigned char x){
0058            734   ;        -----------------------------------------
0058            735   ;         function LCD_byte
0058            736   ;        -----------------------------------------
0058            737   _LCD_byte:
0058 8582E0     738            mov     _ACC,dpl
005B            739   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:98: LCD_D7=ACC_7;
005B A2E7       740            mov     c,_ACC_7
005D 9294       741            mov     _P1_4,c
005F            742   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:99: LCD_D6=ACC_6;
005F A2E6       743            mov     c,_ACC_6
0061 9296       744            mov     _P1_6,c
0063            745   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:100: LCD_D5=ACC_5;
0063 A2E5       746            mov     c,_ACC_5
0065 9297       747            mov     _P1_7,c
0067            748   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:101: LCD_D4=ACC_4;
0067 A2E4       749            mov     c,_ACC_4
0069 92A0       750            mov     _P2_0,c
006B            751   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:102: LCD_D3=ACC_3;
006B A2E3       752            mov     c,_ACC_3
006D 92A1       753            mov     _P2_1,c
006F            754   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:103: LCD_D2=ACC_2;
006F A2E2       755            mov     c,_ACC_2
0071 92A2       756            mov     _P2_2,c
0073            757   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:104: LCD_D1=ACC_1;
0073 A2E1       758            mov     c,_ACC_1
0075 92A3       759            mov     _P2_3,c
0077            760   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:105: LCD_D0=ACC_0;
0077 A2E0       761            mov     c,_ACC_0
0079 92A4       762            mov     _P2_4,c
007B            763   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:106: LCD_pulse();
007B 020100     764            ljmp    _LCD_pulse
007E            765   ;------------------------------------------------------------
007E            766   ;Allocation info for local variables in function 'WriteData'
007E            767   ;------------------------------------------------------------
007E            768   ;x                         Allocated to registers r2 
007E            769   ;------------------------------------------------------------
007E            770   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:109: void WriteData (unsigned char x){
007E            771   ;        -----------------------------------------
007E            772   ;         function WriteData
007E            773   ;        -----------------------------------------
007E            774   _WriteData:
007E AA82       775            mov     r2,dpl
0080            776   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:110: LCD_RS=1;
0080 D2A7       777            setb    _P2_7
0082            778   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:111: LCD_byte(x);
0082 8A82       779            mov     dpl,r2
0084 120100     780            lcall   _LCD_byte
0087            781   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:112: waitms(2);
0087 900002     782            mov     dptr,#0x0002
008A 020100     783            ljmp    _waitms
008D            784   ;------------------------------------------------------------
008D            785   ;Allocation info for local variables in function 'WriteCommand'
008D            786   ;------------------------------------------------------------
008D            787   ;x                         Allocated to registers r2 
008D            788   ;------------------------------------------------------------
008D            789   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:115: void WriteCommand (unsigned char x){
008D            790   ;        -----------------------------------------
008D            791   ;         function WriteCommand
008D            792   ;        -----------------------------------------
008D            793   _WriteCommand:
008D AA82       794            mov     r2,dpl
008F            795   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:116: LCD_RS=0;
008F C2A7       796            clr     _P2_7
0091            797   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:117: LCD_byte(x);
0091 8A82       798            mov     dpl,r2
0093 120100     799            lcall   _LCD_byte
0096            800   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:118: waitms(5);
0096 900005     801            mov     dptr,#0x0005
0099 020100     802            ljmp    _waitms
009C            803   ;------------------------------------------------------------
009C            804   ;Allocation info for local variables in function 'LCD_8BIT'
009C            805   ;------------------------------------------------------------
009C            806   ;------------------------------------------------------------
009C            807   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:121: void LCD_8BIT (void){
009C            808   ;        -----------------------------------------
009C            809   ;         function LCD_8BIT
009C            810   ;        -----------------------------------------
009C            811   _LCD_8BIT:
009C            812   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:122: LCD_E=0;  // Resting state of LCD's enable is zero
009C C2A5       813            clr     _P2_5
009E            814   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:123: LCD_RW=0; // We are only writing to the LCD in this program
009E C2A6       815            clr     _P2_6
00A0            816   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:124: waitms(20);
00A0 900014     817            mov     dptr,#0x0014
00A3 120100     818            lcall   _waitms
00A6            819   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:126: WriteCommand(0x33);
00A6 758233     820            mov     dpl,#0x33
00A9 120100     821            lcall   _WriteCommand
00AC            822   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:127: WriteCommand(0x33);
00AC 758233     823            mov     dpl,#0x33
00AF 120100     824            lcall   _WriteCommand
00B2            825   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:128: WriteCommand(0x33); // Stay in 8-bit mode
00B2 758233     826            mov     dpl,#0x33
00B5 120100     827            lcall   _WriteCommand
00B8            828   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:131: WriteCommand(0x38);
00B8 758238     829            mov     dpl,#0x38
00BB 120100     830            lcall   _WriteCommand
00BE            831   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:132: WriteCommand(0x0c);
00BE 75820C     832            mov     dpl,#0x0C
00C1 120100     833            lcall   _WriteCommand
00C4            834   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:133: WriteCommand(0x01); // Clear screen command (takes some time)
00C4 758201     835            mov     dpl,#0x01
00C7 120100     836            lcall   _WriteCommand
00CA            837   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:134: waitms(20); // Wait for clear screen command to finsih.
00CA 900014     838            mov     dptr,#0x0014
00CD 020100     839            ljmp    _waitms
00D0            840   ;------------------------------------------------------------
00D0            841   ;Allocation info for local variables in function 'LCDprint'
00D0            842   ;------------------------------------------------------------
00D0            843   ;line                      Allocated with name '_LCDprint_PARM_2'
00D0            844   ;string                    Allocated to registers r2 r3 r4 
00D0            845   ;j                         Allocated to registers r5 
00D0            846   ;------------------------------------------------------------
00D0            847   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:137: void LCDprint(char * string, unsigned char line, bit clear){
00D0            848   ;        -----------------------------------------
00D0            849   ;         function LCDprint
00D0            850   ;        -----------------------------------------
00D0            851   _LCDprint:
00D0 AA82       852            mov     r2,dpl
00D2 AB83       853            mov     r3,dph
00D4 ACF0       854            mov     r4,b
00D6            855   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:140: WriteCommand(line==2?0xc0:0x80);
00D6 7402       856            mov     a,#0x02
00D8 B50858     857            cjne    a,_LCDprint_PARM_2,L010013?
00DB 7DC0       858            mov     r5,#0xC0
00DD 8001       859            sjmp    L010014?
00DF            860   L010013?:
00DF 7D80       861            mov     r5,#0x80
00E1            862   L010014?:
00E1 8D82       863            mov     dpl,r5
00E3 C002       864            push    ar2
00E5 C003       865            push    ar3
00E7 C004       866            push    ar4
00E9 120100     867            lcall   _WriteCommand
00EC            868   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:141: waitms(5);
00EC 900005     869            mov     dptr,#0x0005
00EF 120100     870            lcall   _waitms
00F2 D004       871            pop     ar4
00F4 D003       872            pop     ar3
00F6 D002       873            pop     ar2
00F8            874   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:142: for(j=0; string[j]!=0; j++)      WriteData(string[j]);// Write the message
00F8 7D00       875            mov     r5,#0x00
00FA            876   L010003?:
00FA ED         877            mov     a,r5
00FB 2A         878            add     a,r2
00FC FE         879            mov     r6,a
00FD E4         880            clr     a
00FE 3B         881            addc    a,r3
00FF FF         882            mov     r7,a
0100 8C00       883            mov     ar0,r4
0102 8E82       884            mov     dpl,r6
0104 8F83       885            mov     dph,r7
0106 88F0       886            mov     b,r0
0108 120100     887            lcall   __gptrget
010B FE         888            mov     r6,a
010C 6001       889            jz      L010006?
010E 8E82       890            mov     dpl,r6
0110 C002       891            push    ar2
0112 C003       892            push    ar3
0114 C004       893            push    ar4
0116 C005       894            push    ar5
0118 120100     895            lcall   _WriteData
011B D005       896            pop     ar5
011D D004       897            pop     ar4
011F D003       898            pop     ar3
0121 D002       899            pop     ar2
0123 0D         900            inc     r5
0124 8001       901            sjmp    L010003?
0126            902   L010006?:
0126            903   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:143: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0126 309898     904            jnb     _LCDprint_PARM_3,L010011?
0129 8D02       905            mov     ar2,r5
012B            906   L010007?:
012B BA1018     907            cjne    r2,#0x10,L010026?
012E            908   L010026?:
012E 5001       909            jnc     L010011?
0130 758220     910            mov     dpl,#0x20
0133 C002       911            push    ar2
0135 120100     912            lcall   _WriteData
0138 D002       913            pop     ar2
013A 0A         914            inc     r2
013B 8001       915            sjmp    L010007?
013D            916   L010011?:
013D 22         917            ret
013E            918   ;------------------------------------------------------------
013E            919   ;Allocation info for local variables in function 'Wait1S'
013E            920   ;------------------------------------------------------------
013E            921   ;------------------------------------------------------------
013E            922   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:146: void Wait1S (void){
013E            923   ;        -----------------------------------------
013E            924   ;         function Wait1S
013E            925   ;        -----------------------------------------
013E            926   _Wait1S:
013E            927   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:154: _endasm;
013E            928            
013E 7A28       929             mov R2, #40
0140            930             L3:
0140 79FA       931            mov R1, #250
0142            932             L2:
0142 78B8       933            mov R0, #184
0144            934             L1:
0144 D8D8       935            djnz R0, L1 ; 2 machine cycles-> 2*0.27126us*184=100us
0146 D998       936             djnz R1, L2 ; 100us*250=0.025s
0148 DA58       937             djnz R2, L3 ; 0.025s*40=1s
014A            938             
014A 22         939            ret
014B            940   ;------------------------------------------------------------
014B            941   ;Allocation info for local variables in function 'InitSerialPort'
014B            942   ;------------------------------------------------------------
014B            943   ;------------------------------------------------------------
014B            944   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:157: void InitSerialPort(void){
014B            945   ;        -----------------------------------------
014B            946   ;         function InitSerialPort
014B            947   ;        -----------------------------------------
014B            948   _InitSerialPort:
014B            949   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:158: BRGCON=0x00; //Make sure the baud rate generator is off
014B 75BD00     950            mov     _BRGCON,#0x00
014E            951   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:159: BRGR1=((XTAL/BAUD)-16)/0x100;
014E 75BF00     952            mov     _BRGR1,#0x00
0151            953   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:160: BRGR0=((XTAL/BAUD)-16)%0x100;
0151 75BE30     954            mov     _BRGR0,#0x30
0154            955   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:161: BRGCON=0x03; //Turn-on the baud rate generator
0154 75BD03     956            mov     _BRGCON,#0x03
0157            957   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:162: SCON=0x52; //Serial port in mode 1, ren, txrdy, rxempty
0157 759852     958            mov     _SCON,#0x52
015A            959   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:163: P1M1=0x00; //Enable pins RxD and Txd
015A 759100     960            mov     _P1M1,#0x00
015D            961   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:164: P1M2=0x00; //Enable pins RxD and Txd
015D 759200     962            mov     _P1M2,#0x00
0160 22         963            ret
0161            964   ;------------------------------------------------------------
0161            965   ;Allocation info for local variables in function 'InitADC'
0161            966   ;------------------------------------------------------------
0161            967   ;------------------------------------------------------------
0161            968   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:167: void InitADC(void){
0161            969   ;        -----------------------------------------
0161            970   ;         function InitADC
0161            971   ;        -----------------------------------------
0161            972   _InitADC:
0161            973   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:170: P0M1 |= (P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0161 43841E     974            orl     _P0M1,#0x1E
0164            975   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:171: P0M2 &= ~(P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0164 5385E1     976            anl     _P0M2,#0xE1
0167            977   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:174: BURST1=1; //Autoscan continuous conversion mode
0167 D2C6       978            setb    _BURST1
0169            979   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:175: ADMODB = CLK0; //ADC1 clock is 7.3728MHz/2
0169 75A120     980            mov     _ADMODB,#0x20
016C            981   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:176: ADINS  = (ADI13|ADI12|ADI11|ADI10); // Select the four channels for conversion
016C 75A3F0     982            mov     _ADINS,#0xF0
016F            983   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:177: ADCON1 = (ENADC1|ADCS10); //Enable the converter and start immediately
016F 759705     984            mov     _ADCON1,#0x05
0172            985   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:178: while((ADCI1&ADCON1)==0); //Wait for first conversion to complete
0172            986   L013001?:
0172 E597       987            mov     a,_ADCON1
0174 30E318     988            jnb     acc.3,L013001?
0177 22         989            ret
0178            990   ;------------------------------------------------------------
0178            991   ;Allocation info for local variables in function 'InitTimer0'
0178            992   ;------------------------------------------------------------
0178            993   ;------------------------------------------------------------
0178            994   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:181: void InitTimer0 (void){
0178            995   ;        -----------------------------------------
0178            996   ;         function InitTimer0
0178            997   ;        -----------------------------------------
0178            998   _InitTimer0:
0178            999   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:184: TR0=0; // Stop timer 0
0178 C28C      1000            clr     _TR0
017A           1001   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:185: TMOD=(TMOD&0xf0)|0x01; // 16-bit timer
017A 74F0      1002            mov     a,#0xF0
017C 5589      1003            anl     a,_TMOD
017E 4401      1004            orl     a,#0x01
0180 F589      1005            mov     _TMOD,a
0182           1006   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:186: TH0=TIMER0_RELOAD_VALUE/0x100; // I think the RHS is 0001 0000 0000, are we dividing?
0182 758CFE    1007            mov     _TH0,#0xFE
0185           1008   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:187: TL0=TIMER0_RELOAD_VALUE%0x100; // % means modulo, apparently? ...are we modulo-ing?
0185 758A90    1009            mov     _TL0,#0x90
0188           1010   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:188: TR0=1; // Start timer 0 (bit 4 in TCON)
0188 D28C      1011            setb    _TR0
018A           1012   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:189: ET0=1; // Enable timer 0 interrupt - the interrupt controller IEN0 is bit-adressable, so we change only the bit we need
018A D2A9      1013            setb    _ET0
018C           1014   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:190: EA=1;  // Enable global interrupts
018C D2AF      1015            setb    _EA
018E 22        1016            ret
018F           1017   ;------------------------------------------------------------
018F           1018   ;Allocation info for local variables in function 'Timer0ISR'
018F           1019   ;------------------------------------------------------------
018F           1020   ;------------------------------------------------------------
018F           1021   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:194: void Timer0ISR (void) interrupt 1{
018F           1022   ;        -----------------------------------------
018F           1023   ;         function Timer0ISR
018F           1024   ;        -----------------------------------------
018F           1025   _Timer0ISR:
018F C0E0      1026            push    acc
0191 C0D0      1027            push    psw
0193 75D000    1028            mov     psw,#0x00
0196           1029   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:196: TR0=0; // Stop timer 0
0196 C28C      1030            clr     _TR0
0198           1031   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:197: TH0=TIMER0_RELOAD_VALUE/0x100;
0198 758CFE    1032            mov     _TH0,#0xFE
019B           1033   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:198: TL0=TIMER0_RELOAD_VALUE%0x100;
019B 758A90    1034            mov     _TL0,#0x90
019E           1035   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:199: TR0=1; // Start timer 0
019E D28C      1036            setb    _TR0
01A0           1037   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:201: if(++pwmcount>99) pwmcount=0;
01A0 0588      1038            inc     _pwmcount
01A2 E588      1039            mov     a,_pwmcount
01A4 249C      1040            add     a,#0xff - 0x63
01A6 5001      1041            jnc     L015002?
01A8 758800    1042            mov     _pwmcount,#0x00
01AB           1043   L015002?:
01AB           1044   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:202: P0_5=(pwm_left>pwmcount)?1:0;
01AB C3        1045            clr     c
01AC E588      1046            mov     a,_pwmcount
01AE 9548      1047            subb    a,_pwm_left
01B0 9285      1048            mov     _P0_5,c
01B2           1049   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:203: P0_6=(pwm_right>pwmcount)?1:0;
01B2 C3        1050            clr     c
01B3 E588      1051            mov     a,_pwmcount
01B5 9508      1052            subb    a,_pwm_right
01B7 9286      1053            mov     _P0_6,c
01B9           1054   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:205: msCount++;
01B9 7401      1055            mov     a,#0x01
01BB 2548      1056            add     a,_msCount
01BD F548      1057            mov     _msCount,a
01BF E4        1058            clr     a
01C0 3549      1059            addc    a,(_msCount + 1)
01C2 F549      1060            mov     (_msCount + 1),a
01C4           1061   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:206: if(msCount==10000)
01C4 7410      1062            mov     a,#0x10
01C6 B54818    1063            cjne    a,_msCount,L015008?
01C9 7427      1064            mov     a,#0x27
01CB B54918    1065            cjne    a,(_msCount + 1),L015008?
01CE           1066   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:208: time_update_flag=1;
01CE D2B8      1067            setb    _time_update_flag
01D0           1068   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:209: msCount=0;
01D0 E4        1069            clr     a
01D1 F548      1070            mov     _msCount,a
01D3 F549      1071            mov     (_msCount + 1),a
01D5           1072   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:210: secs++;
01D5 0508      1073            inc     _secs
01D7           1074   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:211: if(secs==60)
01D7 743C      1075            mov     a,#0x3C
01D9 B50818    1076            cjne    a,_secs,L015008?
01DC           1077   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:213: secs=0;
01DC 750800    1078            mov     _secs,#0x00
01DF           1079   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:214: mins++;
01DF 05C8      1080            inc     _mins
01E1           1081   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:215: if(mins==60)
01E1 743C      1082            mov     a,#0x3C
01E3 B5C818    1083            cjne    a,_mins,L015008?
01E6           1084   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:217: mins=0;
01E6 75C800    1085            mov     _mins,#0x00
01E9           1086   L015008?:
01E9           1087   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:222: if(turn_time_update == 1){
01E9 306858    1088            jnb     _turn_time_update,L015010?
01EC           1089   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:223: turn_timer++;
01EC 7401      1090            mov     a,#0x01
01EE 25C8      1091            add     a,_turn_timer
01F0 F5C8      1092            mov     _turn_timer,a
01F2 E4        1093            clr     a
01F3 35C9      1094            addc    a,(_turn_timer + 1)
01F5 F5C9      1095            mov     (_turn_timer + 1),a
01F7           1096   L015010?:
01F7           1097   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:226: if(start_timer == 1){
01F7 30D898    1098            jnb     _start_timer,L015015?
01FA           1099   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:227: action_timer++;
01FA 7401      1100            mov     a,#0x01
01FC 2588      1101            add     a,_action_timer
01FE F588      1102            mov     _action_timer,a
0200 E4        1103            clr     a
0201 3589      1104            addc    a,(_action_timer + 1)
0203 F589      1105            mov     (_action_timer + 1),a
0205           1106   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:228: if(action_timer == 5000){
0205 7488      1107            mov     a,#0x88
0207 B58898    1108            cjne    a,_action_timer,L015015?
020A 7413      1109            mov     a,#0x13
020C B58998    1110            cjne    a,(_action_timer + 1),L015015?
020F           1111   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:229: action_timer = 0;
020F E4        1112            clr     a
0210 F588      1113            mov     _action_timer,a
0212 F589      1114            mov     (_action_timer + 1),a
0214           1115   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:230: start_timer = 0;
0214 C2D8      1116            clr     _start_timer
0216           1117   L015015?:
0216 D0D0      1118            pop     psw
0218 D0E0      1119            pop     acc
021A 32        1120            reti
021B           1121   ;        eliminated unneeded push/pop dpl
021B           1122   ;        eliminated unneeded push/pop dph
021B           1123   ;        eliminated unneeded push/pop b
021B           1124   ;------------------------------------------------------------
021B           1125   ;Allocation info for local variables in function 'display_LCD'
021B           1126   ;------------------------------------------------------------
021B           1127   ;buff                      Allocated with name '_display_LCD_buff_1_96'
021B           1128   ;------------------------------------------------------------
021B           1129   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:236: void display_LCD(void){
021B           1130   ;        -----------------------------------------
021B           1131   ;         function display_LCD
021B           1132   ;        -----------------------------------------
021B           1133   _display_LCD:
021B           1134   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:239: time_update_flag=0;
021B C2B8      1135            clr     _time_update_flag
021D           1136   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:241: sprintf(buff, "V=%5.2f L:%5.2f", (AD1DAT0/255.0)*3.3*9/2.69, (AD1DAT1/255.0)*3.3); // Display the voltage at pin P0.1
021D 85D682    1137            mov     dpl,_AD1DAT1
0220 120100    1138            lcall   ___uchar2fs
0223 AA82      1139            mov     r2,dpl
0225 AB83      1140            mov     r3,dph
0227 ACF0      1141            mov     r4,b
0229 FD        1142            mov     r5,a
022A E4        1143            clr     a
022B C0E0      1144            push    acc
022D C0E0      1145            push    acc
022F 747F      1146            mov     a,#0x7F
0231 C0E0      1147            push    acc
0233 7443      1148            mov     a,#0x43
0235 C0E0      1149            push    acc
0237 8A82      1150            mov     dpl,r2
0239 8B83      1151            mov     dph,r3
023B 8CF0      1152            mov     b,r4
023D ED        1153            mov     a,r5
023E 120100    1154            lcall   ___fsdiv
0241 AA82      1155            mov     r2,dpl
0243 AB83      1156            mov     r3,dph
0245 ACF0      1157            mov     r4,b
0247 FD        1158            mov     r5,a
0248 E581      1159            mov     a,sp
024A 24FC      1160            add     a,#0xfc
024C F581      1161            mov     sp,a
024E C002      1162            push    ar2
0250 C003      1163            push    ar3
0252 C004      1164            push    ar4
0254 C005      1165            push    ar5
0256 903333    1166            mov     dptr,#0x3333
0259 75F053    1167            mov     b,#0x53
025C 7440      1168            mov     a,#0x40
025E 120100    1169            lcall   ___fsmul
0261 AA82      1170            mov     r2,dpl
0263 AB83      1171            mov     r3,dph
0265 ACF0      1172            mov     r4,b
0267 FD        1173            mov     r5,a
0268 E581      1174            mov     a,sp
026A 24FC      1175            add     a,#0xfc
026C F581      1176            mov     sp,a
026E 85D582    1177            mov     dpl,_AD1DAT0
0271 C002      1178            push    ar2
0273 C003      1179            push    ar3
0275 C004      1180            push    ar4
0277 C005      1181            push    ar5
0279 120100    1182            lcall   ___uchar2fs
027C AE82      1183            mov     r6,dpl
027E AF83      1184            mov     r7,dph
0280 A8F0      1185            mov     r0,b
0282 F9        1186            mov     r1,a
0283 E4        1187            clr     a
0284 C0E0      1188            push    acc
0286 C0E0      1189            push    acc
0288 747F      1190            mov     a,#0x7F
028A C0E0      1191            push    acc
028C 7443      1192            mov     a,#0x43
028E C0E0      1193            push    acc
0290 8E82      1194            mov     dpl,r6
0292 8F83      1195            mov     dph,r7
0294 88F0      1196            mov     b,r0
0296 E9        1197            mov     a,r1
0297 120100    1198            lcall   ___fsdiv
029A AE82      1199            mov     r6,dpl
029C AF83      1200            mov     r7,dph
029E A8F0      1201            mov     r0,b
02A0 F9        1202            mov     r1,a
02A1 E581      1203            mov     a,sp
02A3 24FC      1204            add     a,#0xfc
02A5 F581      1205            mov     sp,a
02A7 C006      1206            push    ar6
02A9 C007      1207            push    ar7
02AB C000      1208            push    ar0
02AD C001      1209            push    ar1
02AF 90999A    1210            mov     dptr,#0x999A
02B2 75F0ED    1211            mov     b,#0xED
02B5 7441      1212            mov     a,#0x41
02B7 120100    1213            lcall   ___fsmul
02BA AE82      1214            mov     r6,dpl
02BC AF83      1215            mov     r7,dph
02BE A8F0      1216            mov     r0,b
02C0 F9        1217            mov     r1,a
02C1 E581      1218            mov     a,sp
02C3 24FC      1219            add     a,#0xfc
02C5 F581      1220            mov     sp,a
02C7 74F6      1221            mov     a,#0xF6
02C9 C0E0      1222            push    acc
02CB 7428      1223            mov     a,#0x28
02CD C0E0      1224            push    acc
02CF 742C      1225            mov     a,#0x2C
02D1 C0E0      1226            push    acc
02D3 7440      1227            mov     a,#0x40
02D5 C0E0      1228            push    acc
02D7 8E82      1229            mov     dpl,r6
02D9 8F83      1230            mov     dph,r7
02DB 88F0      1231            mov     b,r0
02DD E9        1232            mov     a,r1
02DE 120100    1233            lcall   ___fsdiv
02E1 AE82      1234            mov     r6,dpl
02E3 AF83      1235            mov     r7,dph
02E5 A8F0      1236            mov     r0,b
02E7 F9        1237            mov     r1,a
02E8 E581      1238            mov     a,sp
02EA 24FC      1239            add     a,#0xfc
02EC F581      1240            mov     sp,a
02EE C006      1241            push    ar6
02F0 C007      1242            push    ar7
02F2 C000      1243            push    ar0
02F4 C001      1244            push    ar1
02F6 74D8      1245            mov     a,#__str_0
02F8 C0E0      1246            push    acc
02FA 74AE      1247            mov     a,#(__str_0 >> 8)
02FC C0E0      1248            push    acc
02FE 7480      1249            mov     a,#0x80
0300 C0E0      1250            push    acc
0302 74D8      1251            mov     a,#_display_LCD_buff_1_96
0304 C0E0      1252            push    acc
0306 74A0      1253            mov     a,#(_display_LCD_buff_1_96 >> 8)
0308 C0E0      1254            push    acc
030A 7440      1255            mov     a,#0x40
030C C0E0      1256            push    acc
030E 120100    1257            lcall   _sprintf
0311 E581      1258            mov     a,sp
0313 24F2      1259            add     a,#0xf2
0315 F581      1260            mov     sp,a
0317           1261   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:242: LCDprint(buff, 1, 1);
0317 750801    1262            mov     _LCDprint_PARM_2,#0x01
031A D298      1263            setb    _LCDprint_PARM_3
031C 90A0D8    1264            mov     dptr,#_display_LCD_buff_1_96
031F 75F040    1265            mov     b,#0x40
0322 120100    1266            lcall   _LCDprint
0325           1267   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:243: sprintf(buff, "%02d:%02d R: %5.2f ", mins, secs, (AD1DAT2/255.0)*3.3); // Display the clock
0325 85D782    1268            mov     dpl,_AD1DAT2
0328 120100    1269            lcall   ___uchar2fs
032B AA82      1270            mov     r2,dpl
032D AB83      1271            mov     r3,dph
032F ACF0      1272            mov     r4,b
0331 FD        1273            mov     r5,a
0332 E4        1274            clr     a
0333 C0E0      1275            push    acc
0335 C0E0      1276            push    acc
0337 747F      1277            mov     a,#0x7F
0339 C0E0      1278            push    acc
033B 7443      1279            mov     a,#0x43
033D C0E0      1280            push    acc
033F 8A82      1281            mov     dpl,r2
0341 8B83      1282            mov     dph,r3
0343 8CF0      1283            mov     b,r4
0345 ED        1284            mov     a,r5
0346 120100    1285            lcall   ___fsdiv
0349 AA82      1286            mov     r2,dpl
034B AB83      1287            mov     r3,dph
034D ACF0      1288            mov     r4,b
034F FD        1289            mov     r5,a
0350 E581      1290            mov     a,sp
0352 24FC      1291            add     a,#0xfc
0354 F581      1292            mov     sp,a
0356 C002      1293            push    ar2
0358 C003      1294            push    ar3
035A C004      1295            push    ar4
035C C005      1296            push    ar5
035E 903333    1297            mov     dptr,#0x3333
0361 75F053    1298            mov     b,#0x53
0364 7440      1299            mov     a,#0x40
0366 120100    1300            lcall   ___fsmul
0369 AA82      1301            mov     r2,dpl
036B AB83      1302            mov     r3,dph
036D ACF0      1303            mov     r4,b
036F FD        1304            mov     r5,a
0370 E581      1305            mov     a,sp
0372 24FC      1306            add     a,#0xfc
0374 F581      1307            mov     sp,a
0376 AE08      1308            mov     r6,_secs
0378 7F00      1309            mov     r7,#0x00
037A A8C8      1310            mov     r0,_mins
037C 7900      1311            mov     r1,#0x00
037E C002      1312            push    ar2
0380 C003      1313            push    ar3
0382 C004      1314            push    ar4
0384 C005      1315            push    ar5
0386 C006      1316            push    ar6
0388 C007      1317            push    ar7
038A C000      1318            push    ar0
038C C001      1319            push    ar1
038E 7458      1320            mov     a,#__str_1
0390 C0E0      1321            push    acc
0392 74AF      1322            mov     a,#(__str_1 >> 8)
0394 C0E0      1323            push    acc
0396 7480      1324            mov     a,#0x80
0398 C0E0      1325            push    acc
039A 74D8      1326            mov     a,#_display_LCD_buff_1_96
039C C0E0      1327            push    acc
039E 74A0      1328            mov     a,#(_display_LCD_buff_1_96 >> 8)
03A0 C0E0      1329            push    acc
03A2 7440      1330            mov     a,#0x40
03A4 C0E0      1331            push    acc
03A6 120100    1332            lcall   _sprintf
03A9 E581      1333            mov     a,sp
03AB 24F2      1334            add     a,#0xf2
03AD F581      1335            mov     sp,a
03AF           1336   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:244: LCDprint(buff, 2, 1);
03AF 750802    1337            mov     _LCDprint_PARM_2,#0x02
03B2 D298      1338            setb    _LCDprint_PARM_3
03B4 90A0D8    1339            mov     dptr,#_display_LCD_buff_1_96
03B7 75F040    1340            mov     b,#0x40
03BA 020100    1341            ljmp    _LCDprint
03BD           1342   ;------------------------------------------------------------
03BD           1343   ;Allocation info for local variables in function 'turn_left'
03BD           1344   ;------------------------------------------------------------
03BD           1345   ;------------------------------------------------------------
03BD           1346   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:259: void turn_left(void){
03BD           1347   ;        -----------------------------------------
03BD           1348   ;         function turn_left
03BD           1349   ;        -----------------------------------------
03BD           1350   _turn_left:
03BD           1351   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:260: turn_timer = 0;
03BD E4        1352            clr     a
03BE F5C8      1353            mov     _turn_timer,a
03C0 F5C9      1354            mov     (_turn_timer + 1),a
03C2           1355   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:261: turn_time_update = 1;
03C2 D268      1356            setb    _turn_time_update
03C4           1357   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:262: while(turn_timer < 7500){
03C4           1358   L017001?:
03C4 C3        1359            clr     c
03C5 E5C8      1360            mov     a,_turn_timer
03C7 944C      1361            subb    a,#0x4C
03C9 E5C9      1362            mov     a,(_turn_timer + 1)
03CB 6480      1363            xrl     a,#0x80
03CD 949D      1364            subb    a,#0x9d
03CF 5001      1365            jnc     L017003?
03D1           1366   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:263: pwm_left = 0;
03D1 754800    1367            mov     _pwm_left,#0x00
03D4           1368   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:264: pwm_right = 100;
03D4 750864    1369            mov     _pwm_right,#0x64
03D7           1370   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:265: printf("turning left!\n");
03D7 7418      1371            mov     a,#__str_2
03D9 C0E0      1372            push    acc
03DB 74B0      1373            mov     a,#(__str_2 >> 8)
03DD C0E0      1374            push    acc
03DF 7480      1375            mov     a,#0x80
03E1 C0E0      1376            push    acc
03E3 120100    1377            lcall   _printf
03E6 1581      1378            dec     sp
03E8 1581      1379            dec     sp
03EA 1581      1380            dec     sp
03EC 8001      1381            sjmp    L017001?
03EE           1382   L017003?:
03EE           1383   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:267: turn_time_update = 0;
03EE C268      1384            clr     _turn_time_update
03F0           1385   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:268: turn_timer = 0;
03F0 E4        1386            clr     a
03F1 F5C8      1387            mov     _turn_timer,a
03F3 F5C9      1388            mov     (_turn_timer + 1),a
03F5 22        1389            ret
03F6           1390   ;------------------------------------------------------------
03F6           1391   ;Allocation info for local variables in function 'turn_right'
03F6           1392   ;------------------------------------------------------------
03F6           1393   ;------------------------------------------------------------
03F6           1394   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:270: void turn_right(void){
03F6           1395   ;        -----------------------------------------
03F6           1396   ;         function turn_right
03F6           1397   ;        -----------------------------------------
03F6           1398   _turn_right:
03F6           1399   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:271: turn_timer = 0;
03F6 E4        1400            clr     a
03F7 F5C8      1401            mov     _turn_timer,a
03F9 F5C9      1402            mov     (_turn_timer + 1),a
03FB           1403   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:272: turn_time_update = 1;
03FB D268      1404            setb    _turn_time_update
03FD           1405   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:273: while(turn_timer < 7500){
03FD           1406   L018001?:
03FD C3        1407            clr     c
03FE E5C8      1408            mov     a,_turn_timer
0400 944C      1409            subb    a,#0x4C
0402 E5C9      1410            mov     a,(_turn_timer + 1)
0404 6480      1411            xrl     a,#0x80
0406 949D      1412            subb    a,#0x9d
0408 5001      1413            jnc     L018003?
040A           1414   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:274: pwm_left = 100;
040A 754864    1415            mov     _pwm_left,#0x64
040D           1416   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:275: pwm_right = 0;
040D 750800    1417            mov     _pwm_right,#0x00
0410           1418   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:276: printf("turning right!\n");
0410 7418      1419            mov     a,#__str_3
0412 C0E0      1420            push    acc
0414 74B1      1421            mov     a,#(__str_3 >> 8)
0416 C0E0      1422            push    acc
0418 7480      1423            mov     a,#0x80
041A C0E0      1424            push    acc
041C 120100    1425            lcall   _printf
041F 1581      1426            dec     sp
0421 1581      1427            dec     sp
0423 1581      1428            dec     sp
0425 8001      1429            sjmp    L018001?
0427           1430   L018003?:
0427           1431   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:278: turn_time_update = 0;
0427 C268      1432            clr     _turn_time_update
0429           1433   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:279: turn_timer = 0;
0429 E4        1434            clr     a
042A F5C8      1435            mov     _turn_timer,a
042C F5C9      1436            mov     (_turn_timer + 1),a
042E 22        1437            ret
042F           1438   ;------------------------------------------------------------
042F           1439   ;Allocation info for local variables in function 'stop'
042F           1440   ;------------------------------------------------------------
042F           1441   ;------------------------------------------------------------
042F           1442   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:282: void stop(void){
042F           1443   ;        -----------------------------------------
042F           1444   ;         function stop
042F           1445   ;        -----------------------------------------
042F           1446   _stop:
042F           1447   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:283: while(1){
042F           1448   L019002?:
042F           1449   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:284: pwm_left = 0;
042F 754800    1450            mov     _pwm_left,#0x00
0432           1451   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:285: pwm_right = 0;
0432 750800    1452            mov     _pwm_right,#0x00
0435 8001      1453            sjmp    L019002?
0437           1454   ;------------------------------------------------------------
0437           1455   ;Allocation info for local variables in function 'execute'
0437           1456   ;------------------------------------------------------------
0437           1457   ;command                   Allocated to registers r2 r3 
0437           1458   ;------------------------------------------------------------
0437           1459   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:289: void execute(int command){
0437           1460   ;        -----------------------------------------
0437           1461   ;         function execute
0437           1462   ;        -----------------------------------------
0437           1463   _execute:
0437 AA82      1464            mov     r2,dpl
0439 AB83      1465            mov     r3,dph
043B           1466   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:290: switch(command){
043B BA0298    1467            cjne    r2,#0x02,L020008?
043E BB0098    1468            cjne    r3,#0x00,L020008?
0441 8001      1469            sjmp    L020001?
0443           1470   L020008?:
0443           1471   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:291: case 2:
0443 BA0318    1472            cjne    r2,#0x03,L020004?
0446 BB0018    1473            cjne    r3,#0x00,L020004?
0449 8001      1474            sjmp    L020002?
044B           1475   L020001?:
044B           1476   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:292: turn_left();
044B           1477   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:293: break;
044B           1478   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:294: case 3:
044B 020100    1479            ljmp    _turn_left
044E           1480   L020002?:
044E           1481   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:295: turn_right();
044E           1482   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:297: }
044E 020100    1483            ljmp    _turn_right
0451           1484   L020004?:
0451 22        1485            ret
0452           1486   ;------------------------------------------------------------
0452           1487   ;Allocation info for local variables in function 'main'
0452           1488   ;------------------------------------------------------------
0452           1489   ;cor                       Allocated with name '_main_cor_1_110'
0452           1490   ;cur_error                 Allocated with name '_main_cur_error_1_110'
0452           1491   ;pre_error                 Allocated with name '_main_pre_error_1_110'
0452           1492   ;thresh                    Allocated to registers 
0452           1493   ;q                         Allocated with name '_main_q_1_110'
0452           1494   ;m                         Allocated with name '_main_m_1_110'
0452           1495   ;left                      Allocated with name '_main_left_1_110'
0452           1496   ;right                     Allocated with name '_main_right_1_110'
0452           1497   ;line_sensor               Allocated with name '_main_line_sensor_1_110'
0452           1498   ;diff                      Allocated with name '_main_diff_1_110'
0452           1499   ;command                   Allocated with name '_main_command_1_110'
0452           1500   ;state                     Allocated with name '_main_state_1_110'
0452           1501   ;------------------------------------------------------------
0452           1502   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:300: void main (void){
0452           1503   ;        -----------------------------------------
0452           1504   ;         function main
0452           1505   ;        -----------------------------------------
0452           1506   _main:
0452           1507   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:302: double cor = 0;
0452 751800    1508            mov     _main_cor_1_110,#0x00
0455 751900    1509            mov     (_main_cor_1_110 + 1),#0x00
0458 751A00    1510            mov     (_main_cor_1_110 + 2),#0x00
045B           1511   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:303: double cur_error =0;
045B           1512   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:306: int q = 0;
045B           1513   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:307: int m = 0;
045B E4        1514            clr     a
045C F51B      1515            mov     (_main_cor_1_110 + 3),a
045E F568      1516            mov     _main_cur_error_1_110,a
0460 F569      1517            mov     (_main_cur_error_1_110 + 1),a
0462 F56A      1518            mov     (_main_cur_error_1_110 + 2),a
0464 F56B      1519            mov     (_main_cur_error_1_110 + 3),a
0466 F5F8      1520            mov     _main_q_1_110,a
0468 F5F9      1521            mov     (_main_q_1_110 + 1),a
046A F538      1522            mov     _main_m_1_110,a
046C F539      1523            mov     (_main_m_1_110 + 1),a
046E           1524   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:310: double left = (AD1DAT1/255.0)*3.3;
046E E5D6      1525            mov     a,_AD1DAT1
0470           1526   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:311: double right = (AD1DAT2/255.0)*3.3;
0470 E5D7      1527            mov     a,_AD1DAT2
0472           1528   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:312: double line_sensor = (AD1DAT3/255.0)*3.3;
0472 E5F5      1529            mov     a,_AD1DAT3
0474           1530   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:316: int command = 0;
0474 E4        1531            clr     a
0475 F5C8      1532            mov     _main_command_1_110,a
0477 F5C9      1533            mov     (_main_command_1_110 + 1),a
0479           1534   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:317: int state = 1;   
0479 751801    1535            mov     _main_state_1_110,#0x01
047C E4        1536            clr     a
047D F519      1537            mov     (_main_state_1_110 + 1),a
047F           1538   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:320: InitPorts();
047F 120100    1539            lcall   _InitPorts
0482           1540   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:321: LCD_8BIT();
0482 120100    1541            lcall   _LCD_8BIT
0485           1542   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:322: InitSerialPort();
0485 120100    1543            lcall   _InitSerialPort
0488           1544   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:323: InitADC();
0488 120100    1545            lcall   _InitADC
048B           1546   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:324: InitTimer0();
048B 120100    1547            lcall   _InitTimer0
048E           1548   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:327: pre_error = 0;
048E 75B800    1549            mov     _main_pre_error_1_110,#0x00
0491 75B900    1550            mov     (_main_pre_error_1_110 + 1),#0x00
0494 75BA00    1551            mov     (_main_pre_error_1_110 + 2),#0x00
0497 75BB00    1552            mov     (_main_pre_error_1_110 + 3),#0x00
049A           1553   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:328: while(1)
049A           1554   L021050?:
049A           1555   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:338: left = (AD1DAT1/255.0)*3.3;
049A 85D682    1556            mov     dpl,_AD1DAT1
049D 120100    1557            lcall   ___uchar2fs
04A0 AC82      1558            mov     r4,dpl
04A2 AD83      1559            mov     r5,dph
04A4 AAF0      1560            mov     r2,b
04A6 FB        1561            mov     r3,a
04A7 E4        1562            clr     a
04A8 C0E0      1563            push    acc
04AA C0E0      1564            push    acc
04AC 747F      1565            mov     a,#0x7F
04AE C0E0      1566            push    acc
04B0 7443      1567            mov     a,#0x43
04B2 C0E0      1568            push    acc
04B4 8C82      1569            mov     dpl,r4
04B6 8D83      1570            mov     dph,r5
04B8 8AF0      1571            mov     b,r2
04BA EB        1572            mov     a,r3
04BB 120100    1573            lcall   ___fsdiv
04BE AA82      1574            mov     r2,dpl
04C0 AB83      1575            mov     r3,dph
04C2 ACF0      1576            mov     r4,b
04C4 FD        1577            mov     r5,a
04C5 E581      1578            mov     a,sp
04C7 24FC      1579            add     a,#0xfc
04C9 F581      1580            mov     sp,a
04CB C002      1581            push    ar2
04CD C003      1582            push    ar3
04CF C004      1583            push    ar4
04D1 C005      1584            push    ar5
04D3 903333    1585            mov     dptr,#0x3333
04D6 75F053    1586            mov     b,#0x53
04D9 7440      1587            mov     a,#0x40
04DB 120100    1588            lcall   ___fsmul
04DE 858288    1589            mov     _main_left_1_110,dpl
04E1 858389    1590            mov     (_main_left_1_110 + 1),dph
04E4 85F08A    1591            mov     (_main_left_1_110 + 2),b
04E7 F58B      1592            mov     (_main_left_1_110 + 3),a
04E9 E581      1593            mov     a,sp
04EB 24FC      1594            add     a,#0xfc
04ED F581      1595            mov     sp,a
04EF           1596   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:339: right = (AD1DAT2/255.0)*3.3;
04EF 85D782    1597            mov     dpl,_AD1DAT2
04F2 120100    1598            lcall   ___uchar2fs
04F5 AE82      1599            mov     r6,dpl
04F7 AF83      1600            mov     r7,dph
04F9 AAF0      1601            mov     r2,b
04FB FB        1602            mov     r3,a
04FC E4        1603            clr     a
04FD C0E0      1604            push    acc
04FF C0E0      1605            push    acc
0501 747F      1606            mov     a,#0x7F
0503 C0E0      1607            push    acc
0505 7443      1608            mov     a,#0x43
0507 C0E0      1609            push    acc
0509 8E82      1610            mov     dpl,r6
050B 8F83      1611            mov     dph,r7
050D 8AF0      1612            mov     b,r2
050F EB        1613            mov     a,r3
0510 120100    1614            lcall   ___fsdiv
0513 AA82      1615            mov     r2,dpl
0515 AB83      1616            mov     r3,dph
0517 ACF0      1617            mov     r4,b
0519 FD        1618            mov     r5,a
051A E581      1619            mov     a,sp
051C 24FC      1620            add     a,#0xfc
051E F581      1621            mov     sp,a
0520 C002      1622            push    ar2
0522 C003      1623            push    ar3
0524 C004      1624            push    ar4
0526 C005      1625            push    ar5
0528 903333    1626            mov     dptr,#0x3333
052B 75F053    1627            mov     b,#0x53
052E 7440      1628            mov     a,#0x40
0530 120100    1629            lcall   ___fsmul
0533 8582D8    1630            mov     _main_right_1_110,dpl
0536 8583D9    1631            mov     (_main_right_1_110 + 1),dph
0539 85F0DA    1632            mov     (_main_right_1_110 + 2),b
053C F5DB      1633            mov     (_main_right_1_110 + 3),a
053E E581      1634            mov     a,sp
0540 24FC      1635            add     a,#0xfc
0542 F581      1636            mov     sp,a
0544           1637   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:340: line_sensor = (AD1DAT3/255.0)*3.3;
0544 85F582    1638            mov     dpl,_AD1DAT3
0547 120100    1639            lcall   ___uchar2fs
054A AE82      1640            mov     r6,dpl
054C AF83      1641            mov     r7,dph
054E AAF0      1642            mov     r2,b
0550 FB        1643            mov     r3,a
0551 E4        1644            clr     a
0552 C0E0      1645            push    acc
0554 C0E0      1646            push    acc
0556 747F      1647            mov     a,#0x7F
0558 C0E0      1648            push    acc
055A 7443      1649            mov     a,#0x43
055C C0E0      1650            push    acc
055E 8E82      1651            mov     dpl,r6
0560 8F83      1652            mov     dph,r7
0562 8AF0      1653            mov     b,r2
0564 EB        1654            mov     a,r3
0565 120100    1655            lcall   ___fsdiv
0568 AA82      1656            mov     r2,dpl
056A AB83      1657            mov     r3,dph
056C ACF0      1658            mov     r4,b
056E FD        1659            mov     r5,a
056F E581      1660            mov     a,sp
0571 24FC      1661            add     a,#0xfc
0573 F581      1662            mov     sp,a
0575 C002      1663            push    ar2
0577 C003      1664            push    ar3
0579 C004      1665            push    ar4
057B C005      1666            push    ar5
057D 903333    1667            mov     dptr,#0x3333
0580 75F053    1668            mov     b,#0x53
0583 7440      1669            mov     a,#0x40
0585 120100    1670            lcall   ___fsmul
0588 858228    1671            mov     _main_line_sensor_1_110,dpl
058B 858329    1672            mov     (_main_line_sensor_1_110 + 1),dph
058E 85F02A    1673            mov     (_main_line_sensor_1_110 + 2),b
0591 F52B      1674            mov     (_main_line_sensor_1_110 + 3),a
0593 E581      1675            mov     a,sp
0595 24FC      1676            add     a,#0xfc
0597 F581      1677            mov     sp,a
0599           1678   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:341: diff = left - right;
0599 C0D8      1679            push    _main_right_1_110
059B C0D9      1680            push    (_main_right_1_110 + 1)
059D C0DA      1681            push    (_main_right_1_110 + 2)
059F C0DB      1682            push    (_main_right_1_110 + 3)
05A1 858882    1683            mov     dpl,_main_left_1_110
05A4 858983    1684            mov     dph,(_main_left_1_110 + 1)
05A7 858AF0    1685            mov     b,(_main_left_1_110 + 2)
05AA E58B      1686            mov     a,(_main_left_1_110 + 3)
05AC 120100    1687            lcall   ___fssub
05AF 858278    1688            mov     _main_diff_1_110,dpl
05B2 858379    1689            mov     (_main_diff_1_110 + 1),dph
05B5 85F07A    1690            mov     (_main_diff_1_110 + 2),b
05B8 F57B      1691            mov     (_main_diff_1_110 + 3),a
05BA E581      1692            mov     a,sp
05BC 24FC      1693            add     a,#0xfc
05BE F581      1694            mov     sp,a
05C0           1695   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:344: if(time_update_flag==1) // If the clock has been updated, refresh the display
05C0 30B818    1696            jnb     _time_update_flag,L021002?
05C3           1697   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:346: display_LCD();
05C3 120100    1698            lcall   _display_LCD
05C6           1699   L021002?:
05C6           1700   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:350: if(((MID_THRESH_LO< left) && (left < MID_THRESH_HI)) && ((MID_THRESH_LO < right) && (right < MID_THRESH_HI))){
05C6 C088      1701            push    _main_left_1_110
05C8 C089      1702            push    (_main_left_1_110 + 1)
05CA C08A      1703            push    (_main_left_1_110 + 2)
05CC C08B      1704            push    (_main_left_1_110 + 3)
05CE 90CCCD    1705            mov     dptr,#0xCCCD
05D1 75F00C    1706            mov     b,#0x0C
05D4 743F      1707            mov     a,#0x3F
05D6 120100    1708            lcall   ___fslt
05D9 AE82      1709            mov     r6,dpl
05DB E581      1710            mov     a,sp
05DD 24FC      1711            add     a,#0xfc
05DF F581      1712            mov     sp,a
05E1 EE        1713            mov     a,r6
05E2 7001      1714            jnz     L021080?
05E4 020100    1715            ljmp    L021017?
05E7           1716   L021080?:
05E7 749A      1717            mov     a,#0x9A
05E9 C0E0      1718            push    acc
05EB 7499      1719            mov     a,#0x99
05ED C0E0      1720            push    acc
05EF 7459      1721            mov     a,#0x59
05F1 C0E0      1722            push    acc
05F3 743F      1723            mov     a,#0x3F
05F5 C0E0      1724            push    acc
05F7 858882    1725            mov     dpl,_main_left_1_110
05FA 858983    1726            mov     dph,(_main_left_1_110 + 1)
05FD 858AF0    1727            mov     b,(_main_left_1_110 + 2)
0600 E58B      1728            mov     a,(_main_left_1_110 + 3)
0602 120100    1729            lcall   ___fslt
0605 AE82      1730            mov     r6,dpl
0607 E581      1731            mov     a,sp
0609 24FC      1732            add     a,#0xfc
060B F581      1733            mov     sp,a
060D EE        1734            mov     a,r6
060E 6001      1735            jz      L021017?
0610 C0D8      1736            push    _main_right_1_110
0612 C0D9      1737            push    (_main_right_1_110 + 1)
0614 C0DA      1738            push    (_main_right_1_110 + 2)
0616 C0DB      1739            push    (_main_right_1_110 + 3)
0618 90CCCD    1740            mov     dptr,#0xCCCD
061B 75F00C    1741            mov     b,#0x0C
061E 743F      1742            mov     a,#0x3F
0620 120100    1743            lcall   ___fslt
0623 AE82      1744            mov     r6,dpl
0625 E581      1745            mov     a,sp
0627 24FC      1746            add     a,#0xfc
0629 F581      1747            mov     sp,a
062B EE        1748            mov     a,r6
062C 6001      1749            jz      L021017?
062E 749A      1750            mov     a,#0x9A
0630 C0E0      1751            push    acc
0632 7499      1752            mov     a,#0x99
0634 C0E0      1753            push    acc
0636 7459      1754            mov     a,#0x59
0638 C0E0      1755            push    acc
063A 743F      1756            mov     a,#0x3F
063C C0E0      1757            push    acc
063E 85D882    1758            mov     dpl,_main_right_1_110
0641 85D983    1759            mov     dph,(_main_right_1_110 + 1)
0644 85DAF0    1760            mov     b,(_main_right_1_110 + 2)
0647 E5DB      1761            mov     a,(_main_right_1_110 + 3)
0649 120100    1762            lcall   ___fslt
064C AE82      1763            mov     r6,dpl
064E E581      1764            mov     a,sp
0650 24FC      1765            add     a,#0xfc
0652 F581      1766            mov     sp,a
0654 EE        1767            mov     a,r6
0655 6001      1768            jz      L021017?
0657           1769   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:351: cur_error = 0;
0657 756800    1770            mov     _main_cur_error_1_110,#0x00
065A 756900    1771            mov     (_main_cur_error_1_110 + 1),#0x00
065D 756A00    1772            mov     (_main_cur_error_1_110 + 2),#0x00
0660 756B00    1773            mov     (_main_cur_error_1_110 + 3),#0x00
0663           1774   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:352: pwm_left = 100;
0663 754864    1775            mov     _pwm_left,#0x64
0666           1776   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:353: pwm_right = 100;
0666 750864    1777            mov     _pwm_right,#0x64
0669 020100    1778            ljmp    L021018?
066C           1779   L021017?:
066C           1780   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:355: else if(0.2 < diff){     
066C C078      1781            push    _main_diff_1_110
066E C079      1782            push    (_main_diff_1_110 + 1)
0670 C07A      1783            push    (_main_diff_1_110 + 2)
0672 C07B      1784            push    (_main_diff_1_110 + 3)
0674 90CCCD    1785            mov     dptr,#0xCCCD
0677 75F04C    1786            mov     b,#0x4C
067A 743E      1787            mov     a,#0x3E
067C 120100    1788            lcall   ___fslt
067F AE82      1789            mov     r6,dpl
0681 E581      1790            mov     a,sp
0683 24FC      1791            add     a,#0xfc
0685 F581      1792            mov     sp,a
0687 EE        1793            mov     a,r6
0688 6001      1794            jz      L021014?
068A           1795   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:356: cur_error = 3;
068A 756800    1796            mov     _main_cur_error_1_110,#0x00
068D 756900    1797            mov     (_main_cur_error_1_110 + 1),#0x00
0690 756A40    1798            mov     (_main_cur_error_1_110 + 2),#0x40
0693 756B40    1799            mov     (_main_cur_error_1_110 + 3),#0x40
0696           1800   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:357: pwm_left = 100 - cor;
0696 C018      1801            push    _main_cor_1_110
0698 C019      1802            push    (_main_cor_1_110 + 1)
069A C01A      1803            push    (_main_cor_1_110 + 2)
069C C01B      1804            push    (_main_cor_1_110 + 3)
069E 900000    1805            mov     dptr,#0x0000
06A1 75F0C8    1806            mov     b,#0xC8
06A4 7442      1807            mov     a,#0x42
06A6 120100    1808            lcall   ___fssub
06A9 AE82      1809            mov     r6,dpl
06AB AF83      1810            mov     r7,dph
06AD AAF0      1811            mov     r2,b
06AF FB        1812            mov     r3,a
06B0 E581      1813            mov     a,sp
06B2 24FC      1814            add     a,#0xfc
06B4 F581      1815            mov     sp,a
06B6 8E82      1816            mov     dpl,r6
06B8 8F83      1817            mov     dph,r7
06BA 8AF0      1818            mov     b,r2
06BC EB        1819            mov     a,r3
06BD 120100    1820            lcall   ___fs2uchar
06C0 858248    1821            mov     _pwm_left,dpl
06C3           1822   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:358: pwm_right = 100;
06C3 750864    1823            mov     _pwm_right,#0x64
06C6 020100    1824            ljmp    L021018?
06C9           1825   L021014?:
06C9           1826   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:360: else if(diff < -0.2){
06C9 74CD      1827            mov     a,#0xCD
06CB C0E0      1828            push    acc
06CD 74CC      1829            mov     a,#0xCC
06CF C0E0      1830            push    acc
06D1 744C      1831            mov     a,#0x4C
06D3 C0E0      1832            push    acc
06D5 74BE      1833            mov     a,#0xBE
06D7 C0E0      1834            push    acc
06D9 857882    1835            mov     dpl,_main_diff_1_110
06DC 857983    1836            mov     dph,(_main_diff_1_110 + 1)
06DF 857AF0    1837            mov     b,(_main_diff_1_110 + 2)
06E2 E57B      1838            mov     a,(_main_diff_1_110 + 3)
06E4 120100    1839            lcall   ___fslt
06E7 AA82      1840            mov     r2,dpl
06E9 E581      1841            mov     a,sp
06EB 24FC      1842            add     a,#0xfc
06ED F581      1843            mov     sp,a
06EF EA        1844            mov     a,r2
06F0 6001      1845            jz      L021011?
06F2           1846   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:361: cur_error= -3;
06F2 756800    1847            mov     _main_cur_error_1_110,#0x00
06F5 756900    1848            mov     (_main_cur_error_1_110 + 1),#0x00
06F8 756A40    1849            mov     (_main_cur_error_1_110 + 2),#0x40
06FB 756BC0    1850            mov     (_main_cur_error_1_110 + 3),#0xC0
06FE           1851   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:362: pwm_left = 100;
06FE 754864    1852            mov     _pwm_left,#0x64
0701           1853   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:363: pwm_right = 100 + cor;
0701 E4        1854            clr     a
0702 C0E0      1855            push    acc
0704 C0E0      1856            push    acc
0706 74C8      1857            mov     a,#0xC8
0708 C0E0      1858            push    acc
070A 7442      1859            mov     a,#0x42
070C C0E0      1860            push    acc
070E 851882    1861            mov     dpl,_main_cor_1_110
0711 851983    1862            mov     dph,(_main_cor_1_110 + 1)
0714 851AF0    1863            mov     b,(_main_cor_1_110 + 2)
0717 E51B      1864            mov     a,(_main_cor_1_110 + 3)
0719 120100    1865            lcall   ___fsadd
071C AA82      1866            mov     r2,dpl
071E AB83      1867            mov     r3,dph
0720 ACF0      1868            mov     r4,b
0722 FD        1869            mov     r5,a
0723 E581      1870            mov     a,sp
0725 24FC      1871            add     a,#0xfc
0727 F581      1872            mov     sp,a
0729 8A82      1873            mov     dpl,r2
072B 8B83      1874            mov     dph,r3
072D 8CF0      1875            mov     b,r4
072F ED        1876            mov     a,r5
0730 120100    1877            lcall   ___fs2uchar
0733 858208    1878            mov     _pwm_right,dpl
0736 020100    1879            ljmp    L021018?
0739           1880   L021011?:
0739           1881   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:365: else if((left < SIDE_THRESH) && (right < SIDE_THRESH)){
0739 749A      1882            mov     a,#0x9A
073B C0E0      1883            push    acc
073D 7499      1884            mov     a,#0x99
073F C0E0      1885            push    acc
0741 C0E0      1886            push    acc
0743 743E      1887            mov     a,#0x3E
0745 C0E0      1888            push    acc
0747 858882    1889            mov     dpl,_main_left_1_110
074A 858983    1890            mov     dph,(_main_left_1_110 + 1)
074D 858AF0    1891            mov     b,(_main_left_1_110 + 2)
0750 E58B      1892            mov     a,(_main_left_1_110 + 3)
0752 120100    1893            lcall   ___fslt
0755 AA82      1894            mov     r2,dpl
0757 E581      1895            mov     a,sp
0759 24FC      1896            add     a,#0xfc
075B F581      1897            mov     sp,a
075D EA        1898            mov     a,r2
075E 7001      1899            jnz     L021086?
0760 020100    1900            ljmp    L021018?
0763           1901   L021086?:
0763 749A      1902            mov     a,#0x9A
0765 C0E0      1903            push    acc
0767 7499      1904            mov     a,#0x99
0769 C0E0      1905            push    acc
076B C0E0      1906            push    acc
076D 743E      1907            mov     a,#0x3E
076F C0E0      1908            push    acc
0771 85D882    1909            mov     dpl,_main_right_1_110
0774 85D983    1910            mov     dph,(_main_right_1_110 + 1)
0777 85DAF0    1911            mov     b,(_main_right_1_110 + 2)
077A E5DB      1912            mov     a,(_main_right_1_110 + 3)
077C 120100    1913            lcall   ___fslt
077F AA82      1914            mov     r2,dpl
0781 E581      1915            mov     a,sp
0783 24FC      1916            add     a,#0xfc
0785 F581      1917            mov     sp,a
0787 EA        1918            mov     a,r2
0788 7001      1919            jnz     L021087?
078A 020100    1920            ljmp    L021018?
078D           1921   L021087?:
078D           1922   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:366: if(pre_error>0){
078D E4        1923            clr     a
078E C0E0      1924            push    acc
0790 C0E0      1925            push    acc
0792 C0E0      1926            push    acc
0794 C0E0      1927            push    acc
0796 85B882    1928            mov     dpl,_main_pre_error_1_110
0799 85B983    1929            mov     dph,(_main_pre_error_1_110 + 1)
079C 85BAF0    1930            mov     b,(_main_pre_error_1_110 + 2)
079F E5BB      1931            mov     a,(_main_pre_error_1_110 + 3)
07A1 120100    1932            lcall   ___fsgt
07A4 AA82      1933            mov     r2,dpl
07A6 E581      1934            mov     a,sp
07A8 24FC      1935            add     a,#0xfc
07AA F581      1936            mov     sp,a
07AC EA        1937            mov     a,r2
07AD 6001      1938            jz      L021004?
07AF           1939   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:367: cur_error = 5;
07AF 756800    1940            mov     _main_cur_error_1_110,#0x00
07B2 756900    1941            mov     (_main_cur_error_1_110 + 1),#0x00
07B5 756AA0    1942            mov     (_main_cur_error_1_110 + 2),#0xA0
07B8 756B40    1943            mov     (_main_cur_error_1_110 + 3),#0x40
07BB           1944   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:368: pwm_left = 100 - cor;
07BB C018      1945            push    _main_cor_1_110
07BD C019      1946            push    (_main_cor_1_110 + 1)
07BF C01A      1947            push    (_main_cor_1_110 + 2)
07C1 C01B      1948            push    (_main_cor_1_110 + 3)
07C3 900000    1949            mov     dptr,#0x0000
07C6 75F0C8    1950            mov     b,#0xC8
07C9 7442      1951            mov     a,#0x42
07CB 120100    1952            lcall   ___fssub
07CE AA82      1953            mov     r2,dpl
07D0 AB83      1954            mov     r3,dph
07D2 ACF0      1955            mov     r4,b
07D4 FD        1956            mov     r5,a
07D5 E581      1957            mov     a,sp
07D7 24FC      1958            add     a,#0xfc
07D9 F581      1959            mov     sp,a
07DB 8A82      1960            mov     dpl,r2
07DD 8B83      1961            mov     dph,r3
07DF 8CF0      1962            mov     b,r4
07E1 ED        1963            mov     a,r5
07E2 120100    1964            lcall   ___fs2uchar
07E5 858248    1965            mov     _pwm_left,dpl
07E8           1966   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:369: pwm_right = 100;
07E8 750864    1967            mov     _pwm_right,#0x64
07EB           1968   L021004?:
07EB           1969   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:371: if(pre_error<0){
07EB E4        1970            clr     a
07EC C0E0      1971            push    acc
07EE C0E0      1972            push    acc
07F0 C0E0      1973            push    acc
07F2 C0E0      1974            push    acc
07F4 85B882    1975            mov     dpl,_main_pre_error_1_110
07F7 85B983    1976            mov     dph,(_main_pre_error_1_110 + 1)
07FA 85BAF0    1977            mov     b,(_main_pre_error_1_110 + 2)
07FD E5BB      1978            mov     a,(_main_pre_error_1_110 + 3)
07FF 120100    1979            lcall   ___fslt
0802 AA82      1980            mov     r2,dpl
0804 E581      1981            mov     a,sp
0806 24FC      1982            add     a,#0xfc
0808 F581      1983            mov     sp,a
080A EA        1984            mov     a,r2
080B 6001      1985            jz      L021018?
080D           1986   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:372: cur_error = -5;
080D 756800    1987            mov     _main_cur_error_1_110,#0x00
0810 756900    1988            mov     (_main_cur_error_1_110 + 1),#0x00
0813 756AA0    1989            mov     (_main_cur_error_1_110 + 2),#0xA0
0816 756BC0    1990            mov     (_main_cur_error_1_110 + 3),#0xC0
0819           1991   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:373: pwm_left = 100;
0819 754864    1992            mov     _pwm_left,#0x64
081C           1993   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:374: pwm_right = 100 + cor;
081C E4        1994            clr     a
081D C0E0      1995            push    acc
081F C0E0      1996            push    acc
0821 74C8      1997            mov     a,#0xC8
0823 C0E0      1998            push    acc
0825 7442      1999            mov     a,#0x42
0827 C0E0      2000            push    acc
0829 851882    2001            mov     dpl,_main_cor_1_110
082C 851983    2002            mov     dph,(_main_cor_1_110 + 1)
082F 851AF0    2003            mov     b,(_main_cor_1_110 + 2)
0832 E51B      2004            mov     a,(_main_cor_1_110 + 3)
0834 120100    2005            lcall   ___fsadd
0837 AA82      2006            mov     r2,dpl
0839 AB83      2007            mov     r3,dph
083B ACF0      2008            mov     r4,b
083D FD        2009            mov     r5,a
083E E581      2010            mov     a,sp
0840 24FC      2011            add     a,#0xfc
0842 F581      2012            mov     sp,a
0844 8A82      2013            mov     dpl,r2
0846 8B83      2014            mov     dph,r3
0848 8CF0      2015            mov     b,r4
084A ED        2016            mov     a,r5
084B 120100    2017            lcall   ___fs2uchar
084E 858208    2018            mov     _pwm_right,dpl
0851           2019   L021018?:
0851           2020   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:377: if(!(pre_error==cur_error)){
0851 C068      2021            push    _main_cur_error_1_110
0853 C069      2022            push    (_main_cur_error_1_110 + 1)
0855 C06A      2023            push    (_main_cur_error_1_110 + 2)
0857 C06B      2024            push    (_main_cur_error_1_110 + 3)
0859 85B882    2025            mov     dpl,_main_pre_error_1_110
085C 85B983    2026            mov     dph,(_main_pre_error_1_110 + 1)
085F 85BAF0    2027            mov     b,(_main_pre_error_1_110 + 2)
0862 E5BB      2028            mov     a,(_main_pre_error_1_110 + 3)
0864 120100    2029            lcall   ___fseq
0867 AA82      2030            mov     r2,dpl
0869 E581      2031            mov     a,sp
086B 24FC      2032            add     a,#0xfc
086D F581      2033            mov     sp,a
086F EA        2034            mov     a,r2
0870 7001      2035            jnz     L021023?
0872           2036   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:378: q=m;
0872 8538F8    2037            mov     _main_q_1_110,_main_m_1_110
0875 8539F9    2038            mov     (_main_q_1_110 + 1),(_main_m_1_110 + 1)
0878           2039   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:379: m=1;
0878 753801    2040            mov     _main_m_1_110,#0x01
087B E4        2041            clr     a
087C F539      2042            mov     (_main_m_1_110 + 1),a
087E           2043   L021023?:
087E           2044   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:381: cor = KP*cur_error + KD*(cur_error - pre_error)/(q+m);
087E C068      2045            push    _main_cur_error_1_110
0880 C069      2046            push    (_main_cur_error_1_110 + 1)
0882 C06A      2047            push    (_main_cur_error_1_110 + 2)
0884 C06B      2048            push    (_main_cur_error_1_110 + 3)
0886 900000    2049            mov     dptr,#0x0000
0889 75F0F8    2050            mov     b,#0xF8
088C 7441      2051            mov     a,#0x41
088E 120100    2052            lcall   ___fsmul
0891 AA82      2053            mov     r2,dpl
0893 AB83      2054            mov     r3,dph
0895 ACF0      2055            mov     r4,b
0897 FD        2056            mov     r5,a
0898 E581      2057            mov     a,sp
089A 24FC      2058            add     a,#0xfc
089C F581      2059            mov     sp,a
089E E538      2060            mov     a,_main_m_1_110
08A0 25F8      2061            add     a,_main_q_1_110
08A2 F582      2062            mov     dpl,a
08A4 E539      2063            mov     a,(_main_m_1_110 + 1)
08A6 35F9      2064            addc    a,(_main_q_1_110 + 1)
08A8 F583      2065            mov     dph,a
08AA C002      2066            push    ar2
08AC C003      2067            push    ar3
08AE C004      2068            push    ar4
08B0 C005      2069            push    ar5
08B2 120100    2070            lcall   ___sint2fs
08B5 AE82      2071            mov     r6,dpl
08B7 AF83      2072            mov     r7,dph
08B9 A8F0      2073            mov     r0,b
08BB F9        2074            mov     r1,a
08BC C006      2075            push    ar6
08BE C007      2076            push    ar7
08C0 C000      2077            push    ar0
08C2 C001      2078            push    ar1
08C4 900000    2079            mov     dptr,#(0x00&0x00ff)
08C7 E4        2080            clr     a
08C8 F5F0      2081            mov     b,a
08CA 120100    2082            lcall   ___fsdiv
08CD AE82      2083            mov     r6,dpl
08CF AF83      2084            mov     r7,dph
08D1 A8F0      2085            mov     r0,b
08D3 F9        2086            mov     r1,a
08D4 E581      2087            mov     a,sp
08D6 24FC      2088            add     a,#0xfc
08D8 F581      2089            mov     sp,a
08DA D005      2090            pop     ar5
08DC D004      2091            pop     ar4
08DE D003      2092            pop     ar3
08E0 D002      2093            pop     ar2
08E2 C006      2094            push    ar6
08E4 C007      2095            push    ar7
08E6 C000      2096            push    ar0
08E8 C001      2097            push    ar1
08EA 8A82      2098            mov     dpl,r2
08EC 8B83      2099            mov     dph,r3
08EE 8CF0      2100            mov     b,r4
08F0 ED        2101            mov     a,r5
08F1 120100    2102            lcall   ___fsadd
08F4 858218    2103            mov     _main_cor_1_110,dpl
08F7 858319    2104            mov     (_main_cor_1_110 + 1),dph
08FA 85F01A    2105            mov     (_main_cor_1_110 + 2),b
08FD F51B      2106            mov     (_main_cor_1_110 + 3),a
08FF E581      2107            mov     a,sp
0901 24FC      2108            add     a,#0xfc
0903 F581      2109            mov     sp,a
0905           2110   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:382: m=m+1;
0905 0538      2111            inc     _main_m_1_110
0907 E4        2112            clr     a
0908 B53818    2113            cjne    a,_main_m_1_110,L021091?
090B 0539      2114            inc     (_main_m_1_110 + 1)
090D           2115   L021091?:
090D           2116   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:383: pre_error = cur_error;
090D 8568B8    2117            mov     _main_pre_error_1_110,_main_cur_error_1_110
0910 8569B9    2118            mov     (_main_pre_error_1_110 + 1),(_main_cur_error_1_110 + 1)
0913 856ABA    2119            mov     (_main_pre_error_1_110 + 2),(_main_cur_error_1_110 + 2)
0916 856BBB    2120            mov     (_main_pre_error_1_110 + 3),(_main_cur_error_1_110 + 3)
0919           2121   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:384: printf("State:%d LC:%d Sensor:%5.2f Timer:%d                 \r\n", state, line_counter, line_sensor, start_timer);
0919 A2D8      2122            mov     c,_start_timer
091B E4        2123            clr     a
091C 33        2124            rlc     a
091D FA        2125            mov     r2,a
091E 7B00      2126            mov     r3,#0x00
0920 C002      2127            push    ar2
0922 C003      2128            push    ar3
0924 C028      2129            push    _main_line_sensor_1_110
0926 C029      2130            push    (_main_line_sensor_1_110 + 1)
0928 C02A      2131            push    (_main_line_sensor_1_110 + 2)
092A C02B      2132            push    (_main_line_sensor_1_110 + 3)
092C C048      2133            push    _line_counter
092E C049      2134            push    (_line_counter + 1)
0930 C018      2135            push    _main_state_1_110
0932 C019      2136            push    (_main_state_1_110 + 1)
0934 7458      2137            mov     a,#__str_4
0936 C0E0      2138            push    acc
0938 74B7      2139            mov     a,#(__str_4 >> 8)
093A C0E0      2140            push    acc
093C 7480      2141            mov     a,#0x80
093E C0E0      2142            push    acc
0940 120100    2143            lcall   _printf
0943 E581      2144            mov     a,sp
0945 24F3      2145            add     a,#0xf3
0947 F581      2146            mov     sp,a
0949           2147   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:387: switch(state){
0949 7401      2148            mov     a,#0x01
094B B51898    2149            cjne    a,_main_state_1_110,L021092?
094E E4        2150            clr     a
094F B51998    2151            cjne    a,(_main_state_1_110 + 1),L021092?
0952 8001      2152            sjmp    L021024?
0954           2153   L021092?:
0954 7402      2154            mov     a,#0x02
0956 B51818    2155            cjne    a,_main_state_1_110,L021093?
0959 E4        2156            clr     a
095A B51918    2157            cjne    a,(_main_state_1_110 + 1),L021093?
095D 8001      2158            sjmp    L021027?
095F           2159   L021093?:
095F 7403      2160            mov     a,#0x03
0961 B51898    2161            cjne    a,_main_state_1_110,L021094?
0964 E4        2162            clr     a
0965 B51998    2163            cjne    a,(_main_state_1_110 + 1),L021094?
0968 020100    2164            ljmp    L021030?
096B           2165   L021094?:
096B 7404      2166            mov     a,#0x04
096D B51818    2167            cjne    a,_main_state_1_110,L021095?
0970 E4        2168            clr     a
0971 B51918    2169            cjne    a,(_main_state_1_110 + 1),L021095?
0974 020100    2170            ljmp    L021039?
0977           2171   L021095?:
0977 020100    2172            ljmp    L021050?
097A           2173   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:388: case 1:
097A           2174   L021024?:
097A           2175   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:389: if(line_sensor > HI_THRESH){
097A E4        2176            clr     a
097B C0E0      2177            push    acc
097D C0E0      2178            push    acc
097F 7480      2179            mov     a,#0x80
0981 C0E0      2180            push    acc
0983 743F      2181            mov     a,#0x3F
0985 C0E0      2182            push    acc
0987 852882    2183            mov     dpl,_main_line_sensor_1_110
098A 852983    2184            mov     dph,(_main_line_sensor_1_110 + 1)
098D 852AF0    2185            mov     b,(_main_line_sensor_1_110 + 2)
0990 E52B      2186            mov     a,(_main_line_sensor_1_110 + 3)
0992 120100    2187            lcall   ___fsgt
0995 AA82      2188            mov     r2,dpl
0997 E581      2189            mov     a,sp
0999 24FC      2190            add     a,#0xfc
099B F581      2191            mov     sp,a
099D EA        2192            mov     a,r2
099E 6001      2193            jz      L021026?
09A0           2194   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:392: state = 2;
09A0 751802    2195            mov     _main_state_1_110,#0x02
09A3 E4        2196            clr     a
09A4 F519      2197            mov     (_main_state_1_110 + 1),a
09A6           2198   L021026?:
09A6           2199   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:394: printf("headed to %2d from 1\n", state);
09A6 C018      2200            push    _main_state_1_110
09A8 C019      2201            push    (_main_state_1_110 + 1)
09AA 74D8      2202            mov     a,#__str_5
09AC C0E0      2203            push    acc
09AE 74B9      2204            mov     a,#(__str_5 >> 8)
09B0 C0E0      2205            push    acc
09B2 7480      2206            mov     a,#0x80
09B4 C0E0      2207            push    acc
09B6 120100    2208            lcall   _printf
09B9 E581      2209            mov     a,sp
09BB 24FB      2210            add     a,#0xfb
09BD F581      2211            mov     sp,a
09BF           2212   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:395: break;                           
09BF 020100    2213            ljmp    L021050?
09C2           2214   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:396: case 2:
09C2           2215   L021027?:
09C2           2216   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:397: if(line_sensor < LO_THRESH){
09C2 7433      2217            mov     a,#0x33
09C4 C0E0      2218            push    acc
09C6 C0E0      2219            push    acc
09C8 C0E0      2220            push    acc
09CA 743F      2221            mov     a,#0x3F
09CC C0E0      2222            push    acc
09CE 852882    2223            mov     dpl,_main_line_sensor_1_110
09D1 852983    2224            mov     dph,(_main_line_sensor_1_110 + 1)
09D4 852AF0    2225            mov     b,(_main_line_sensor_1_110 + 2)
09D7 E52B      2226            mov     a,(_main_line_sensor_1_110 + 3)
09D9 120100    2227            lcall   ___fslt
09DC AA82      2228            mov     r2,dpl
09DE E581      2229            mov     a,sp
09E0 24FC      2230            add     a,#0xfc
09E2 F581      2231            mov     sp,a
09E4 EA        2232            mov     a,r2
09E5 6001      2233            jz      L021029?
09E7           2234   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:398: line_counter++;
09E7 7401      2235            mov     a,#0x01
09E9 2548      2236            add     a,_line_counter
09EB F548      2237            mov     _line_counter,a
09ED E4        2238            clr     a
09EE 3549      2239            addc    a,(_line_counter + 1)
09F0 F549      2240            mov     (_line_counter + 1),a
09F2           2241   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:399: start_timer = 1;
09F2 D2D8      2242            setb    _start_timer
09F4           2243   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:400: state = 3;
09F4 751803    2244            mov     _main_state_1_110,#0x03
09F7 E4        2245            clr     a
09F8 F519      2246            mov     (_main_state_1_110 + 1),a
09FA           2247   L021029?:
09FA           2248   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:402: printf("headed to %2d from 2\n", state);
09FA C018      2249            push    _main_state_1_110
09FC C019      2250            push    (_main_state_1_110 + 1)
09FE 7458      2251            mov     a,#__str_6
0A00 C0E0      2252            push    acc
0A02 74BA      2253            mov     a,#(__str_6 >> 8)
0A04 C0E0      2254            push    acc
0A06 7480      2255            mov     a,#0x80
0A08 C0E0      2256            push    acc
0A0A 120100    2257            lcall   _printf
0A0D E581      2258            mov     a,sp
0A0F 24FB      2259            add     a,#0xfb
0A11 F581      2260            mov     sp,a
0A13           2261   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:403: break;
0A13 020100    2262            ljmp    L021050?
0A16           2263   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:404: case 3:
0A16           2264   L021030?:
0A16           2265   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:405: if(start_timer == 1){
0A16 30D898    2266            jnb     _start_timer,L021037?
0A19           2267   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:406: if(line_sensor > HI_THRESH){
0A19 E4        2268            clr     a
0A1A C0E0      2269            push    acc
0A1C C0E0      2270            push    acc
0A1E 7480      2271            mov     a,#0x80
0A20 C0E0      2272            push    acc
0A22 743F      2273            mov     a,#0x3F
0A24 C0E0      2274            push    acc
0A26 852882    2275            mov     dpl,_main_line_sensor_1_110
0A29 852983    2276            mov     dph,(_main_line_sensor_1_110 + 1)
0A2C 852AF0    2277            mov     b,(_main_line_sensor_1_110 + 2)
0A2F E52B      2278            mov     a,(_main_line_sensor_1_110 + 3)
0A31 120100    2279            lcall   ___fsgt
0A34 AA82      2280            mov     r2,dpl
0A36 E581      2281            mov     a,sp
0A38 24FC      2282            add     a,#0xfc
0A3A F581      2283            mov     sp,a
0A3C EA        2284            mov     a,r2
0A3D 6001      2285            jz      L021038?
0A3F           2286   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:407: start_timer = 0;
0A3F C2D8      2287            clr     _start_timer
0A41           2288   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:408: action_timer = 0;
0A41 E4        2289            clr     a
0A42 F588      2290            mov     _action_timer,a
0A44 F589      2291            mov     (_action_timer + 1),a
0A46           2292   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:409: state = 2;
0A46 751802    2293            mov     _main_state_1_110,#0x02
0A49 E4        2294            clr     a
0A4A F519      2295            mov     (_main_state_1_110 + 1),a
0A4C 8001      2296            sjmp    L021038?
0A4E           2297   L021037?:
0A4E           2298   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:413: if(line_counter > 1){
0A4E C3        2299            clr     c
0A4F 7401      2300            mov     a,#0x01
0A51 9548      2301            subb    a,_line_counter
0A53 E4        2302            clr     a
0A54 6480      2303            xrl     a,#0x80
0A56 8549F0    2304            mov     b,(_line_counter + 1)
0A59 63F080    2305            xrl     b,#0x80
0A5C 95F0      2306            subb    a,b
0A5E 5001      2307            jnc     L021034?
0A60           2308   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:414: command = line_counter;
0A60 8548C8    2309            mov     _main_command_1_110,_line_counter
0A63 8549C9    2310            mov     (_main_command_1_110 + 1),(_line_counter + 1)
0A66           2311   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:415: line_counter = 0;
0A66 E4        2312            clr     a
0A67 F548      2313            mov     _line_counter,a
0A69 F549      2314            mov     (_line_counter + 1),a
0A6B           2315   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:416: state = 4;
0A6B 751804    2316            mov     _main_state_1_110,#0x04
0A6E E4        2317            clr     a
0A6F F519      2318            mov     (_main_state_1_110 + 1),a
0A71 8001      2319            sjmp    L021038?
0A73           2320   L021034?:
0A73           2321   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:419: state = 1;
0A73 751801    2322            mov     _main_state_1_110,#0x01
0A76 E4        2323            clr     a
0A77 F519      2324            mov     (_main_state_1_110 + 1),a
0A79           2325   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:420: line_counter = 0;
0A79 E4        2326            clr     a
0A7A F548      2327            mov     _line_counter,a
0A7C F549      2328            mov     (_line_counter + 1),a
0A7E           2329   L021038?:
0A7E           2330   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:423: printf("headed to %2d from 3\n", state);
0A7E C018      2331            push    _main_state_1_110
0A80 C019      2332            push    (_main_state_1_110 + 1)
0A82 7458      2333            mov     a,#__str_7
0A84 C0E0      2334            push    acc
0A86 74BB      2335            mov     a,#(__str_7 >> 8)
0A88 C0E0      2336            push    acc
0A8A 7480      2337            mov     a,#0x80
0A8C C0E0      2338            push    acc
0A8E 120100    2339            lcall   _printf
0A91 E581      2340            mov     a,sp
0A93 24FB      2341            add     a,#0xfb
0A95 F581      2342            mov     sp,a
0A97           2343   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:424: break;
0A97 020100    2344            ljmp    L021050?
0A9A           2345   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:425: case 4:
0A9A           2346   L021039?:
0A9A           2347   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:426: if(command == 4){
0A9A 7404      2348            mov     a,#0x04
0A9C B5C898    2349            cjne    a,_main_command_1_110,L021101?
0A9F E4        2350            clr     a
0AA0 B5C998    2351            cjne    a,(_main_command_1_110 + 1),L021101?
0AA3 8001      2352            sjmp    L021102?
0AA5           2353   L021101?:
0AA5 8001      2354            sjmp    L021046?
0AA7           2355   L021102?:
0AA7           2356   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:427: if(start == 1){
0AA7           2357   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:428: start = 0;
0AA7 101858    2358            jbc     _start,L021103?
0AAA 8001      2359            sjmp    L021041?
0AAC           2360   L021103?:
0AAC           2361   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:429: state = 1;
0AAC 751801    2362            mov     _main_state_1_110,#0x01
0AAF E4        2363            clr     a
0AB0 F519      2364            mov     (_main_state_1_110 + 1),a
0AB2           2365   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:430: secs = 0;
0AB2 750800    2366            mov     _secs,#0x00
0AB5           2367   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:431: mins = 0;
0AB5 75C800    2368            mov     _mins,#0x00
0AB8 020100    2369            ljmp    L021050?
0ABB           2370   L021041?:
0ABB           2371   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:434: stop();
0ABB 120100    2372            lcall   _stop
0ABE 020100    2373            ljmp    L021050?
0AC1           2374   L021046?:
0AC1           2375   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:437: else if(line_sensor > HI_THRESH){
0AC1 E4        2376            clr     a
0AC2 C0E0      2377            push    acc
0AC4 C0E0      2378            push    acc
0AC6 7480      2379            mov     a,#0x80
0AC8 C0E0      2380            push    acc
0ACA 743F      2381            mov     a,#0x3F
0ACC C0E0      2382            push    acc
0ACE 852882    2383            mov     dpl,_main_line_sensor_1_110
0AD1 852983    2384            mov     dph,(_main_line_sensor_1_110 + 1)
0AD4 852AF0    2385            mov     b,(_main_line_sensor_1_110 + 2)
0AD7 E52B      2386            mov     a,(_main_line_sensor_1_110 + 3)
0AD9 120100    2387            lcall   ___fsgt
0ADC AA82      2388            mov     r2,dpl
0ADE E581      2389            mov     a,sp
0AE0 24FC      2390            add     a,#0xfc
0AE2 F581      2391            mov     sp,a
0AE4 EA        2392            mov     a,r2
0AE5 7001      2393            jnz     L021104?
0AE7 020100    2394            ljmp    L021050?
0AEA           2395   L021104?:
0AEA           2396   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:438: printf("ERMAGERD: %2d \n", command);
0AEA C0C8      2397            push    _main_command_1_110
0AEC C0C9      2398            push    (_main_command_1_110 + 1)
0AEE 7418      2399            mov     a,#__str_8
0AF0 C0E0      2400            push    acc
0AF2 74BD      2401            mov     a,#(__str_8 >> 8)
0AF4 C0E0      2402            push    acc
0AF6 7480      2403            mov     a,#0x80
0AF8 C0E0      2404            push    acc
0AFA 120100    2405            lcall   _printf
0AFD E581      2406            mov     a,sp
0AFF 24FB      2407            add     a,#0xfb
0B01 F581      2408            mov     sp,a
0B03           2409   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:439: execute(command);
0B03 85C882    2410            mov     dpl,_main_command_1_110
0B06 85C983    2411            mov     dph,(_main_command_1_110 + 1)
0B09 120100    2412            lcall   _execute
0B0C           2413   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:440: state = 1;
0B0C 751801    2414            mov     _main_state_1_110,#0x01
0B0F E4        2415            clr     a
0B10 F519      2416            mov     (_main_state_1_110 + 1),a
0B12           2417   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:443: }
0B12 020100    2418            ljmp    L021050?
0B15           2419            rseg R_CSEG
0B15           2420   
0000           2421            rseg R_XINIT
0000           2422   
0000           2423            rseg R_CONST
0000           2424   __str_0:
0000 563D2535  2425            db 'V=%5.2f L:%5.2f'
     2E326620
     4C3A2535
     2E3266
000F 00        2426            db 0x00
0010           2427   __str_1:
0010 25303264  2428            db '%02d:%02d R: %5.2f '
     3A253032
     6420523A
     2025352E
     326620
0023 00        2429            db 0x00
0024           2430   __str_2:
0024 7475726E  2431            db 'turning left!'
     696E6720
     6C656674
     21
0031 0A        2432            db 0x0A
0032 00        2433            db 0x00
0033           2434   __str_3:
0033 7475726E  2435            db 'turning right!'
     696E6720
     72696768
     7421
0041 0A        2436            db 0x0A
0042 00        2437            db 0x00
0043           2438   __str_4:
0043 53746174  2439            db 'State:%d LC:%d Sensor:%5.2f Timer:%d                 '
     653A2564
     204C433A
     25642053
     656E736F
     723A2535
     2E326620
     54696D65
     723A2564
     20202020
     20202020
     20202020
     20202020
     20
0078 0D        2440            db 0x0D
0079 0A        2441            db 0x0A
007A 00        2442            db 0x00
007B           2443   __str_5:
007B 68656164  2444            db 'headed to %2d from 1'
     65642074
     6F202532
     64206672
     6F6D2031
008F 0A        2445            db 0x0A
0090 00        2446            db 0x00
0091           2447   __str_6:
0091 68656164  2448            db 'headed to %2d from 2'
     65642074
     6F202532
     64206672
     6F6D2032
00A5 0A        2449            db 0x0A
00A6 00        2450            db 0x00
00A7           2451   __str_7:
00A7 68656164  2452            db 'headed to %2d from 3'
     65642074
     6F202532
     64206672
     6F6D2033
00BB 0A        2453            db 0x0A
00BC 00        2454            db 0x00
00BD           2455   __str_8:
00BD 45524D41  2456            db 'ERMAGERD: %2d '
     47455244
     3A202532
     6420
00CB 0A        2457            db 0x0A
00CC 00        2458            db 0x00
00CD           2459   
000E           2460            CSEG
000E           2461   
000E           2462   end
