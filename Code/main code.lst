0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Dec 11 2012) (MSVC)
0000              4   ; This file was generated Thu Mar 26 21:46:37 2015
0000              5   ;--------------------------------------------------------
                  5   $name main_code
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _execute
0000             29            public _stop
0000             30            public _turn_right
0000             31            public _turn_left
0000             32            public _display_LCD
0000             33            public _Timer0ISR
0000             34            public _InitTimer0
0000             35            public _InitADC
0000             36            public _InitSerialPort
0000             37            public _Wait1S
0000             38            public _LCDprint
0000             39            public _LCD_8BIT
0000             40            public _WriteCommand
0000             41            public _WriteData
0000             42            public _LCD_byte
0000             43            public _LCD_pulse
0000             44            public _waitms
0000             45            public _Wait50us
0000             46            public _InitPorts
0000             47            public _LCDprint_PARM_3
0000             48            public _start
0000             49            public _turn_time_update
0000             50            public _time_update_flag
0000             51            public _LCDprint_PARM_2
0000             52            public _turn_timer
0000             53            public _pwm_right
0000             54            public _pwm_left
0000             55            public _pwmcount
0000             56            public _mins
0000             57            public _secs
0000             58            public _msCount
0000             59   ;--------------------------------------------------------
0000             60   ; Special Function Registers
0000             61   ;--------------------------------------------------------
0000             62   _ACC            DATA 0xe0
0000             63   _ADCON0         DATA 0x8e
0000             64   _ADCON1         DATA 0x97
0000             65   _ADINS          DATA 0xa3
0000             66   _ADMODA         DATA 0xc0
0000             67   _ADMODB         DATA 0xa1
0000             68   _AD0BH          DATA 0xbb
0000             69   _AD0BL          DATA 0xa6
0000             70   _AD0DAT0        DATA 0xc5
0000             71   _AD0DAT1        DATA 0xc6
0000             72   _AD0DAT2        DATA 0xc7
0000             73   _AD0DAT3        DATA 0xf4
0000             74   _AD1BH          DATA 0xc4
0000             75   _AD1BL          DATA 0xbc
0000             76   _AD1DAT0        DATA 0xd5
0000             77   _AD1DAT1        DATA 0xd6
0000             78   _AD1DAT2        DATA 0xd7
0000             79   _AD1DAT3        DATA 0xf5
0000             80   _AUXR1          DATA 0xa2
0000             81   _B              DATA 0xf0
0000             82   _BRGR0          DATA 0xbe
0000             83   _BRGR1          DATA 0xbf
0000             84   _BRGCON         DATA 0xbd
0000             85   _CCCRA          DATA 0xea
0000             86   _CCCRB          DATA 0xeb
0000             87   _CCCRC          DATA 0xec
0000             88   _CCCRD          DATA 0xed
0000             89   _CMP1           DATA 0xac
0000             90   _CMP2           DATA 0xad
0000             91   _DEECON         DATA 0xf1
0000             92   _DEEDAT         DATA 0xf2
0000             93   _DEEADR         DATA 0xf3
0000             94   _DIVM           DATA 0x95
0000             95   _DPH            DATA 0x83
0000             96   _DPL            DATA 0x82
0000             97   _FMADRH         DATA 0xe7
0000             98   _FMADRL         DATA 0xe6
0000             99   _FMCON          DATA 0xe4
0000            100   _FMDATA         DATA 0xe5
0000            101   _I2ADR          DATA 0xdb
0000            102   _I2CON          DATA 0xd8
0000            103   _I2DAT          DATA 0xda
0000            104   _I2SCLH         DATA 0xdd
0000            105   _I2SCLL         DATA 0xdc
0000            106   _I2STAT         DATA 0xd9
0000            107   _ICRAH          DATA 0xab
0000            108   _ICRAL          DATA 0xaa
0000            109   _ICRBH          DATA 0xaf
0000            110   _ICRBL          DATA 0xae
0000            111   _IEN0           DATA 0xa8
0000            112   _IEN1           DATA 0xe8
0000            113   _IP0            DATA 0xb8
0000            114   _IP0H           DATA 0xb7
0000            115   _IP1            DATA 0xf8
0000            116   _IP1H           DATA 0xf7
0000            117   _KBCON          DATA 0x94
0000            118   _KBMASK         DATA 0x86
0000            119   _KBPATN         DATA 0x93
0000            120   _OCRAH          DATA 0xef
0000            121   _OCRAL          DATA 0xee
0000            122   _OCRBH          DATA 0xfb
0000            123   _OCRBL          DATA 0xfa
0000            124   _OCRCH          DATA 0xfd
0000            125   _OCRCL          DATA 0xfc
0000            126   _OCRDH          DATA 0xff
0000            127   _OCRDL          DATA 0xfe
0000            128   _P0             DATA 0x80
0000            129   _P1             DATA 0x90
0000            130   _P2             DATA 0xa0
0000            131   _P3             DATA 0xb0
0000            132   _P0M1           DATA 0x84
0000            133   _P0M2           DATA 0x85
0000            134   _P1M1           DATA 0x91
0000            135   _P1M2           DATA 0x92
0000            136   _P2M1           DATA 0xa4
0000            137   _P2M2           DATA 0xa5
0000            138   _P3M1           DATA 0xb1
0000            139   _P3M2           DATA 0xb2
0000            140   _PCON           DATA 0x87
0000            141   _PCONA          DATA 0xb5
0000            142   _PSW            DATA 0xd0
0000            143   _PT0AD          DATA 0xf6
0000            144   _RSTSRC         DATA 0xdf
0000            145   _RTCCON         DATA 0xd1
0000            146   _RTCH           DATA 0xd2
0000            147   _RTCL           DATA 0xd3
0000            148   _SADDR          DATA 0xa9
0000            149   _SADEN          DATA 0xb9
0000            150   _SBUF           DATA 0x99
0000            151   _SCON           DATA 0x98
0000            152   _SSTAT          DATA 0xba
0000            153   _SP             DATA 0x81
0000            154   _SPCTL          DATA 0xe2
0000            155   _SPSTAT         DATA 0xe1
0000            156   _SPDAT          DATA 0xe3
0000            157   _TAMOD          DATA 0x8f
0000            158   _TCON           DATA 0x88
0000            159   _TCR20          DATA 0xc8
0000            160   _TCR21          DATA 0xf9
0000            161   _TH0            DATA 0x8c
0000            162   _TH1            DATA 0x8d
0000            163   _TH2            DATA 0xcd
0000            164   _TICR2          DATA 0xc9
0000            165   _TIFR2          DATA 0xe9
0000            166   _TISE2          DATA 0xde
0000            167   _TL0            DATA 0x8a
0000            168   _TL1            DATA 0x8b
0000            169   _TL2            DATA 0xcc
0000            170   _TMOD           DATA 0x89
0000            171   _TOR2H          DATA 0xcf
0000            172   _TOR2L          DATA 0xce
0000            173   _TPCR2H         DATA 0xcb
0000            174   _TPCR2L         DATA 0xca
0000            175   _TRIM           DATA 0x96
0000            176   _WDCON          DATA 0xa7
0000            177   _WDL            DATA 0xc1
0000            178   _WFEED1         DATA 0xc2
0000            179   _WFEED2         DATA 0xc3
0000            180   ;--------------------------------------------------------
0000            181   ; special function bits
0000            182   ;--------------------------------------------------------
0000            183   _ACC_7          BIT 0xe7
0000            184   _ACC_6          BIT 0xe6
0000            185   _ACC_5          BIT 0xe5
0000            186   _ACC_4          BIT 0xe4
0000            187   _ACC_3          BIT 0xe3
0000            188   _ACC_2          BIT 0xe2
0000            189   _ACC_1          BIT 0xe1
0000            190   _ACC_0          BIT 0xe0
0000            191   _ADMODA_7       BIT 0xc7
0000            192   _ADMODA_6       BIT 0xc6
0000            193   _ADMODA_5       BIT 0xc5
0000            194   _ADMODA_4       BIT 0xc4
0000            195   _ADMODA_3       BIT 0xc3
0000            196   _ADMODA_2       BIT 0xc2
0000            197   _ADMODA_1       BIT 0xc1
0000            198   _ADMODA_0       BIT 0xc0
0000            199   _BNDI1          BIT 0xc7
0000            200   _BURST1         BIT 0xc6
0000            201   _SCC1           BIT 0xc5
0000            202   _SCAN1          BIT 0xc4
0000            203   _BNDI0          BIT 0xc3
0000            204   _BURST0         BIT 0xc2
0000            205   _SCC0           BIT 0xc1
0000            206   _SCAN0          BIT 0xc0
0000            207   _B_7            BIT 0xf7
0000            208   _B_6            BIT 0xf6
0000            209   _B_5            BIT 0xf5
0000            210   _B_4            BIT 0xf4
0000            211   _B_3            BIT 0xf3
0000            212   _B_2            BIT 0xf2
0000            213   _B_1            BIT 0xf1
0000            214   _B_0            BIT 0xf0
0000            215   _I2CON_7        BIT 0xdf
0000            216   _I2CON_6        BIT 0xde
0000            217   _I2CON_5        BIT 0xdd
0000            218   _I2CON_4        BIT 0xdc
0000            219   _I2CON_3        BIT 0xdb
0000            220   _I2CON_2        BIT 0xda
0000            221   _I2CON_1        BIT 0xd9
0000            222   _I2CON_0        BIT 0xd8
0000            223   _I2EN           BIT 0xde
0000            224   _STA            BIT 0xdd
0000            225   _STO            BIT 0xdc
0000            226   _SI             BIT 0xdb
0000            227   _AA             BIT 0xda
0000            228   _CRSEL          BIT 0xd8
0000            229   _IEN0_7         BIT 0xaf
0000            230   _IEN0_6         BIT 0xae
0000            231   _IEN0_5         BIT 0xad
0000            232   _IEN0_4         BIT 0xac
0000            233   _IEN0_3         BIT 0xab
0000            234   _IEN0_2         BIT 0xaa
0000            235   _IEN0_1         BIT 0xa9
0000            236   _IEN0_0         BIT 0xa8
0000            237   _EA             BIT 0xaf
0000            238   _EWDRT          BIT 0xae
0000            239   _EBO            BIT 0xad
0000            240   _ES             BIT 0xac
0000            241   _ESR            BIT 0xac
0000            242   _ET1            BIT 0xab
0000            243   _EX1            BIT 0xaa
0000            244   _ET0            BIT 0xa9
0000            245   _EX0            BIT 0xa8
0000            246   _IEN1_7         BIT 0xef
0000            247   _IEN1_6         BIT 0xee
0000            248   _IEN1_5         BIT 0xed
0000            249   _IEN1_4         BIT 0xec
0000            250   _IEN1_3         BIT 0xeb
0000            251   _IEN1_2         BIT 0xea
0000            252   _IEN1_1         BIT 0xe9
0000            253   _IEN1_0         BIT 0xe8
0000            254   _EADEE          BIT 0xef
0000            255   _EST            BIT 0xee
0000            256   _ECCU           BIT 0xec
0000            257   _ESPI           BIT 0xeb
0000            258   _EC             BIT 0xea
0000            259   _EKBI           BIT 0xe9
0000            260   _EI2C           BIT 0xe8
0000            261   _IP0_7          BIT 0xbf
0000            262   _IP0_6          BIT 0xbe
0000            263   _IP0_5          BIT 0xbd
0000            264   _IP0_4          BIT 0xbc
0000            265   _IP0_3          BIT 0xbb
0000            266   _IP0_2          BIT 0xba
0000            267   _IP0_1          BIT 0xb9
0000            268   _IP0_0          BIT 0xb8
0000            269   _PWDRT          BIT 0xbe
0000            270   _PBO            BIT 0xbd
0000            271   _PS             BIT 0xbc
0000            272   _PSR            BIT 0xbc
0000            273   _PT1            BIT 0xbb
0000            274   _PX1            BIT 0xba
0000            275   _PT0            BIT 0xb9
0000            276   _PX0            BIT 0xb8
0000            277   _IP1_7          BIT 0xff
0000            278   _IP1_6          BIT 0xfe
0000            279   _IP1_5          BIT 0xfd
0000            280   _IP1_4          BIT 0xfc
0000            281   _IP1_3          BIT 0xfb
0000            282   _IP1_2          BIT 0xfa
0000            283   _IP1_1          BIT 0xf9
0000            284   _IP1_0          BIT 0xf8
0000            285   _PADEE          BIT 0xff
0000            286   _PST            BIT 0xfe
0000            287   _PCCU           BIT 0xfc
0000            288   _PSPI           BIT 0xfb
0000            289   _PC             BIT 0xfa
0000            290   _PKBI           BIT 0xf9
0000            291   _PI2C           BIT 0xf8
0000            292   _P0_7           BIT 0x87
0000            293   _P0_6           BIT 0x86
0000            294   _P0_5           BIT 0x85
0000            295   _P0_4           BIT 0x84
0000            296   _P0_3           BIT 0x83
0000            297   _P0_2           BIT 0x82
0000            298   _P0_1           BIT 0x81
0000            299   _P0_0           BIT 0x80
0000            300   _T1             BIT 0x87
0000            301   _KB7            BIT 0x87
0000            302   _CMP_1          BIT 0x86
0000            303   _KB6            BIT 0x86
0000            304   _CMPREF         BIT 0x85
0000            305   _KB5            BIT 0x85
0000            306   _CIN1A          BIT 0x84
0000            307   _KB4            BIT 0x84
0000            308   _CIN1B          BIT 0x83
0000            309   _KB3            BIT 0x83
0000            310   _CIN2A          BIT 0x82
0000            311   _KB2            BIT 0x82
0000            312   _CIN2B          BIT 0x81
0000            313   _KB1            BIT 0x81
0000            314   _CMP_2          BIT 0x80
0000            315   _KB0            BIT 0x80
0000            316   _P1_7           BIT 0x97
0000            317   _P1_6           BIT 0x96
0000            318   _P1_5           BIT 0x95
0000            319   _P1_4           BIT 0x94
0000            320   _P1_3           BIT 0x93
0000            321   _P1_2           BIT 0x92
0000            322   _P1_1           BIT 0x91
0000            323   _P1_0           BIT 0x90
0000            324   _OCC            BIT 0x97
0000            325   _OCB            BIT 0x96
0000            326   _RST            BIT 0x95
0000            327   _INT1           BIT 0x94
0000            328   _INT0           BIT 0x93
0000            329   _SDA            BIT 0x93
0000            330   _T0             BIT 0x92
0000            331   _SCL            BIT 0x92
0000            332   _RXD            BIT 0x91
0000            333   _TXD            BIT 0x90
0000            334   _P2_7           BIT 0xa7
0000            335   _P2_6           BIT 0xa6
0000            336   _P2_5           BIT 0xa5
0000            337   _P2_4           BIT 0xa4
0000            338   _P2_3           BIT 0xa3
0000            339   _P2_2           BIT 0xa2
0000            340   _P2_1           BIT 0xa1
0000            341   _P2_0           BIT 0xa0
0000            342   _ICA            BIT 0xa7
0000            343   _OCA            BIT 0xa6
0000            344   _SPICLK         BIT 0xa5
0000            345   _SS             BIT 0xa4
0000            346   _MISO           BIT 0xa3
0000            347   _MOSI           BIT 0xa2
0000            348   _OCD            BIT 0xa1
0000            349   _ICB            BIT 0xa0
0000            350   _P3_7           BIT 0xb7
0000            351   _P3_6           BIT 0xb6
0000            352   _P3_5           BIT 0xb5
0000            353   _P3_4           BIT 0xb4
0000            354   _P3_3           BIT 0xb3
0000            355   _P3_2           BIT 0xb2
0000            356   _P3_1           BIT 0xb1
0000            357   _P3_0           BIT 0xb0
0000            358   _XTAL1          BIT 0xb1
0000            359   _XTAL2          BIT 0xb0
0000            360   _PSW_7          BIT 0xd7
0000            361   _PSW_6          BIT 0xd6
0000            362   _PSW_5          BIT 0xd5
0000            363   _PSW_4          BIT 0xd4
0000            364   _PSW_3          BIT 0xd3
0000            365   _PSW_2          BIT 0xd2
0000            366   _PSW_1          BIT 0xd1
0000            367   _PSW_0          BIT 0xd0
0000            368   _CY             BIT 0xd7
0000            369   _AC             BIT 0xd6
0000            370   _F0             BIT 0xd5
0000            371   _RS1            BIT 0xd4
0000            372   _RS0            BIT 0xd3
0000            373   _OV             BIT 0xd2
0000            374   _F1             BIT 0xd1
0000            375   _P              BIT 0xd0
0000            376   _SCON_7         BIT 0x9f
0000            377   _SCON_6         BIT 0x9e
0000            378   _SCON_5         BIT 0x9d
0000            379   _SCON_4         BIT 0x9c
0000            380   _SCON_3         BIT 0x9b
0000            381   _SCON_2         BIT 0x9a
0000            382   _SCON_1         BIT 0x99
0000            383   _SCON_0         BIT 0x98
0000            384   _SM0            BIT 0x9f
0000            385   _FE             BIT 0x9f
0000            386   _SM1            BIT 0x9e
0000            387   _SM2            BIT 0x9d
0000            388   _REN            BIT 0x9c
0000            389   _TB8            BIT 0x9b
0000            390   _RB8            BIT 0x9a
0000            391   _TI             BIT 0x99
0000            392   _RI             BIT 0x98
0000            393   _TCON_7         BIT 0x8f
0000            394   _TCON_6         BIT 0x8e
0000            395   _TCON_5         BIT 0x8d
0000            396   _TCON_4         BIT 0x8c
0000            397   _TCON_3         BIT 0x8b
0000            398   _TCON_2         BIT 0x8a
0000            399   _TCON_1         BIT 0x89
0000            400   _TCON_0         BIT 0x88
0000            401   _TF1            BIT 0x8f
0000            402   _TR1            BIT 0x8e
0000            403   _TF0            BIT 0x8d
0000            404   _TR0            BIT 0x8c
0000            405   _IE1            BIT 0x8b
0000            406   _IT1            BIT 0x8a
0000            407   _IE0            BIT 0x89
0000            408   _IT0            BIT 0x88
0000            409   _TCR20_7        BIT 0xcf
0000            410   _TCR20_6        BIT 0xce
0000            411   _TCR20_5        BIT 0xcd
0000            412   _TCR20_4        BIT 0xcc
0000            413   _TCR20_3        BIT 0xcb
0000            414   _TCR20_2        BIT 0xca
0000            415   _TCR20_1        BIT 0xc9
0000            416   _TCR20_0        BIT 0xc8
0000            417   _PLEEN          BIT 0xcf
0000            418   _HLTRN          BIT 0xce
0000            419   _HLTEN          BIT 0xcd
0000            420   _ALTCD          BIT 0xcc
0000            421   _ALTAB          BIT 0xcb
0000            422   _TDIR2          BIT 0xca
0000            423   _TMOD21         BIT 0xc9
0000            424   _TMOD20         BIT 0xc8
0000            425   ;--------------------------------------------------------
0000            426   ; overlayable register banks
0000            427   ;--------------------------------------------------------
0000            428            rbank0 segment data overlay
0000            429   ;--------------------------------------------------------
0000            430   ; internal ram data
0000            431   ;--------------------------------------------------------
0000            432            rseg R_DSEG
0000            433   _msCount:
0000            434            ds 2
0002            435   _secs:
0002            436            ds 1
0003            437   _mins:
0003            438            ds 1
0004            439   _pwmcount:
0004            440            ds 1
0005            441   _pwm_left:
0005            442            ds 1
0006            443   _pwm_right:
0006            444            ds 1
0007            445   _turn_timer:
0007            446            ds 2
0009            447   _LCDprint_PARM_2:
0009            448            ds 1
000A            449   _display_LCD_buff_1_94:
000A            450            ds 17
001B            451   _main_cor_1_112:
001B            452            ds 4
001F            453   _main_cur_error_1_112:
001F            454            ds 4
0023            455   _main_pre_error_1_112:
0023            456            ds 4
0027            457   _main_left_1_112:
0027            458            ds 4
002B            459   _main_right_1_112:
002B            460            ds 4
002F            461   _main_line_sensor_1_112:
002F            462            ds 4
0033            463   _main_diff_1_112:
0033            464            ds 4
0037            465   _main_line_counter_1_112:
0037            466            ds 2
0039            467   _main_command_1_112:
0039            468            ds 2
003B            469   _main_state_1_112:
003B            470            ds 2
003D            471   ;--------------------------------------------------------
003D            472   ; overlayable items in internal ram 
003D            473   ;--------------------------------------------------------
0000            474            rseg R_OSEG
0000            475   ;--------------------------------------------------------
0000            476   ; indirectly addressable internal ram data
0000            477   ;--------------------------------------------------------
0000            478            rseg R_ISEG
0000            479   ;--------------------------------------------------------
0000            480   ; absolute internal ram data
0000            481   ;--------------------------------------------------------
0000            482            DSEG
0000            483   ;--------------------------------------------------------
0000            484   ; bit data
0000            485   ;--------------------------------------------------------
0000            486            rseg R_BSEG
0000            487   _time_update_flag:
0000            488            DBIT    1
0001            489   _turn_time_update:
0001            490            DBIT    1
0002            491   _start:
0002            492            DBIT    1
0003            493   _LCDprint_PARM_3:
0003            494            DBIT    1
0004            495   ;--------------------------------------------------------
0004            496   ; paged external ram data
0004            497   ;--------------------------------------------------------
0000            498            rseg R_PSEG
0000            499   ;--------------------------------------------------------
0000            500   ; external ram data
0000            501   ;--------------------------------------------------------
0000            502            rseg R_XSEG
FFC8            503            XSEG at 0xffc8
FFC8            504   _BODCFG: ds 1
FFC9            505            public _BODCFG
0000            506            rseg R_XSEG
FFDE            507            XSEG at 0xffde
FFDE            508   _CLKCON: ds 1
FFDF            509            public _CLKCON
0000            510            rseg R_XSEG
FFE1            511            XSEG at 0xffe1
FFE1            512   _PGACON1: ds 1
FFE2            513            public _PGACON1
0000            514            rseg R_XSEG
FFE4            515            XSEG at 0xffe4
FFE4            516   _PGACON1B: ds 1
FFE5            517            public _PGACON1B
0000            518            rseg R_XSEG
FFE3            519            XSEG at 0xffe3
FFE3            520   _PGA1TRIM8X16X: ds 1
FFE4            521            public _PGA1TRIM8X16X
0000            522            rseg R_XSEG
FFE2            523            XSEG at 0xffe2
FFE2            524   _PGA1TRIM2X4X: ds 1
FFE3            525            public _PGA1TRIM2X4X
0000            526            rseg R_XSEG
FFCA            527            XSEG at 0xffca
FFCA            528   _PGACON0: ds 1
FFCB            529            public _PGACON0
0000            530            rseg R_XSEG
FFCE            531            XSEG at 0xffce
FFCE            532   _PGACON0B: ds 1
FFCF            533            public _PGACON0B
0000            534            rseg R_XSEG
FFCD            535            XSEG at 0xffcd
FFCD            536   _PGA0TRIM8X16X: ds 1
FFCE            537            public _PGA0TRIM8X16X
0000            538            rseg R_XSEG
FFCC            539            XSEG at 0xffcc
FFCC            540   _PGA0TRIM2X4X: ds 1
FFCD            541            public _PGA0TRIM2X4X
0000            542            rseg R_XSEG
FFBF            543            XSEG at 0xffbf
FFBF            544   _RTCDATH: ds 1
FFC0            545            public _RTCDATH
0000            546            rseg R_XSEG
FFBE            547            XSEG at 0xffbe
FFBE            548   _RTCDATL: ds 1
FFBF            549            public _RTCDATL
0000            550            rseg R_XSEG
0000            551   ;--------------------------------------------------------
0000            552   ; absolute external ram data
0000            553   ;--------------------------------------------------------
FFBF            554            XSEG
FFBF            555   ;--------------------------------------------------------
FFBF            556   ; external initialized ram data
FFBF            557   ;--------------------------------------------------------
0000            558            rseg R_IXSEG
0000            559            rseg R_HOME
0000            560            rseg R_GSINIT
0000            561            rseg R_CSEG
0000            562   ;--------------------------------------------------------
0000            563   ; Reset entry point and interrupt vectors
0000            564   ;--------------------------------------------------------
0000            565            CSEG at 0x0000
0000 020100     566            ljmp    _crt0
000B            567            CSEG at 0x000b
000B 020100     568            ljmp    _Timer0ISR
000E            569   ;--------------------------------------------------------
000E            570   ; global & static initialisations
000E            571   ;--------------------------------------------------------
0000            572            rseg R_HOME
0000            573            rseg R_GSINIT
0000            574            rseg R_GSINIT
0000            575   ;--------------------------------------------------------
0000            576   ; data variables initialization
0000            577   ;--------------------------------------------------------
0000            578            rseg R_DINIT
0000            579   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:43: volatile int msCount=0; // Volatiles can be changed by stuff outside our program, like memory registers
0000 E4         580            clr     a
0001 F588       581            mov     _msCount,a
0003 F589       582            mov     (_msCount + 1),a
0005            583   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:44: volatile unsigned char secs=0, mins=0; // They are like global variables, kinda 
0005 754800     584            mov     _secs,#0x00
0008            585   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:44: volatile bit time_update_flag=0;
0008 750800     586            mov     _mins,#0x00
000B            587   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:49: volatile int turn_timer = 0;
000B E4         588            clr     a
000C F508       589            mov     _turn_timer,a
000E F509       590            mov     (_turn_timer + 1),a
0010            591   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:45: volatile bit time_update_flag=0;
0010 C278       592            clr     _time_update_flag
0012            593   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:50: volatile bit turn_time_update=0;
0012 C228       594            clr     _turn_time_update
0014            595   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:51: volatile bit start = 1;
0014 D2D8       596            setb    _start
0016            597            ; The linker places a 'ret' at the end of segment R_DINIT.
0016            598   ;--------------------------------------------------------
0016            599   ; code
0016            600   ;--------------------------------------------------------
0000            601            rseg R_CSEG
0000            602   ;------------------------------------------------------------
0000            603   ;Allocation info for local variables in function 'InitPorts'
0000            604   ;------------------------------------------------------------
0000            605   ;------------------------------------------------------------
0000            606   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:53: void InitPorts(void)
0000            607   ;        -----------------------------------------
0000            608   ;         function InitPorts
0000            609   ;        -----------------------------------------
0000            610   _InitPorts:
0000            611            using   0
0000            612   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:55: P0M1=0x1E;
0000 75841E     613            mov     _P0M1,#0x1E
0003            614   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:56: P0M2=0x00;
0003 758500     615            mov     _P0M2,#0x00
0006            616   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:57: P1M1=0;
0006 759100     617            mov     _P1M1,#0x00
0009            618   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:58: P1M2=0;
0009 759200     619            mov     _P1M2,#0x00
000C            620   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:59: P2M1=0;
000C 75A400     621            mov     _P2M1,#0x00
000F            622   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:60: P2M2=0;
000F 75A500     623            mov     _P2M2,#0x00
0012            624   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:61: P3M1=0;
0012 75B100     625            mov     _P3M1,#0x00
0015            626   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:62: P3M2=0;
0015 75B200     627            mov     _P3M2,#0x00
0018 22         628            ret
0019            629   ;------------------------------------------------------------
0019            630   ;Allocation info for local variables in function 'Wait50us'
0019            631   ;------------------------------------------------------------
0019            632   ;------------------------------------------------------------
0019            633   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:65: void Wait50us (void)
0019            634   ;        -----------------------------------------
0019            635   ;         function Wait50us
0019            636   ;        -----------------------------------------
0019            637   _Wait50us:
0019            638   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:70: _endasm;
0019            639            
0019 7852       640             mov R0, #82
001B            641             L0:
001B D8A8       642            djnz R0, L0 ; 2 machine cycles-> 2*0.27126us*92=50us
001D            643             
001D 22         644            ret
001E            645   ;------------------------------------------------------------
001E            646   ;Allocation info for local variables in function 'waitms'
001E            647   ;------------------------------------------------------------
001E            648   ;ms                        Allocated to registers r2 r3 
001E            649   ;j                         Allocated to registers r4 r5 
001E            650   ;k                         Allocated to registers r6 
001E            651   ;------------------------------------------------------------
001E            652   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:73: void waitms (unsigned int ms)
001E            653   ;        -----------------------------------------
001E            654   ;         function waitms
001E            655   ;        -----------------------------------------
001E            656   _waitms:
001E AA82       657            mov     r2,dpl
0020 AB83       658            mov     r3,dph
0022            659   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:79: for(j=0; j<ms; j++)
0022 7C00       660            mov     r4,#0x00
0024 7D00       661            mov     r5,#0x00
0026            662   L004004?:
0026 C3         663            clr     c
0027 EC         664            mov     a,r4
0028 9A         665            subb    a,r2
0029 ED         666            mov     a,r5
002A 9B         667            subb    a,r3
002B 5001       668            jnc     L004008?
002D            669   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:80: for (k=0; k<20; k++) Wait50us();
002D 7E14       670            mov     r6,#0x14
002F            671   L004003?:
002F C002       672            push    ar2
0031 C003       673            push    ar3
0033 C004       674            push    ar4
0035 C005       675            push    ar5
0037 C006       676            push    ar6
0039 120100     677            lcall   _Wait50us
003C D006       678            pop     ar6
003E D005       679            pop     ar5
0040 D004       680            pop     ar4
0042 D003       681            pop     ar3
0044 D002       682            pop     ar2
0046 DEE8       683            djnz    r6,L004003?
0048            684   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:79: for(j=0; j<ms; j++)
0048 0C         685            inc     r4
0049 BC0068     686            cjne    r4,#0x00,L004004?
004C 0D         687            inc     r5
004D 8001       688            sjmp    L004004?
004F            689   L004008?:
004F 22         690            ret
0050            691   ;------------------------------------------------------------
0050            692   ;Allocation info for local variables in function 'LCD_pulse'
0050            693   ;------------------------------------------------------------
0050            694   ;------------------------------------------------------------
0050            695   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:83: void LCD_pulse (void)
0050            696   ;        -----------------------------------------
0050            697   ;         function LCD_pulse
0050            698   ;        -----------------------------------------
0050            699   _LCD_pulse:
0050            700   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:85: LCD_E=1;
0050 D2A5       701            setb    _P2_5
0052            702   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:86: Wait50us();
0052 120100     703            lcall   _Wait50us
0055            704   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:87: LCD_E=0;
0055 C2A5       705            clr     _P2_5
0057 22         706            ret
0058            707   ;------------------------------------------------------------
0058            708   ;Allocation info for local variables in function 'LCD_byte'
0058            709   ;------------------------------------------------------------
0058            710   ;x                         Allocated to registers 
0058            711   ;------------------------------------------------------------
0058            712   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:90: void LCD_byte (unsigned char x)
0058            713   ;        -----------------------------------------
0058            714   ;         function LCD_byte
0058            715   ;        -----------------------------------------
0058            716   _LCD_byte:
0058 8582E0     717            mov     _ACC,dpl
005B            718   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:94: LCD_D7=ACC_7;
005B A2E7       719            mov     c,_ACC_7
005D 9294       720            mov     _P1_4,c
005F            721   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:95: LCD_D6=ACC_6;
005F A2E6       722            mov     c,_ACC_6
0061 9296       723            mov     _P1_6,c
0063            724   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:96: LCD_D5=ACC_5;
0063 A2E5       725            mov     c,_ACC_5
0065 9297       726            mov     _P1_7,c
0067            727   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:97: LCD_D4=ACC_4;
0067 A2E4       728            mov     c,_ACC_4
0069 92A0       729            mov     _P2_0,c
006B            730   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:98: LCD_D3=ACC_3;
006B A2E3       731            mov     c,_ACC_3
006D 92A1       732            mov     _P2_1,c
006F            733   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:99: LCD_D2=ACC_2;
006F A2E2       734            mov     c,_ACC_2
0071 92A2       735            mov     _P2_2,c
0073            736   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:100: LCD_D1=ACC_1;
0073 A2E1       737            mov     c,_ACC_1
0075 92A3       738            mov     _P2_3,c
0077            739   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:101: LCD_D0=ACC_0;
0077 A2E0       740            mov     c,_ACC_0
0079 92A4       741            mov     _P2_4,c
007B            742   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:102: LCD_pulse();
007B 020100     743            ljmp    _LCD_pulse
007E            744   ;------------------------------------------------------------
007E            745   ;Allocation info for local variables in function 'WriteData'
007E            746   ;------------------------------------------------------------
007E            747   ;x                         Allocated to registers r2 
007E            748   ;------------------------------------------------------------
007E            749   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:105: void WriteData (unsigned char x)
007E            750   ;        -----------------------------------------
007E            751   ;         function WriteData
007E            752   ;        -----------------------------------------
007E            753   _WriteData:
007E AA82       754            mov     r2,dpl
0080            755   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:107: LCD_RS=1;
0080 D2A7       756            setb    _P2_7
0082            757   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:108: LCD_byte(x);
0082 8A82       758            mov     dpl,r2
0084 120100     759            lcall   _LCD_byte
0087            760   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:109: waitms(2);
0087 900002     761            mov     dptr,#0x0002
008A 020100     762            ljmp    _waitms
008D            763   ;------------------------------------------------------------
008D            764   ;Allocation info for local variables in function 'WriteCommand'
008D            765   ;------------------------------------------------------------
008D            766   ;x                         Allocated to registers r2 
008D            767   ;------------------------------------------------------------
008D            768   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:112: void WriteCommand (unsigned char x)
008D            769   ;        -----------------------------------------
008D            770   ;         function WriteCommand
008D            771   ;        -----------------------------------------
008D            772   _WriteCommand:
008D AA82       773            mov     r2,dpl
008F            774   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:114: LCD_RS=0;
008F C2A7       775            clr     _P2_7
0091            776   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:115: LCD_byte(x);
0091 8A82       777            mov     dpl,r2
0093 120100     778            lcall   _LCD_byte
0096            779   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:116: waitms(5);
0096 900005     780            mov     dptr,#0x0005
0099 020100     781            ljmp    _waitms
009C            782   ;------------------------------------------------------------
009C            783   ;Allocation info for local variables in function 'LCD_8BIT'
009C            784   ;------------------------------------------------------------
009C            785   ;------------------------------------------------------------
009C            786   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:119: void LCD_8BIT (void)
009C            787   ;        -----------------------------------------
009C            788   ;         function LCD_8BIT
009C            789   ;        -----------------------------------------
009C            790   _LCD_8BIT:
009C            791   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:121: LCD_E=0;  // Resting state of LCD's enable is zero
009C C2A5       792            clr     _P2_5
009E            793   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:122: LCD_RW=0; // We are only writing to the LCD in this program
009E C2A6       794            clr     _P2_6
00A0            795   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:123: waitms(20);
00A0 900014     796            mov     dptr,#0x0014
00A3 120100     797            lcall   _waitms
00A6            798   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:125: WriteCommand(0x33);
00A6 758233     799            mov     dpl,#0x33
00A9 120100     800            lcall   _WriteCommand
00AC            801   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:126: WriteCommand(0x33);
00AC 758233     802            mov     dpl,#0x33
00AF 120100     803            lcall   _WriteCommand
00B2            804   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:127: WriteCommand(0x33); // Stay in 8-bit mode
00B2 758233     805            mov     dpl,#0x33
00B5 120100     806            lcall   _WriteCommand
00B8            807   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:130: WriteCommand(0x38);
00B8 758238     808            mov     dpl,#0x38
00BB 120100     809            lcall   _WriteCommand
00BE            810   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:131: WriteCommand(0x0c);
00BE 75820C     811            mov     dpl,#0x0C
00C1 120100     812            lcall   _WriteCommand
00C4            813   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:132: WriteCommand(0x01); // Clear screen command (takes some time)
00C4 758201     814            mov     dpl,#0x01
00C7 120100     815            lcall   _WriteCommand
00CA            816   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:133: waitms(20); // Wait for clear screen command to finsih.
00CA 900014     817            mov     dptr,#0x0014
00CD 020100     818            ljmp    _waitms
00D0            819   ;------------------------------------------------------------
00D0            820   ;Allocation info for local variables in function 'LCDprint'
00D0            821   ;------------------------------------------------------------
00D0            822   ;line                      Allocated with name '_LCDprint_PARM_2'
00D0            823   ;string                    Allocated to registers r2 r3 r4 
00D0            824   ;j                         Allocated to registers r5 
00D0            825   ;------------------------------------------------------------
00D0            826   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:136: void LCDprint(char * string, unsigned char line, bit clear)
00D0            827   ;        -----------------------------------------
00D0            828   ;         function LCDprint
00D0            829   ;        -----------------------------------------
00D0            830   _LCDprint:
00D0 AA82       831            mov     r2,dpl
00D2 AB83       832            mov     r3,dph
00D4 ACF0       833            mov     r4,b
00D6            834   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:140: WriteCommand(line==2?0xc0:0x80);
00D6 7402       835            mov     a,#0x02
00D8 B5C868     836            cjne    a,_LCDprint_PARM_2,L010013?
00DB 7DC0       837            mov     r5,#0xC0
00DD 8001       838            sjmp    L010014?
00DF            839   L010013?:
00DF 7D80       840            mov     r5,#0x80
00E1            841   L010014?:
00E1 8D82       842            mov     dpl,r5
00E3 C002       843            push    ar2
00E5 C003       844            push    ar3
00E7 C004       845            push    ar4
00E9 120100     846            lcall   _WriteCommand
00EC            847   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:141: waitms(5);
00EC 900005     848            mov     dptr,#0x0005
00EF 120100     849            lcall   _waitms
00F2 D004       850            pop     ar4
00F4 D003       851            pop     ar3
00F6 D002       852            pop     ar2
00F8            853   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:142: for(j=0; string[j]!=0; j++)      WriteData(string[j]);// Write the message
00F8 7D00       854            mov     r5,#0x00
00FA            855   L010003?:
00FA ED         856            mov     a,r5
00FB 2A         857            add     a,r2
00FC FE         858            mov     r6,a
00FD E4         859            clr     a
00FE 3B         860            addc    a,r3
00FF FF         861            mov     r7,a
0100 8C00       862            mov     ar0,r4
0102 8E82       863            mov     dpl,r6
0104 8F83       864            mov     dph,r7
0106 88F0       865            mov     b,r0
0108 120100     866            lcall   __gptrget
010B FE         867            mov     r6,a
010C 6001       868            jz      L010006?
010E 8E82       869            mov     dpl,r6
0110 C002       870            push    ar2
0112 C003       871            push    ar3
0114 C004       872            push    ar4
0116 C005       873            push    ar5
0118 120100     874            lcall   _WriteData
011B D005       875            pop     ar5
011D D004       876            pop     ar4
011F D003       877            pop     ar3
0121 D002       878            pop     ar2
0123 0D         879            inc     r5
0124 8001       880            sjmp    L010003?
0126            881   L010006?:
0126            882   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:143: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0126 3098A8     883            jnb     _LCDprint_PARM_3,L010011?
0129 8D02       884            mov     ar2,r5
012B            885   L010007?:
012B BA1028     886            cjne    r2,#0x10,L010026?
012E            887   L010026?:
012E 5001       888            jnc     L010011?
0130 758220     889            mov     dpl,#0x20
0133 C002       890            push    ar2
0135 120100     891            lcall   _WriteData
0138 D002       892            pop     ar2
013A 0A         893            inc     r2
013B 8001       894            sjmp    L010007?
013D            895   L010011?:
013D 22         896            ret
013E            897   ;------------------------------------------------------------
013E            898   ;Allocation info for local variables in function 'Wait1S'
013E            899   ;------------------------------------------------------------
013E            900   ;------------------------------------------------------------
013E            901   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:146: void Wait1S (void)
013E            902   ;        -----------------------------------------
013E            903   ;         function Wait1S
013E            904   ;        -----------------------------------------
013E            905   _Wait1S:
013E            906   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:155: _endasm;
013E            907            
013E 7A28       908             mov R2, #40
0140            909             L3:
0140 79FA       910            mov R1, #250
0142            911             L2:
0142 78B8       912            mov R0, #184
0144            913             L1:
0144 D8E8       914            djnz R0, L1 ; 2 machine cycles-> 2*0.27126us*184=100us
0146 D9A8       915             djnz R1, L2 ; 100us*250=0.025s
0148 DA68       916             djnz R2, L3 ; 0.025s*40=1s
014A            917             
014A 22         918            ret
014B            919   ;------------------------------------------------------------
014B            920   ;Allocation info for local variables in function 'InitSerialPort'
014B            921   ;------------------------------------------------------------
014B            922   ;------------------------------------------------------------
014B            923   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:158: void InitSerialPort(void)
014B            924   ;        -----------------------------------------
014B            925   ;         function InitSerialPort
014B            926   ;        -----------------------------------------
014B            927   _InitSerialPort:
014B            928   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:160: BRGCON=0x00; //Make sure the baud rate generator is off
014B 75BD00     929            mov     _BRGCON,#0x00
014E            930   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:161: BRGR1=((XTAL/BAUD)-16)/0x100;
014E 75BF00     931            mov     _BRGR1,#0x00
0151            932   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:162: BRGR0=((XTAL/BAUD)-16)%0x100;
0151 75BE30     933            mov     _BRGR0,#0x30
0154            934   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:163: BRGCON=0x03; //Turn-on the baud rate generator
0154 75BD03     935            mov     _BRGCON,#0x03
0157            936   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:164: SCON=0x52; //Serial port in mode 1, ren, txrdy, rxempty
0157 759852     937            mov     _SCON,#0x52
015A            938   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:165: P1M1=0x00; //Enable pins RxD and Txd
015A 759100     939            mov     _P1M1,#0x00
015D            940   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:166: P1M2=0x00; //Enable pins RxD and Txd
015D 759200     941            mov     _P1M2,#0x00
0160 22         942            ret
0161            943   ;------------------------------------------------------------
0161            944   ;Allocation info for local variables in function 'InitADC'
0161            945   ;------------------------------------------------------------
0161            946   ;------------------------------------------------------------
0161            947   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:169: void InitADC(void)
0161            948   ;        -----------------------------------------
0161            949   ;         function InitADC
0161            950   ;        -----------------------------------------
0161            951   _InitADC:
0161            952   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:173: P0M1 |= (P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0161 43841E     953            orl     _P0M1,#0x1E
0164            954   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:174: P0M2 &= ~(P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0164 5385E1     955            anl     _P0M2,#0xE1
0167            956   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:177: BURST1=1; //Autoscan continuous conversion mode
0167 D2C6       957            setb    _BURST1
0169            958   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:178: ADMODB = CLK0; //ADC1 clock is 7.3728MHz/2
0169 75A120     959            mov     _ADMODB,#0x20
016C            960   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:179: ADINS  = (ADI13|ADI12|ADI11|ADI10); // Select the four channels for conversion
016C 75A3F0     961            mov     _ADINS,#0xF0
016F            962   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:180: ADCON1 = (ENADC1|ADCS10); //Enable the converter and start immediately
016F 759705     963            mov     _ADCON1,#0x05
0172            964   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:181: while((ADCI1&ADCON1)==0); //Wait for first conversion to complete
0172            965   L013001?:
0172 E597       966            mov     a,_ADCON1
0174 30E328     967            jnb     acc.3,L013001?
0177 22         968            ret
0178            969   ;------------------------------------------------------------
0178            970   ;Allocation info for local variables in function 'InitTimer0'
0178            971   ;------------------------------------------------------------
0178            972   ;------------------------------------------------------------
0178            973   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:184: void InitTimer0 (void)
0178            974   ;        -----------------------------------------
0178            975   ;         function InitTimer0
0178            976   ;        -----------------------------------------
0178            977   _InitTimer0:
0178            978   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:188: TR0=0; // Stop timer 0
0178 C28C       979            clr     _TR0
017A            980   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:189: TMOD=(TMOD&0xf0)|0x01; // 16-bit timer
017A 74F0       981            mov     a,#0xF0
017C 5589       982            anl     a,_TMOD
017E 4401       983            orl     a,#0x01
0180 F589       984            mov     _TMOD,a
0182            985   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:190: TH0=TIMER0_RELOAD_VALUE/0x100; // I think the RHS is 0001 0000 0000, are we dividing?
0182 758CFE     986            mov     _TH0,#0xFE
0185            987   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:191: TL0=TIMER0_RELOAD_VALUE%0x100; // % means modulo, apparently? ...are we modulo-ing?
0185 758A90     988            mov     _TL0,#0x90
0188            989   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:192: TR0=1; // Start timer 0 (bit 4 in TCON)
0188 D28C       990            setb    _TR0
018A            991   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:193: ET0=1; // Enable timer 0 interrupt - the interrupt controller IEN0 is bit-adressable, so we change only the bit we need
018A D2A9       992            setb    _ET0
018C            993   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:194: EA=1;  // Enable global interrupts
018C D2AF       994            setb    _EA
018E 22         995            ret
018F            996   ;------------------------------------------------------------
018F            997   ;Allocation info for local variables in function 'Timer0ISR'
018F            998   ;------------------------------------------------------------
018F            999   ;------------------------------------------------------------
018F           1000   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:198: void Timer0ISR (void) interrupt 1{
018F           1001   ;        -----------------------------------------
018F           1002   ;         function Timer0ISR
018F           1003   ;        -----------------------------------------
018F           1004   _Timer0ISR:
018F C0E0      1005            push    acc
0191 C0D0      1006            push    psw
0193 75D000    1007            mov     psw,#0x00
0196           1008   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:200: TR0=0; // Stop timer 0
0196 C28C      1009            clr     _TR0
0198           1010   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:201: TH0=TIMER0_RELOAD_VALUE/0x100;
0198 758CFE    1011            mov     _TH0,#0xFE
019B           1012   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:202: TL0=TIMER0_RELOAD_VALUE%0x100;
019B 758A90    1013            mov     _TL0,#0x90
019E           1014   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:203: TR0=1; // Start timer 0
019E D28C      1015            setb    _TR0
01A0           1016   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:205: if(++pwmcount>99) pwmcount=0;
01A0 05C8      1017            inc     _pwmcount
01A2 E5C8      1018            mov     a,_pwmcount
01A4 249C      1019            add     a,#0xff - 0x63
01A6 5001      1020            jnc     L015002?
01A8 75C800    1021            mov     _pwmcount,#0x00
01AB           1022   L015002?:
01AB           1023   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:206: P0_5=(pwm_left>pwmcount)?1:0;
01AB C3        1024            clr     c
01AC E5C8      1025            mov     a,_pwmcount
01AE 9588      1026            subb    a,_pwm_left
01B0 9285      1027            mov     _P0_5,c
01B2           1028   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:207: P0_6=(pwm_right>pwmcount)?1:0;
01B2 C3        1029            clr     c
01B3 E5C8      1030            mov     a,_pwmcount
01B5 9548      1031            subb    a,_pwm_right
01B7 9286      1032            mov     _P0_6,c
01B9           1033   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:209: msCount++;
01B9 7401      1034            mov     a,#0x01
01BB 2588      1035            add     a,_msCount
01BD F588      1036            mov     _msCount,a
01BF E4        1037            clr     a
01C0 3589      1038            addc    a,(_msCount + 1)
01C2 F589      1039            mov     (_msCount + 1),a
01C4           1040   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:210: if(msCount==10000)
01C4 7410      1041            mov     a,#0x10
01C6 B58828    1042            cjne    a,_msCount,L015008?
01C9 7427      1043            mov     a,#0x27
01CB B58928    1044            cjne    a,(_msCount + 1),L015008?
01CE           1045   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:212: time_update_flag=1;
01CE D278      1046            setb    _time_update_flag
01D0           1047   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:213: msCount=0;
01D0 E4        1048            clr     a
01D1 F588      1049            mov     _msCount,a
01D3 F589      1050            mov     (_msCount + 1),a
01D5           1051   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:214: secs++;
01D5 0548      1052            inc     _secs
01D7           1053   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:215: if(secs==60)
01D7 743C      1054            mov     a,#0x3C
01D9 B54828    1055            cjne    a,_secs,L015008?
01DC           1056   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:217: secs=0;
01DC 754800    1057            mov     _secs,#0x00
01DF           1058   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:218: mins++;
01DF 0508      1059            inc     _mins
01E1           1060   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:219: if(mins==60)
01E1 743C      1061            mov     a,#0x3C
01E3 B50828    1062            cjne    a,_mins,L015008?
01E6           1063   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:221: mins=0;
01E6 750800    1064            mov     _mins,#0x00
01E9           1065   L015008?:
01E9           1066   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:226: if(turn_time_update == 1){
01E9 302868    1067            jnb     _turn_time_update,L015011?
01EC           1068   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:227: turn_timer++;
01EC 7401      1069            mov     a,#0x01
01EE 2508      1070            add     a,_turn_timer
01F0 F508      1071            mov     _turn_timer,a
01F2 E4        1072            clr     a
01F3 3509      1073            addc    a,(_turn_timer + 1)
01F5 F509      1074            mov     (_turn_timer + 1),a
01F7           1075   L015011?:
01F7 D0D0      1076            pop     psw
01F9 D0E0      1077            pop     acc
01FB 32        1078            reti
01FC           1079   ;        eliminated unneeded push/pop dpl
01FC           1080   ;        eliminated unneeded push/pop dph
01FC           1081   ;        eliminated unneeded push/pop b
01FC           1082   ;------------------------------------------------------------
01FC           1083   ;Allocation info for local variables in function 'display_LCD'
01FC           1084   ;------------------------------------------------------------
01FC           1085   ;buff                      Allocated with name '_display_LCD_buff_1_94'
01FC           1086   ;------------------------------------------------------------
01FC           1087   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:231: void display_LCD(void){
01FC           1088   ;        -----------------------------------------
01FC           1089   ;         function display_LCD
01FC           1090   ;        -----------------------------------------
01FC           1091   _display_LCD:
01FC           1092   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:234: time_update_flag=0;
01FC C278      1093            clr     _time_update_flag
01FE           1094   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:241: sprintf(buff, "L=%5.2f R:%5.2f", (AD1DAT1/255.0)*3.3, (AD1DAT2/255.0)*3.3); //Display Left and Right Sensor
01FE 85D782    1095            mov     dpl,_AD1DAT2
0201 120100    1096            lcall   ___uchar2fs
0204 AA82      1097            mov     r2,dpl
0206 AB83      1098            mov     r3,dph
0208 ACF0      1099            mov     r4,b
020A FD        1100            mov     r5,a
020B E4        1101            clr     a
020C C0E0      1102            push    acc
020E C0E0      1103            push    acc
0210 747F      1104            mov     a,#0x7F
0212 C0E0      1105            push    acc
0214 7443      1106            mov     a,#0x43
0216 C0E0      1107            push    acc
0218 8A82      1108            mov     dpl,r2
021A 8B83      1109            mov     dph,r3
021C 8CF0      1110            mov     b,r4
021E ED        1111            mov     a,r5
021F 120100    1112            lcall   ___fsdiv
0222 AA82      1113            mov     r2,dpl
0224 AB83      1114            mov     r3,dph
0226 ACF0      1115            mov     r4,b
0228 FD        1116            mov     r5,a
0229 E581      1117            mov     a,sp
022B 24FC      1118            add     a,#0xfc
022D F581      1119            mov     sp,a
022F C002      1120            push    ar2
0231 C003      1121            push    ar3
0233 C004      1122            push    ar4
0235 C005      1123            push    ar5
0237 903333    1124            mov     dptr,#0x3333
023A 75F053    1125            mov     b,#0x53
023D 7440      1126            mov     a,#0x40
023F 120100    1127            lcall   ___fsmul
0242 AA82      1128            mov     r2,dpl
0244 AB83      1129            mov     r3,dph
0246 ACF0      1130            mov     r4,b
0248 FD        1131            mov     r5,a
0249 E581      1132            mov     a,sp
024B 24FC      1133            add     a,#0xfc
024D F581      1134            mov     sp,a
024F 85D682    1135            mov     dpl,_AD1DAT1
0252 C002      1136            push    ar2
0254 C003      1137            push    ar3
0256 C004      1138            push    ar4
0258 C005      1139            push    ar5
025A 120100    1140            lcall   ___uchar2fs
025D AE82      1141            mov     r6,dpl
025F AF83      1142            mov     r7,dph
0261 A8F0      1143            mov     r0,b
0263 F9        1144            mov     r1,a
0264 E4        1145            clr     a
0265 C0E0      1146            push    acc
0267 C0E0      1147            push    acc
0269 747F      1148            mov     a,#0x7F
026B C0E0      1149            push    acc
026D 7443      1150            mov     a,#0x43
026F C0E0      1151            push    acc
0271 8E82      1152            mov     dpl,r6
0273 8F83      1153            mov     dph,r7
0275 88F0      1154            mov     b,r0
0277 E9        1155            mov     a,r1
0278 120100    1156            lcall   ___fsdiv
027B AE82      1157            mov     r6,dpl
027D AF83      1158            mov     r7,dph
027F A8F0      1159            mov     r0,b
0281 F9        1160            mov     r1,a
0282 E581      1161            mov     a,sp
0284 24FC      1162            add     a,#0xfc
0286 F581      1163            mov     sp,a
0288 C006      1164            push    ar6
028A C007      1165            push    ar7
028C C000      1166            push    ar0
028E C001      1167            push    ar1
0290 903333    1168            mov     dptr,#0x3333
0293 75F053    1169            mov     b,#0x53
0296 7440      1170            mov     a,#0x40
0298 120100    1171            lcall   ___fsmul
029B AE82      1172            mov     r6,dpl
029D AF83      1173            mov     r7,dph
029F A8F0      1174            mov     r0,b
02A1 F9        1175            mov     r1,a
02A2 E581      1176            mov     a,sp
02A4 24FC      1177            add     a,#0xfc
02A6 F581      1178            mov     sp,a
02A8 C006      1179            push    ar6
02AA C007      1180            push    ar7
02AC C000      1181            push    ar0
02AE C001      1182            push    ar1
02B0 74A8      1183            mov     a,#__str_0
02B2 C0E0      1184            push    acc
02B4 74AD      1185            mov     a,#(__str_0 >> 8)
02B6 C0E0      1186            push    acc
02B8 7480      1187            mov     a,#0x80
02BA C0E0      1188            push    acc
02BC 7418      1189            mov     a,#_display_LCD_buff_1_94
02BE C0E0      1190            push    acc
02C0 74A0      1191            mov     a,#(_display_LCD_buff_1_94 >> 8)
02C2 C0E0      1192            push    acc
02C4 7440      1193            mov     a,#0x40
02C6 C0E0      1194            push    acc
02C8 120100    1195            lcall   _sprintf
02CB E581      1196            mov     a,sp
02CD 24F2      1197            add     a,#0xf2
02CF F581      1198            mov     sp,a
02D1           1199   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:242: LCDprint(buff, 1, 1);
02D1 75C801    1200            mov     _LCDprint_PARM_2,#0x01
02D4 D298      1201            setb    _LCDprint_PARM_3
02D6 90A018    1202            mov     dptr,#_display_LCD_buff_1_94
02D9 75F040    1203            mov     b,#0x40
02DC 120100    1204            lcall   _LCDprint
02DF           1205   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:243: sprintf(buff, "LM=%d RM=%d", pwm_left, pwm_right); // Display Motor Values
02DF AA48      1206            mov     r2,_pwm_right
02E1 7B00      1207            mov     r3,#0x00
02E3 AC88      1208            mov     r4,_pwm_left
02E5 7D00      1209            mov     r5,#0x00
02E7 C002      1210            push    ar2
02E9 C003      1211            push    ar3
02EB C004      1212            push    ar4
02ED C005      1213            push    ar5
02EF 7428      1214            mov     a,#__str_1
02F1 C0E0      1215            push    acc
02F3 74AE      1216            mov     a,#(__str_1 >> 8)
02F5 C0E0      1217            push    acc
02F7 7480      1218            mov     a,#0x80
02F9 C0E0      1219            push    acc
02FB 7418      1220            mov     a,#_display_LCD_buff_1_94
02FD C0E0      1221            push    acc
02FF 74A0      1222            mov     a,#(_display_LCD_buff_1_94 >> 8)
0301 C0E0      1223            push    acc
0303 7440      1224            mov     a,#0x40
0305 C0E0      1225            push    acc
0307 120100    1226            lcall   _sprintf
030A E581      1227            mov     a,sp
030C 24F6      1228            add     a,#0xf6
030E F581      1229            mov     sp,a
0310           1230   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:244: LCDprint(buff, 2, 1);
0310 75C802    1231            mov     _LCDprint_PARM_2,#0x02
0313 D298      1232            setb    _LCDprint_PARM_3
0315 90A018    1233            mov     dptr,#_display_LCD_buff_1_94
0318 75F040    1234            mov     b,#0x40
031B 020100    1235            ljmp    _LCDprint
031E           1236   ;------------------------------------------------------------
031E           1237   ;Allocation info for local variables in function 'turn_left'
031E           1238   ;------------------------------------------------------------
031E           1239   ;------------------------------------------------------------
031E           1240   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:248: void turn_left(void){
031E           1241   ;        -----------------------------------------
031E           1242   ;         function turn_left
031E           1243   ;        -----------------------------------------
031E           1244   _turn_left:
031E           1245   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:249: turn_timer = 0;
031E E4        1246            clr     a
031F F508      1247            mov     _turn_timer,a
0321 F509      1248            mov     (_turn_timer + 1),a
0323           1249   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:250: turn_time_update = 1;
0323 D228      1250            setb    _turn_time_update
0325           1251   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:251: while(1){
0325           1252   L017004?:
0325           1253   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:252: pwm_left = 20;
0325 758814    1254            mov     _pwm_left,#0x14
0328           1255   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:253: pwm_right = 100;
0328 754864    1256            mov     _pwm_right,#0x64
032B           1257   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:254: if(turn_timer == 2000){
032B 74D0      1258            mov     a,#0xD0
032D B50868    1259            cjne    a,_turn_timer,L017004?
0330 7407      1260            mov     a,#0x07
0332 B50968    1261            cjne    a,(_turn_timer + 1),L017004?
0335           1262   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:255: turn_time_update = 0;
0335 C228      1263            clr     _turn_time_update
0337           1264   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:256: turn_timer = 0;
0337 E4        1265            clr     a
0338 F508      1266            mov     _turn_timer,a
033A F509      1267            mov     (_turn_timer + 1),a
033C           1268   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:257: break;
033C 22        1269            ret
033D           1270   ;------------------------------------------------------------
033D           1271   ;Allocation info for local variables in function 'turn_right'
033D           1272   ;------------------------------------------------------------
033D           1273   ;------------------------------------------------------------
033D           1274   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:261: void turn_right(void){
033D           1275   ;        -----------------------------------------
033D           1276   ;         function turn_right
033D           1277   ;        -----------------------------------------
033D           1278   _turn_right:
033D           1279   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:262: turn_timer = 0;
033D E4        1280            clr     a
033E F508      1281            mov     _turn_timer,a
0340 F509      1282            mov     (_turn_timer + 1),a
0342           1283   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:263: turn_time_update = 1;
0342 D228      1284            setb    _turn_time_update
0344           1285   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:264: while(1){
0344           1286   L018004?:
0344           1287   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:265: pwm_left = 100;
0344 758864    1288            mov     _pwm_left,#0x64
0347           1289   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:266: pwm_right = 20;
0347 754814    1290            mov     _pwm_right,#0x14
034A           1291   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:267: if(turn_timer == 2000){
034A 74D0      1292            mov     a,#0xD0
034C B508A8    1293            cjne    a,_turn_timer,L018004?
034F 7407      1294            mov     a,#0x07
0351 B509A8    1295            cjne    a,(_turn_timer + 1),L018004?
0354           1296   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:268: turn_time_update = 0;
0354 C228      1297            clr     _turn_time_update
0356           1298   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:269: turn_timer = 0;
0356 E4        1299            clr     a
0357 F508      1300            mov     _turn_timer,a
0359 F509      1301            mov     (_turn_timer + 1),a
035B           1302   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:270: break;
035B 22        1303            ret
035C           1304   ;------------------------------------------------------------
035C           1305   ;Allocation info for local variables in function 'stop'
035C           1306   ;------------------------------------------------------------
035C           1307   ;------------------------------------------------------------
035C           1308   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:275: void stop(void){
035C           1309   ;        -----------------------------------------
035C           1310   ;         function stop
035C           1311   ;        -----------------------------------------
035C           1312   _stop:
035C           1313   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:276: while(1){
035C           1314   L019002?:
035C           1315   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:277: pwm_left = 0;
035C 758800    1316            mov     _pwm_left,#0x00
035F           1317   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:278: pwm_right = 0;
035F 754800    1318            mov     _pwm_right,#0x00
0362 8001      1319            sjmp    L019002?
0364           1320   ;------------------------------------------------------------
0364           1321   ;Allocation info for local variables in function 'execute'
0364           1322   ;------------------------------------------------------------
0364           1323   ;command                   Allocated to registers r2 r3 
0364           1324   ;------------------------------------------------------------
0364           1325   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:282: void execute(int command){
0364           1326   ;        -----------------------------------------
0364           1327   ;         function execute
0364           1328   ;        -----------------------------------------
0364           1329   _execute:
0364 AA82      1330            mov     r2,dpl
0366 AB83      1331            mov     r3,dph
0368           1332   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:283: switch(command){
0368 BA0228    1333            cjne    r2,#0x02,L020014?
036B BB0028    1334            cjne    r3,#0x00,L020014?
036E 8001      1335            sjmp    L020001?
0370           1336   L020014?:
0370 BA03A8    1337            cjne    r2,#0x03,L020015?
0373 BB00A8    1338            cjne    r3,#0x00,L020015?
0376 8001      1339            sjmp    L020002?
0378           1340   L020015?:
0378           1341   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:284: case 2:
0378 BA0428    1342            cjne    r2,#0x04,L020008?
037B BB0028    1343            cjne    r3,#0x00,L020008?
037E 8001      1344            sjmp    L020003?
0380           1345   L020001?:
0380           1346   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:285: turn_left();
0380 120100    1347            lcall   _turn_left
0383           1348   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:286: case 3:
0383           1349   L020002?:
0383           1350   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:287: turn_right();
0383 120100    1351            lcall   _turn_right
0386           1352   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:288: case 4:
0386           1353   L020003?:
0386           1354   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:289: if(start == 1){
0386           1355   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:290: start = 0;
0386 10D8A8    1356            jbc     _start,L020017?
0389 8001      1357            sjmp    L020005?
038B           1358   L020017?:
038B 22        1359            ret
038C           1360   L020005?:
038C           1361   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:293: stop();
038C           1362   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:295: }
038C 020100    1363            ljmp    _stop
038F           1364   L020008?:
038F 22        1365            ret
0390           1366   ;------------------------------------------------------------
0390           1367   ;Allocation info for local variables in function 'main'
0390           1368   ;------------------------------------------------------------
0390           1369   ;cor                       Allocated with name '_main_cor_1_112'
0390           1370   ;cur_error                 Allocated with name '_main_cur_error_1_112'
0390           1371   ;pre_error                 Allocated with name '_main_pre_error_1_112'
0390           1372   ;thresh                    Allocated to registers 
0390           1373   ;left                      Allocated with name '_main_left_1_112'
0390           1374   ;right                     Allocated with name '_main_right_1_112'
0390           1375   ;line_sensor               Allocated with name '_main_line_sensor_1_112'
0390           1376   ;diff                      Allocated with name '_main_diff_1_112'
0390           1377   ;line_counter              Allocated with name '_main_line_counter_1_112'
0390           1378   ;command                   Allocated with name '_main_command_1_112'
0390           1379   ;state                     Allocated with name '_main_state_1_112'
0390           1380   ;------------------------------------------------------------
0390           1381   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:298: void main (void){
0390           1382   ;        -----------------------------------------
0390           1383   ;         function main
0390           1384   ;        -----------------------------------------
0390           1385   _main:
0390           1386   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:301: double cur_error =0;
0390           1387   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:306: double left = (AD1DAT1/255.0)*3.3;
0390 E4        1388            clr     a
0391 F5A8      1389            mov     _main_cur_error_1_112,a
0393 F5A9      1390            mov     (_main_cur_error_1_112 + 1),a
0395 F5AA      1391            mov     (_main_cur_error_1_112 + 2),a
0397 F5AB      1392            mov     (_main_cur_error_1_112 + 3),a
0399 E5D6      1393            mov     a,_AD1DAT1
039B           1394   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:307: double right = (AD1DAT2/255.0)*3.3;
039B E5D7      1395            mov     a,_AD1DAT2
039D           1396   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:308: double line_sensor = (AD1DAT3/255.0)*3.3;
039D E5F5      1397            mov     a,_AD1DAT3
039F           1398   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:312: int line_counter = 0;
039F           1399   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:313: int command = 0;
039F E4        1400            clr     a
03A0 F588      1401            mov     _main_line_counter_1_112,a
03A2 F589      1402            mov     (_main_line_counter_1_112 + 1),a
03A4 F5D8      1403            mov     _main_command_1_112,a
03A6 F5D9      1404            mov     (_main_command_1_112 + 1),a
03A8           1405   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:314: int state = 1;   
03A8 752801    1406            mov     _main_state_1_112,#0x01
03AB E4        1407            clr     a
03AC F529      1408            mov     (_main_state_1_112 + 1),a
03AE           1409   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:317: InitPorts();
03AE 120100    1410            lcall   _InitPorts
03B1           1411   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:318: LCD_8BIT();
03B1 120100    1412            lcall   _LCD_8BIT
03B4           1413   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:319: InitSerialPort();
03B4 120100    1414            lcall   _InitSerialPort
03B7           1415   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:320: InitADC();
03B7 120100    1416            lcall   _InitADC
03BA           1417   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:321: InitTimer0();
03BA 120100    1418            lcall   _InitTimer0
03BD           1419   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:324: pre_error = 0;
03BD 75F800    1420            mov     _main_pre_error_1_112,#0x00
03C0 75F900    1421            mov     (_main_pre_error_1_112 + 1),#0x00
03C3 75FA00    1422            mov     (_main_pre_error_1_112 + 2),#0x00
03C6 75FB00    1423            mov     (_main_pre_error_1_112 + 3),#0x00
03C9           1424   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:325: while(1)
03C9           1425   L021040?:
03C9           1426   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:335: left = (AD1DAT1/255.0)*3.3;
03C9 85D682    1427            mov     dpl,_AD1DAT1
03CC 120100    1428            lcall   ___uchar2fs
03CF AE82      1429            mov     r6,dpl
03D1 AF83      1430            mov     r7,dph
03D3 A8F0      1431            mov     r0,b
03D5 F9        1432            mov     r1,a
03D6 E4        1433            clr     a
03D7 C0E0      1434            push    acc
03D9 C0E0      1435            push    acc
03DB 747F      1436            mov     a,#0x7F
03DD C0E0      1437            push    acc
03DF 7443      1438            mov     a,#0x43
03E1 C0E0      1439            push    acc
03E3 8E82      1440            mov     dpl,r6
03E5 8F83      1441            mov     dph,r7
03E7 88F0      1442            mov     b,r0
03E9 E9        1443            mov     a,r1
03EA 120100    1444            lcall   ___fsdiv
03ED AE82      1445            mov     r6,dpl
03EF AF83      1446            mov     r7,dph
03F1 A8F0      1447            mov     r0,b
03F3 F9        1448            mov     r1,a
03F4 E581      1449            mov     a,sp
03F6 24FC      1450            add     a,#0xfc
03F8 F581      1451            mov     sp,a
03FA C006      1452            push    ar6
03FC C007      1453            push    ar7
03FE C000      1454            push    ar0
0400 C001      1455            push    ar1
0402 903333    1456            mov     dptr,#0x3333
0405 75F053    1457            mov     b,#0x53
0408 7440      1458            mov     a,#0x40
040A 120100    1459            lcall   ___fsmul
040D 858248    1460            mov     _main_left_1_112,dpl
0410 858349    1461            mov     (_main_left_1_112 + 1),dph
0413 85F04A    1462            mov     (_main_left_1_112 + 2),b
0416 F54B      1463            mov     (_main_left_1_112 + 3),a
0418 E581      1464            mov     a,sp
041A 24FC      1465            add     a,#0xfc
041C F581      1466            mov     sp,a
041E           1467   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:336: right = (AD1DAT2/255.0)*3.3;
041E 85D782    1468            mov     dpl,_AD1DAT2
0421 120100    1469            lcall   ___uchar2fs
0424 AA82      1470            mov     r2,dpl
0426 AB83      1471            mov     r3,dph
0428 ACF0      1472            mov     r4,b
042A FD        1473            mov     r5,a
042B E4        1474            clr     a
042C C0E0      1475            push    acc
042E C0E0      1476            push    acc
0430 747F      1477            mov     a,#0x7F
0432 C0E0      1478            push    acc
0434 7443      1479            mov     a,#0x43
0436 C0E0      1480            push    acc
0438 8A82      1481            mov     dpl,r2
043A 8B83      1482            mov     dph,r3
043C 8CF0      1483            mov     b,r4
043E ED        1484            mov     a,r5
043F 120100    1485            lcall   ___fsdiv
0442 AA82      1486            mov     r2,dpl
0444 AB83      1487            mov     r3,dph
0446 ACF0      1488            mov     r4,b
0448 FD        1489            mov     r5,a
0449 E581      1490            mov     a,sp
044B 24FC      1491            add     a,#0xfc
044D F581      1492            mov     sp,a
044F C002      1493            push    ar2
0451 C003      1494            push    ar3
0453 C004      1495            push    ar4
0455 C005      1496            push    ar5
0457 903333    1497            mov     dptr,#0x3333
045A 75F053    1498            mov     b,#0x53
045D 7440      1499            mov     a,#0x40
045F 120100    1500            lcall   ___fsmul
0462 858298    1501            mov     _main_right_1_112,dpl
0465 858399    1502            mov     (_main_right_1_112 + 1),dph
0468 85F09A    1503            mov     (_main_right_1_112 + 2),b
046B F59B      1504            mov     (_main_right_1_112 + 3),a
046D E581      1505            mov     a,sp
046F 24FC      1506            add     a,#0xfc
0471 F581      1507            mov     sp,a
0473           1508   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:337: line_sensor = (AD1DAT3/255.0)*3.3;
0473 85F582    1509            mov     dpl,_AD1DAT3
0476 120100    1510            lcall   ___uchar2fs
0479 AA82      1511            mov     r2,dpl
047B AB83      1512            mov     r3,dph
047D ACF0      1513            mov     r4,b
047F FD        1514            mov     r5,a
0480 E4        1515            clr     a
0481 C0E0      1516            push    acc
0483 C0E0      1517            push    acc
0485 747F      1518            mov     a,#0x7F
0487 C0E0      1519            push    acc
0489 7443      1520            mov     a,#0x43
048B C0E0      1521            push    acc
048D 8A82      1522            mov     dpl,r2
048F 8B83      1523            mov     dph,r3
0491 8CF0      1524            mov     b,r4
0493 ED        1525            mov     a,r5
0494 120100    1526            lcall   ___fsdiv
0497 AA82      1527            mov     r2,dpl
0499 AB83      1528            mov     r3,dph
049B ACF0      1529            mov     r4,b
049D FD        1530            mov     r5,a
049E E581      1531            mov     a,sp
04A0 24FC      1532            add     a,#0xfc
04A2 F581      1533            mov     sp,a
04A4 C002      1534            push    ar2
04A6 C003      1535            push    ar3
04A8 C004      1536            push    ar4
04AA C005      1537            push    ar5
04AC 903333    1538            mov     dptr,#0x3333
04AF 75F053    1539            mov     b,#0x53
04B2 7440      1540            mov     a,#0x40
04B4 120100    1541            lcall   ___fsmul
04B7 8582E8    1542            mov     _main_line_sensor_1_112,dpl
04BA 8583E9    1543            mov     (_main_line_sensor_1_112 + 1),dph
04BD 85F0EA    1544            mov     (_main_line_sensor_1_112 + 2),b
04C0 F5EB      1545            mov     (_main_line_sensor_1_112 + 3),a
04C2 E581      1546            mov     a,sp
04C4 24FC      1547            add     a,#0xfc
04C6 F581      1548            mov     sp,a
04C8           1549   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:338: diff = left - right;
04C8 C098      1550            push    _main_right_1_112
04CA C099      1551            push    (_main_right_1_112 + 1)
04CC C09A      1552            push    (_main_right_1_112 + 2)
04CE C09B      1553            push    (_main_right_1_112 + 3)
04D0 854882    1554            mov     dpl,_main_left_1_112
04D3 854983    1555            mov     dph,(_main_left_1_112 + 1)
04D6 854AF0    1556            mov     b,(_main_left_1_112 + 2)
04D9 E54B      1557            mov     a,(_main_left_1_112 + 3)
04DB 120100    1558            lcall   ___fssub
04DE 858238    1559            mov     _main_diff_1_112,dpl
04E1 858339    1560            mov     (_main_diff_1_112 + 1),dph
04E4 85F03A    1561            mov     (_main_diff_1_112 + 2),b
04E7 F53B      1562            mov     (_main_diff_1_112 + 3),a
04E9 E581      1563            mov     a,sp
04EB 24FC      1564            add     a,#0xfc
04ED F581      1565            mov     sp,a
04EF           1566   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:341: if(time_update_flag==1) // If the clock has been updated, refresh the display
04EF 3078A8    1567            jnb     _time_update_flag,L021002?
04F2           1568   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:343: display_LCD();
04F2 120100    1569            lcall   _display_LCD
04F5           1570   L021002?:
04F5           1571   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:347: cor = KP * cur_error + KD*abs(cur_error - pre_error);
04F5 C0A8      1572            push    _main_cur_error_1_112
04F7 C0A9      1573            push    (_main_cur_error_1_112 + 1)
04F9 C0AA      1574            push    (_main_cur_error_1_112 + 2)
04FB C0AB      1575            push    (_main_cur_error_1_112 + 3)
04FD 900000    1576            mov     dptr,#0x0000
0500 75F0C8    1577            mov     b,#0xC8
0503 7441      1578            mov     a,#0x41
0505 120100    1579            lcall   ___fsmul
0508 AA82      1580            mov     r2,dpl
050A AB83      1581            mov     r3,dph
050C ACF0      1582            mov     r4,b
050E FD        1583            mov     r5,a
050F E581      1584            mov     a,sp
0511 24FC      1585            add     a,#0xfc
0513 F581      1586            mov     sp,a
0515 C002      1587            push    ar2
0517 C003      1588            push    ar3
0519 C004      1589            push    ar4
051B C005      1590            push    ar5
051D C0F8      1591            push    _main_pre_error_1_112
051F C0F9      1592            push    (_main_pre_error_1_112 + 1)
0521 C0FA      1593            push    (_main_pre_error_1_112 + 2)
0523 C0FB      1594            push    (_main_pre_error_1_112 + 3)
0525 85A882    1595            mov     dpl,_main_cur_error_1_112
0528 85A983    1596            mov     dph,(_main_cur_error_1_112 + 1)
052B 85AAF0    1597            mov     b,(_main_cur_error_1_112 + 2)
052E E5AB      1598            mov     a,(_main_cur_error_1_112 + 3)
0530 120100    1599            lcall   ___fssub
0533 AE82      1600            mov     r6,dpl
0535 AF83      1601            mov     r7,dph
0537 A8F0      1602            mov     r0,b
0539 F9        1603            mov     r1,a
053A E581      1604            mov     a,sp
053C 24FC      1605            add     a,#0xfc
053E F581      1606            mov     sp,a
0540 8E82      1607            mov     dpl,r6
0542 8F83      1608            mov     dph,r7
0544 88F0      1609            mov     b,r0
0546 E9        1610            mov     a,r1
0547 120100    1611            lcall   ___fs2sint
054A 120100    1612            lcall   _abs
054D 858200    1613            mov     __mulint_PARM_2,dpl
0550 858301    1614            mov     (__mulint_PARM_2 + 1),dph
0553 900005    1615            mov     dptr,#0x0005
0556 120100    1616            lcall   __mulint
0559 120100    1617            lcall   ___sint2fs
055C AE82      1618            mov     r6,dpl
055E AF83      1619            mov     r7,dph
0560 A8F0      1620            mov     r0,b
0562 F9        1621            mov     r1,a
0563 D005      1622            pop     ar5
0565 D004      1623            pop     ar4
0567 D003      1624            pop     ar3
0569 D002      1625            pop     ar2
056B C006      1626            push    ar6
056D C007      1627            push    ar7
056F C000      1628            push    ar0
0571 C001      1629            push    ar1
0573 8A82      1630            mov     dpl,r2
0575 8B83      1631            mov     dph,r3
0577 8CF0      1632            mov     b,r4
0579 ED        1633            mov     a,r5
057A 120100    1634            lcall   ___fsadd
057D 858258    1635            mov     _main_cor_1_112,dpl
0580 858359    1636            mov     (_main_cor_1_112 + 1),dph
0583 85F05A    1637            mov     (_main_cor_1_112 + 2),b
0586 F55B      1638            mov     (_main_cor_1_112 + 3),a
0588 E581      1639            mov     a,sp
058A 24FC      1640            add     a,#0xfc
058C F581      1641            mov     sp,a
058E           1642   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:349: if((left > 0.85) && (left < 1.15) && (right > 0.85) && (right < 1.15)){
058E 749A      1643            mov     a,#0x9A
0590 C0E0      1644            push    acc
0592 7499      1645            mov     a,#0x99
0594 C0E0      1646            push    acc
0596 7459      1647            mov     a,#0x59
0598 C0E0      1648            push    acc
059A 743F      1649            mov     a,#0x3F
059C C0E0      1650            push    acc
059E 854882    1651            mov     dpl,_main_left_1_112
05A1 854983    1652            mov     dph,(_main_left_1_112 + 1)
05A4 854AF0    1653            mov     b,(_main_left_1_112 + 2)
05A7 E54B      1654            mov     a,(_main_left_1_112 + 3)
05A9 120100    1655            lcall   ___fsgt
05AC AE82      1656            mov     r6,dpl
05AE E581      1657            mov     a,sp
05B0 24FC      1658            add     a,#0xfc
05B2 F581      1659            mov     sp,a
05B4 EE        1660            mov     a,r6
05B5 7001      1661            jnz     L021068?
05B7 020100    1662            ljmp    L021004?
05BA           1663   L021068?:
05BA 7433      1664            mov     a,#0x33
05BC C0E0      1665            push    acc
05BE C0E0      1666            push    acc
05C0 7493      1667            mov     a,#0x93
05C2 C0E0      1668            push    acc
05C4 743F      1669            mov     a,#0x3F
05C6 C0E0      1670            push    acc
05C8 854882    1671            mov     dpl,_main_left_1_112
05CB 854983    1672            mov     dph,(_main_left_1_112 + 1)
05CE 854AF0    1673            mov     b,(_main_left_1_112 + 2)
05D1 E54B      1674            mov     a,(_main_left_1_112 + 3)
05D3 120100    1675            lcall   ___fslt
05D6 AE82      1676            mov     r6,dpl
05D8 E581      1677            mov     a,sp
05DA 24FC      1678            add     a,#0xfc
05DC F581      1679            mov     sp,a
05DE EE        1680            mov     a,r6
05DF 6001      1681            jz      L021004?
05E1 749A      1682            mov     a,#0x9A
05E3 C0E0      1683            push    acc
05E5 7499      1684            mov     a,#0x99
05E7 C0E0      1685            push    acc
05E9 7459      1686            mov     a,#0x59
05EB C0E0      1687            push    acc
05ED 743F      1688            mov     a,#0x3F
05EF C0E0      1689            push    acc
05F1 859882    1690            mov     dpl,_main_right_1_112
05F4 859983    1691            mov     dph,(_main_right_1_112 + 1)
05F7 859AF0    1692            mov     b,(_main_right_1_112 + 2)
05FA E59B      1693            mov     a,(_main_right_1_112 + 3)
05FC 120100    1694            lcall   ___fsgt
05FF AE82      1695            mov     r6,dpl
0601 E581      1696            mov     a,sp
0603 24FC      1697            add     a,#0xfc
0605 F581      1698            mov     sp,a
0607 EE        1699            mov     a,r6
0608 6001      1700            jz      L021004?
060A 7433      1701            mov     a,#0x33
060C C0E0      1702            push    acc
060E C0E0      1703            push    acc
0610 7493      1704            mov     a,#0x93
0612 C0E0      1705            push    acc
0614 743F      1706            mov     a,#0x3F
0616 C0E0      1707            push    acc
0618 859882    1708            mov     dpl,_main_right_1_112
061B 859983    1709            mov     dph,(_main_right_1_112 + 1)
061E 859AF0    1710            mov     b,(_main_right_1_112 + 2)
0621 E59B      1711            mov     a,(_main_right_1_112 + 3)
0623 120100    1712            lcall   ___fslt
0626 AE82      1713            mov     r6,dpl
0628 E581      1714            mov     a,sp
062A 24FC      1715            add     a,#0xfc
062C F581      1716            mov     sp,a
062E EE        1717            mov     a,r6
062F 6001      1718            jz      L021004?
0631           1719   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:350: cur_error = 0;
0631 75A800    1720            mov     _main_cur_error_1_112,#0x00
0634 75A900    1721            mov     (_main_cur_error_1_112 + 1),#0x00
0637 75AA00    1722            mov     (_main_cur_error_1_112 + 2),#0x00
063A 75AB00    1723            mov     (_main_cur_error_1_112 + 3),#0x00
063D           1724   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:351: pwm_left = 100;
063D 758864    1725            mov     _pwm_left,#0x64
0640           1726   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:352: pwm_right = 100;
0640 754864    1727            mov     _pwm_right,#0x64
0643           1728   L021004?:
0643           1729   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:354: if(0.5<diff){    
0643 C038      1730            push    _main_diff_1_112
0645 C039      1731            push    (_main_diff_1_112 + 1)
0647 C03A      1732            push    (_main_diff_1_112 + 2)
0649 C03B      1733            push    (_main_diff_1_112 + 3)
064B 900000    1734            mov     dptr,#(0x00&0x00ff)
064E E4        1735            clr     a
064F F5F0      1736            mov     b,a
0651 743F      1737            mov     a,#0x3F
0653 120100    1738            lcall   ___fslt
0656 AE82      1739            mov     r6,dpl
0658 E581      1740            mov     a,sp
065A 24FC      1741            add     a,#0xfc
065C F581      1742            mov     sp,a
065E EE        1743            mov     a,r6
065F 6001      1744            jz      L021009?
0661           1745   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:355: cur_error = 3;
0661 75A800    1746            mov     _main_cur_error_1_112,#0x00
0664 75A900    1747            mov     (_main_cur_error_1_112 + 1),#0x00
0667 75AA40    1748            mov     (_main_cur_error_1_112 + 2),#0x40
066A 75AB40    1749            mov     (_main_cur_error_1_112 + 3),#0x40
066D           1750   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:356: pwm_left = 100 - cor;
066D C058      1751            push    _main_cor_1_112
066F C059      1752            push    (_main_cor_1_112 + 1)
0671 C05A      1753            push    (_main_cor_1_112 + 2)
0673 C05B      1754            push    (_main_cor_1_112 + 3)
0675 900000    1755            mov     dptr,#0x0000
0678 75F0C8    1756            mov     b,#0xC8
067B 7442      1757            mov     a,#0x42
067D 120100    1758            lcall   ___fssub
0680 AE82      1759            mov     r6,dpl
0682 AF83      1760            mov     r7,dph
0684 A8F0      1761            mov     r0,b
0686 F9        1762            mov     r1,a
0687 E581      1763            mov     a,sp
0689 24FC      1764            add     a,#0xfc
068B F581      1765            mov     sp,a
068D 8E82      1766            mov     dpl,r6
068F 8F83      1767            mov     dph,r7
0691 88F0      1768            mov     b,r0
0693 E9        1769            mov     a,r1
0694 120100    1770            lcall   ___fs2uchar
0697 858288    1771            mov     _pwm_left,dpl
069A           1772   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:357: pwm_right = 100;
069A 754864    1773            mov     _pwm_right,#0x64
069D           1774   L021009?:
069D           1775   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:359: if(diff<-0.5){
069D E4        1776            clr     a
069E C0E0      1777            push    acc
06A0 C0E0      1778            push    acc
06A2 C0E0      1779            push    acc
06A4 74BF      1780            mov     a,#0xBF
06A6 C0E0      1781            push    acc
06A8 853882    1782            mov     dpl,_main_diff_1_112
06AB 853983    1783            mov     dph,(_main_diff_1_112 + 1)
06AE 853AF0    1784            mov     b,(_main_diff_1_112 + 2)
06B1 E53B      1785            mov     a,(_main_diff_1_112 + 3)
06B3 120100    1786            lcall   ___fslt
06B6 AE82      1787            mov     r6,dpl
06B8 E581      1788            mov     a,sp
06BA 24FC      1789            add     a,#0xfc
06BC F581      1790            mov     sp,a
06BE EE        1791            mov     a,r6
06BF 6001      1792            jz      L021011?
06C1           1793   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:360: cur_error= -3;
06C1 75A800    1794            mov     _main_cur_error_1_112,#0x00
06C4 75A900    1795            mov     (_main_cur_error_1_112 + 1),#0x00
06C7 75AA40    1796            mov     (_main_cur_error_1_112 + 2),#0x40
06CA 75ABC0    1797            mov     (_main_cur_error_1_112 + 3),#0xC0
06CD           1798   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:361: pwm_left = 100;
06CD 758864    1799            mov     _pwm_left,#0x64
06D0           1800   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:362: pwm_right = 100 + cor;
06D0 E4        1801            clr     a
06D1 C0E0      1802            push    acc
06D3 C0E0      1803            push    acc
06D5 74C8      1804            mov     a,#0xC8
06D7 C0E0      1805            push    acc
06D9 7442      1806            mov     a,#0x42
06DB C0E0      1807            push    acc
06DD 855882    1808            mov     dpl,_main_cor_1_112
06E0 855983    1809            mov     dph,(_main_cor_1_112 + 1)
06E3 855AF0    1810            mov     b,(_main_cor_1_112 + 2)
06E6 E55B      1811            mov     a,(_main_cor_1_112 + 3)
06E8 120100    1812            lcall   ___fsadd
06EB AE82      1813            mov     r6,dpl
06ED AF83      1814            mov     r7,dph
06EF A8F0      1815            mov     r0,b
06F1 F9        1816            mov     r1,a
06F2 E581      1817            mov     a,sp
06F4 24FC      1818            add     a,#0xfc
06F6 F581      1819            mov     sp,a
06F8 8E82      1820            mov     dpl,r6
06FA 8F83      1821            mov     dph,r7
06FC 88F0      1822            mov     b,r0
06FE E9        1823            mov     a,r1
06FF 120100    1824            lcall   ___fs2uchar
0702 858248    1825            mov     _pwm_right,dpl
0705           1826   L021011?:
0705           1827   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:364: if(1<diff){      
0705 C038      1828            push    _main_diff_1_112
0707 C039      1829            push    (_main_diff_1_112 + 1)
0709 C03A      1830            push    (_main_diff_1_112 + 2)
070B C03B      1831            push    (_main_diff_1_112 + 3)
070D 900000    1832            mov     dptr,#0x0000
0710 75F080    1833            mov     b,#0x80
0713 743F      1834            mov     a,#0x3F
0715 120100    1835            lcall   ___fslt
0718 AE82      1836            mov     r6,dpl
071A E581      1837            mov     a,sp
071C 24FC      1838            add     a,#0xfc
071E F581      1839            mov     sp,a
0720 EE        1840            mov     a,r6
0721 6001      1841            jz      L021013?
0723           1842   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:365: cur_error = 5;
0723 75A800    1843            mov     _main_cur_error_1_112,#0x00
0726 75A900    1844            mov     (_main_cur_error_1_112 + 1),#0x00
0729 75AAA0    1845            mov     (_main_cur_error_1_112 + 2),#0xA0
072C 75AB40    1846            mov     (_main_cur_error_1_112 + 3),#0x40
072F           1847   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:366: pwm_left = 100 - cor;
072F C058      1848            push    _main_cor_1_112
0731 C059      1849            push    (_main_cor_1_112 + 1)
0733 C05A      1850            push    (_main_cor_1_112 + 2)
0735 C05B      1851            push    (_main_cor_1_112 + 3)
0737 900000    1852            mov     dptr,#0x0000
073A 75F0C8    1853            mov     b,#0xC8
073D 7442      1854            mov     a,#0x42
073F 120100    1855            lcall   ___fssub
0742 AE82      1856            mov     r6,dpl
0744 AF83      1857            mov     r7,dph
0746 A8F0      1858            mov     r0,b
0748 F9        1859            mov     r1,a
0749 E581      1860            mov     a,sp
074B 24FC      1861            add     a,#0xfc
074D F581      1862            mov     sp,a
074F 8E82      1863            mov     dpl,r6
0751 8F83      1864            mov     dph,r7
0753 88F0      1865            mov     b,r0
0755 E9        1866            mov     a,r1
0756 120100    1867            lcall   ___fs2uchar
0759 858288    1868            mov     _pwm_left,dpl
075C           1869   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:367: pwm_right = 100;
075C 754864    1870            mov     _pwm_right,#0x64
075F           1871   L021013?:
075F           1872   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:369: if(diff<-1){
075F E4        1873            clr     a
0760 C0E0      1874            push    acc
0762 C0E0      1875            push    acc
0764 7480      1876            mov     a,#0x80
0766 C0E0      1877            push    acc
0768 74BF      1878            mov     a,#0xBF
076A C0E0      1879            push    acc
076C 853882    1880            mov     dpl,_main_diff_1_112
076F 853983    1881            mov     dph,(_main_diff_1_112 + 1)
0772 853AF0    1882            mov     b,(_main_diff_1_112 + 2)
0775 E53B      1883            mov     a,(_main_diff_1_112 + 3)
0777 120100    1884            lcall   ___fslt
077A AE82      1885            mov     r6,dpl
077C E581      1886            mov     a,sp
077E 24FC      1887            add     a,#0xfc
0780 F581      1888            mov     sp,a
0782 EE        1889            mov     a,r6
0783 6001      1890            jz      L021015?
0785           1891   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:370: cur_error= -5;
0785 75A800    1892            mov     _main_cur_error_1_112,#0x00
0788 75A900    1893            mov     (_main_cur_error_1_112 + 1),#0x00
078B 75AAA0    1894            mov     (_main_cur_error_1_112 + 2),#0xA0
078E 75ABC0    1895            mov     (_main_cur_error_1_112 + 3),#0xC0
0791           1896   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:371: pwm_left = 100;
0791 758864    1897            mov     _pwm_left,#0x64
0794           1898   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:372: pwm_right = 100 + cor;
0794 E4        1899            clr     a
0795 C0E0      1900            push    acc
0797 C0E0      1901            push    acc
0799 74C8      1902            mov     a,#0xC8
079B C0E0      1903            push    acc
079D 7442      1904            mov     a,#0x42
079F C0E0      1905            push    acc
07A1 855882    1906            mov     dpl,_main_cor_1_112
07A4 855983    1907            mov     dph,(_main_cor_1_112 + 1)
07A7 855AF0    1908            mov     b,(_main_cor_1_112 + 2)
07AA E55B      1909            mov     a,(_main_cor_1_112 + 3)
07AC 120100    1910            lcall   ___fsadd
07AF AE82      1911            mov     r6,dpl
07B1 AF83      1912            mov     r7,dph
07B3 A8F0      1913            mov     r0,b
07B5 F9        1914            mov     r1,a
07B6 E581      1915            mov     a,sp
07B8 24FC      1916            add     a,#0xfc
07BA F581      1917            mov     sp,a
07BC 8E82      1918            mov     dpl,r6
07BE 8F83      1919            mov     dph,r7
07C0 88F0      1920            mov     b,r0
07C2 E9        1921            mov     a,r1
07C3 120100    1922            lcall   ___fs2uchar
07C6 858248    1923            mov     _pwm_right,dpl
07C9           1924   L021015?:
07C9           1925   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:375: if((left < 0.8) && (right < 0.8)){
07C9 74CD      1926            mov     a,#0xCD
07CB C0E0      1927            push    acc
07CD 74CC      1928            mov     a,#0xCC
07CF C0E0      1929            push    acc
07D1 744C      1930            mov     a,#0x4C
07D3 C0E0      1931            push    acc
07D5 743F      1932            mov     a,#0x3F
07D7 C0E0      1933            push    acc
07D9 854882    1934            mov     dpl,_main_left_1_112
07DC 854983    1935            mov     dph,(_main_left_1_112 + 1)
07DF 854AF0    1936            mov     b,(_main_left_1_112 + 2)
07E2 E54B      1937            mov     a,(_main_left_1_112 + 3)
07E4 120100    1938            lcall   ___fslt
07E7 AE82      1939            mov     r6,dpl
07E9 E581      1940            mov     a,sp
07EB 24FC      1941            add     a,#0xfc
07ED F581      1942            mov     sp,a
07EF EE        1943            mov     a,r6
07F0 7001      1944            jnz     L021076?
07F2 020100    1945            ljmp    L021021?
07F5           1946   L021076?:
07F5 74CD      1947            mov     a,#0xCD
07F7 C0E0      1948            push    acc
07F9 74CC      1949            mov     a,#0xCC
07FB C0E0      1950            push    acc
07FD 744C      1951            mov     a,#0x4C
07FF C0E0      1952            push    acc
0801 743F      1953            mov     a,#0x3F
0803 C0E0      1954            push    acc
0805 859882    1955            mov     dpl,_main_right_1_112
0808 859983    1956            mov     dph,(_main_right_1_112 + 1)
080B 859AF0    1957            mov     b,(_main_right_1_112 + 2)
080E E59B      1958            mov     a,(_main_right_1_112 + 3)
0810 120100    1959            lcall   ___fslt
0813 AE82      1960            mov     r6,dpl
0815 E581      1961            mov     a,sp
0817 24FC      1962            add     a,#0xfc
0819 F581      1963            mov     sp,a
081B EE        1964            mov     a,r6
081C 7001      1965            jnz     L021077?
081E 020100    1966            ljmp    L021021?
0821           1967   L021077?:
0821           1968   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:376: if(pre_error>0){
0821 E4        1969            clr     a
0822 C0E0      1970            push    acc
0824 C0E0      1971            push    acc
0826 C0E0      1972            push    acc
0828 C0E0      1973            push    acc
082A 85F882    1974            mov     dpl,_main_pre_error_1_112
082D 85F983    1975            mov     dph,(_main_pre_error_1_112 + 1)
0830 85FAF0    1976            mov     b,(_main_pre_error_1_112 + 2)
0833 E5FB      1977            mov     a,(_main_pre_error_1_112 + 3)
0835 120100    1978            lcall   ___fsgt
0838 AE82      1979            mov     r6,dpl
083A E581      1980            mov     a,sp
083C 24FC      1981            add     a,#0xfc
083E F581      1982            mov     sp,a
0840 EE        1983            mov     a,r6
0841 6001      1984            jz      L021017?
0843           1985   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:377: cur_error = 5;
0843 75A800    1986            mov     _main_cur_error_1_112,#0x00
0846 75A900    1987            mov     (_main_cur_error_1_112 + 1),#0x00
0849 75AAA0    1988            mov     (_main_cur_error_1_112 + 2),#0xA0
084C 75AB40    1989            mov     (_main_cur_error_1_112 + 3),#0x40
084F           1990   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:378: pwm_left = 100 - cor;
084F C006      1991            push    ar6
0851 C058      1992            push    _main_cor_1_112
0853 C059      1993            push    (_main_cor_1_112 + 1)
0855 C05A      1994            push    (_main_cor_1_112 + 2)
0857 C05B      1995            push    (_main_cor_1_112 + 3)
0859 900000    1996            mov     dptr,#0x0000
085C 75F0C8    1997            mov     b,#0xC8
085F 7442      1998            mov     a,#0x42
0861 120100    1999            lcall   ___fssub
0864 AF82      2000            mov     r7,dpl
0866 A883      2001            mov     r0,dph
0868 A9F0      2002            mov     r1,b
086A FA        2003            mov     r2,a
086B E581      2004            mov     a,sp
086D 24FC      2005            add     a,#0xfc
086F F581      2006            mov     sp,a
0871 8F82      2007            mov     dpl,r7
0873 8883      2008            mov     dph,r0
0875 89F0      2009            mov     b,r1
0877 EA        2010            mov     a,r2
0878 120100    2011            lcall   ___fs2uchar
087B 858288    2012            mov     _pwm_left,dpl
087E D006      2013            pop     ar6
0880           2014   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:379: pwm_right = 100;
0880 754864    2015            mov     _pwm_right,#0x64
0883           2016   L021017?:
0883           2017   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:381: if(pre_error<=0){
0883 EE        2018            mov     a,r6
0884           2019   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:382: cur_error = -5;
0884 7001      2020            jnz     L021021?
0886 F5A8      2021            mov     _main_cur_error_1_112,a
0888 F5A9      2022            mov     (_main_cur_error_1_112 + 1),a
088A 75AAA0    2023            mov     (_main_cur_error_1_112 + 2),#0xA0
088D 75ABC0    2024            mov     (_main_cur_error_1_112 + 3),#0xC0
0890           2025   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:383: pwm_left = 100;
0890 758864    2026            mov     _pwm_left,#0x64
0893           2027   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:384: pwm_right = 100 + cor;
0893 E4        2028            clr     a
0894 C0E0      2029            push    acc
0896 C0E0      2030            push    acc
0898 74C8      2031            mov     a,#0xC8
089A C0E0      2032            push    acc
089C 7442      2033            mov     a,#0x42
089E C0E0      2034            push    acc
08A0 855882    2035            mov     dpl,_main_cor_1_112
08A3 855983    2036            mov     dph,(_main_cor_1_112 + 1)
08A6 855AF0    2037            mov     b,(_main_cor_1_112 + 2)
08A9 E55B      2038            mov     a,(_main_cor_1_112 + 3)
08AB 120100    2039            lcall   ___fsadd
08AE AA82      2040            mov     r2,dpl
08B0 AB83      2041            mov     r3,dph
08B2 ACF0      2042            mov     r4,b
08B4 FD        2043            mov     r5,a
08B5 E581      2044            mov     a,sp
08B7 24FC      2045            add     a,#0xfc
08B9 F581      2046            mov     sp,a
08BB 8A82      2047            mov     dpl,r2
08BD 8B83      2048            mov     dph,r3
08BF 8CF0      2049            mov     b,r4
08C1 ED        2050            mov     a,r5
08C2 120100    2051            lcall   ___fs2uchar
08C5 858248    2052            mov     _pwm_right,dpl
08C8           2053   L021021?:
08C8           2054   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:387: pre_error = cur_error;
08C8 85A8F8    2055            mov     _main_pre_error_1_112,_main_cur_error_1_112
08CB 85A9F9    2056            mov     (_main_pre_error_1_112 + 1),(_main_cur_error_1_112 + 1)
08CE 85AAFA    2057            mov     (_main_pre_error_1_112 + 2),(_main_cur_error_1_112 + 2)
08D1 85ABFB    2058            mov     (_main_pre_error_1_112 + 3),(_main_cur_error_1_112 + 3)
08D4           2059   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:388: printf("Error:%5.2f Left:%5.2f Right:%5.2f Left_Motor:%d Right_Motor:%d                \r", cur_error, left, right, pwm_left, pwm_right);
08D4 AA48      2060            mov     r2,_pwm_right
08D6 7B00      2061            mov     r3,#0x00
08D8 AC88      2062            mov     r4,_pwm_left
08DA 7D00      2063            mov     r5,#0x00
08DC C002      2064            push    ar2
08DE C003      2065            push    ar3
08E0 C004      2066            push    ar4
08E2 C005      2067            push    ar5
08E4 C098      2068            push    _main_right_1_112
08E6 C099      2069            push    (_main_right_1_112 + 1)
08E8 C09A      2070            push    (_main_right_1_112 + 2)
08EA C09B      2071            push    (_main_right_1_112 + 3)
08EC C048      2072            push    _main_left_1_112
08EE C049      2073            push    (_main_left_1_112 + 1)
08F0 C04A      2074            push    (_main_left_1_112 + 2)
08F2 C04B      2075            push    (_main_left_1_112 + 3)
08F4 C0A8      2076            push    _main_cur_error_1_112
08F6 C0A9      2077            push    (_main_cur_error_1_112 + 1)
08F8 C0AA      2078            push    (_main_cur_error_1_112 + 2)
08FA C0AB      2079            push    (_main_cur_error_1_112 + 3)
08FC 74A8      2080            mov     a,#__str_2
08FE C0E0      2081            push    acc
0900 74B6      2082            mov     a,#(__str_2 >> 8)
0902 C0E0      2083            push    acc
0904 7480      2084            mov     a,#0x80
0906 C0E0      2085            push    acc
0908 120100    2086            lcall   _printf
090B E581      2087            mov     a,sp
090D 24ED      2088            add     a,#0xed
090F F581      2089            mov     sp,a
0911           2090   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:391: switch(state){
0911 7401      2091            mov     a,#0x01
0913 B52828    2092            cjne    a,_main_state_1_112,L021080?
0916 E4        2093            clr     a
0917 B52928    2094            cjne    a,(_main_state_1_112 + 1),L021080?
091A 8001      2095            sjmp    L021023?
091C           2096   L021080?:
091C 7402      2097            mov     a,#0x02
091E B528A8    2098            cjne    a,_main_state_1_112,L021081?
0921 E4        2099            clr     a
0922 B529A8    2100            cjne    a,(_main_state_1_112 + 1),L021081?
0925 8001      2101            sjmp    L021026?
0927           2102   L021081?:
0927 7403      2103            mov     a,#0x03
0929 B52828    2104            cjne    a,_main_state_1_112,L021082?
092C E4        2105            clr     a
092D B52928    2106            cjne    a,(_main_state_1_112 + 1),L021082?
0930 020100    2107            ljmp    L021030?
0933           2108   L021082?:
0933 7404      2109            mov     a,#0x04
0935 B528A8    2110            cjne    a,_main_state_1_112,L021083?
0938 E4        2111            clr     a
0939 B529A8    2112            cjne    a,(_main_state_1_112 + 1),L021083?
093C 020100    2113            ljmp    L021037?
093F           2114   L021083?:
093F 020100    2115            ljmp    L021040?
0942           2116   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:392: case 1:
0942           2117   L021023?:
0942           2118   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:393: if(line_sensor >= HI_THRESH){
0942 E4        2119            clr     a
0943 C0E0      2120            push    acc
0945 C0E0      2121            push    acc
0947 7420      2122            mov     a,#0x20
0949 C0E0      2123            push    acc
094B 7441      2124            mov     a,#0x41
094D C0E0      2125            push    acc
094F 85E882    2126            mov     dpl,_main_line_sensor_1_112
0952 85E983    2127            mov     dph,(_main_line_sensor_1_112 + 1)
0955 85EAF0    2128            mov     b,(_main_line_sensor_1_112 + 2)
0958 E5EB      2129            mov     a,(_main_line_sensor_1_112 + 3)
095A 120100    2130            lcall   ___fslt
095D AA82      2131            mov     r2,dpl
095F E581      2132            mov     a,sp
0961 24FC      2133            add     a,#0xfc
0963 F581      2134            mov     sp,a
0965 EA        2135            mov     a,r2
0966 6001      2136            jz      L021084?
0968 020100    2137            ljmp    L021040?
096B           2138   L021084?:
096B           2139   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:394: state = 2;
096B 752802    2140            mov     _main_state_1_112,#0x02
096E E4        2141            clr     a
096F F529      2142            mov     (_main_state_1_112 + 1),a
0971           2143   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:396: break;                           
0971 020100    2144            ljmp    L021040?
0974           2145   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:397: case 2:
0974           2146   L021026?:
0974           2147   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:398: if((LO_THRESH<line_sensor)&&(line_sensor<MID_THRESH)){
0974 C0E8      2148            push    _main_line_sensor_1_112
0976 C0E9      2149            push    (_main_line_sensor_1_112 + 1)
0978 C0EA      2150            push    (_main_line_sensor_1_112 + 2)
097A C0EB      2151            push    (_main_line_sensor_1_112 + 3)
097C 900000    2152            mov     dptr,#(0x00&0x00ff)
097F E4        2153            clr     a
0980 F5F0      2154            mov     b,a
0982 120100    2155            lcall   ___fslt
0985 AA82      2156            mov     r2,dpl
0987 E581      2157            mov     a,sp
0989 24FC      2158            add     a,#0xfc
098B F581      2159            mov     sp,a
098D EA        2160            mov     a,r2
098E 7001      2161            jnz     L021085?
0990 020100    2162            ljmp    L021040?
0993           2163   L021085?:
0993 E4        2164            clr     a
0994 C0E0      2165            push    acc
0996 C0E0      2166            push    acc
0998 74A0      2167            mov     a,#0xA0
099A C0E0      2168            push    acc
099C 7440      2169            mov     a,#0x40
099E C0E0      2170            push    acc
09A0 85E882    2171            mov     dpl,_main_line_sensor_1_112
09A3 85E983    2172            mov     dph,(_main_line_sensor_1_112 + 1)
09A6 85EAF0    2173            mov     b,(_main_line_sensor_1_112 + 2)
09A9 E5EB      2174            mov     a,(_main_line_sensor_1_112 + 3)
09AB 120100    2175            lcall   ___fslt
09AE AA82      2176            mov     r2,dpl
09B0 E581      2177            mov     a,sp
09B2 24FC      2178            add     a,#0xfc
09B4 F581      2179            mov     sp,a
09B6 EA        2180            mov     a,r2
09B7 7001      2181            jnz     L021086?
09B9 020100    2182            ljmp    L021040?
09BC           2183   L021086?:
09BC           2184   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:399: line_counter++;
09BC 0588      2185            inc     _main_line_counter_1_112
09BE E4        2186            clr     a
09BF B588E8    2187            cjne    a,_main_line_counter_1_112,L021087?
09C2 0589      2188            inc     (_main_line_counter_1_112 + 1)
09C4           2189   L021087?:
09C4           2190   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:400: state = 3;
09C4 752803    2191            mov     _main_state_1_112,#0x03
09C7 E4        2192            clr     a
09C8 F529      2193            mov     (_main_state_1_112 + 1),a
09CA           2194   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:402: break;
09CA 020100    2195            ljmp    L021040?
09CD           2196   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:403: case 3:
09CD           2197   L021030?:
09CD           2198   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:404: if(line_sensor<=LO_THRESH){
09CD E4        2199            clr     a
09CE C0E0      2200            push    acc
09D0 C0E0      2201            push    acc
09D2 C0E0      2202            push    acc
09D4 C0E0      2203            push    acc
09D6 85E882    2204            mov     dpl,_main_line_sensor_1_112
09D9 85E983    2205            mov     dph,(_main_line_sensor_1_112 + 1)
09DC 85EAF0    2206            mov     b,(_main_line_sensor_1_112 + 2)
09DF E5EB      2207            mov     a,(_main_line_sensor_1_112 + 3)
09E1 120100    2208            lcall   ___fsgt
09E4 AA82      2209            mov     r2,dpl
09E6 E581      2210            mov     a,sp
09E8 24FC      2211            add     a,#0xfc
09EA F581      2212            mov     sp,a
09EC EA        2213            mov     a,r2
09ED 7001      2214            jnz     L021035?
09EF           2215   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:405: if(line_counter > 1){
09EF C3        2216            clr     c
09F0 7401      2217            mov     a,#0x01
09F2 9588      2218            subb    a,_main_line_counter_1_112
09F4 E4        2219            clr     a
09F5 6480      2220            xrl     a,#0x80
09F7 8589F0    2221            mov     b,(_main_line_counter_1_112 + 1)
09FA 63F080    2222            xrl     b,#0x80
09FD 95F0      2223            subb    a,b
09FF 5001      2224            jnc     L021032?
0A01           2225   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:406: command = line_counter;
0A01 8588D8    2226            mov     _main_command_1_112,_main_line_counter_1_112
0A04 8589D9    2227            mov     (_main_command_1_112 + 1),(_main_line_counter_1_112 + 1)
0A07           2228   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:407: state = 1;
0A07 752801    2229            mov     _main_state_1_112,#0x01
0A0A E4        2230            clr     a
0A0B F529      2231            mov     (_main_state_1_112 + 1),a
0A0D 8001      2232            sjmp    L021033?
0A0F           2233   L021032?:
0A0F           2234   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:410: state = 4;
0A0F 752804    2235            mov     _main_state_1_112,#0x04
0A12 E4        2236            clr     a
0A13 F529      2237            mov     (_main_state_1_112 + 1),a
0A15           2238   L021033?:
0A15           2239   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:412: line_counter = 0;
0A15 E4        2240            clr     a
0A16 F588      2241            mov     _main_line_counter_1_112,a
0A18 F589      2242            mov     (_main_line_counter_1_112 + 1),a
0A1A 020100    2243            ljmp    L021040?
0A1D           2244   L021035?:
0A1D           2245   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:415: state = 1;
0A1D 752801    2246            mov     _main_state_1_112,#0x01
0A20 E4        2247            clr     a
0A21 F529      2248            mov     (_main_state_1_112 + 1),a
0A23           2249   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:416: break;
0A23 020100    2250            ljmp    L021040?
0A26           2251   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:417: case 4:
0A26           2252   L021037?:
0A26           2253   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:418: execute(command);
0A26 85D882    2254            mov     dpl,_main_command_1_112
0A29 85D983    2255            mov     dph,(_main_command_1_112 + 1)
0A2C 120100    2256            lcall   _execute
0A2F           2257   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:419: state = 1;
0A2F 752801    2258            mov     _main_state_1_112,#0x01
0A32 E4        2259            clr     a
0A33 F529      2260            mov     (_main_state_1_112 + 1),a
0A35           2261   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:421: }
0A35 020100    2262            ljmp    L021040?
0A38           2263            rseg R_CSEG
0A38           2264   
0000           2265            rseg R_XINIT
0000           2266   
0000           2267            rseg R_CONST
0000           2268   __str_0:
0000 4C3D2535  2269            db 'L=%5.2f R:%5.2f'
     2E326620
     523A2535
     2E3266
000F 00        2270            db 0x00
0010           2271   __str_1:
0010 4C4D3D25  2272            db 'LM=%d RM=%d'
     6420524D
     3D2564
001B 00        2273            db 0x00
001C           2274   __str_2:
001C 4572726F  2275            db 'Error:%5.2f Left:%5.2f Right:%5.2f Left_Motor:%d Right_Motor'
     723A2535
     2E326620
     4C656674
     3A25352E
     32662052
     69676874
     3A25352E
     3266204C
     6566745F
     4D6F746F
     723A2564
     20526967
     68745F4D
     6F746F72
0058 3A256420  2276            db ':%d                '
     20202020
     20202020
     20202020
     202020
006B 0D        2277            db 0x0D
006C 00        2278            db 0x00
006D           2279   
000E           2280            CSEG
000E           2281   
000E           2282   end
