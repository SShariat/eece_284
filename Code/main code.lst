0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Dec 11 2012) (MSVC)
0000              4   ; This file was generated Sun Mar 29 18:01:05 2015
0000              5   ;--------------------------------------------------------
                  5   $name main_code
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _execute
0000             29            public _stop
0000             30            public _turn_right
0000             31            public _turn_left
0000             32            public _display_LCD
0000             33            public _Timer0ISR
0000             34            public _InitTimer0
0000             35            public _InitADC
0000             36            public _InitSerialPort
0000             37            public _Wait1S
0000             38            public _LCDprint
0000             39            public _LCD_8BIT
0000             40            public _WriteCommand
0000             41            public _WriteData
0000             42            public _LCD_byte
0000             43            public _LCD_pulse
0000             44            public _waitms
0000             45            public _Wait50us
0000             46            public _InitPorts
0000             47            public _LCDprint_PARM_3
0000             48            public _start_timer
0000             49            public _start
0000             50            public _turn_time_update
0000             51            public _time_update_flag
0000             52            public _LCDprint_PARM_2
0000             53            public _line_counter
0000             54            public _action_timer
0000             55            public _turn_timer
0000             56            public _pwm_right
0000             57            public _pwm_left
0000             58            public _pwmcount
0000             59            public _mins
0000             60            public _secs
0000             61            public _msCount
0000             62   ;--------------------------------------------------------
0000             63   ; Special Function Registers
0000             64   ;--------------------------------------------------------
0000             65   _ACC            DATA 0xe0
0000             66   _ADCON0         DATA 0x8e
0000             67   _ADCON1         DATA 0x97
0000             68   _ADINS          DATA 0xa3
0000             69   _ADMODA         DATA 0xc0
0000             70   _ADMODB         DATA 0xa1
0000             71   _AD0BH          DATA 0xbb
0000             72   _AD0BL          DATA 0xa6
0000             73   _AD0DAT0        DATA 0xc5
0000             74   _AD0DAT1        DATA 0xc6
0000             75   _AD0DAT2        DATA 0xc7
0000             76   _AD0DAT3        DATA 0xf4
0000             77   _AD1BH          DATA 0xc4
0000             78   _AD1BL          DATA 0xbc
0000             79   _AD1DAT0        DATA 0xd5
0000             80   _AD1DAT1        DATA 0xd6
0000             81   _AD1DAT2        DATA 0xd7
0000             82   _AD1DAT3        DATA 0xf5
0000             83   _AUXR1          DATA 0xa2
0000             84   _B              DATA 0xf0
0000             85   _BRGR0          DATA 0xbe
0000             86   _BRGR1          DATA 0xbf
0000             87   _BRGCON         DATA 0xbd
0000             88   _CCCRA          DATA 0xea
0000             89   _CCCRB          DATA 0xeb
0000             90   _CCCRC          DATA 0xec
0000             91   _CCCRD          DATA 0xed
0000             92   _CMP1           DATA 0xac
0000             93   _CMP2           DATA 0xad
0000             94   _DEECON         DATA 0xf1
0000             95   _DEEDAT         DATA 0xf2
0000             96   _DEEADR         DATA 0xf3
0000             97   _DIVM           DATA 0x95
0000             98   _DPH            DATA 0x83
0000             99   _DPL            DATA 0x82
0000            100   _FMADRH         DATA 0xe7
0000            101   _FMADRL         DATA 0xe6
0000            102   _FMCON          DATA 0xe4
0000            103   _FMDATA         DATA 0xe5
0000            104   _I2ADR          DATA 0xdb
0000            105   _I2CON          DATA 0xd8
0000            106   _I2DAT          DATA 0xda
0000            107   _I2SCLH         DATA 0xdd
0000            108   _I2SCLL         DATA 0xdc
0000            109   _I2STAT         DATA 0xd9
0000            110   _ICRAH          DATA 0xab
0000            111   _ICRAL          DATA 0xaa
0000            112   _ICRBH          DATA 0xaf
0000            113   _ICRBL          DATA 0xae
0000            114   _IEN0           DATA 0xa8
0000            115   _IEN1           DATA 0xe8
0000            116   _IP0            DATA 0xb8
0000            117   _IP0H           DATA 0xb7
0000            118   _IP1            DATA 0xf8
0000            119   _IP1H           DATA 0xf7
0000            120   _KBCON          DATA 0x94
0000            121   _KBMASK         DATA 0x86
0000            122   _KBPATN         DATA 0x93
0000            123   _OCRAH          DATA 0xef
0000            124   _OCRAL          DATA 0xee
0000            125   _OCRBH          DATA 0xfb
0000            126   _OCRBL          DATA 0xfa
0000            127   _OCRCH          DATA 0xfd
0000            128   _OCRCL          DATA 0xfc
0000            129   _OCRDH          DATA 0xff
0000            130   _OCRDL          DATA 0xfe
0000            131   _P0             DATA 0x80
0000            132   _P1             DATA 0x90
0000            133   _P2             DATA 0xa0
0000            134   _P3             DATA 0xb0
0000            135   _P0M1           DATA 0x84
0000            136   _P0M2           DATA 0x85
0000            137   _P1M1           DATA 0x91
0000            138   _P1M2           DATA 0x92
0000            139   _P2M1           DATA 0xa4
0000            140   _P2M2           DATA 0xa5
0000            141   _P3M1           DATA 0xb1
0000            142   _P3M2           DATA 0xb2
0000            143   _PCON           DATA 0x87
0000            144   _PCONA          DATA 0xb5
0000            145   _PSW            DATA 0xd0
0000            146   _PT0AD          DATA 0xf6
0000            147   _RSTSRC         DATA 0xdf
0000            148   _RTCCON         DATA 0xd1
0000            149   _RTCH           DATA 0xd2
0000            150   _RTCL           DATA 0xd3
0000            151   _SADDR          DATA 0xa9
0000            152   _SADEN          DATA 0xb9
0000            153   _SBUF           DATA 0x99
0000            154   _SCON           DATA 0x98
0000            155   _SSTAT          DATA 0xba
0000            156   _SP             DATA 0x81
0000            157   _SPCTL          DATA 0xe2
0000            158   _SPSTAT         DATA 0xe1
0000            159   _SPDAT          DATA 0xe3
0000            160   _TAMOD          DATA 0x8f
0000            161   _TCON           DATA 0x88
0000            162   _TCR20          DATA 0xc8
0000            163   _TCR21          DATA 0xf9
0000            164   _TH0            DATA 0x8c
0000            165   _TH1            DATA 0x8d
0000            166   _TH2            DATA 0xcd
0000            167   _TICR2          DATA 0xc9
0000            168   _TIFR2          DATA 0xe9
0000            169   _TISE2          DATA 0xde
0000            170   _TL0            DATA 0x8a
0000            171   _TL1            DATA 0x8b
0000            172   _TL2            DATA 0xcc
0000            173   _TMOD           DATA 0x89
0000            174   _TOR2H          DATA 0xcf
0000            175   _TOR2L          DATA 0xce
0000            176   _TPCR2H         DATA 0xcb
0000            177   _TPCR2L         DATA 0xca
0000            178   _TRIM           DATA 0x96
0000            179   _WDCON          DATA 0xa7
0000            180   _WDL            DATA 0xc1
0000            181   _WFEED1         DATA 0xc2
0000            182   _WFEED2         DATA 0xc3
0000            183   ;--------------------------------------------------------
0000            184   ; special function bits
0000            185   ;--------------------------------------------------------
0000            186   _ACC_7          BIT 0xe7
0000            187   _ACC_6          BIT 0xe6
0000            188   _ACC_5          BIT 0xe5
0000            189   _ACC_4          BIT 0xe4
0000            190   _ACC_3          BIT 0xe3
0000            191   _ACC_2          BIT 0xe2
0000            192   _ACC_1          BIT 0xe1
0000            193   _ACC_0          BIT 0xe0
0000            194   _ADMODA_7       BIT 0xc7
0000            195   _ADMODA_6       BIT 0xc6
0000            196   _ADMODA_5       BIT 0xc5
0000            197   _ADMODA_4       BIT 0xc4
0000            198   _ADMODA_3       BIT 0xc3
0000            199   _ADMODA_2       BIT 0xc2
0000            200   _ADMODA_1       BIT 0xc1
0000            201   _ADMODA_0       BIT 0xc0
0000            202   _BNDI1          BIT 0xc7
0000            203   _BURST1         BIT 0xc6
0000            204   _SCC1           BIT 0xc5
0000            205   _SCAN1          BIT 0xc4
0000            206   _BNDI0          BIT 0xc3
0000            207   _BURST0         BIT 0xc2
0000            208   _SCC0           BIT 0xc1
0000            209   _SCAN0          BIT 0xc0
0000            210   _B_7            BIT 0xf7
0000            211   _B_6            BIT 0xf6
0000            212   _B_5            BIT 0xf5
0000            213   _B_4            BIT 0xf4
0000            214   _B_3            BIT 0xf3
0000            215   _B_2            BIT 0xf2
0000            216   _B_1            BIT 0xf1
0000            217   _B_0            BIT 0xf0
0000            218   _I2CON_7        BIT 0xdf
0000            219   _I2CON_6        BIT 0xde
0000            220   _I2CON_5        BIT 0xdd
0000            221   _I2CON_4        BIT 0xdc
0000            222   _I2CON_3        BIT 0xdb
0000            223   _I2CON_2        BIT 0xda
0000            224   _I2CON_1        BIT 0xd9
0000            225   _I2CON_0        BIT 0xd8
0000            226   _I2EN           BIT 0xde
0000            227   _STA            BIT 0xdd
0000            228   _STO            BIT 0xdc
0000            229   _SI             BIT 0xdb
0000            230   _AA             BIT 0xda
0000            231   _CRSEL          BIT 0xd8
0000            232   _IEN0_7         BIT 0xaf
0000            233   _IEN0_6         BIT 0xae
0000            234   _IEN0_5         BIT 0xad
0000            235   _IEN0_4         BIT 0xac
0000            236   _IEN0_3         BIT 0xab
0000            237   _IEN0_2         BIT 0xaa
0000            238   _IEN0_1         BIT 0xa9
0000            239   _IEN0_0         BIT 0xa8
0000            240   _EA             BIT 0xaf
0000            241   _EWDRT          BIT 0xae
0000            242   _EBO            BIT 0xad
0000            243   _ES             BIT 0xac
0000            244   _ESR            BIT 0xac
0000            245   _ET1            BIT 0xab
0000            246   _EX1            BIT 0xaa
0000            247   _ET0            BIT 0xa9
0000            248   _EX0            BIT 0xa8
0000            249   _IEN1_7         BIT 0xef
0000            250   _IEN1_6         BIT 0xee
0000            251   _IEN1_5         BIT 0xed
0000            252   _IEN1_4         BIT 0xec
0000            253   _IEN1_3         BIT 0xeb
0000            254   _IEN1_2         BIT 0xea
0000            255   _IEN1_1         BIT 0xe9
0000            256   _IEN1_0         BIT 0xe8
0000            257   _EADEE          BIT 0xef
0000            258   _EST            BIT 0xee
0000            259   _ECCU           BIT 0xec
0000            260   _ESPI           BIT 0xeb
0000            261   _EC             BIT 0xea
0000            262   _EKBI           BIT 0xe9
0000            263   _EI2C           BIT 0xe8
0000            264   _IP0_7          BIT 0xbf
0000            265   _IP0_6          BIT 0xbe
0000            266   _IP0_5          BIT 0xbd
0000            267   _IP0_4          BIT 0xbc
0000            268   _IP0_3          BIT 0xbb
0000            269   _IP0_2          BIT 0xba
0000            270   _IP0_1          BIT 0xb9
0000            271   _IP0_0          BIT 0xb8
0000            272   _PWDRT          BIT 0xbe
0000            273   _PBO            BIT 0xbd
0000            274   _PS             BIT 0xbc
0000            275   _PSR            BIT 0xbc
0000            276   _PT1            BIT 0xbb
0000            277   _PX1            BIT 0xba
0000            278   _PT0            BIT 0xb9
0000            279   _PX0            BIT 0xb8
0000            280   _IP1_7          BIT 0xff
0000            281   _IP1_6          BIT 0xfe
0000            282   _IP1_5          BIT 0xfd
0000            283   _IP1_4          BIT 0xfc
0000            284   _IP1_3          BIT 0xfb
0000            285   _IP1_2          BIT 0xfa
0000            286   _IP1_1          BIT 0xf9
0000            287   _IP1_0          BIT 0xf8
0000            288   _PADEE          BIT 0xff
0000            289   _PST            BIT 0xfe
0000            290   _PCCU           BIT 0xfc
0000            291   _PSPI           BIT 0xfb
0000            292   _PC             BIT 0xfa
0000            293   _PKBI           BIT 0xf9
0000            294   _PI2C           BIT 0xf8
0000            295   _P0_7           BIT 0x87
0000            296   _P0_6           BIT 0x86
0000            297   _P0_5           BIT 0x85
0000            298   _P0_4           BIT 0x84
0000            299   _P0_3           BIT 0x83
0000            300   _P0_2           BIT 0x82
0000            301   _P0_1           BIT 0x81
0000            302   _P0_0           BIT 0x80
0000            303   _T1             BIT 0x87
0000            304   _KB7            BIT 0x87
0000            305   _CMP_1          BIT 0x86
0000            306   _KB6            BIT 0x86
0000            307   _CMPREF         BIT 0x85
0000            308   _KB5            BIT 0x85
0000            309   _CIN1A          BIT 0x84
0000            310   _KB4            BIT 0x84
0000            311   _CIN1B          BIT 0x83
0000            312   _KB3            BIT 0x83
0000            313   _CIN2A          BIT 0x82
0000            314   _KB2            BIT 0x82
0000            315   _CIN2B          BIT 0x81
0000            316   _KB1            BIT 0x81
0000            317   _CMP_2          BIT 0x80
0000            318   _KB0            BIT 0x80
0000            319   _P1_7           BIT 0x97
0000            320   _P1_6           BIT 0x96
0000            321   _P1_5           BIT 0x95
0000            322   _P1_4           BIT 0x94
0000            323   _P1_3           BIT 0x93
0000            324   _P1_2           BIT 0x92
0000            325   _P1_1           BIT 0x91
0000            326   _P1_0           BIT 0x90
0000            327   _OCC            BIT 0x97
0000            328   _OCB            BIT 0x96
0000            329   _RST            BIT 0x95
0000            330   _INT1           BIT 0x94
0000            331   _INT0           BIT 0x93
0000            332   _SDA            BIT 0x93
0000            333   _T0             BIT 0x92
0000            334   _SCL            BIT 0x92
0000            335   _RXD            BIT 0x91
0000            336   _TXD            BIT 0x90
0000            337   _P2_7           BIT 0xa7
0000            338   _P2_6           BIT 0xa6
0000            339   _P2_5           BIT 0xa5
0000            340   _P2_4           BIT 0xa4
0000            341   _P2_3           BIT 0xa3
0000            342   _P2_2           BIT 0xa2
0000            343   _P2_1           BIT 0xa1
0000            344   _P2_0           BIT 0xa0
0000            345   _ICA            BIT 0xa7
0000            346   _OCA            BIT 0xa6
0000            347   _SPICLK         BIT 0xa5
0000            348   _SS             BIT 0xa4
0000            349   _MISO           BIT 0xa3
0000            350   _MOSI           BIT 0xa2
0000            351   _OCD            BIT 0xa1
0000            352   _ICB            BIT 0xa0
0000            353   _P3_7           BIT 0xb7
0000            354   _P3_6           BIT 0xb6
0000            355   _P3_5           BIT 0xb5
0000            356   _P3_4           BIT 0xb4
0000            357   _P3_3           BIT 0xb3
0000            358   _P3_2           BIT 0xb2
0000            359   _P3_1           BIT 0xb1
0000            360   _P3_0           BIT 0xb0
0000            361   _XTAL1          BIT 0xb1
0000            362   _XTAL2          BIT 0xb0
0000            363   _PSW_7          BIT 0xd7
0000            364   _PSW_6          BIT 0xd6
0000            365   _PSW_5          BIT 0xd5
0000            366   _PSW_4          BIT 0xd4
0000            367   _PSW_3          BIT 0xd3
0000            368   _PSW_2          BIT 0xd2
0000            369   _PSW_1          BIT 0xd1
0000            370   _PSW_0          BIT 0xd0
0000            371   _CY             BIT 0xd7
0000            372   _AC             BIT 0xd6
0000            373   _F0             BIT 0xd5
0000            374   _RS1            BIT 0xd4
0000            375   _RS0            BIT 0xd3
0000            376   _OV             BIT 0xd2
0000            377   _F1             BIT 0xd1
0000            378   _P              BIT 0xd0
0000            379   _SCON_7         BIT 0x9f
0000            380   _SCON_6         BIT 0x9e
0000            381   _SCON_5         BIT 0x9d
0000            382   _SCON_4         BIT 0x9c
0000            383   _SCON_3         BIT 0x9b
0000            384   _SCON_2         BIT 0x9a
0000            385   _SCON_1         BIT 0x99
0000            386   _SCON_0         BIT 0x98
0000            387   _SM0            BIT 0x9f
0000            388   _FE             BIT 0x9f
0000            389   _SM1            BIT 0x9e
0000            390   _SM2            BIT 0x9d
0000            391   _REN            BIT 0x9c
0000            392   _TB8            BIT 0x9b
0000            393   _RB8            BIT 0x9a
0000            394   _TI             BIT 0x99
0000            395   _RI             BIT 0x98
0000            396   _TCON_7         BIT 0x8f
0000            397   _TCON_6         BIT 0x8e
0000            398   _TCON_5         BIT 0x8d
0000            399   _TCON_4         BIT 0x8c
0000            400   _TCON_3         BIT 0x8b
0000            401   _TCON_2         BIT 0x8a
0000            402   _TCON_1         BIT 0x89
0000            403   _TCON_0         BIT 0x88
0000            404   _TF1            BIT 0x8f
0000            405   _TR1            BIT 0x8e
0000            406   _TF0            BIT 0x8d
0000            407   _TR0            BIT 0x8c
0000            408   _IE1            BIT 0x8b
0000            409   _IT1            BIT 0x8a
0000            410   _IE0            BIT 0x89
0000            411   _IT0            BIT 0x88
0000            412   _TCR20_7        BIT 0xcf
0000            413   _TCR20_6        BIT 0xce
0000            414   _TCR20_5        BIT 0xcd
0000            415   _TCR20_4        BIT 0xcc
0000            416   _TCR20_3        BIT 0xcb
0000            417   _TCR20_2        BIT 0xca
0000            418   _TCR20_1        BIT 0xc9
0000            419   _TCR20_0        BIT 0xc8
0000            420   _PLEEN          BIT 0xcf
0000            421   _HLTRN          BIT 0xce
0000            422   _HLTEN          BIT 0xcd
0000            423   _ALTCD          BIT 0xcc
0000            424   _ALTAB          BIT 0xcb
0000            425   _TDIR2          BIT 0xca
0000            426   _TMOD21         BIT 0xc9
0000            427   _TMOD20         BIT 0xc8
0000            428   ;--------------------------------------------------------
0000            429   ; overlayable register banks
0000            430   ;--------------------------------------------------------
0000            431            rbank0 segment data overlay
0000            432   ;--------------------------------------------------------
0000            433   ; internal ram data
0000            434   ;--------------------------------------------------------
0000            435            rseg R_DSEG
0000            436   _msCount:
0000            437            ds 2
0002            438   _secs:
0002            439            ds 1
0003            440   _mins:
0003            441            ds 1
0004            442   _pwmcount:
0004            443            ds 1
0005            444   _pwm_left:
0005            445            ds 1
0006            446   _pwm_right:
0006            447            ds 1
0007            448   _turn_timer:
0007            449            ds 2
0009            450   _action_timer:
0009            451            ds 2
000B            452   _line_counter:
000B            453            ds 2
000D            454   _LCDprint_PARM_2:
000D            455            ds 1
000E            456   _display_LCD_buff_1_96:
000E            457            ds 17
001F            458   _main_cur_error_1_112:
001F            459            ds 4
0023            460   _main_pre_error_1_112:
0023            461            ds 4
0027            462   _main_left_1_112:
0027            463            ds 4
002B            464   _main_right_1_112:
002B            465            ds 4
002F            466   _main_line_sensor_1_112:
002F            467            ds 4
0033            468   _main_diff_1_112:
0033            469            ds 4
0037            470   _main_line_counter_1_112:
0037            471            ds 2
0039            472   _main_command_1_112:
0039            473            ds 2
003B            474   _main_state_1_112:
003B            475            ds 2
003D            476   ;--------------------------------------------------------
003D            477   ; overlayable items in internal ram 
003D            478   ;--------------------------------------------------------
0000            479            rseg R_OSEG
0000            480   ;--------------------------------------------------------
0000            481   ; indirectly addressable internal ram data
0000            482   ;--------------------------------------------------------
0000            483            rseg R_ISEG
0000            484   ;--------------------------------------------------------
0000            485   ; absolute internal ram data
0000            486   ;--------------------------------------------------------
0000            487            DSEG
0000            488   ;--------------------------------------------------------
0000            489   ; bit data
0000            490   ;--------------------------------------------------------
0000            491            rseg R_BSEG
0000            492   _time_update_flag:
0000            493            DBIT    1
0001            494   _turn_time_update:
0001            495            DBIT    1
0002            496   _start:
0002            497            DBIT    1
0003            498   _start_timer:
0003            499            DBIT    1
0004            500   _LCDprint_PARM_3:
0004            501            DBIT    1
0005            502   ;--------------------------------------------------------
0005            503   ; paged external ram data
0005            504   ;--------------------------------------------------------
0000            505            rseg R_PSEG
0000            506   ;--------------------------------------------------------
0000            507   ; external ram data
0000            508   ;--------------------------------------------------------
0000            509            rseg R_XSEG
FFC8            510            XSEG at 0xffc8
FFC8            511   _BODCFG: ds 1
FFC9            512            public _BODCFG
0000            513            rseg R_XSEG
FFDE            514            XSEG at 0xffde
FFDE            515   _CLKCON: ds 1
FFDF            516            public _CLKCON
0000            517            rseg R_XSEG
FFE1            518            XSEG at 0xffe1
FFE1            519   _PGACON1: ds 1
FFE2            520            public _PGACON1
0000            521            rseg R_XSEG
FFE4            522            XSEG at 0xffe4
FFE4            523   _PGACON1B: ds 1
FFE5            524            public _PGACON1B
0000            525            rseg R_XSEG
FFE3            526            XSEG at 0xffe3
FFE3            527   _PGA1TRIM8X16X: ds 1
FFE4            528            public _PGA1TRIM8X16X
0000            529            rseg R_XSEG
FFE2            530            XSEG at 0xffe2
FFE2            531   _PGA1TRIM2X4X: ds 1
FFE3            532            public _PGA1TRIM2X4X
0000            533            rseg R_XSEG
FFCA            534            XSEG at 0xffca
FFCA            535   _PGACON0: ds 1
FFCB            536            public _PGACON0
0000            537            rseg R_XSEG
FFCE            538            XSEG at 0xffce
FFCE            539   _PGACON0B: ds 1
FFCF            540            public _PGACON0B
0000            541            rseg R_XSEG
FFCD            542            XSEG at 0xffcd
FFCD            543   _PGA0TRIM8X16X: ds 1
FFCE            544            public _PGA0TRIM8X16X
0000            545            rseg R_XSEG
FFCC            546            XSEG at 0xffcc
FFCC            547   _PGA0TRIM2X4X: ds 1
FFCD            548            public _PGA0TRIM2X4X
0000            549            rseg R_XSEG
FFBF            550            XSEG at 0xffbf
FFBF            551   _RTCDATH: ds 1
FFC0            552            public _RTCDATH
0000            553            rseg R_XSEG
FFBE            554            XSEG at 0xffbe
FFBE            555   _RTCDATL: ds 1
FFBF            556            public _RTCDATL
0000            557            rseg R_XSEG
0000            558   ;--------------------------------------------------------
0000            559   ; absolute external ram data
0000            560   ;--------------------------------------------------------
FFBF            561            XSEG
FFBF            562   ;--------------------------------------------------------
FFBF            563   ; external initialized ram data
FFBF            564   ;--------------------------------------------------------
0000            565            rseg R_IXSEG
0000            566            rseg R_HOME
0000            567            rseg R_GSINIT
0000            568            rseg R_CSEG
0000            569   ;--------------------------------------------------------
0000            570   ; Reset entry point and interrupt vectors
0000            571   ;--------------------------------------------------------
0000            572            CSEG at 0x0000
0000 020100     573            ljmp    _crt0
000B            574            CSEG at 0x000b
000B 020100     575            ljmp    _Timer0ISR
000E            576   ;--------------------------------------------------------
000E            577   ; global & static initialisations
000E            578   ;--------------------------------------------------------
0000            579            rseg R_HOME
0000            580            rseg R_GSINIT
0000            581            rseg R_GSINIT
0000            582   ;--------------------------------------------------------
0000            583   ; data variables initialization
0000            584   ;--------------------------------------------------------
0000            585            rseg R_DINIT
0000            586   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:47: volatile int msCount=0; // Volatiles can be changed by stuff outside our program, like memory registers
0000 E4         587            clr     a
0001 F548       588            mov     _msCount,a
0003 F549       589            mov     (_msCount + 1),a
0005            590   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:48: volatile unsigned char secs=0, mins=0; // They are like global variables, kinda 
0005 750800     591            mov     _secs,#0x00
0008            592   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:48: volatile bit time_update_flag=0;
0008 75C800     593            mov     _mins,#0x00
000B            594   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:53: volatile int turn_timer = 0;
000B E4         595            clr     a
000C F5C8       596            mov     _turn_timer,a
000E F5C9       597            mov     (_turn_timer + 1),a
0010            598   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:57: volatile int action_timer = 0;
0010 E4         599            clr     a
0011 F588       600            mov     _action_timer,a
0013 F589       601            mov     (_action_timer + 1),a
0015            602   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:58: volatile int line_counter = 0;
0015 E4         603            clr     a
0016 F548       604            mov     _line_counter,a
0018 F549       605            mov     (_line_counter + 1),a
001A            606   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:49: volatile bit time_update_flag=0;
001A C2B8       607            clr     _time_update_flag
001C            608   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:54: volatile bit turn_time_update=0;
001C C268       609            clr     _turn_time_update
001E            610   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:55: volatile bit start = 1;
001E D218       611            setb    _start
0020            612   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:56: volatile bit start_timer = 0;
0020 C2D8       613            clr     _start_timer
0022            614            ; The linker places a 'ret' at the end of segment R_DINIT.
0022            615   ;--------------------------------------------------------
0022            616   ; code
0022            617   ;--------------------------------------------------------
0000            618            rseg R_CSEG
0000            619   ;------------------------------------------------------------
0000            620   ;Allocation info for local variables in function 'InitPorts'
0000            621   ;------------------------------------------------------------
0000            622   ;------------------------------------------------------------
0000            623   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:60: void InitPorts(void){
0000            624   ;        -----------------------------------------
0000            625   ;         function InitPorts
0000            626   ;        -----------------------------------------
0000            627   _InitPorts:
0000            628            using   0
0000            629   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:61: P0M1=0x1E;
0000 75841E     630            mov     _P0M1,#0x1E
0003            631   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:62: P0M2=0x00;
0003 758500     632            mov     _P0M2,#0x00
0006            633   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:63: P1M1=0;
0006 759100     634            mov     _P1M1,#0x00
0009            635   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:64: P1M2=0;
0009 759200     636            mov     _P1M2,#0x00
000C            637   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:65: P2M1=0;
000C 75A400     638            mov     _P2M1,#0x00
000F            639   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:66: P2M2=0;
000F 75A500     640            mov     _P2M2,#0x00
0012            641   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:67: P3M1=0;
0012 75B100     642            mov     _P3M1,#0x00
0015            643   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:68: P3M2=0;
0015 75B200     644            mov     _P3M2,#0x00
0018 22         645            ret
0019            646   ;------------------------------------------------------------
0019            647   ;Allocation info for local variables in function 'Wait50us'
0019            648   ;------------------------------------------------------------
0019            649   ;------------------------------------------------------------
0019            650   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:71: void Wait50us (void){
0019            651   ;        -----------------------------------------
0019            652   ;         function Wait50us
0019            653   ;        -----------------------------------------
0019            654   _Wait50us:
0019            655   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:75: _endasm;
0019            656            
0019 7852       657             mov R0, #82
001B            658             L0:
001B D828       659            djnz R0, L0 ; 2 machine cycles-> 2*0.27126us*92=50us
001D            660             
001D 22         661            ret
001E            662   ;------------------------------------------------------------
001E            663   ;Allocation info for local variables in function 'waitms'
001E            664   ;------------------------------------------------------------
001E            665   ;ms                        Allocated to registers r2 r3 
001E            666   ;j                         Allocated to registers r4 r5 
001E            667   ;k                         Allocated to registers r6 
001E            668   ;------------------------------------------------------------
001E            669   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:78: void waitms (unsigned int ms){
001E            670   ;        -----------------------------------------
001E            671   ;         function waitms
001E            672   ;        -----------------------------------------
001E            673   _waitms:
001E AA82       674            mov     r2,dpl
0020 AB83       675            mov     r3,dph
0022            676   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:83: for(j=0; j<ms; j++)
0022 7C00       677            mov     r4,#0x00
0024 7D00       678            mov     r5,#0x00
0026            679   L004004?:
0026 C3         680            clr     c
0027 EC         681            mov     a,r4
0028 9A         682            subb    a,r2
0029 ED         683            mov     a,r5
002A 9B         684            subb    a,r3
002B 5001       685            jnc     L004008?
002D            686   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:84: for (k=0; k<20; k++) Wait50us();
002D 7E14       687            mov     r6,#0x14
002F            688   L004003?:
002F C002       689            push    ar2
0031 C003       690            push    ar3
0033 C004       691            push    ar4
0035 C005       692            push    ar5
0037 C006       693            push    ar6
0039 120100     694            lcall   _Wait50us
003C D006       695            pop     ar6
003E D005       696            pop     ar5
0040 D004       697            pop     ar4
0042 D003       698            pop     ar3
0044 D002       699            pop     ar2
0046 DE68       700            djnz    r6,L004003?
0048            701   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:83: for(j=0; j<ms; j++)
0048 0C         702            inc     r4
0049 BC00E8     703            cjne    r4,#0x00,L004004?
004C 0D         704            inc     r5
004D 8001       705            sjmp    L004004?
004F            706   L004008?:
004F 22         707            ret
0050            708   ;------------------------------------------------------------
0050            709   ;Allocation info for local variables in function 'LCD_pulse'
0050            710   ;------------------------------------------------------------
0050            711   ;------------------------------------------------------------
0050            712   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:87: void LCD_pulse (void){
0050            713   ;        -----------------------------------------
0050            714   ;         function LCD_pulse
0050            715   ;        -----------------------------------------
0050            716   _LCD_pulse:
0050            717   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:88: LCD_E=1;
0050 D2A5       718            setb    _P2_5
0052            719   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:89: Wait50us();
0052 120100     720            lcall   _Wait50us
0055            721   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:90: LCD_E=0;
0055 C2A5       722            clr     _P2_5
0057 22         723            ret
0058            724   ;------------------------------------------------------------
0058            725   ;Allocation info for local variables in function 'LCD_byte'
0058            726   ;------------------------------------------------------------
0058            727   ;x                         Allocated to registers 
0058            728   ;------------------------------------------------------------
0058            729   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:93: void LCD_byte (unsigned char x){
0058            730   ;        -----------------------------------------
0058            731   ;         function LCD_byte
0058            732   ;        -----------------------------------------
0058            733   _LCD_byte:
0058 8582E0     734            mov     _ACC,dpl
005B            735   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:96: LCD_D7=ACC_7;
005B A2E7       736            mov     c,_ACC_7
005D 9294       737            mov     _P1_4,c
005F            738   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:97: LCD_D6=ACC_6;
005F A2E6       739            mov     c,_ACC_6
0061 9296       740            mov     _P1_6,c
0063            741   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:98: LCD_D5=ACC_5;
0063 A2E5       742            mov     c,_ACC_5
0065 9297       743            mov     _P1_7,c
0067            744   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:99: LCD_D4=ACC_4;
0067 A2E4       745            mov     c,_ACC_4
0069 92A0       746            mov     _P2_0,c
006B            747   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:100: LCD_D3=ACC_3;
006B A2E3       748            mov     c,_ACC_3
006D 92A1       749            mov     _P2_1,c
006F            750   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:101: LCD_D2=ACC_2;
006F A2E2       751            mov     c,_ACC_2
0071 92A2       752            mov     _P2_2,c
0073            753   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:102: LCD_D1=ACC_1;
0073 A2E1       754            mov     c,_ACC_1
0075 92A3       755            mov     _P2_3,c
0077            756   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:103: LCD_D0=ACC_0;
0077 A2E0       757            mov     c,_ACC_0
0079 92A4       758            mov     _P2_4,c
007B            759   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:104: LCD_pulse();
007B 020100     760            ljmp    _LCD_pulse
007E            761   ;------------------------------------------------------------
007E            762   ;Allocation info for local variables in function 'WriteData'
007E            763   ;------------------------------------------------------------
007E            764   ;x                         Allocated to registers r2 
007E            765   ;------------------------------------------------------------
007E            766   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:107: void WriteData (unsigned char x){
007E            767   ;        -----------------------------------------
007E            768   ;         function WriteData
007E            769   ;        -----------------------------------------
007E            770   _WriteData:
007E AA82       771            mov     r2,dpl
0080            772   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:108: LCD_RS=1;
0080 D2A7       773            setb    _P2_7
0082            774   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:109: LCD_byte(x);
0082 8A82       775            mov     dpl,r2
0084 120100     776            lcall   _LCD_byte
0087            777   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:110: waitms(2);
0087 900002     778            mov     dptr,#0x0002
008A 020100     779            ljmp    _waitms
008D            780   ;------------------------------------------------------------
008D            781   ;Allocation info for local variables in function 'WriteCommand'
008D            782   ;------------------------------------------------------------
008D            783   ;x                         Allocated to registers r2 
008D            784   ;------------------------------------------------------------
008D            785   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:113: void WriteCommand (unsigned char x){
008D            786   ;        -----------------------------------------
008D            787   ;         function WriteCommand
008D            788   ;        -----------------------------------------
008D            789   _WriteCommand:
008D AA82       790            mov     r2,dpl
008F            791   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:114: LCD_RS=0;
008F C2A7       792            clr     _P2_7
0091            793   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:115: LCD_byte(x);
0091 8A82       794            mov     dpl,r2
0093 120100     795            lcall   _LCD_byte
0096            796   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:116: waitms(5);
0096 900005     797            mov     dptr,#0x0005
0099 020100     798            ljmp    _waitms
009C            799   ;------------------------------------------------------------
009C            800   ;Allocation info for local variables in function 'LCD_8BIT'
009C            801   ;------------------------------------------------------------
009C            802   ;------------------------------------------------------------
009C            803   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:119: void LCD_8BIT (void){
009C            804   ;        -----------------------------------------
009C            805   ;         function LCD_8BIT
009C            806   ;        -----------------------------------------
009C            807   _LCD_8BIT:
009C            808   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:120: LCD_E=0;  // Resting state of LCD's enable is zero
009C C2A5       809            clr     _P2_5
009E            810   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:121: LCD_RW=0; // We are only writing to the LCD in this program
009E C2A6       811            clr     _P2_6
00A0            812   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:122: waitms(20);
00A0 900014     813            mov     dptr,#0x0014
00A3 120100     814            lcall   _waitms
00A6            815   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:124: WriteCommand(0x33);
00A6 758233     816            mov     dpl,#0x33
00A9 120100     817            lcall   _WriteCommand
00AC            818   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:125: WriteCommand(0x33);
00AC 758233     819            mov     dpl,#0x33
00AF 120100     820            lcall   _WriteCommand
00B2            821   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:126: WriteCommand(0x33); // Stay in 8-bit mode
00B2 758233     822            mov     dpl,#0x33
00B5 120100     823            lcall   _WriteCommand
00B8            824   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:129: WriteCommand(0x38);
00B8 758238     825            mov     dpl,#0x38
00BB 120100     826            lcall   _WriteCommand
00BE            827   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:130: WriteCommand(0x0c);
00BE 75820C     828            mov     dpl,#0x0C
00C1 120100     829            lcall   _WriteCommand
00C4            830   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:131: WriteCommand(0x01); // Clear screen command (takes some time)
00C4 758201     831            mov     dpl,#0x01
00C7 120100     832            lcall   _WriteCommand
00CA            833   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:132: waitms(20); // Wait for clear screen command to finsih.
00CA 900014     834            mov     dptr,#0x0014
00CD 020100     835            ljmp    _waitms
00D0            836   ;------------------------------------------------------------
00D0            837   ;Allocation info for local variables in function 'LCDprint'
00D0            838   ;------------------------------------------------------------
00D0            839   ;line                      Allocated with name '_LCDprint_PARM_2'
00D0            840   ;string                    Allocated to registers r2 r3 r4 
00D0            841   ;j                         Allocated to registers r5 
00D0            842   ;------------------------------------------------------------
00D0            843   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:135: void LCDprint(char * string, unsigned char line, bit clear){
00D0            844   ;        -----------------------------------------
00D0            845   ;         function LCDprint
00D0            846   ;        -----------------------------------------
00D0            847   _LCDprint:
00D0 AA82       848            mov     r2,dpl
00D2 AB83       849            mov     r3,dph
00D4 ACF0       850            mov     r4,b
00D6            851   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:138: WriteCommand(line==2?0xc0:0x80);
00D6 7402       852            mov     a,#0x02
00D8 B508E8     853            cjne    a,_LCDprint_PARM_2,L010013?
00DB 7DC0       854            mov     r5,#0xC0
00DD 8001       855            sjmp    L010014?
00DF            856   L010013?:
00DF 7D80       857            mov     r5,#0x80
00E1            858   L010014?:
00E1 8D82       859            mov     dpl,r5
00E3 C002       860            push    ar2
00E5 C003       861            push    ar3
00E7 C004       862            push    ar4
00E9 120100     863            lcall   _WriteCommand
00EC            864   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:139: waitms(5);
00EC 900005     865            mov     dptr,#0x0005
00EF 120100     866            lcall   _waitms
00F2 D004       867            pop     ar4
00F4 D003       868            pop     ar3
00F6 D002       869            pop     ar2
00F8            870   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:140: for(j=0; string[j]!=0; j++)      WriteData(string[j]);// Write the message
00F8 7D00       871            mov     r5,#0x00
00FA            872   L010003?:
00FA ED         873            mov     a,r5
00FB 2A         874            add     a,r2
00FC FE         875            mov     r6,a
00FD E4         876            clr     a
00FE 3B         877            addc    a,r3
00FF FF         878            mov     r7,a
0100 8C00       879            mov     ar0,r4
0102 8E82       880            mov     dpl,r6
0104 8F83       881            mov     dph,r7
0106 88F0       882            mov     b,r0
0108 120100     883            lcall   __gptrget
010B FE         884            mov     r6,a
010C 6001       885            jz      L010006?
010E 8E82       886            mov     dpl,r6
0110 C002       887            push    ar2
0112 C003       888            push    ar3
0114 C004       889            push    ar4
0116 C005       890            push    ar5
0118 120100     891            lcall   _WriteData
011B D005       892            pop     ar5
011D D004       893            pop     ar4
011F D003       894            pop     ar3
0121 D002       895            pop     ar2
0123 0D         896            inc     r5
0124 8001       897            sjmp    L010003?
0126            898   L010006?:
0126            899   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:141: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0126 309828     900            jnb     _LCDprint_PARM_3,L010011?
0129 8D02       901            mov     ar2,r5
012B            902   L010007?:
012B BA10A8     903            cjne    r2,#0x10,L010026?
012E            904   L010026?:
012E 5001       905            jnc     L010011?
0130 758220     906            mov     dpl,#0x20
0133 C002       907            push    ar2
0135 120100     908            lcall   _WriteData
0138 D002       909            pop     ar2
013A 0A         910            inc     r2
013B 8001       911            sjmp    L010007?
013D            912   L010011?:
013D 22         913            ret
013E            914   ;------------------------------------------------------------
013E            915   ;Allocation info for local variables in function 'Wait1S'
013E            916   ;------------------------------------------------------------
013E            917   ;------------------------------------------------------------
013E            918   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:144: void Wait1S (void){
013E            919   ;        -----------------------------------------
013E            920   ;         function Wait1S
013E            921   ;        -----------------------------------------
013E            922   _Wait1S:
013E            923   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:152: _endasm;
013E            924            
013E 7A28       925             mov R2, #40
0140            926             L3:
0140 79FA       927            mov R1, #250
0142            928             L2:
0142 78B8       929            mov R0, #184
0144            930             L1:
0144 D868       931            djnz R0, L1 ; 2 machine cycles-> 2*0.27126us*184=100us
0146 D928       932             djnz R1, L2 ; 100us*250=0.025s
0148 DAE8       933             djnz R2, L3 ; 0.025s*40=1s
014A            934             
014A 22         935            ret
014B            936   ;------------------------------------------------------------
014B            937   ;Allocation info for local variables in function 'InitSerialPort'
014B            938   ;------------------------------------------------------------
014B            939   ;------------------------------------------------------------
014B            940   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:155: void InitSerialPort(void){
014B            941   ;        -----------------------------------------
014B            942   ;         function InitSerialPort
014B            943   ;        -----------------------------------------
014B            944   _InitSerialPort:
014B            945   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:156: BRGCON=0x00; //Make sure the baud rate generator is off
014B 75BD00     946            mov     _BRGCON,#0x00
014E            947   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:157: BRGR1=((XTAL/BAUD)-16)/0x100;
014E 75BF00     948            mov     _BRGR1,#0x00
0151            949   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:158: BRGR0=((XTAL/BAUD)-16)%0x100;
0151 75BE30     950            mov     _BRGR0,#0x30
0154            951   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:159: BRGCON=0x03; //Turn-on the baud rate generator
0154 75BD03     952            mov     _BRGCON,#0x03
0157            953   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:160: SCON=0x52; //Serial port in mode 1, ren, txrdy, rxempty
0157 759852     954            mov     _SCON,#0x52
015A            955   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:161: P1M1=0x00; //Enable pins RxD and Txd
015A 759100     956            mov     _P1M1,#0x00
015D            957   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:162: P1M2=0x00; //Enable pins RxD and Txd
015D 759200     958            mov     _P1M2,#0x00
0160 22         959            ret
0161            960   ;------------------------------------------------------------
0161            961   ;Allocation info for local variables in function 'InitADC'
0161            962   ;------------------------------------------------------------
0161            963   ;------------------------------------------------------------
0161            964   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:165: void InitADC(void){
0161            965   ;        -----------------------------------------
0161            966   ;         function InitADC
0161            967   ;        -----------------------------------------
0161            968   _InitADC:
0161            969   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:168: P0M1 |= (P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0161 43841E     970            orl     _P0M1,#0x1E
0164            971   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:169: P0M2 &= ~(P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0164 5385E1     972            anl     _P0M2,#0xE1
0167            973   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:172: BURST1=1; //Autoscan continuous conversion mode
0167 D2C6       974            setb    _BURST1
0169            975   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:173: ADMODB = CLK0; //ADC1 clock is 7.3728MHz/2
0169 75A120     976            mov     _ADMODB,#0x20
016C            977   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:174: ADINS  = (ADI13|ADI12|ADI11|ADI10); // Select the four channels for conversion
016C 75A3F0     978            mov     _ADINS,#0xF0
016F            979   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:175: ADCON1 = (ENADC1|ADCS10); //Enable the converter and start immediately
016F 759705     980            mov     _ADCON1,#0x05
0172            981   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:176: while((ADCI1&ADCON1)==0); //Wait for first conversion to complete
0172            982   L013001?:
0172 E597       983            mov     a,_ADCON1
0174 30E3A8     984            jnb     acc.3,L013001?
0177 22         985            ret
0178            986   ;------------------------------------------------------------
0178            987   ;Allocation info for local variables in function 'InitTimer0'
0178            988   ;------------------------------------------------------------
0178            989   ;------------------------------------------------------------
0178            990   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:179: void InitTimer0 (void){
0178            991   ;        -----------------------------------------
0178            992   ;         function InitTimer0
0178            993   ;        -----------------------------------------
0178            994   _InitTimer0:
0178            995   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:182: TR0=0; // Stop timer 0
0178 C28C       996            clr     _TR0
017A            997   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:183: TMOD=(TMOD&0xf0)|0x01; // 16-bit timer
017A 74F0       998            mov     a,#0xF0
017C 5589       999            anl     a,_TMOD
017E 4401      1000            orl     a,#0x01
0180 F589      1001            mov     _TMOD,a
0182           1002   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:184: TH0=TIMER0_RELOAD_VALUE/0x100; // I think the RHS is 0001 0000 0000, are we dividing?
0182 758CFE    1003            mov     _TH0,#0xFE
0185           1004   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:185: TL0=TIMER0_RELOAD_VALUE%0x100; // % means modulo, apparently? ...are we modulo-ing?
0185 758A90    1005            mov     _TL0,#0x90
0188           1006   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:186: TR0=1; // Start timer 0 (bit 4 in TCON)
0188 D28C      1007            setb    _TR0
018A           1008   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:187: ET0=1; // Enable timer 0 interrupt - the interrupt controller IEN0 is bit-adressable, so we change only the bit we need
018A D2A9      1009            setb    _ET0
018C           1010   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:188: EA=1;  // Enable global interrupts
018C D2AF      1011            setb    _EA
018E 22        1012            ret
018F           1013   ;------------------------------------------------------------
018F           1014   ;Allocation info for local variables in function 'Timer0ISR'
018F           1015   ;------------------------------------------------------------
018F           1016   ;------------------------------------------------------------
018F           1017   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:192: void Timer0ISR (void) interrupt 1{
018F           1018   ;        -----------------------------------------
018F           1019   ;         function Timer0ISR
018F           1020   ;        -----------------------------------------
018F           1021   _Timer0ISR:
018F C0E0      1022            push    acc
0191 C0D0      1023            push    psw
0193 75D000    1024            mov     psw,#0x00
0196           1025   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:194: TR0=0; // Stop timer 0
0196 C28C      1026            clr     _TR0
0198           1027   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:195: TH0=TIMER0_RELOAD_VALUE/0x100;
0198 758CFE    1028            mov     _TH0,#0xFE
019B           1029   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:196: TL0=TIMER0_RELOAD_VALUE%0x100;
019B 758A90    1030            mov     _TL0,#0x90
019E           1031   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:197: TR0=1; // Start timer 0
019E D28C      1032            setb    _TR0
01A0           1033   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:199: if(++pwmcount>99) pwmcount=0;
01A0 0588      1034            inc     _pwmcount
01A2 E588      1035            mov     a,_pwmcount
01A4 249C      1036            add     a,#0xff - 0x63
01A6 5001      1037            jnc     L015002?
01A8 758800    1038            mov     _pwmcount,#0x00
01AB           1039   L015002?:
01AB           1040   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:200: P0_5=(pwm_left>pwmcount)?1:0;
01AB C3        1041            clr     c
01AC E588      1042            mov     a,_pwmcount
01AE 9548      1043            subb    a,_pwm_left
01B0 9285      1044            mov     _P0_5,c
01B2           1045   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:201: P0_6=(pwm_right>pwmcount)?1:0;
01B2 C3        1046            clr     c
01B3 E588      1047            mov     a,_pwmcount
01B5 9508      1048            subb    a,_pwm_right
01B7 9286      1049            mov     _P0_6,c
01B9           1050   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:203: msCount++;
01B9 7401      1051            mov     a,#0x01
01BB 2548      1052            add     a,_msCount
01BD F548      1053            mov     _msCount,a
01BF E4        1054            clr     a
01C0 3549      1055            addc    a,(_msCount + 1)
01C2 F549      1056            mov     (_msCount + 1),a
01C4           1057   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:204: if(msCount==10000)
01C4 7410      1058            mov     a,#0x10
01C6 B548A8    1059            cjne    a,_msCount,L015008?
01C9 7427      1060            mov     a,#0x27
01CB B549A8    1061            cjne    a,(_msCount + 1),L015008?
01CE           1062   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:206: time_update_flag=1;
01CE D2B8      1063            setb    _time_update_flag
01D0           1064   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:207: msCount=0;
01D0 E4        1065            clr     a
01D1 F548      1066            mov     _msCount,a
01D3 F549      1067            mov     (_msCount + 1),a
01D5           1068   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:208: secs++;
01D5 0508      1069            inc     _secs
01D7           1070   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:209: if(secs==60)
01D7 743C      1071            mov     a,#0x3C
01D9 B508A8    1072            cjne    a,_secs,L015008?
01DC           1073   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:211: secs=0;
01DC 750800    1074            mov     _secs,#0x00
01DF           1075   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:212: mins++;
01DF 05C8      1076            inc     _mins
01E1           1077   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:213: if(mins==60)
01E1 743C      1078            mov     a,#0x3C
01E3 B5C8A8    1079            cjne    a,_mins,L015008?
01E6           1080   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:215: mins=0;
01E6 75C800    1081            mov     _mins,#0x00
01E9           1082   L015008?:
01E9           1083   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:220: if(turn_time_update == 1){
01E9 3068E8    1084            jnb     _turn_time_update,L015010?
01EC           1085   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:221: turn_timer++;
01EC 7401      1086            mov     a,#0x01
01EE 25C8      1087            add     a,_turn_timer
01F0 F5C8      1088            mov     _turn_timer,a
01F2 E4        1089            clr     a
01F3 35C9      1090            addc    a,(_turn_timer + 1)
01F5 F5C9      1091            mov     (_turn_timer + 1),a
01F7           1092   L015010?:
01F7           1093   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:224: if(start_timer == 1){
01F7 30D828    1094            jnb     _start_timer,L015015?
01FA           1095   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:225: action_timer++;
01FA 7401      1096            mov     a,#0x01
01FC 2588      1097            add     a,_action_timer
01FE F588      1098            mov     _action_timer,a
0200 E4        1099            clr     a
0201 3589      1100            addc    a,(_action_timer + 1)
0203 F589      1101            mov     (_action_timer + 1),a
0205           1102   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:226: if(action_timer == 5000){
0205 7488      1103            mov     a,#0x88
0207 B58828    1104            cjne    a,_action_timer,L015015?
020A 7413      1105            mov     a,#0x13
020C B58928    1106            cjne    a,(_action_timer + 1),L015015?
020F           1107   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:227: action_timer = 0;
020F E4        1108            clr     a
0210 F588      1109            mov     _action_timer,a
0212 F589      1110            mov     (_action_timer + 1),a
0214           1111   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:228: start_timer = 0;
0214 C2D8      1112            clr     _start_timer
0216           1113   L015015?:
0216 D0D0      1114            pop     psw
0218 D0E0      1115            pop     acc
021A 32        1116            reti
021B           1117   ;        eliminated unneeded push/pop dpl
021B           1118   ;        eliminated unneeded push/pop dph
021B           1119   ;        eliminated unneeded push/pop b
021B           1120   ;------------------------------------------------------------
021B           1121   ;Allocation info for local variables in function 'display_LCD'
021B           1122   ;------------------------------------------------------------
021B           1123   ;buff                      Allocated with name '_display_LCD_buff_1_96'
021B           1124   ;------------------------------------------------------------
021B           1125   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:234: void display_LCD(void){
021B           1126   ;        -----------------------------------------
021B           1127   ;         function display_LCD
021B           1128   ;        -----------------------------------------
021B           1129   _display_LCD:
021B           1130   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:237: time_update_flag=0;
021B C2B8      1131            clr     _time_update_flag
021D           1132   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:244: sprintf(buff, "L=%5.2f R:%5.2f", (AD1DAT1/255.0)*3.3, (AD1DAT2/255.0)*3.3); //Display Left and Right Sensor
021D 85D782    1133            mov     dpl,_AD1DAT2
0220 120100    1134            lcall   ___uchar2fs
0223 AA82      1135            mov     r2,dpl
0225 AB83      1136            mov     r3,dph
0227 ACF0      1137            mov     r4,b
0229 FD        1138            mov     r5,a
022A E4        1139            clr     a
022B C0E0      1140            push    acc
022D C0E0      1141            push    acc
022F 747F      1142            mov     a,#0x7F
0231 C0E0      1143            push    acc
0233 7443      1144            mov     a,#0x43
0235 C0E0      1145            push    acc
0237 8A82      1146            mov     dpl,r2
0239 8B83      1147            mov     dph,r3
023B 8CF0      1148            mov     b,r4
023D ED        1149            mov     a,r5
023E 120100    1150            lcall   ___fsdiv
0241 AA82      1151            mov     r2,dpl
0243 AB83      1152            mov     r3,dph
0245 ACF0      1153            mov     r4,b
0247 FD        1154            mov     r5,a
0248 E581      1155            mov     a,sp
024A 24FC      1156            add     a,#0xfc
024C F581      1157            mov     sp,a
024E C002      1158            push    ar2
0250 C003      1159            push    ar3
0252 C004      1160            push    ar4
0254 C005      1161            push    ar5
0256 903333    1162            mov     dptr,#0x3333
0259 75F053    1163            mov     b,#0x53
025C 7440      1164            mov     a,#0x40
025E 120100    1165            lcall   ___fsmul
0261 AA82      1166            mov     r2,dpl
0263 AB83      1167            mov     r3,dph
0265 ACF0      1168            mov     r4,b
0267 FD        1169            mov     r5,a
0268 E581      1170            mov     a,sp
026A 24FC      1171            add     a,#0xfc
026C F581      1172            mov     sp,a
026E 85D682    1173            mov     dpl,_AD1DAT1
0271 C002      1174            push    ar2
0273 C003      1175            push    ar3
0275 C004      1176            push    ar4
0277 C005      1177            push    ar5
0279 120100    1178            lcall   ___uchar2fs
027C AE82      1179            mov     r6,dpl
027E AF83      1180            mov     r7,dph
0280 A8F0      1181            mov     r0,b
0282 F9        1182            mov     r1,a
0283 E4        1183            clr     a
0284 C0E0      1184            push    acc
0286 C0E0      1185            push    acc
0288 747F      1186            mov     a,#0x7F
028A C0E0      1187            push    acc
028C 7443      1188            mov     a,#0x43
028E C0E0      1189            push    acc
0290 8E82      1190            mov     dpl,r6
0292 8F83      1191            mov     dph,r7
0294 88F0      1192            mov     b,r0
0296 E9        1193            mov     a,r1
0297 120100    1194            lcall   ___fsdiv
029A AE82      1195            mov     r6,dpl
029C AF83      1196            mov     r7,dph
029E A8F0      1197            mov     r0,b
02A0 F9        1198            mov     r1,a
02A1 E581      1199            mov     a,sp
02A3 24FC      1200            add     a,#0xfc
02A5 F581      1201            mov     sp,a
02A7 C006      1202            push    ar6
02A9 C007      1203            push    ar7
02AB C000      1204            push    ar0
02AD C001      1205            push    ar1
02AF 903333    1206            mov     dptr,#0x3333
02B2 75F053    1207            mov     b,#0x53
02B5 7440      1208            mov     a,#0x40
02B7 120100    1209            lcall   ___fsmul
02BA AE82      1210            mov     r6,dpl
02BC AF83      1211            mov     r7,dph
02BE A8F0      1212            mov     r0,b
02C0 F9        1213            mov     r1,a
02C1 E581      1214            mov     a,sp
02C3 24FC      1215            add     a,#0xfc
02C5 F581      1216            mov     sp,a
02C7 C006      1217            push    ar6
02C9 C007      1218            push    ar7
02CB C000      1219            push    ar0
02CD C001      1220            push    ar1
02CF 7468      1221            mov     a,#__str_0
02D1 C0E0      1222            push    acc
02D3 74AE      1223            mov     a,#(__str_0 >> 8)
02D5 C0E0      1224            push    acc
02D7 7480      1225            mov     a,#0x80
02D9 C0E0      1226            push    acc
02DB 74D8      1227            mov     a,#_display_LCD_buff_1_96
02DD C0E0      1228            push    acc
02DF 74A0      1229            mov     a,#(_display_LCD_buff_1_96 >> 8)
02E1 C0E0      1230            push    acc
02E3 7440      1231            mov     a,#0x40
02E5 C0E0      1232            push    acc
02E7 120100    1233            lcall   _sprintf
02EA E581      1234            mov     a,sp
02EC 24F2      1235            add     a,#0xf2
02EE F581      1236            mov     sp,a
02F0           1237   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:245: LCDprint(buff, 1, 1);
02F0 750801    1238            mov     _LCDprint_PARM_2,#0x01
02F3 D298      1239            setb    _LCDprint_PARM_3
02F5 90A0D8    1240            mov     dptr,#_display_LCD_buff_1_96
02F8 75F040    1241            mov     b,#0x40
02FB 120100    1242            lcall   _LCDprint
02FE           1243   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:246: sprintf(buff, "LM=%d RM=%d", pwm_left, pwm_right); // Display Motor Values
02FE AA08      1244            mov     r2,_pwm_right
0300 7B00      1245            mov     r3,#0x00
0302 AC48      1246            mov     r4,_pwm_left
0304 7D00      1247            mov     r5,#0x00
0306 C002      1248            push    ar2
0308 C003      1249            push    ar3
030A C004      1250            push    ar4
030C C005      1251            push    ar5
030E 74E8      1252            mov     a,#__str_1
0310 C0E0      1253            push    acc
0312 74AE      1254            mov     a,#(__str_1 >> 8)
0314 C0E0      1255            push    acc
0316 7480      1256            mov     a,#0x80
0318 C0E0      1257            push    acc
031A 74D8      1258            mov     a,#_display_LCD_buff_1_96
031C C0E0      1259            push    acc
031E 74A0      1260            mov     a,#(_display_LCD_buff_1_96 >> 8)
0320 C0E0      1261            push    acc
0322 7440      1262            mov     a,#0x40
0324 C0E0      1263            push    acc
0326 120100    1264            lcall   _sprintf
0329 E581      1265            mov     a,sp
032B 24F6      1266            add     a,#0xf6
032D F581      1267            mov     sp,a
032F           1268   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:247: LCDprint(buff, 2, 1);
032F 750802    1269            mov     _LCDprint_PARM_2,#0x02
0332 D298      1270            setb    _LCDprint_PARM_3
0334 90A0D8    1271            mov     dptr,#_display_LCD_buff_1_96
0337 75F040    1272            mov     b,#0x40
033A 020100    1273            ljmp    _LCDprint
033D           1274   ;------------------------------------------------------------
033D           1275   ;Allocation info for local variables in function 'turn_left'
033D           1276   ;------------------------------------------------------------
033D           1277   ;------------------------------------------------------------
033D           1278   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:257: void turn_left(void){
033D           1279   ;        -----------------------------------------
033D           1280   ;         function turn_left
033D           1281   ;        -----------------------------------------
033D           1282   _turn_left:
033D           1283   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:258: turn_timer = 0;
033D E4        1284            clr     a
033E F5C8      1285            mov     _turn_timer,a
0340 F5C9      1286            mov     (_turn_timer + 1),a
0342           1287   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:259: turn_time_update = 1;
0342 D268      1288            setb    _turn_time_update
0344           1289   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:260: while(turn_timer < 7000){
0344           1290   L017001?:
0344 C3        1291            clr     c
0345 E5C8      1292            mov     a,_turn_timer
0347 9458      1293            subb    a,#0x58
0349 E5C9      1294            mov     a,(_turn_timer + 1)
034B 6480      1295            xrl     a,#0x80
034D 949B      1296            subb    a,#0x9b
034F 5001      1297            jnc     L017003?
0351           1298   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:261: pwm_left = 0;
0351 754800    1299            mov     _pwm_left,#0x00
0354           1300   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:262: pwm_right = 100;
0354 750864    1301            mov     _pwm_right,#0x64
0357           1302   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:263: printf("turning left!\n");
0357 74A8      1303            mov     a,#__str_2
0359 C0E0      1304            push    acc
035B 74AF      1305            mov     a,#(__str_2 >> 8)
035D C0E0      1306            push    acc
035F 7480      1307            mov     a,#0x80
0361 C0E0      1308            push    acc
0363 120100    1309            lcall   _printf
0366 1581      1310            dec     sp
0368 1581      1311            dec     sp
036A 1581      1312            dec     sp
036C 8001      1313            sjmp    L017001?
036E           1314   L017003?:
036E           1315   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:265: turn_time_update = 0;
036E C268      1316            clr     _turn_time_update
0370           1317   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:266: turn_timer = 0;
0370 E4        1318            clr     a
0371 F5C8      1319            mov     _turn_timer,a
0373 F5C9      1320            mov     (_turn_timer + 1),a
0375 22        1321            ret
0376           1322   ;------------------------------------------------------------
0376           1323   ;Allocation info for local variables in function 'turn_right'
0376           1324   ;------------------------------------------------------------
0376           1325   ;------------------------------------------------------------
0376           1326   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:268: void turn_right(void){
0376           1327   ;        -----------------------------------------
0376           1328   ;         function turn_right
0376           1329   ;        -----------------------------------------
0376           1330   _turn_right:
0376           1331   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:269: turn_timer = 0;
0376 E4        1332            clr     a
0377 F5C8      1333            mov     _turn_timer,a
0379 F5C9      1334            mov     (_turn_timer + 1),a
037B           1335   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:270: turn_time_update = 1;
037B D268      1336            setb    _turn_time_update
037D           1337   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:271: while(turn_timer < 7000){
037D           1338   L018001?:
037D C3        1339            clr     c
037E E5C8      1340            mov     a,_turn_timer
0380 9458      1341            subb    a,#0x58
0382 E5C9      1342            mov     a,(_turn_timer + 1)
0384 6480      1343            xrl     a,#0x80
0386 949B      1344            subb    a,#0x9b
0388 5001      1345            jnc     L018003?
038A           1346   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:272: pwm_left = 100;
038A 754864    1347            mov     _pwm_left,#0x64
038D           1348   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:273: pwm_right = 0;
038D 750800    1349            mov     _pwm_right,#0x00
0390           1350   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:274: printf("turning right!\n");
0390 74A8      1351            mov     a,#__str_3
0392 C0E0      1352            push    acc
0394 74B0      1353            mov     a,#(__str_3 >> 8)
0396 C0E0      1354            push    acc
0398 7480      1355            mov     a,#0x80
039A C0E0      1356            push    acc
039C 120100    1357            lcall   _printf
039F 1581      1358            dec     sp
03A1 1581      1359            dec     sp
03A3 1581      1360            dec     sp
03A5 8001      1361            sjmp    L018001?
03A7           1362   L018003?:
03A7           1363   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:276: turn_time_update = 0;
03A7 C268      1364            clr     _turn_time_update
03A9           1365   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:277: turn_timer = 0;
03A9 E4        1366            clr     a
03AA F5C8      1367            mov     _turn_timer,a
03AC F5C9      1368            mov     (_turn_timer + 1),a
03AE 22        1369            ret
03AF           1370   ;------------------------------------------------------------
03AF           1371   ;Allocation info for local variables in function 'stop'
03AF           1372   ;------------------------------------------------------------
03AF           1373   ;------------------------------------------------------------
03AF           1374   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:280: void stop(void){
03AF           1375   ;        -----------------------------------------
03AF           1376   ;         function stop
03AF           1377   ;        -----------------------------------------
03AF           1378   _stop:
03AF           1379   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:281: while(1){
03AF           1380   L019002?:
03AF           1381   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:282: pwm_left = 0;
03AF 754800    1382            mov     _pwm_left,#0x00
03B2           1383   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:283: pwm_right = 0;
03B2 750800    1384            mov     _pwm_right,#0x00
03B5 8001      1385            sjmp    L019002?
03B7           1386   ;------------------------------------------------------------
03B7           1387   ;Allocation info for local variables in function 'execute'
03B7           1388   ;------------------------------------------------------------
03B7           1389   ;command                   Allocated to registers r2 r3 
03B7           1390   ;------------------------------------------------------------
03B7           1391   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:287: void execute(int command){
03B7           1392   ;        -----------------------------------------
03B7           1393   ;         function execute
03B7           1394   ;        -----------------------------------------
03B7           1395   _execute:
03B7 AA82      1396            mov     r2,dpl
03B9 AB83      1397            mov     r3,dph
03BB           1398   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:288: switch(command){
03BB BA0228    1399            cjne    r2,#0x02,L020014?
03BE BB0028    1400            cjne    r3,#0x00,L020014?
03C1 8001      1401            sjmp    L020001?
03C3           1402   L020014?:
03C3 BA03A8    1403            cjne    r2,#0x03,L020015?
03C6 BB00A8    1404            cjne    r3,#0x00,L020015?
03C9 8001      1405            sjmp    L020002?
03CB           1406   L020015?:
03CB           1407   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:289: case 2:
03CB BA0428    1408            cjne    r2,#0x04,L020008?
03CE BB0028    1409            cjne    r3,#0x00,L020008?
03D1 8001      1410            sjmp    L020003?
03D3           1411   L020001?:
03D3           1412   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:290: turn_left();
03D3           1413   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:291: break;
03D3           1414   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:292: case 3:
03D3 020100    1415            ljmp    _turn_left
03D6           1416   L020002?:
03D6           1417   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:293: turn_right();
03D6           1418   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:294: break;
03D6           1419   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:295: case 4:
03D6 020100    1420            ljmp    _turn_right
03D9           1421   L020003?:
03D9           1422   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:296: if(start == 1){
03D9           1423   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:297: start = 0;
03D9 1018A8    1424            jbc     _start,L020017?
03DC 8001      1425            sjmp    L020005?
03DE           1426   L020017?:
03DE 22        1427            ret
03DF           1428   L020005?:
03DF           1429   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:300: stop();
03DF           1430   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:303: }
03DF 020100    1431            ljmp    _stop
03E2           1432   L020008?:
03E2 22        1433            ret
03E3           1434   ;------------------------------------------------------------
03E3           1435   ;Allocation info for local variables in function 'main'
03E3           1436   ;------------------------------------------------------------
03E3           1437   ;cor                       Allocated to registers r2 r3 r4 r5 
03E3           1438   ;cur_error                 Allocated with name '_main_cur_error_1_112'
03E3           1439   ;pre_error                 Allocated with name '_main_pre_error_1_112'
03E3           1440   ;thresh                    Allocated to registers 
03E3           1441   ;left                      Allocated with name '_main_left_1_112'
03E3           1442   ;right                     Allocated with name '_main_right_1_112'
03E3           1443   ;line_sensor               Allocated with name '_main_line_sensor_1_112'
03E3           1444   ;diff                      Allocated with name '_main_diff_1_112'
03E3           1445   ;line_counter              Allocated with name '_main_line_counter_1_112'
03E3           1446   ;command                   Allocated with name '_main_command_1_112'
03E3           1447   ;state                     Allocated with name '_main_state_1_112'
03E3           1448   ;------------------------------------------------------------
03E3           1449   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:306: void main (void){
03E3           1450   ;        -----------------------------------------
03E3           1451   ;         function main
03E3           1452   ;        -----------------------------------------
03E3           1453   _main:
03E3           1454   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:308: double cor = 0;
03E3 7A00      1455            mov     r2,#0x00
03E5 7B00      1456            mov     r3,#0x00
03E7           1457   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:309: double cur_error =0;
03E7           1458   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:314: double left = (AD1DAT1/255.0)*3.3;
03E7 E4        1459            clr     a
03E8 FC        1460            mov     r4,a
03E9 FD        1461            mov     r5,a
03EA F528      1462            mov     _main_cur_error_1_112,a
03EC F529      1463            mov     (_main_cur_error_1_112 + 1),a
03EE F52A      1464            mov     (_main_cur_error_1_112 + 2),a
03F0 F52B      1465            mov     (_main_cur_error_1_112 + 3),a
03F2 E5D6      1466            mov     a,_AD1DAT1
03F4           1467   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:315: double right = (AD1DAT2/255.0)*3.3;
03F4 E5D7      1468            mov     a,_AD1DAT2
03F6           1469   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:316: double line_sensor = (AD1DAT3/255.0)*3.3;
03F6 E5F5      1470            mov     a,_AD1DAT3
03F8           1471   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:320: int line_counter = 0;
03F8           1472   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:321: int command = 0;
03F8 E4        1473            clr     a
03F9 F508      1474            mov     _main_line_counter_1_112,a
03FB F509      1475            mov     (_main_line_counter_1_112 + 1),a
03FD F558      1476            mov     _main_command_1_112,a
03FF F559      1477            mov     (_main_command_1_112 + 1),a
0401           1478   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:322: int state = 1;   
0401 75A801    1479            mov     _main_state_1_112,#0x01
0404 E4        1480            clr     a
0405 F5A9      1481            mov     (_main_state_1_112 + 1),a
0407           1482   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:325: InitPorts();
0407 C002      1483            push    ar2
0409 C003      1484            push    ar3
040B C004      1485            push    ar4
040D C005      1486            push    ar5
040F 120100    1487            lcall   _InitPorts
0412           1488   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:326: LCD_8BIT();
0412 120100    1489            lcall   _LCD_8BIT
0415           1490   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:327: InitSerialPort();
0415 120100    1491            lcall   _InitSerialPort
0418           1492   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:328: InitADC();
0418 120100    1493            lcall   _InitADC
041B           1494   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:329: InitTimer0();
041B 120100    1495            lcall   _InitTimer0
041E D005      1496            pop     ar5
0420 D004      1497            pop     ar4
0422 D003      1498            pop     ar3
0424 D002      1499            pop     ar2
0426           1500   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:332: pre_error = 0;
0426 757800    1501            mov     _main_pre_error_1_112,#0x00
0429 757900    1502            mov     (_main_pre_error_1_112 + 1),#0x00
042C 757A00    1503            mov     (_main_pre_error_1_112 + 2),#0x00
042F 757B00    1504            mov     (_main_pre_error_1_112 + 3),#0x00
0432           1505   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:333: while(1)
0432           1506   L021042?:
0432           1507   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:343: left = (AD1DAT1/255.0)*3.3;
0432 85D682    1508            mov     dpl,_AD1DAT1
0435 C002      1509            push    ar2
0437 C003      1510            push    ar3
0439 C004      1511            push    ar4
043B C005      1512            push    ar5
043D 120100    1513            lcall   ___uchar2fs
0440 AE82      1514            mov     r6,dpl
0442 AF83      1515            mov     r7,dph
0444 A8F0      1516            mov     r0,b
0446 F9        1517            mov     r1,a
0447 E4        1518            clr     a
0448 C0E0      1519            push    acc
044A C0E0      1520            push    acc
044C 747F      1521            mov     a,#0x7F
044E C0E0      1522            push    acc
0450 7443      1523            mov     a,#0x43
0452 C0E0      1524            push    acc
0454 8E82      1525            mov     dpl,r6
0456 8F83      1526            mov     dph,r7
0458 88F0      1527            mov     b,r0
045A E9        1528            mov     a,r1
045B 120100    1529            lcall   ___fsdiv
045E AE82      1530            mov     r6,dpl
0460 AF83      1531            mov     r7,dph
0462 A8F0      1532            mov     r0,b
0464 F9        1533            mov     r1,a
0465 E581      1534            mov     a,sp
0467 24FC      1535            add     a,#0xfc
0469 F581      1536            mov     sp,a
046B C006      1537            push    ar6
046D C007      1538            push    ar7
046F C000      1539            push    ar0
0471 C001      1540            push    ar1
0473 903333    1541            mov     dptr,#0x3333
0476 75F053    1542            mov     b,#0x53
0479 7440      1543            mov     a,#0x40
047B 120100    1544            lcall   ___fsmul
047E 8582C8    1545            mov     _main_left_1_112,dpl
0481 8583C9    1546            mov     (_main_left_1_112 + 1),dph
0484 85F0CA    1547            mov     (_main_left_1_112 + 2),b
0487 F5CB      1548            mov     (_main_left_1_112 + 3),a
0489 E581      1549            mov     a,sp
048B 24FC      1550            add     a,#0xfc
048D F581      1551            mov     sp,a
048F           1552   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:344: right = (AD1DAT2/255.0)*3.3;
048F 85D782    1553            mov     dpl,_AD1DAT2
0492 120100    1554            lcall   ___uchar2fs
0495 AE82      1555            mov     r6,dpl
0497 AF83      1556            mov     r7,dph
0499 A8F0      1557            mov     r0,b
049B F9        1558            mov     r1,a
049C E4        1559            clr     a
049D C0E0      1560            push    acc
049F C0E0      1561            push    acc
04A1 747F      1562            mov     a,#0x7F
04A3 C0E0      1563            push    acc
04A5 7443      1564            mov     a,#0x43
04A7 C0E0      1565            push    acc
04A9 8E82      1566            mov     dpl,r6
04AB 8F83      1567            mov     dph,r7
04AD 88F0      1568            mov     b,r0
04AF E9        1569            mov     a,r1
04B0 120100    1570            lcall   ___fsdiv
04B3 AE82      1571            mov     r6,dpl
04B5 AF83      1572            mov     r7,dph
04B7 A8F0      1573            mov     r0,b
04B9 F9        1574            mov     r1,a
04BA E581      1575            mov     a,sp
04BC 24FC      1576            add     a,#0xfc
04BE F581      1577            mov     sp,a
04C0 C006      1578            push    ar6
04C2 C007      1579            push    ar7
04C4 C000      1580            push    ar0
04C6 C001      1581            push    ar1
04C8 903333    1582            mov     dptr,#0x3333
04CB 75F053    1583            mov     b,#0x53
04CE 7440      1584            mov     a,#0x40
04D0 120100    1585            lcall   ___fsmul
04D3 858218    1586            mov     _main_right_1_112,dpl
04D6 858319    1587            mov     (_main_right_1_112 + 1),dph
04D9 85F01A    1588            mov     (_main_right_1_112 + 2),b
04DC F51B      1589            mov     (_main_right_1_112 + 3),a
04DE E581      1590            mov     a,sp
04E0 24FC      1591            add     a,#0xfc
04E2 F581      1592            mov     sp,a
04E4           1593   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:345: line_sensor = (AD1DAT3/255.0)*3.3;
04E4 85F582    1594            mov     dpl,_AD1DAT3
04E7 120100    1595            lcall   ___uchar2fs
04EA AE82      1596            mov     r6,dpl
04EC AF83      1597            mov     r7,dph
04EE A8F0      1598            mov     r0,b
04F0 F9        1599            mov     r1,a
04F1 E4        1600            clr     a
04F2 C0E0      1601            push    acc
04F4 C0E0      1602            push    acc
04F6 747F      1603            mov     a,#0x7F
04F8 C0E0      1604            push    acc
04FA 7443      1605            mov     a,#0x43
04FC C0E0      1606            push    acc
04FE 8E82      1607            mov     dpl,r6
0500 8F83      1608            mov     dph,r7
0502 88F0      1609            mov     b,r0
0504 E9        1610            mov     a,r1
0505 120100    1611            lcall   ___fsdiv
0508 AE82      1612            mov     r6,dpl
050A AF83      1613            mov     r7,dph
050C A8F0      1614            mov     r0,b
050E F9        1615            mov     r1,a
050F E581      1616            mov     a,sp
0511 24FC      1617            add     a,#0xfc
0513 F581      1618            mov     sp,a
0515 C006      1619            push    ar6
0517 C007      1620            push    ar7
0519 C000      1621            push    ar0
051B C001      1622            push    ar1
051D 903333    1623            mov     dptr,#0x3333
0520 75F053    1624            mov     b,#0x53
0523 7440      1625            mov     a,#0x40
0525 120100    1626            lcall   ___fsmul
0528 858268    1627            mov     _main_line_sensor_1_112,dpl
052B 858369    1628            mov     (_main_line_sensor_1_112 + 1),dph
052E 85F06A    1629            mov     (_main_line_sensor_1_112 + 2),b
0531 F56B      1630            mov     (_main_line_sensor_1_112 + 3),a
0533 E581      1631            mov     a,sp
0535 24FC      1632            add     a,#0xfc
0537 F581      1633            mov     sp,a
0539           1634   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:346: diff = left - right;
0539 C018      1635            push    _main_right_1_112
053B C019      1636            push    (_main_right_1_112 + 1)
053D C01A      1637            push    (_main_right_1_112 + 2)
053F C01B      1638            push    (_main_right_1_112 + 3)
0541 85C882    1639            mov     dpl,_main_left_1_112
0544 85C983    1640            mov     dph,(_main_left_1_112 + 1)
0547 85CAF0    1641            mov     b,(_main_left_1_112 + 2)
054A E5CB      1642            mov     a,(_main_left_1_112 + 3)
054C 120100    1643            lcall   ___fssub
054F 8582B8    1644            mov     _main_diff_1_112,dpl
0552 8583B9    1645            mov     (_main_diff_1_112 + 1),dph
0555 85F0BA    1646            mov     (_main_diff_1_112 + 2),b
0558 F5BB      1647            mov     (_main_diff_1_112 + 3),a
055A E581      1648            mov     a,sp
055C 24FC      1649            add     a,#0xfc
055E F581      1650            mov     sp,a
0560 D005      1651            pop     ar5
0562 D004      1652            pop     ar4
0564 D003      1653            pop     ar3
0566 D002      1654            pop     ar2
0568           1655   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:349: if(time_update_flag==1) // If the clock has been updated, refresh the display
0568 30B8A8    1656            jnb     _time_update_flag,L021002?
056B           1657   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:351: display_LCD();
056B C002      1658            push    ar2
056D C003      1659            push    ar3
056F C004      1660            push    ar4
0571 C005      1661            push    ar5
0573 120100    1662            lcall   _display_LCD
0576 D005      1663            pop     ar5
0578 D004      1664            pop     ar4
057A D003      1665            pop     ar3
057C D002      1666            pop     ar2
057E           1667   L021002?:
057E           1668   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:355: if(((MID_THRESH_LO< left) && (left < MID_THRESH_HI)) && ((MID_THRESH_LO < right) && (right < MID_THRESH_HI))){
057E C002      1669            push    ar2
0580 C003      1670            push    ar3
0582 C004      1671            push    ar4
0584 C005      1672            push    ar5
0586 C0C8      1673            push    _main_left_1_112
0588 C0C9      1674            push    (_main_left_1_112 + 1)
058A C0CA      1675            push    (_main_left_1_112 + 2)
058C C0CB      1676            push    (_main_left_1_112 + 3)
058E 903333    1677            mov     dptr,#0x3333
0591 75F033    1678            mov     b,#0x33
0594 743F      1679            mov     a,#0x3F
0596 120100    1680            lcall   ___fslt
0599 AE82      1681            mov     r6,dpl
059B E581      1682            mov     a,sp
059D 24FC      1683            add     a,#0xfc
059F F581      1684            mov     sp,a
05A1 D005      1685            pop     ar5
05A3 D004      1686            pop     ar4
05A5 D003      1687            pop     ar3
05A7 D002      1688            pop     ar2
05A9 EE        1689            mov     a,r6
05AA 7001      1690            jnz     L021069?
05AC 020100    1691            ljmp    L021017?
05AF           1692   L021069?:
05AF C002      1693            push    ar2
05B1 C003      1694            push    ar3
05B3 C004      1695            push    ar4
05B5 C005      1696            push    ar5
05B7 E4        1697            clr     a
05B8 C0E0      1698            push    acc
05BA C0E0      1699            push    acc
05BC 7480      1700            mov     a,#0x80
05BE C0E0      1701            push    acc
05C0 743F      1702            mov     a,#0x3F
05C2 C0E0      1703            push    acc
05C4 85C882    1704            mov     dpl,_main_left_1_112
05C7 85C983    1705            mov     dph,(_main_left_1_112 + 1)
05CA 85CAF0    1706            mov     b,(_main_left_1_112 + 2)
05CD E5CB      1707            mov     a,(_main_left_1_112 + 3)
05CF 120100    1708            lcall   ___fslt
05D2 AE82      1709            mov     r6,dpl
05D4 E581      1710            mov     a,sp
05D6 24FC      1711            add     a,#0xfc
05D8 F581      1712            mov     sp,a
05DA D005      1713            pop     ar5
05DC D004      1714            pop     ar4
05DE D003      1715            pop     ar3
05E0 D002      1716            pop     ar2
05E2 EE        1717            mov     a,r6
05E3 6001      1718            jz      L021017?
05E5 C002      1719            push    ar2
05E7 C003      1720            push    ar3
05E9 C004      1721            push    ar4
05EB C005      1722            push    ar5
05ED C018      1723            push    _main_right_1_112
05EF C019      1724            push    (_main_right_1_112 + 1)
05F1 C01A      1725            push    (_main_right_1_112 + 2)
05F3 C01B      1726            push    (_main_right_1_112 + 3)
05F5 903333    1727            mov     dptr,#0x3333
05F8 75F033    1728            mov     b,#0x33
05FB 743F      1729            mov     a,#0x3F
05FD 120100    1730            lcall   ___fslt
0600 AE82      1731            mov     r6,dpl
0602 E581      1732            mov     a,sp
0604 24FC      1733            add     a,#0xfc
0606 F581      1734            mov     sp,a
0608 D005      1735            pop     ar5
060A D004      1736            pop     ar4
060C D003      1737            pop     ar3
060E D002      1738            pop     ar2
0610 EE        1739            mov     a,r6
0611 6001      1740            jz      L021017?
0613 C002      1741            push    ar2
0615 C003      1742            push    ar3
0617 C004      1743            push    ar4
0619 C005      1744            push    ar5
061B E4        1745            clr     a
061C C0E0      1746            push    acc
061E C0E0      1747            push    acc
0620 7480      1748            mov     a,#0x80
0622 C0E0      1749            push    acc
0624 743F      1750            mov     a,#0x3F
0626 C0E0      1751            push    acc
0628 851882    1752            mov     dpl,_main_right_1_112
062B 851983    1753            mov     dph,(_main_right_1_112 + 1)
062E 851AF0    1754            mov     b,(_main_right_1_112 + 2)
0631 E51B      1755            mov     a,(_main_right_1_112 + 3)
0633 120100    1756            lcall   ___fslt
0636 AE82      1757            mov     r6,dpl
0638 E581      1758            mov     a,sp
063A 24FC      1759            add     a,#0xfc
063C F581      1760            mov     sp,a
063E D005      1761            pop     ar5
0640 D004      1762            pop     ar4
0642 D003      1763            pop     ar3
0644 D002      1764            pop     ar2
0646 EE        1765            mov     a,r6
0647 6001      1766            jz      L021017?
0649           1767   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:356: cur_error = 0;
0649 752800    1768            mov     _main_cur_error_1_112,#0x00
064C 752900    1769            mov     (_main_cur_error_1_112 + 1),#0x00
064F 752A00    1770            mov     (_main_cur_error_1_112 + 2),#0x00
0652 752B00    1771            mov     (_main_cur_error_1_112 + 3),#0x00
0655           1772   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:357: pwm_left = 100;
0655 754864    1773            mov     _pwm_left,#0x64
0658           1774   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:358: pwm_right = 100;
0658 750864    1775            mov     _pwm_right,#0x64
065B 020100    1776            ljmp    L021018?
065E           1777   L021017?:
065E           1778   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:360: else if(0.2 < diff){     
065E C002      1779            push    ar2
0660 C003      1780            push    ar3
0662 C004      1781            push    ar4
0664 C005      1782            push    ar5
0666 C0B8      1783            push    _main_diff_1_112
0668 C0B9      1784            push    (_main_diff_1_112 + 1)
066A C0BA      1785            push    (_main_diff_1_112 + 2)
066C C0BB      1786            push    (_main_diff_1_112 + 3)
066E 90CCCD    1787            mov     dptr,#0xCCCD
0671 75F04C    1788            mov     b,#0x4C
0674 743E      1789            mov     a,#0x3E
0676 120100    1790            lcall   ___fslt
0679 AE82      1791            mov     r6,dpl
067B E581      1792            mov     a,sp
067D 24FC      1793            add     a,#0xfc
067F F581      1794            mov     sp,a
0681 D005      1795            pop     ar5
0683 D004      1796            pop     ar4
0685 D003      1797            pop     ar3
0687 D002      1798            pop     ar2
0689 EE        1799            mov     a,r6
068A 6001      1800            jz      L021014?
068C           1801   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:361: cur_error = 3;
068C 752800    1802            mov     _main_cur_error_1_112,#0x00
068F 752900    1803            mov     (_main_cur_error_1_112 + 1),#0x00
0692 752A40    1804            mov     (_main_cur_error_1_112 + 2),#0x40
0695 752B40    1805            mov     (_main_cur_error_1_112 + 3),#0x40
0698           1806   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:362: pwm_left = 100 - cor;
0698 C002      1807            push    ar2
069A C003      1808            push    ar3
069C C004      1809            push    ar4
069E C005      1810            push    ar5
06A0 900000    1811            mov     dptr,#0x0000
06A3 75F0C8    1812            mov     b,#0xC8
06A6 7442      1813            mov     a,#0x42
06A8 120100    1814            lcall   ___fssub
06AB AE82      1815            mov     r6,dpl
06AD AF83      1816            mov     r7,dph
06AF A8F0      1817            mov     r0,b
06B1 F9        1818            mov     r1,a
06B2 E581      1819            mov     a,sp
06B4 24FC      1820            add     a,#0xfc
06B6 F581      1821            mov     sp,a
06B8 8E82      1822            mov     dpl,r6
06BA 8F83      1823            mov     dph,r7
06BC 88F0      1824            mov     b,r0
06BE E9        1825            mov     a,r1
06BF 120100    1826            lcall   ___fs2uchar
06C2 858248    1827            mov     _pwm_left,dpl
06C5           1828   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:363: pwm_right = 100;
06C5 750864    1829            mov     _pwm_right,#0x64
06C8 020100    1830            ljmp    L021018?
06CB           1831   L021014?:
06CB           1832   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:365: else if(diff < -0.2){
06CB C002      1833            push    ar2
06CD C003      1834            push    ar3
06CF C004      1835            push    ar4
06D1 C005      1836            push    ar5
06D3 74CD      1837            mov     a,#0xCD
06D5 C0E0      1838            push    acc
06D7 74CC      1839            mov     a,#0xCC
06D9 C0E0      1840            push    acc
06DB 744C      1841            mov     a,#0x4C
06DD C0E0      1842            push    acc
06DF 74BE      1843            mov     a,#0xBE
06E1 C0E0      1844            push    acc
06E3 85B882    1845            mov     dpl,_main_diff_1_112
06E6 85B983    1846            mov     dph,(_main_diff_1_112 + 1)
06E9 85BAF0    1847            mov     b,(_main_diff_1_112 + 2)
06EC E5BB      1848            mov     a,(_main_diff_1_112 + 3)
06EE 120100    1849            lcall   ___fslt
06F1 AE82      1850            mov     r6,dpl
06F3 E581      1851            mov     a,sp
06F5 24FC      1852            add     a,#0xfc
06F7 F581      1853            mov     sp,a
06F9 D005      1854            pop     ar5
06FB D004      1855            pop     ar4
06FD D003      1856            pop     ar3
06FF D002      1857            pop     ar2
0701 EE        1858            mov     a,r6
0702 6001      1859            jz      L021011?
0704           1860   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:366: cur_error= -3;
0704 752800    1861            mov     _main_cur_error_1_112,#0x00
0707 752900    1862            mov     (_main_cur_error_1_112 + 1),#0x00
070A 752A40    1863            mov     (_main_cur_error_1_112 + 2),#0x40
070D 752BC0    1864            mov     (_main_cur_error_1_112 + 3),#0xC0
0710           1865   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:367: pwm_left = 100;
0710 754864    1866            mov     _pwm_left,#0x64
0713           1867   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:368: pwm_right = 100 + cor;
0713 E4        1868            clr     a
0714 C0E0      1869            push    acc
0716 C0E0      1870            push    acc
0718 74C8      1871            mov     a,#0xC8
071A C0E0      1872            push    acc
071C 7442      1873            mov     a,#0x42
071E C0E0      1874            push    acc
0720 8A82      1875            mov     dpl,r2
0722 8B83      1876            mov     dph,r3
0724 8CF0      1877            mov     b,r4
0726 ED        1878            mov     a,r5
0727 120100    1879            lcall   ___fsadd
072A AE82      1880            mov     r6,dpl
072C AF83      1881            mov     r7,dph
072E A8F0      1882            mov     r0,b
0730 F9        1883            mov     r1,a
0731 E581      1884            mov     a,sp
0733 24FC      1885            add     a,#0xfc
0735 F581      1886            mov     sp,a
0737 8E82      1887            mov     dpl,r6
0739 8F83      1888            mov     dph,r7
073B 88F0      1889            mov     b,r0
073D E9        1890            mov     a,r1
073E 120100    1891            lcall   ___fs2uchar
0741 858208    1892            mov     _pwm_right,dpl
0744 020100    1893            ljmp    L021018?
0747           1894   L021011?:
0747           1895   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:370: else if((left < SIDE_THRESH) && (right < SIDE_THRESH)){
0747 C002      1896            push    ar2
0749 C003      1897            push    ar3
074B C004      1898            push    ar4
074D C005      1899            push    ar5
074F 749A      1900            mov     a,#0x9A
0751 C0E0      1901            push    acc
0753 7499      1902            mov     a,#0x99
0755 C0E0      1903            push    acc
0757 C0E0      1904            push    acc
0759 743E      1905            mov     a,#0x3E
075B C0E0      1906            push    acc
075D 85C882    1907            mov     dpl,_main_left_1_112
0760 85C983    1908            mov     dph,(_main_left_1_112 + 1)
0763 85CAF0    1909            mov     b,(_main_left_1_112 + 2)
0766 E5CB      1910            mov     a,(_main_left_1_112 + 3)
0768 120100    1911            lcall   ___fslt
076B AE82      1912            mov     r6,dpl
076D E581      1913            mov     a,sp
076F 24FC      1914            add     a,#0xfc
0771 F581      1915            mov     sp,a
0773 D005      1916            pop     ar5
0775 D004      1917            pop     ar4
0777 D003      1918            pop     ar3
0779 D002      1919            pop     ar2
077B EE        1920            mov     a,r6
077C 7001      1921            jnz     L021075?
077E 020100    1922            ljmp    L021018?
0781           1923   L021075?:
0781 C002      1924            push    ar2
0783 C003      1925            push    ar3
0785 C004      1926            push    ar4
0787 C005      1927            push    ar5
0789 749A      1928            mov     a,#0x9A
078B C0E0      1929            push    acc
078D 7499      1930            mov     a,#0x99
078F C0E0      1931            push    acc
0791 C0E0      1932            push    acc
0793 743E      1933            mov     a,#0x3E
0795 C0E0      1934            push    acc
0797 851882    1935            mov     dpl,_main_right_1_112
079A 851983    1936            mov     dph,(_main_right_1_112 + 1)
079D 851AF0    1937            mov     b,(_main_right_1_112 + 2)
07A0 E51B      1938            mov     a,(_main_right_1_112 + 3)
07A2 120100    1939            lcall   ___fslt
07A5 AE82      1940            mov     r6,dpl
07A7 E581      1941            mov     a,sp
07A9 24FC      1942            add     a,#0xfc
07AB F581      1943            mov     sp,a
07AD D005      1944            pop     ar5
07AF D004      1945            pop     ar4
07B1 D003      1946            pop     ar3
07B3 D002      1947            pop     ar2
07B5 EE        1948            mov     a,r6
07B6 7001      1949            jnz     L021076?
07B8 020100    1950            ljmp    L021018?
07BB           1951   L021076?:
07BB           1952   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:371: if(pre_error>0){
07BB C002      1953            push    ar2
07BD C003      1954            push    ar3
07BF C004      1955            push    ar4
07C1 C005      1956            push    ar5
07C3 E4        1957            clr     a
07C4 C0E0      1958            push    acc
07C6 C0E0      1959            push    acc
07C8 C0E0      1960            push    acc
07CA C0E0      1961            push    acc
07CC 857882    1962            mov     dpl,_main_pre_error_1_112
07CF 857983    1963            mov     dph,(_main_pre_error_1_112 + 1)
07D2 857AF0    1964            mov     b,(_main_pre_error_1_112 + 2)
07D5 E57B      1965            mov     a,(_main_pre_error_1_112 + 3)
07D7 120100    1966            lcall   ___fsgt
07DA AE82      1967            mov     r6,dpl
07DC E581      1968            mov     a,sp
07DE 24FC      1969            add     a,#0xfc
07E0 F581      1970            mov     sp,a
07E2 D005      1971            pop     ar5
07E4 D004      1972            pop     ar4
07E6 D003      1973            pop     ar3
07E8 D002      1974            pop     ar2
07EA EE        1975            mov     a,r6
07EB 6001      1976            jz      L021004?
07ED           1977   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:372: cur_error = 5;
07ED 752800    1978            mov     _main_cur_error_1_112,#0x00
07F0 752900    1979            mov     (_main_cur_error_1_112 + 1),#0x00
07F3 752AA0    1980            mov     (_main_cur_error_1_112 + 2),#0xA0
07F6 752B40    1981            mov     (_main_cur_error_1_112 + 3),#0x40
07F9           1982   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:373: pwm_left = 100 - cor;
07F9 C002      1983            push    ar2
07FB C003      1984            push    ar3
07FD C004      1985            push    ar4
07FF C005      1986            push    ar5
0801 C002      1987            push    ar2
0803 C003      1988            push    ar3
0805 C004      1989            push    ar4
0807 C005      1990            push    ar5
0809 900000    1991            mov     dptr,#0x0000
080C 75F0C8    1992            mov     b,#0xC8
080F 7442      1993            mov     a,#0x42
0811 120100    1994            lcall   ___fssub
0814 AE82      1995            mov     r6,dpl
0816 AF83      1996            mov     r7,dph
0818 A8F0      1997            mov     r0,b
081A F9        1998            mov     r1,a
081B E581      1999            mov     a,sp
081D 24FC      2000            add     a,#0xfc
081F F581      2001            mov     sp,a
0821 8E82      2002            mov     dpl,r6
0823 8F83      2003            mov     dph,r7
0825 88F0      2004            mov     b,r0
0827 E9        2005            mov     a,r1
0828 120100    2006            lcall   ___fs2uchar
082B 858248    2007            mov     _pwm_left,dpl
082E D005      2008            pop     ar5
0830 D004      2009            pop     ar4
0832 D003      2010            pop     ar3
0834 D002      2011            pop     ar2
0836           2012   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:374: pwm_right = 100;
0836 750864    2013            mov     _pwm_right,#0x64
0839           2014   L021004?:
0839           2015   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:376: if(pre_error<0){
0839 C002      2016            push    ar2
083B C003      2017            push    ar3
083D C004      2018            push    ar4
083F C005      2019            push    ar5
0841 E4        2020            clr     a
0842 C0E0      2021            push    acc
0844 C0E0      2022            push    acc
0846 C0E0      2023            push    acc
0848 C0E0      2024            push    acc
084A 857882    2025            mov     dpl,_main_pre_error_1_112
084D 857983    2026            mov     dph,(_main_pre_error_1_112 + 1)
0850 857AF0    2027            mov     b,(_main_pre_error_1_112 + 2)
0853 E57B      2028            mov     a,(_main_pre_error_1_112 + 3)
0855 120100    2029            lcall   ___fslt
0858 AE82      2030            mov     r6,dpl
085A E581      2031            mov     a,sp
085C 24FC      2032            add     a,#0xfc
085E F581      2033            mov     sp,a
0860 D005      2034            pop     ar5
0862 D004      2035            pop     ar4
0864 D003      2036            pop     ar3
0866 D002      2037            pop     ar2
0868 EE        2038            mov     a,r6
0869 6001      2039            jz      L021018?
086B           2040   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:377: cur_error = -5;
086B 752800    2041            mov     _main_cur_error_1_112,#0x00
086E 752900    2042            mov     (_main_cur_error_1_112 + 1),#0x00
0871 752AA0    2043            mov     (_main_cur_error_1_112 + 2),#0xA0
0874 752BC0    2044            mov     (_main_cur_error_1_112 + 3),#0xC0
0877           2045   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:378: pwm_left = 100;
0877 754864    2046            mov     _pwm_left,#0x64
087A           2047   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:379: pwm_right = 100 + cor;
087A E4        2048            clr     a
087B C0E0      2049            push    acc
087D C0E0      2050            push    acc
087F 74C8      2051            mov     a,#0xC8
0881 C0E0      2052            push    acc
0883 7442      2053            mov     a,#0x42
0885 C0E0      2054            push    acc
0887 8A82      2055            mov     dpl,r2
0889 8B83      2056            mov     dph,r3
088B 8CF0      2057            mov     b,r4
088D ED        2058            mov     a,r5
088E 120100    2059            lcall   ___fsadd
0891 AE82      2060            mov     r6,dpl
0893 AF83      2061            mov     r7,dph
0895 A8F0      2062            mov     r0,b
0897 F9        2063            mov     r1,a
0898 E581      2064            mov     a,sp
089A 24FC      2065            add     a,#0xfc
089C F581      2066            mov     sp,a
089E 8E82      2067            mov     dpl,r6
08A0 8F83      2068            mov     dph,r7
08A2 88F0      2069            mov     b,r0
08A4 E9        2070            mov     a,r1
08A5 120100    2071            lcall   ___fs2uchar
08A8 858208    2072            mov     _pwm_right,dpl
08AB           2073   L021018?:
08AB           2074   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:382: cor = KP*cur_error + KD*(cur_error - pre_error);
08AB C028      2075            push    _main_cur_error_1_112
08AD C029      2076            push    (_main_cur_error_1_112 + 1)
08AF C02A      2077            push    (_main_cur_error_1_112 + 2)
08B1 C02B      2078            push    (_main_cur_error_1_112 + 3)
08B3 900000    2079            mov     dptr,#0x0000
08B6 75F0E0    2080            mov     b,#0xE0
08B9 7441      2081            mov     a,#0x41
08BB 120100    2082            lcall   ___fsmul
08BE AA82      2083            mov     r2,dpl
08C0 AB83      2084            mov     r3,dph
08C2 ACF0      2085            mov     r4,b
08C4 FD        2086            mov     r5,a
08C5 E581      2087            mov     a,sp
08C7 24FC      2088            add     a,#0xfc
08C9 F581      2089            mov     sp,a
08CB           2090   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:383: pre_error = cur_error;
08CB 852878    2091            mov     _main_pre_error_1_112,_main_cur_error_1_112
08CE 852979    2092            mov     (_main_pre_error_1_112 + 1),(_main_cur_error_1_112 + 1)
08D1 852A7A    2093            mov     (_main_pre_error_1_112 + 2),(_main_cur_error_1_112 + 2)
08D4 852B7B    2094            mov     (_main_pre_error_1_112 + 3),(_main_cur_error_1_112 + 3)
08D7           2095   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:387: switch(state){
08D7 7401      2096            mov     a,#0x01
08D9 B5A8E8    2097            cjne    a,_main_state_1_112,L021079?
08DC E4        2098            clr     a
08DD B5A9E8    2099            cjne    a,(_main_state_1_112 + 1),L021079?
08E0 8001      2100            sjmp    L021022?
08E2           2101   L021079?:
08E2 7402      2102            mov     a,#0x02
08E4 B5A868    2103            cjne    a,_main_state_1_112,L021080?
08E7 E4        2104            clr     a
08E8 B5A968    2105            cjne    a,(_main_state_1_112 + 1),L021080?
08EB 8001      2106            sjmp    L021025?
08ED           2107   L021080?:
08ED 7403      2108            mov     a,#0x03
08EF B5A8E8    2109            cjne    a,_main_state_1_112,L021081?
08F2 E4        2110            clr     a
08F3 B5A9E8    2111            cjne    a,(_main_state_1_112 + 1),L021081?
08F6 020100    2112            ljmp    L021028?
08F9           2113   L021081?:
08F9 7404      2114            mov     a,#0x04
08FB B5A868    2115            cjne    a,_main_state_1_112,L021082?
08FE E4        2116            clr     a
08FF B5A968    2117            cjne    a,(_main_state_1_112 + 1),L021082?
0902 020100    2118            ljmp    L021037?
0905           2119   L021082?:
0905 020100    2120            ljmp    L021042?
0908           2121   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:388: case 1:
0908           2122   L021022?:
0908           2123   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:389: if(line_sensor > HI_THRESH){
0908 C002      2124            push    ar2
090A C003      2125            push    ar3
090C C004      2126            push    ar4
090E C005      2127            push    ar5
0910 E4        2128            clr     a
0911 C0E0      2129            push    acc
0913 C0E0      2130            push    acc
0915 C0E0      2131            push    acc
0917 743F      2132            mov     a,#0x3F
0919 C0E0      2133            push    acc
091B 856882    2134            mov     dpl,_main_line_sensor_1_112
091E 856983    2135            mov     dph,(_main_line_sensor_1_112 + 1)
0921 856AF0    2136            mov     b,(_main_line_sensor_1_112 + 2)
0924 E56B      2137            mov     a,(_main_line_sensor_1_112 + 3)
0926 120100    2138            lcall   ___fsgt
0929 AE82      2139            mov     r6,dpl
092B E581      2140            mov     a,sp
092D 24FC      2141            add     a,#0xfc
092F F581      2142            mov     sp,a
0931 D005      2143            pop     ar5
0933 D004      2144            pop     ar4
0935 D003      2145            pop     ar3
0937 D002      2146            pop     ar2
0939 EE        2147            mov     a,r6
093A 7001      2148            jnz     L021083?
093C 020100    2149            ljmp    L021042?
093F           2150   L021083?:
093F           2151   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:390: state = 2;
093F 75A802    2152            mov     _main_state_1_112,#0x02
0942 E4        2153            clr     a
0943 F5A9      2154            mov     (_main_state_1_112 + 1),a
0945           2155   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:393: break;                           
0945 020100    2156            ljmp    L021042?
0948           2157   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:394: case 2:
0948           2158   L021025?:
0948           2159   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:395: if(line_sensor < LO_THRESH){
0948 C002      2160            push    ar2
094A C003      2161            push    ar3
094C C004      2162            push    ar4
094E C005      2163            push    ar5
0950 7429      2164            mov     a,#0x29
0952 C0E0      2165            push    acc
0954 745C      2166            mov     a,#0x5C
0956 C0E0      2167            push    acc
0958 748F      2168            mov     a,#0x8F
095A C0E0      2169            push    acc
095C 743D      2170            mov     a,#0x3D
095E C0E0      2171            push    acc
0960 856882    2172            mov     dpl,_main_line_sensor_1_112
0963 856983    2173            mov     dph,(_main_line_sensor_1_112 + 1)
0966 856AF0    2174            mov     b,(_main_line_sensor_1_112 + 2)
0969 E56B      2175            mov     a,(_main_line_sensor_1_112 + 3)
096B 120100    2176            lcall   ___fslt
096E AE82      2177            mov     r6,dpl
0970 E581      2178            mov     a,sp
0972 24FC      2179            add     a,#0xfc
0974 F581      2180            mov     sp,a
0976 D005      2181            pop     ar5
0978 D004      2182            pop     ar4
097A D003      2183            pop     ar3
097C D002      2184            pop     ar2
097E EE        2185            mov     a,r6
097F 7001      2186            jnz     L021084?
0981 020100    2187            ljmp    L021042?
0984           2188   L021084?:
0984           2189   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:396: line_counter++;
0984 0508      2190            inc     _main_line_counter_1_112
0986 E4        2191            clr     a
0987 B50868    2192            cjne    a,_main_line_counter_1_112,L021085?
098A 0509      2193            inc     (_main_line_counter_1_112 + 1)
098C           2194   L021085?:
098C           2195   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:397: start_timer = 1;
098C D2D8      2196            setb    _start_timer
098E           2197   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:398: state = 3;
098E 75A803    2198            mov     _main_state_1_112,#0x03
0991 E4        2199            clr     a
0992 F5A9      2200            mov     (_main_state_1_112 + 1),a
0994           2201   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:401: break;
0994 020100    2202            ljmp    L021042?
0997           2203   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:402: case 3:
0997           2204   L021028?:
0997           2205   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:403: if(start_timer == 1){
0997 30D8A8    2206            jnb     _start_timer,L021035?
099A           2207   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:404: if(line_sensor > HI_THRESH){
099A C002      2208            push    ar2
099C C003      2209            push    ar3
099E C004      2210            push    ar4
09A0 C005      2211            push    ar5
09A2 E4        2212            clr     a
09A3 C0E0      2213            push    acc
09A5 C0E0      2214            push    acc
09A7 C0E0      2215            push    acc
09A9 743F      2216            mov     a,#0x3F
09AB C0E0      2217            push    acc
09AD 856882    2218            mov     dpl,_main_line_sensor_1_112
09B0 856983    2219            mov     dph,(_main_line_sensor_1_112 + 1)
09B3 856AF0    2220            mov     b,(_main_line_sensor_1_112 + 2)
09B6 E56B      2221            mov     a,(_main_line_sensor_1_112 + 3)
09B8 120100    2222            lcall   ___fsgt
09BB AE82      2223            mov     r6,dpl
09BD E581      2224            mov     a,sp
09BF 24FC      2225            add     a,#0xfc
09C1 F581      2226            mov     sp,a
09C3 D005      2227            pop     ar5
09C5 D004      2228            pop     ar4
09C7 D003      2229            pop     ar3
09C9 D002      2230            pop     ar2
09CB EE        2231            mov     a,r6
09CC 7001      2232            jnz     L021087?
09CE 020100    2233            ljmp    L021042?
09D1           2234   L021087?:
09D1           2235   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:405: start_timer = 0;
09D1 C2D8      2236            clr     _start_timer
09D3           2237   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:406: action_timer = 0;
09D3 E4        2238            clr     a
09D4 F588      2239            mov     _action_timer,a
09D6 F589      2240            mov     (_action_timer + 1),a
09D8           2241   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:407: state = 2;
09D8 75A802    2242            mov     _main_state_1_112,#0x02
09DB E4        2243            clr     a
09DC F5A9      2244            mov     (_main_state_1_112 + 1),a
09DE 020100    2245            ljmp    L021042?
09E1           2246   L021035?:
09E1           2247   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:411: if(line_counter > 1){
09E1 C3        2248            clr     c
09E2 7401      2249            mov     a,#0x01
09E4 9508      2250            subb    a,_main_line_counter_1_112
09E6 E4        2251            clr     a
09E7 6480      2252            xrl     a,#0x80
09E9 8509F0    2253            mov     b,(_main_line_counter_1_112 + 1)
09EC 63F080    2254            xrl     b,#0x80
09EF 95F0      2255            subb    a,b
09F1 5001      2256            jnc     L021032?
09F3           2257   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:412: command = line_counter;
09F3 850858    2258            mov     _main_command_1_112,_main_line_counter_1_112
09F6 850959    2259            mov     (_main_command_1_112 + 1),(_main_line_counter_1_112 + 1)
09F9           2260   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:413: line_counter = 0;
09F9 E4        2261            clr     a
09FA F508      2262            mov     _main_line_counter_1_112,a
09FC F509      2263            mov     (_main_line_counter_1_112 + 1),a
09FE           2264   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:414: state = 4;
09FE 75A804    2265            mov     _main_state_1_112,#0x04
0A01 E4        2266            clr     a
0A02 F5A9      2267            mov     (_main_state_1_112 + 1),a
0A04 020100    2268            ljmp    L021042?
0A07           2269   L021032?:
0A07           2270   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:417: state = 1;
0A07 75A801    2271            mov     _main_state_1_112,#0x01
0A0A E4        2272            clr     a
0A0B F5A9      2273            mov     (_main_state_1_112 + 1),a
0A0D           2274   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:418: line_counter = 0;
0A0D E4        2275            clr     a
0A0E F508      2276            mov     _main_line_counter_1_112,a
0A10 F509      2277            mov     (_main_line_counter_1_112 + 1),a
0A12           2278   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:422: break;
0A12 020100    2279            ljmp    L021042?
0A15           2280   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:423: case 4:
0A15           2281   L021037?:
0A15           2282   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:424: if(line_sensor > HI_THRESH){
0A15 C002      2283            push    ar2
0A17 C003      2284            push    ar3
0A19 C004      2285            push    ar4
0A1B C005      2286            push    ar5
0A1D E4        2287            clr     a
0A1E C0E0      2288            push    acc
0A20 C0E0      2289            push    acc
0A22 C0E0      2290            push    acc
0A24 743F      2291            mov     a,#0x3F
0A26 C0E0      2292            push    acc
0A28 856882    2293            mov     dpl,_main_line_sensor_1_112
0A2B 856983    2294            mov     dph,(_main_line_sensor_1_112 + 1)
0A2E 856AF0    2295            mov     b,(_main_line_sensor_1_112 + 2)
0A31 E56B      2296            mov     a,(_main_line_sensor_1_112 + 3)
0A33 120100    2297            lcall   ___fsgt
0A36 AE82      2298            mov     r6,dpl
0A38 E581      2299            mov     a,sp
0A3A 24FC      2300            add     a,#0xfc
0A3C F581      2301            mov     sp,a
0A3E D005      2302            pop     ar5
0A40 D004      2303            pop     ar4
0A42 D003      2304            pop     ar3
0A44 D002      2305            pop     ar2
0A46 EE        2306            mov     a,r6
0A47 7001      2307            jnz     L021089?
0A49 020100    2308            ljmp    L021042?
0A4C           2309   L021089?:
0A4C           2310   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:426: execute(command);
0A4C 855882    2311            mov     dpl,_main_command_1_112
0A4F 855983    2312            mov     dph,(_main_command_1_112 + 1)
0A52 C002      2313            push    ar2
0A54 C003      2314            push    ar3
0A56 C004      2315            push    ar4
0A58 C005      2316            push    ar5
0A5A 120100    2317            lcall   _execute
0A5D D005      2318            pop     ar5
0A5F D004      2319            pop     ar4
0A61 D003      2320            pop     ar3
0A63 D002      2321            pop     ar2
0A65           2322   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:427: state = 1;
0A65 75A801    2323            mov     _main_state_1_112,#0x01
0A68 E4        2324            clr     a
0A69 F5A9      2325            mov     (_main_state_1_112 + 1),a
0A6B           2326   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:430: }
0A6B 020100    2327            ljmp    L021042?
0A6E           2328            rseg R_CSEG
0A6E           2329   
0000           2330            rseg R_XINIT
0000           2331   
0000           2332            rseg R_CONST
0000           2333   __str_0:
0000 4C3D2535  2334            db 'L=%5.2f R:%5.2f'
     2E326620
     523A2535
     2E3266
000F 00        2335            db 0x00
0010           2336   __str_1:
0010 4C4D3D25  2337            db 'LM=%d RM=%d'
     6420524D
     3D2564
001B 00        2338            db 0x00
001C           2339   __str_2:
001C 7475726E  2340            db 'turning left!'
     696E6720
     6C656674
     21
0029 0A        2341            db 0x0A
002A 00        2342            db 0x00
002B           2343   __str_3:
002B 7475726E  2344            db 'turning right!'
     696E6720
     72696768
     7421
0039 0A        2345            db 0x0A
003A 00        2346            db 0x00
003B           2347   
000E           2348            CSEG
000E           2349   
000E           2350   end
