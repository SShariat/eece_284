0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Dec 11 2012) (MSVC)
0000              4   ; This file was generated Fri Mar 27 18:52:18 2015
0000              5   ;--------------------------------------------------------
                  5   $name main_code
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _execute
0000             29            public _stop
0000             30            public _turn_right
0000             31            public _turn_left
0000             32            public _display_LCD
0000             33            public _Timer0ISR
0000             34            public _InitTimer0
0000             35            public _InitADC
0000             36            public _InitSerialPort
0000             37            public _Wait1S
0000             38            public _LCDprint
0000             39            public _LCD_8BIT
0000             40            public _WriteCommand
0000             41            public _WriteData
0000             42            public _LCD_byte
0000             43            public _LCD_pulse
0000             44            public _waitms
0000             45            public _Wait50us
0000             46            public _InitPorts
0000             47            public _LCDprint_PARM_3
0000             48            public _start
0000             49            public _turn_time_update
0000             50            public _time_update_flag
0000             51            public _LCDprint_PARM_2
0000             52            public _turn_timer
0000             53            public _pwm_right
0000             54            public _pwm_left
0000             55            public _pwmcount
0000             56            public _mins
0000             57            public _secs
0000             58            public _msCount
0000             59   ;--------------------------------------------------------
0000             60   ; Special Function Registers
0000             61   ;--------------------------------------------------------
0000             62   _ACC            DATA 0xe0
0000             63   _ADCON0         DATA 0x8e
0000             64   _ADCON1         DATA 0x97
0000             65   _ADINS          DATA 0xa3
0000             66   _ADMODA         DATA 0xc0
0000             67   _ADMODB         DATA 0xa1
0000             68   _AD0BH          DATA 0xbb
0000             69   _AD0BL          DATA 0xa6
0000             70   _AD0DAT0        DATA 0xc5
0000             71   _AD0DAT1        DATA 0xc6
0000             72   _AD0DAT2        DATA 0xc7
0000             73   _AD0DAT3        DATA 0xf4
0000             74   _AD1BH          DATA 0xc4
0000             75   _AD1BL          DATA 0xbc
0000             76   _AD1DAT0        DATA 0xd5
0000             77   _AD1DAT1        DATA 0xd6
0000             78   _AD1DAT2        DATA 0xd7
0000             79   _AD1DAT3        DATA 0xf5
0000             80   _AUXR1          DATA 0xa2
0000             81   _B              DATA 0xf0
0000             82   _BRGR0          DATA 0xbe
0000             83   _BRGR1          DATA 0xbf
0000             84   _BRGCON         DATA 0xbd
0000             85   _CCCRA          DATA 0xea
0000             86   _CCCRB          DATA 0xeb
0000             87   _CCCRC          DATA 0xec
0000             88   _CCCRD          DATA 0xed
0000             89   _CMP1           DATA 0xac
0000             90   _CMP2           DATA 0xad
0000             91   _DEECON         DATA 0xf1
0000             92   _DEEDAT         DATA 0xf2
0000             93   _DEEADR         DATA 0xf3
0000             94   _DIVM           DATA 0x95
0000             95   _DPH            DATA 0x83
0000             96   _DPL            DATA 0x82
0000             97   _FMADRH         DATA 0xe7
0000             98   _FMADRL         DATA 0xe6
0000             99   _FMCON          DATA 0xe4
0000            100   _FMDATA         DATA 0xe5
0000            101   _I2ADR          DATA 0xdb
0000            102   _I2CON          DATA 0xd8
0000            103   _I2DAT          DATA 0xda
0000            104   _I2SCLH         DATA 0xdd
0000            105   _I2SCLL         DATA 0xdc
0000            106   _I2STAT         DATA 0xd9
0000            107   _ICRAH          DATA 0xab
0000            108   _ICRAL          DATA 0xaa
0000            109   _ICRBH          DATA 0xaf
0000            110   _ICRBL          DATA 0xae
0000            111   _IEN0           DATA 0xa8
0000            112   _IEN1           DATA 0xe8
0000            113   _IP0            DATA 0xb8
0000            114   _IP0H           DATA 0xb7
0000            115   _IP1            DATA 0xf8
0000            116   _IP1H           DATA 0xf7
0000            117   _KBCON          DATA 0x94
0000            118   _KBMASK         DATA 0x86
0000            119   _KBPATN         DATA 0x93
0000            120   _OCRAH          DATA 0xef
0000            121   _OCRAL          DATA 0xee
0000            122   _OCRBH          DATA 0xfb
0000            123   _OCRBL          DATA 0xfa
0000            124   _OCRCH          DATA 0xfd
0000            125   _OCRCL          DATA 0xfc
0000            126   _OCRDH          DATA 0xff
0000            127   _OCRDL          DATA 0xfe
0000            128   _P0             DATA 0x80
0000            129   _P1             DATA 0x90
0000            130   _P2             DATA 0xa0
0000            131   _P3             DATA 0xb0
0000            132   _P0M1           DATA 0x84
0000            133   _P0M2           DATA 0x85
0000            134   _P1M1           DATA 0x91
0000            135   _P1M2           DATA 0x92
0000            136   _P2M1           DATA 0xa4
0000            137   _P2M2           DATA 0xa5
0000            138   _P3M1           DATA 0xb1
0000            139   _P3M2           DATA 0xb2
0000            140   _PCON           DATA 0x87
0000            141   _PCONA          DATA 0xb5
0000            142   _PSW            DATA 0xd0
0000            143   _PT0AD          DATA 0xf6
0000            144   _RSTSRC         DATA 0xdf
0000            145   _RTCCON         DATA 0xd1
0000            146   _RTCH           DATA 0xd2
0000            147   _RTCL           DATA 0xd3
0000            148   _SADDR          DATA 0xa9
0000            149   _SADEN          DATA 0xb9
0000            150   _SBUF           DATA 0x99
0000            151   _SCON           DATA 0x98
0000            152   _SSTAT          DATA 0xba
0000            153   _SP             DATA 0x81
0000            154   _SPCTL          DATA 0xe2
0000            155   _SPSTAT         DATA 0xe1
0000            156   _SPDAT          DATA 0xe3
0000            157   _TAMOD          DATA 0x8f
0000            158   _TCON           DATA 0x88
0000            159   _TCR20          DATA 0xc8
0000            160   _TCR21          DATA 0xf9
0000            161   _TH0            DATA 0x8c
0000            162   _TH1            DATA 0x8d
0000            163   _TH2            DATA 0xcd
0000            164   _TICR2          DATA 0xc9
0000            165   _TIFR2          DATA 0xe9
0000            166   _TISE2          DATA 0xde
0000            167   _TL0            DATA 0x8a
0000            168   _TL1            DATA 0x8b
0000            169   _TL2            DATA 0xcc
0000            170   _TMOD           DATA 0x89
0000            171   _TOR2H          DATA 0xcf
0000            172   _TOR2L          DATA 0xce
0000            173   _TPCR2H         DATA 0xcb
0000            174   _TPCR2L         DATA 0xca
0000            175   _TRIM           DATA 0x96
0000            176   _WDCON          DATA 0xa7
0000            177   _WDL            DATA 0xc1
0000            178   _WFEED1         DATA 0xc2
0000            179   _WFEED2         DATA 0xc3
0000            180   ;--------------------------------------------------------
0000            181   ; special function bits
0000            182   ;--------------------------------------------------------
0000            183   _ACC_7          BIT 0xe7
0000            184   _ACC_6          BIT 0xe6
0000            185   _ACC_5          BIT 0xe5
0000            186   _ACC_4          BIT 0xe4
0000            187   _ACC_3          BIT 0xe3
0000            188   _ACC_2          BIT 0xe2
0000            189   _ACC_1          BIT 0xe1
0000            190   _ACC_0          BIT 0xe0
0000            191   _ADMODA_7       BIT 0xc7
0000            192   _ADMODA_6       BIT 0xc6
0000            193   _ADMODA_5       BIT 0xc5
0000            194   _ADMODA_4       BIT 0xc4
0000            195   _ADMODA_3       BIT 0xc3
0000            196   _ADMODA_2       BIT 0xc2
0000            197   _ADMODA_1       BIT 0xc1
0000            198   _ADMODA_0       BIT 0xc0
0000            199   _BNDI1          BIT 0xc7
0000            200   _BURST1         BIT 0xc6
0000            201   _SCC1           BIT 0xc5
0000            202   _SCAN1          BIT 0xc4
0000            203   _BNDI0          BIT 0xc3
0000            204   _BURST0         BIT 0xc2
0000            205   _SCC0           BIT 0xc1
0000            206   _SCAN0          BIT 0xc0
0000            207   _B_7            BIT 0xf7
0000            208   _B_6            BIT 0xf6
0000            209   _B_5            BIT 0xf5
0000            210   _B_4            BIT 0xf4
0000            211   _B_3            BIT 0xf3
0000            212   _B_2            BIT 0xf2
0000            213   _B_1            BIT 0xf1
0000            214   _B_0            BIT 0xf0
0000            215   _I2CON_7        BIT 0xdf
0000            216   _I2CON_6        BIT 0xde
0000            217   _I2CON_5        BIT 0xdd
0000            218   _I2CON_4        BIT 0xdc
0000            219   _I2CON_3        BIT 0xdb
0000            220   _I2CON_2        BIT 0xda
0000            221   _I2CON_1        BIT 0xd9
0000            222   _I2CON_0        BIT 0xd8
0000            223   _I2EN           BIT 0xde
0000            224   _STA            BIT 0xdd
0000            225   _STO            BIT 0xdc
0000            226   _SI             BIT 0xdb
0000            227   _AA             BIT 0xda
0000            228   _CRSEL          BIT 0xd8
0000            229   _IEN0_7         BIT 0xaf
0000            230   _IEN0_6         BIT 0xae
0000            231   _IEN0_5         BIT 0xad
0000            232   _IEN0_4         BIT 0xac
0000            233   _IEN0_3         BIT 0xab
0000            234   _IEN0_2         BIT 0xaa
0000            235   _IEN0_1         BIT 0xa9
0000            236   _IEN0_0         BIT 0xa8
0000            237   _EA             BIT 0xaf
0000            238   _EWDRT          BIT 0xae
0000            239   _EBO            BIT 0xad
0000            240   _ES             BIT 0xac
0000            241   _ESR            BIT 0xac
0000            242   _ET1            BIT 0xab
0000            243   _EX1            BIT 0xaa
0000            244   _ET0            BIT 0xa9
0000            245   _EX0            BIT 0xa8
0000            246   _IEN1_7         BIT 0xef
0000            247   _IEN1_6         BIT 0xee
0000            248   _IEN1_5         BIT 0xed
0000            249   _IEN1_4         BIT 0xec
0000            250   _IEN1_3         BIT 0xeb
0000            251   _IEN1_2         BIT 0xea
0000            252   _IEN1_1         BIT 0xe9
0000            253   _IEN1_0         BIT 0xe8
0000            254   _EADEE          BIT 0xef
0000            255   _EST            BIT 0xee
0000            256   _ECCU           BIT 0xec
0000            257   _ESPI           BIT 0xeb
0000            258   _EC             BIT 0xea
0000            259   _EKBI           BIT 0xe9
0000            260   _EI2C           BIT 0xe8
0000            261   _IP0_7          BIT 0xbf
0000            262   _IP0_6          BIT 0xbe
0000            263   _IP0_5          BIT 0xbd
0000            264   _IP0_4          BIT 0xbc
0000            265   _IP0_3          BIT 0xbb
0000            266   _IP0_2          BIT 0xba
0000            267   _IP0_1          BIT 0xb9
0000            268   _IP0_0          BIT 0xb8
0000            269   _PWDRT          BIT 0xbe
0000            270   _PBO            BIT 0xbd
0000            271   _PS             BIT 0xbc
0000            272   _PSR            BIT 0xbc
0000            273   _PT1            BIT 0xbb
0000            274   _PX1            BIT 0xba
0000            275   _PT0            BIT 0xb9
0000            276   _PX0            BIT 0xb8
0000            277   _IP1_7          BIT 0xff
0000            278   _IP1_6          BIT 0xfe
0000            279   _IP1_5          BIT 0xfd
0000            280   _IP1_4          BIT 0xfc
0000            281   _IP1_3          BIT 0xfb
0000            282   _IP1_2          BIT 0xfa
0000            283   _IP1_1          BIT 0xf9
0000            284   _IP1_0          BIT 0xf8
0000            285   _PADEE          BIT 0xff
0000            286   _PST            BIT 0xfe
0000            287   _PCCU           BIT 0xfc
0000            288   _PSPI           BIT 0xfb
0000            289   _PC             BIT 0xfa
0000            290   _PKBI           BIT 0xf9
0000            291   _PI2C           BIT 0xf8
0000            292   _P0_7           BIT 0x87
0000            293   _P0_6           BIT 0x86
0000            294   _P0_5           BIT 0x85
0000            295   _P0_4           BIT 0x84
0000            296   _P0_3           BIT 0x83
0000            297   _P0_2           BIT 0x82
0000            298   _P0_1           BIT 0x81
0000            299   _P0_0           BIT 0x80
0000            300   _T1             BIT 0x87
0000            301   _KB7            BIT 0x87
0000            302   _CMP_1          BIT 0x86
0000            303   _KB6            BIT 0x86
0000            304   _CMPREF         BIT 0x85
0000            305   _KB5            BIT 0x85
0000            306   _CIN1A          BIT 0x84
0000            307   _KB4            BIT 0x84
0000            308   _CIN1B          BIT 0x83
0000            309   _KB3            BIT 0x83
0000            310   _CIN2A          BIT 0x82
0000            311   _KB2            BIT 0x82
0000            312   _CIN2B          BIT 0x81
0000            313   _KB1            BIT 0x81
0000            314   _CMP_2          BIT 0x80
0000            315   _KB0            BIT 0x80
0000            316   _P1_7           BIT 0x97
0000            317   _P1_6           BIT 0x96
0000            318   _P1_5           BIT 0x95
0000            319   _P1_4           BIT 0x94
0000            320   _P1_3           BIT 0x93
0000            321   _P1_2           BIT 0x92
0000            322   _P1_1           BIT 0x91
0000            323   _P1_0           BIT 0x90
0000            324   _OCC            BIT 0x97
0000            325   _OCB            BIT 0x96
0000            326   _RST            BIT 0x95
0000            327   _INT1           BIT 0x94
0000            328   _INT0           BIT 0x93
0000            329   _SDA            BIT 0x93
0000            330   _T0             BIT 0x92
0000            331   _SCL            BIT 0x92
0000            332   _RXD            BIT 0x91
0000            333   _TXD            BIT 0x90
0000            334   _P2_7           BIT 0xa7
0000            335   _P2_6           BIT 0xa6
0000            336   _P2_5           BIT 0xa5
0000            337   _P2_4           BIT 0xa4
0000            338   _P2_3           BIT 0xa3
0000            339   _P2_2           BIT 0xa2
0000            340   _P2_1           BIT 0xa1
0000            341   _P2_0           BIT 0xa0
0000            342   _ICA            BIT 0xa7
0000            343   _OCA            BIT 0xa6
0000            344   _SPICLK         BIT 0xa5
0000            345   _SS             BIT 0xa4
0000            346   _MISO           BIT 0xa3
0000            347   _MOSI           BIT 0xa2
0000            348   _OCD            BIT 0xa1
0000            349   _ICB            BIT 0xa0
0000            350   _P3_7           BIT 0xb7
0000            351   _P3_6           BIT 0xb6
0000            352   _P3_5           BIT 0xb5
0000            353   _P3_4           BIT 0xb4
0000            354   _P3_3           BIT 0xb3
0000            355   _P3_2           BIT 0xb2
0000            356   _P3_1           BIT 0xb1
0000            357   _P3_0           BIT 0xb0
0000            358   _XTAL1          BIT 0xb1
0000            359   _XTAL2          BIT 0xb0
0000            360   _PSW_7          BIT 0xd7
0000            361   _PSW_6          BIT 0xd6
0000            362   _PSW_5          BIT 0xd5
0000            363   _PSW_4          BIT 0xd4
0000            364   _PSW_3          BIT 0xd3
0000            365   _PSW_2          BIT 0xd2
0000            366   _PSW_1          BIT 0xd1
0000            367   _PSW_0          BIT 0xd0
0000            368   _CY             BIT 0xd7
0000            369   _AC             BIT 0xd6
0000            370   _F0             BIT 0xd5
0000            371   _RS1            BIT 0xd4
0000            372   _RS0            BIT 0xd3
0000            373   _OV             BIT 0xd2
0000            374   _F1             BIT 0xd1
0000            375   _P              BIT 0xd0
0000            376   _SCON_7         BIT 0x9f
0000            377   _SCON_6         BIT 0x9e
0000            378   _SCON_5         BIT 0x9d
0000            379   _SCON_4         BIT 0x9c
0000            380   _SCON_3         BIT 0x9b
0000            381   _SCON_2         BIT 0x9a
0000            382   _SCON_1         BIT 0x99
0000            383   _SCON_0         BIT 0x98
0000            384   _SM0            BIT 0x9f
0000            385   _FE             BIT 0x9f
0000            386   _SM1            BIT 0x9e
0000            387   _SM2            BIT 0x9d
0000            388   _REN            BIT 0x9c
0000            389   _TB8            BIT 0x9b
0000            390   _RB8            BIT 0x9a
0000            391   _TI             BIT 0x99
0000            392   _RI             BIT 0x98
0000            393   _TCON_7         BIT 0x8f
0000            394   _TCON_6         BIT 0x8e
0000            395   _TCON_5         BIT 0x8d
0000            396   _TCON_4         BIT 0x8c
0000            397   _TCON_3         BIT 0x8b
0000            398   _TCON_2         BIT 0x8a
0000            399   _TCON_1         BIT 0x89
0000            400   _TCON_0         BIT 0x88
0000            401   _TF1            BIT 0x8f
0000            402   _TR1            BIT 0x8e
0000            403   _TF0            BIT 0x8d
0000            404   _TR0            BIT 0x8c
0000            405   _IE1            BIT 0x8b
0000            406   _IT1            BIT 0x8a
0000            407   _IE0            BIT 0x89
0000            408   _IT0            BIT 0x88
0000            409   _TCR20_7        BIT 0xcf
0000            410   _TCR20_6        BIT 0xce
0000            411   _TCR20_5        BIT 0xcd
0000            412   _TCR20_4        BIT 0xcc
0000            413   _TCR20_3        BIT 0xcb
0000            414   _TCR20_2        BIT 0xca
0000            415   _TCR20_1        BIT 0xc9
0000            416   _TCR20_0        BIT 0xc8
0000            417   _PLEEN          BIT 0xcf
0000            418   _HLTRN          BIT 0xce
0000            419   _HLTEN          BIT 0xcd
0000            420   _ALTCD          BIT 0xcc
0000            421   _ALTAB          BIT 0xcb
0000            422   _TDIR2          BIT 0xca
0000            423   _TMOD21         BIT 0xc9
0000            424   _TMOD20         BIT 0xc8
0000            425   ;--------------------------------------------------------
0000            426   ; overlayable register banks
0000            427   ;--------------------------------------------------------
0000            428            rbank0 segment data overlay
0000            429   ;--------------------------------------------------------
0000            430   ; internal ram data
0000            431   ;--------------------------------------------------------
0000            432            rseg R_DSEG
0000            433   _msCount:
0000            434            ds 2
0002            435   _secs:
0002            436            ds 1
0003            437   _mins:
0003            438            ds 1
0004            439   _pwmcount:
0004            440            ds 1
0005            441   _pwm_left:
0005            442            ds 1
0006            443   _pwm_right:
0006            444            ds 1
0007            445   _turn_timer:
0007            446            ds 2
0009            447   _LCDprint_PARM_2:
0009            448            ds 1
000A            449   _display_LCD_buff_1_94:
000A            450            ds 17
001B            451   _main_cor_1_112:
001B            452            ds 4
001F            453   _main_cur_error_1_112:
001F            454            ds 4
0023            455   _main_pre_error_1_112:
0023            456            ds 4
0027            457   _main_right_1_112:
0027            458            ds 4
002B            459   _main_line_sensor_1_112:
002B            460            ds 4
002F            461   _main_diff_1_112:
002F            462            ds 4
0033            463   _main_line_counter_1_112:
0033            464            ds 2
0035            465   _main_command_1_112:
0035            466            ds 2
0037            467   _main_state_1_112:
0037            468            ds 2
0039            469   ;--------------------------------------------------------
0039            470   ; overlayable items in internal ram 
0039            471   ;--------------------------------------------------------
0000            472            rseg R_OSEG
0000            473   ;--------------------------------------------------------
0000            474   ; indirectly addressable internal ram data
0000            475   ;--------------------------------------------------------
0000            476            rseg R_ISEG
0000            477   ;--------------------------------------------------------
0000            478   ; absolute internal ram data
0000            479   ;--------------------------------------------------------
0000            480            DSEG
0000            481   ;--------------------------------------------------------
0000            482   ; bit data
0000            483   ;--------------------------------------------------------
0000            484            rseg R_BSEG
0000            485   _time_update_flag:
0000            486            DBIT    1
0001            487   _turn_time_update:
0001            488            DBIT    1
0002            489   _start:
0002            490            DBIT    1
0003            491   _LCDprint_PARM_3:
0003            492            DBIT    1
0004            493   ;--------------------------------------------------------
0004            494   ; paged external ram data
0004            495   ;--------------------------------------------------------
0000            496            rseg R_PSEG
0000            497   ;--------------------------------------------------------
0000            498   ; external ram data
0000            499   ;--------------------------------------------------------
0000            500            rseg R_XSEG
FFC8            501            XSEG at 0xffc8
FFC8            502   _BODCFG: ds 1
FFC9            503            public _BODCFG
0000            504            rseg R_XSEG
FFDE            505            XSEG at 0xffde
FFDE            506   _CLKCON: ds 1
FFDF            507            public _CLKCON
0000            508            rseg R_XSEG
FFE1            509            XSEG at 0xffe1
FFE1            510   _PGACON1: ds 1
FFE2            511            public _PGACON1
0000            512            rseg R_XSEG
FFE4            513            XSEG at 0xffe4
FFE4            514   _PGACON1B: ds 1
FFE5            515            public _PGACON1B
0000            516            rseg R_XSEG
FFE3            517            XSEG at 0xffe3
FFE3            518   _PGA1TRIM8X16X: ds 1
FFE4            519            public _PGA1TRIM8X16X
0000            520            rseg R_XSEG
FFE2            521            XSEG at 0xffe2
FFE2            522   _PGA1TRIM2X4X: ds 1
FFE3            523            public _PGA1TRIM2X4X
0000            524            rseg R_XSEG
FFCA            525            XSEG at 0xffca
FFCA            526   _PGACON0: ds 1
FFCB            527            public _PGACON0
0000            528            rseg R_XSEG
FFCE            529            XSEG at 0xffce
FFCE            530   _PGACON0B: ds 1
FFCF            531            public _PGACON0B
0000            532            rseg R_XSEG
FFCD            533            XSEG at 0xffcd
FFCD            534   _PGA0TRIM8X16X: ds 1
FFCE            535            public _PGA0TRIM8X16X
0000            536            rseg R_XSEG
FFCC            537            XSEG at 0xffcc
FFCC            538   _PGA0TRIM2X4X: ds 1
FFCD            539            public _PGA0TRIM2X4X
0000            540            rseg R_XSEG
FFBF            541            XSEG at 0xffbf
FFBF            542   _RTCDATH: ds 1
FFC0            543            public _RTCDATH
0000            544            rseg R_XSEG
FFBE            545            XSEG at 0xffbe
FFBE            546   _RTCDATL: ds 1
FFBF            547            public _RTCDATL
0000            548            rseg R_XSEG
0000            549   ;--------------------------------------------------------
0000            550   ; absolute external ram data
0000            551   ;--------------------------------------------------------
FFBF            552            XSEG
FFBF            553   ;--------------------------------------------------------
FFBF            554   ; external initialized ram data
FFBF            555   ;--------------------------------------------------------
0000            556            rseg R_IXSEG
0000            557            rseg R_HOME
0000            558            rseg R_GSINIT
0000            559            rseg R_CSEG
0000            560   ;--------------------------------------------------------
0000            561   ; Reset entry point and interrupt vectors
0000            562   ;--------------------------------------------------------
0000            563            CSEG at 0x0000
0000 020100     564            ljmp    _crt0
000B            565            CSEG at 0x000b
000B 020100     566            ljmp    _Timer0ISR
000E            567   ;--------------------------------------------------------
000E            568   ; global & static initialisations
000E            569   ;--------------------------------------------------------
0000            570            rseg R_HOME
0000            571            rseg R_GSINIT
0000            572            rseg R_GSINIT
0000            573   ;--------------------------------------------------------
0000            574   ; data variables initialization
0000            575   ;--------------------------------------------------------
0000            576            rseg R_DINIT
0000            577   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:43: volatile int msCount=0; // Volatiles can be changed by stuff outside our program, like memory registers
0000 E4         578            clr     a
0001 F548       579            mov     _msCount,a
0003 F549       580            mov     (_msCount + 1),a
0005            581   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:44: volatile unsigned char secs=0, mins=0; // They are like global variables, kinda 
0005 750800     582            mov     _secs,#0x00
0008            583   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:44: volatile bit time_update_flag=0;
0008 75C800     584            mov     _mins,#0x00
000B            585   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:49: volatile int turn_timer = 0;
000B E4         586            clr     a
000C F5C8       587            mov     _turn_timer,a
000E F5C9       588            mov     (_turn_timer + 1),a
0010            589   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:45: volatile bit time_update_flag=0;
0010 C238       590            clr     _time_update_flag
0012            591   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:50: volatile bit turn_time_update=0;
0012 C2E8       592            clr     _turn_time_update
0014            593   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:51: volatile bit start = 1;
0014 D298       594            setb    _start
0016            595            ; The linker places a 'ret' at the end of segment R_DINIT.
0016            596   ;--------------------------------------------------------
0016            597   ; code
0016            598   ;--------------------------------------------------------
0000            599            rseg R_CSEG
0000            600   ;------------------------------------------------------------
0000            601   ;Allocation info for local variables in function 'InitPorts'
0000            602   ;------------------------------------------------------------
0000            603   ;------------------------------------------------------------
0000            604   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:53: void InitPorts(void)
0000            605   ;        -----------------------------------------
0000            606   ;         function InitPorts
0000            607   ;        -----------------------------------------
0000            608   _InitPorts:
0000            609            using   0
0000            610   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:55: P0M1=0x1E;
0000 75841E     611            mov     _P0M1,#0x1E
0003            612   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:56: P0M2=0x00;
0003 758500     613            mov     _P0M2,#0x00
0006            614   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:57: P1M1=0;
0006 759100     615            mov     _P1M1,#0x00
0009            616   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:58: P1M2=0;
0009 759200     617            mov     _P1M2,#0x00
000C            618   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:59: P2M1=0;
000C 75A400     619            mov     _P2M1,#0x00
000F            620   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:60: P2M2=0;
000F 75A500     621            mov     _P2M2,#0x00
0012            622   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:61: P3M1=0;
0012 75B100     623            mov     _P3M1,#0x00
0015            624   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:62: P3M2=0;
0015 75B200     625            mov     _P3M2,#0x00
0018 22         626            ret
0019            627   ;------------------------------------------------------------
0019            628   ;Allocation info for local variables in function 'Wait50us'
0019            629   ;------------------------------------------------------------
0019            630   ;------------------------------------------------------------
0019            631   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:65: void Wait50us (void)
0019            632   ;        -----------------------------------------
0019            633   ;         function Wait50us
0019            634   ;        -----------------------------------------
0019            635   _Wait50us:
0019            636   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:70: _endasm;
0019            637            
0019 7852       638             mov R0, #82
001B            639             L0:
001B D818       640            djnz R0, L0 ; 2 machine cycles-> 2*0.27126us*92=50us
001D            641             
001D 22         642            ret
001E            643   ;------------------------------------------------------------
001E            644   ;Allocation info for local variables in function 'waitms'
001E            645   ;------------------------------------------------------------
001E            646   ;ms                        Allocated to registers r2 r3 
001E            647   ;j                         Allocated to registers r4 r5 
001E            648   ;k                         Allocated to registers r6 
001E            649   ;------------------------------------------------------------
001E            650   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:73: void waitms (unsigned int ms)
001E            651   ;        -----------------------------------------
001E            652   ;         function waitms
001E            653   ;        -----------------------------------------
001E            654   _waitms:
001E AA82       655            mov     r2,dpl
0020 AB83       656            mov     r3,dph
0022            657   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:79: for(j=0; j<ms; j++)
0022 7C00       658            mov     r4,#0x00
0024 7D00       659            mov     r5,#0x00
0026            660   L004004?:
0026 C3         661            clr     c
0027 EC         662            mov     a,r4
0028 9A         663            subb    a,r2
0029 ED         664            mov     a,r5
002A 9B         665            subb    a,r3
002B 5001       666            jnc     L004008?
002D            667   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:80: for (k=0; k<20; k++) Wait50us();
002D 7E14       668            mov     r6,#0x14
002F            669   L004003?:
002F C002       670            push    ar2
0031 C003       671            push    ar3
0033 C004       672            push    ar4
0035 C005       673            push    ar5
0037 C006       674            push    ar6
0039 120100     675            lcall   _Wait50us
003C D006       676            pop     ar6
003E D005       677            pop     ar5
0040 D004       678            pop     ar4
0042 D003       679            pop     ar3
0044 D002       680            pop     ar2
0046 DE58       681            djnz    r6,L004003?
0048            682   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:79: for(j=0; j<ms; j++)
0048 0C         683            inc     r4
0049 BC00D8     684            cjne    r4,#0x00,L004004?
004C 0D         685            inc     r5
004D 8001       686            sjmp    L004004?
004F            687   L004008?:
004F 22         688            ret
0050            689   ;------------------------------------------------------------
0050            690   ;Allocation info for local variables in function 'LCD_pulse'
0050            691   ;------------------------------------------------------------
0050            692   ;------------------------------------------------------------
0050            693   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:83: void LCD_pulse (void)
0050            694   ;        -----------------------------------------
0050            695   ;         function LCD_pulse
0050            696   ;        -----------------------------------------
0050            697   _LCD_pulse:
0050            698   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:85: LCD_E=1;
0050 D2A5       699            setb    _P2_5
0052            700   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:86: Wait50us();
0052 120100     701            lcall   _Wait50us
0055            702   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:87: LCD_E=0;
0055 C2A5       703            clr     _P2_5
0057 22         704            ret
0058            705   ;------------------------------------------------------------
0058            706   ;Allocation info for local variables in function 'LCD_byte'
0058            707   ;------------------------------------------------------------
0058            708   ;x                         Allocated to registers 
0058            709   ;------------------------------------------------------------
0058            710   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:90: void LCD_byte (unsigned char x)
0058            711   ;        -----------------------------------------
0058            712   ;         function LCD_byte
0058            713   ;        -----------------------------------------
0058            714   _LCD_byte:
0058 8582E0     715            mov     _ACC,dpl
005B            716   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:94: LCD_D7=ACC_7;
005B A2E7       717            mov     c,_ACC_7
005D 9294       718            mov     _P1_4,c
005F            719   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:95: LCD_D6=ACC_6;
005F A2E6       720            mov     c,_ACC_6
0061 9296       721            mov     _P1_6,c
0063            722   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:96: LCD_D5=ACC_5;
0063 A2E5       723            mov     c,_ACC_5
0065 9297       724            mov     _P1_7,c
0067            725   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:97: LCD_D4=ACC_4;
0067 A2E4       726            mov     c,_ACC_4
0069 92A0       727            mov     _P2_0,c
006B            728   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:98: LCD_D3=ACC_3;
006B A2E3       729            mov     c,_ACC_3
006D 92A1       730            mov     _P2_1,c
006F            731   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:99: LCD_D2=ACC_2;
006F A2E2       732            mov     c,_ACC_2
0071 92A2       733            mov     _P2_2,c
0073            734   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:100: LCD_D1=ACC_1;
0073 A2E1       735            mov     c,_ACC_1
0075 92A3       736            mov     _P2_3,c
0077            737   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:101: LCD_D0=ACC_0;
0077 A2E0       738            mov     c,_ACC_0
0079 92A4       739            mov     _P2_4,c
007B            740   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:102: LCD_pulse();
007B 020100     741            ljmp    _LCD_pulse
007E            742   ;------------------------------------------------------------
007E            743   ;Allocation info for local variables in function 'WriteData'
007E            744   ;------------------------------------------------------------
007E            745   ;x                         Allocated to registers r2 
007E            746   ;------------------------------------------------------------
007E            747   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:105: void WriteData (unsigned char x)
007E            748   ;        -----------------------------------------
007E            749   ;         function WriteData
007E            750   ;        -----------------------------------------
007E            751   _WriteData:
007E AA82       752            mov     r2,dpl
0080            753   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:107: LCD_RS=1;
0080 D2A7       754            setb    _P2_7
0082            755   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:108: LCD_byte(x);
0082 8A82       756            mov     dpl,r2
0084 120100     757            lcall   _LCD_byte
0087            758   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:109: waitms(2);
0087 900002     759            mov     dptr,#0x0002
008A 020100     760            ljmp    _waitms
008D            761   ;------------------------------------------------------------
008D            762   ;Allocation info for local variables in function 'WriteCommand'
008D            763   ;------------------------------------------------------------
008D            764   ;x                         Allocated to registers r2 
008D            765   ;------------------------------------------------------------
008D            766   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:112: void WriteCommand (unsigned char x)
008D            767   ;        -----------------------------------------
008D            768   ;         function WriteCommand
008D            769   ;        -----------------------------------------
008D            770   _WriteCommand:
008D AA82       771            mov     r2,dpl
008F            772   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:114: LCD_RS=0;
008F C2A7       773            clr     _P2_7
0091            774   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:115: LCD_byte(x);
0091 8A82       775            mov     dpl,r2
0093 120100     776            lcall   _LCD_byte
0096            777   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:116: waitms(5);
0096 900005     778            mov     dptr,#0x0005
0099 020100     779            ljmp    _waitms
009C            780   ;------------------------------------------------------------
009C            781   ;Allocation info for local variables in function 'LCD_8BIT'
009C            782   ;------------------------------------------------------------
009C            783   ;------------------------------------------------------------
009C            784   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:119: void LCD_8BIT (void)
009C            785   ;        -----------------------------------------
009C            786   ;         function LCD_8BIT
009C            787   ;        -----------------------------------------
009C            788   _LCD_8BIT:
009C            789   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:121: LCD_E=0;  // Resting state of LCD's enable is zero
009C C2A5       790            clr     _P2_5
009E            791   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:122: LCD_RW=0; // We are only writing to the LCD in this program
009E C2A6       792            clr     _P2_6
00A0            793   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:123: waitms(20);
00A0 900014     794            mov     dptr,#0x0014
00A3 120100     795            lcall   _waitms
00A6            796   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:125: WriteCommand(0x33);
00A6 758233     797            mov     dpl,#0x33
00A9 120100     798            lcall   _WriteCommand
00AC            799   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:126: WriteCommand(0x33);
00AC 758233     800            mov     dpl,#0x33
00AF 120100     801            lcall   _WriteCommand
00B2            802   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:127: WriteCommand(0x33); // Stay in 8-bit mode
00B2 758233     803            mov     dpl,#0x33
00B5 120100     804            lcall   _WriteCommand
00B8            805   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:130: WriteCommand(0x38);
00B8 758238     806            mov     dpl,#0x38
00BB 120100     807            lcall   _WriteCommand
00BE            808   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:131: WriteCommand(0x0c);
00BE 75820C     809            mov     dpl,#0x0C
00C1 120100     810            lcall   _WriteCommand
00C4            811   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:132: WriteCommand(0x01); // Clear screen command (takes some time)
00C4 758201     812            mov     dpl,#0x01
00C7 120100     813            lcall   _WriteCommand
00CA            814   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:133: waitms(20); // Wait for clear screen command to finsih.
00CA 900014     815            mov     dptr,#0x0014
00CD 020100     816            ljmp    _waitms
00D0            817   ;------------------------------------------------------------
00D0            818   ;Allocation info for local variables in function 'LCDprint'
00D0            819   ;------------------------------------------------------------
00D0            820   ;line                      Allocated with name '_LCDprint_PARM_2'
00D0            821   ;string                    Allocated to registers r2 r3 r4 
00D0            822   ;j                         Allocated to registers r5 
00D0            823   ;------------------------------------------------------------
00D0            824   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:136: void LCDprint(char * string, unsigned char line, bit clear)
00D0            825   ;        -----------------------------------------
00D0            826   ;         function LCDprint
00D0            827   ;        -----------------------------------------
00D0            828   _LCDprint:
00D0 AA82       829            mov     r2,dpl
00D2 AB83       830            mov     r3,dph
00D4 ACF0       831            mov     r4,b
00D6            832   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:140: WriteCommand(line==2?0xc0:0x80);
00D6 7402       833            mov     a,#0x02
00D8 B588D8     834            cjne    a,_LCDprint_PARM_2,L010013?
00DB 7DC0       835            mov     r5,#0xC0
00DD 8001       836            sjmp    L010014?
00DF            837   L010013?:
00DF 7D80       838            mov     r5,#0x80
00E1            839   L010014?:
00E1 8D82       840            mov     dpl,r5
00E3 C002       841            push    ar2
00E5 C003       842            push    ar3
00E7 C004       843            push    ar4
00E9 120100     844            lcall   _WriteCommand
00EC            845   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:141: waitms(5);
00EC 900005     846            mov     dptr,#0x0005
00EF 120100     847            lcall   _waitms
00F2 D004       848            pop     ar4
00F4 D003       849            pop     ar3
00F6 D002       850            pop     ar2
00F8            851   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:142: for(j=0; string[j]!=0; j++)     WriteData(string[j]);// Write the message
00F8 7D00       852            mov     r5,#0x00
00FA            853   L010003?:
00FA ED         854            mov     a,r5
00FB 2A         855            add     a,r2
00FC FE         856            mov     r6,a
00FD E4         857            clr     a
00FE 3B         858            addc    a,r3
00FF FF         859            mov     r7,a
0100 8C00       860            mov     ar0,r4
0102 8E82       861            mov     dpl,r6
0104 8F83       862            mov     dph,r7
0106 88F0       863            mov     b,r0
0108 120100     864            lcall   __gptrget
010B FE         865            mov     r6,a
010C 6001       866            jz      L010006?
010E 8E82       867            mov     dpl,r6
0110 C002       868            push    ar2
0112 C003       869            push    ar3
0114 C004       870            push    ar4
0116 C005       871            push    ar5
0118 120100     872            lcall   _WriteData
011B D005       873            pop     ar5
011D D004       874            pop     ar4
011F D003       875            pop     ar3
0121 D002       876            pop     ar2
0123 0D         877            inc     r5
0124 8001       878            sjmp    L010003?
0126            879   L010006?:
0126            880   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:143: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0126 305818     881            jnb     _LCDprint_PARM_3,L010011?
0129 8D02       882            mov     ar2,r5
012B            883   L010007?:
012B BA1098     884            cjne    r2,#0x10,L010026?
012E            885   L010026?:
012E 5001       886            jnc     L010011?
0130 758220     887            mov     dpl,#0x20
0133 C002       888            push    ar2
0135 120100     889            lcall   _WriteData
0138 D002       890            pop     ar2
013A 0A         891            inc     r2
013B 8001       892            sjmp    L010007?
013D            893   L010011?:
013D 22         894            ret
013E            895   ;------------------------------------------------------------
013E            896   ;Allocation info for local variables in function 'Wait1S'
013E            897   ;------------------------------------------------------------
013E            898   ;------------------------------------------------------------
013E            899   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:146: void Wait1S (void)
013E            900   ;        -----------------------------------------
013E            901   ;         function Wait1S
013E            902   ;        -----------------------------------------
013E            903   _Wait1S:
013E            904   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:155: _endasm;
013E            905            
013E 7A28       906             mov R2, #40
0140            907             L3:
0140 79FA       908            mov R1, #250
0142            909             L2:
0142 78B8       910            mov R0, #184
0144            911             L1:
0144 D858       912            djnz R0, L1 ; 2 machine cycles-> 2*0.27126us*184=100us
0146 D918       913             djnz R1, L2 ; 100us*250=0.025s
0148 DAD8       914             djnz R2, L3 ; 0.025s*40=1s
014A            915             
014A 22         916            ret
014B            917   ;------------------------------------------------------------
014B            918   ;Allocation info for local variables in function 'InitSerialPort'
014B            919   ;------------------------------------------------------------
014B            920   ;------------------------------------------------------------
014B            921   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:158: void InitSerialPort(void)
014B            922   ;        -----------------------------------------
014B            923   ;         function InitSerialPort
014B            924   ;        -----------------------------------------
014B            925   _InitSerialPort:
014B            926   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:160: BRGCON=0x00; //Make sure the baud rate generator is off
014B 75BD00     927            mov     _BRGCON,#0x00
014E            928   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:161: BRGR1=((XTAL/BAUD)-16)/0x100;
014E 75BF00     929            mov     _BRGR1,#0x00
0151            930   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:162: BRGR0=((XTAL/BAUD)-16)%0x100;
0151 75BE30     931            mov     _BRGR0,#0x30
0154            932   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:163: BRGCON=0x03; //Turn-on the baud rate generator
0154 75BD03     933            mov     _BRGCON,#0x03
0157            934   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:164: SCON=0x52; //Serial port in mode 1, ren, txrdy, rxempty
0157 759852     935            mov     _SCON,#0x52
015A            936   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:165: P1M1=0x00; //Enable pins RxD and Txd
015A 759100     937            mov     _P1M1,#0x00
015D            938   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:166: P1M2=0x00; //Enable pins RxD and Txd
015D 759200     939            mov     _P1M2,#0x00
0160 22         940            ret
0161            941   ;------------------------------------------------------------
0161            942   ;Allocation info for local variables in function 'InitADC'
0161            943   ;------------------------------------------------------------
0161            944   ;------------------------------------------------------------
0161            945   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:169: void InitADC(void)
0161            946   ;        -----------------------------------------
0161            947   ;         function InitADC
0161            948   ;        -----------------------------------------
0161            949   _InitADC:
0161            950   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:173: P0M1 |= (P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0161 43841E     951            orl     _P0M1,#0x1E
0164            952   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:174: P0M2 &= ~(P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0164 5385E1     953            anl     _P0M2,#0xE1
0167            954   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:177: BURST1=1; //Autoscan continuous conversion mode
0167 D2C6       955            setb    _BURST1
0169            956   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:178: ADMODB = CLK0; //ADC1 clock is 7.3728MHz/2
0169 75A120     957            mov     _ADMODB,#0x20
016C            958   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:179: ADINS  = (ADI13|ADI12|ADI11|ADI10); // Select the four channels for conversion
016C 75A3F0     959            mov     _ADINS,#0xF0
016F            960   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:180: ADCON1 = (ENADC1|ADCS10); //Enable the converter and start immediately
016F 759705     961            mov     _ADCON1,#0x05
0172            962   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:181: while((ADCI1&ADCON1)==0); //Wait for first conversion to complete
0172            963   L013001?:
0172 E597       964            mov     a,_ADCON1
0174 30E398     965            jnb     acc.3,L013001?
0177 22         966            ret
0178            967   ;------------------------------------------------------------
0178            968   ;Allocation info for local variables in function 'InitTimer0'
0178            969   ;------------------------------------------------------------
0178            970   ;------------------------------------------------------------
0178            971   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:184: void InitTimer0 (void)
0178            972   ;        -----------------------------------------
0178            973   ;         function InitTimer0
0178            974   ;        -----------------------------------------
0178            975   _InitTimer0:
0178            976   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:188: TR0=0; // Stop timer 0
0178 C28C       977            clr     _TR0
017A            978   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:189: TMOD=(TMOD&0xf0)|0x01; // 16-bit timer
017A 74F0       979            mov     a,#0xF0
017C 5589       980            anl     a,_TMOD
017E 4401       981            orl     a,#0x01
0180 F589       982            mov     _TMOD,a
0182            983   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:190: TH0=TIMER0_RELOAD_VALUE/0x100; // I think the RHS is 0001 0000 0000, are we dividing?
0182 758CFE     984            mov     _TH0,#0xFE
0185            985   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:191: TL0=TIMER0_RELOAD_VALUE%0x100; // % means modulo, apparently? ...are we modulo-ing?
0185 758A90     986            mov     _TL0,#0x90
0188            987   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:192: TR0=1; // Start timer 0 (bit 4 in TCON)
0188 D28C       988            setb    _TR0
018A            989   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:193: ET0=1; // Enable timer 0 interrupt - the interrupt controller IEN0 is bit-adressable, so we change only the bit we need
018A D2A9       990            setb    _ET0
018C            991   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:194: EA=1;  // Enable global interrupts
018C D2AF       992            setb    _EA
018E 22         993            ret
018F            994   ;------------------------------------------------------------
018F            995   ;Allocation info for local variables in function 'Timer0ISR'
018F            996   ;------------------------------------------------------------
018F            997   ;------------------------------------------------------------
018F            998   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:198: void Timer0ISR (void) interrupt 1{
018F            999   ;        -----------------------------------------
018F           1000   ;         function Timer0ISR
018F           1001   ;        -----------------------------------------
018F           1002   _Timer0ISR:
018F C0E0      1003            push    acc
0191 C0D0      1004            push    psw
0193 75D000    1005            mov     psw,#0x00
0196           1006   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:200: TR0=0; // Stop timer 0
0196 C28C      1007            clr     _TR0
0198           1008   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:201: TH0=TIMER0_RELOAD_VALUE/0x100;
0198 758CFE    1009            mov     _TH0,#0xFE
019B           1010   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:202: TL0=TIMER0_RELOAD_VALUE%0x100;
019B 758A90    1011            mov     _TL0,#0x90
019E           1012   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:203: TR0=1; // Start timer 0
019E D28C      1013            setb    _TR0
01A0           1014   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:205: if(++pwmcount>99) pwmcount=0;
01A0 0588      1015            inc     _pwmcount
01A2 E588      1016            mov     a,_pwmcount
01A4 249C      1017            add     a,#0xff - 0x63
01A6 5001      1018            jnc     L015002?
01A8 758800    1019            mov     _pwmcount,#0x00
01AB           1020   L015002?:
01AB           1021   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:206: P0_5=(pwm_left>pwmcount)?1:0;
01AB C3        1022            clr     c
01AC E588      1023            mov     a,_pwmcount
01AE 9548      1024            subb    a,_pwm_left
01B0 9285      1025            mov     _P0_5,c
01B2           1026   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:207: P0_6=(pwm_right>pwmcount)?1:0;
01B2 C3        1027            clr     c
01B3 E588      1028            mov     a,_pwmcount
01B5 9508      1029            subb    a,_pwm_right
01B7 9286      1030            mov     _P0_6,c
01B9           1031   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:209: msCount++;
01B9 7401      1032            mov     a,#0x01
01BB 2548      1033            add     a,_msCount
01BD F548      1034            mov     _msCount,a
01BF E4        1035            clr     a
01C0 3549      1036            addc    a,(_msCount + 1)
01C2 F549      1037            mov     (_msCount + 1),a
01C4           1038   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:210: if(msCount==10000)
01C4 7410      1039            mov     a,#0x10
01C6 B54898    1040            cjne    a,_msCount,L015008?
01C9 7427      1041            mov     a,#0x27
01CB B54998    1042            cjne    a,(_msCount + 1),L015008?
01CE           1043   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:212: time_update_flag=1;
01CE D238      1044            setb    _time_update_flag
01D0           1045   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:213: msCount=0;
01D0 E4        1046            clr     a
01D1 F548      1047            mov     _msCount,a
01D3 F549      1048            mov     (_msCount + 1),a
01D5           1049   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:214: secs++;
01D5 0508      1050            inc     _secs
01D7           1051   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:215: if(secs==60)
01D7 743C      1052            mov     a,#0x3C
01D9 B50898    1053            cjne    a,_secs,L015008?
01DC           1054   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:217: secs=0;
01DC 750800    1055            mov     _secs,#0x00
01DF           1056   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:218: mins++;
01DF 05C8      1057            inc     _mins
01E1           1058   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:219: if(mins==60)
01E1 743C      1059            mov     a,#0x3C
01E3 B5C898    1060            cjne    a,_mins,L015008?
01E6           1061   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:221: mins=0;
01E6 75C800    1062            mov     _mins,#0x00
01E9           1063   L015008?:
01E9           1064   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:226: if(turn_time_update == 1){
01E9 30E8D8    1065            jnb     _turn_time_update,L015011?
01EC           1066   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:227: turn_timer++;
01EC 7401      1067            mov     a,#0x01
01EE 25C8      1068            add     a,_turn_timer
01F0 F5C8      1069            mov     _turn_timer,a
01F2 E4        1070            clr     a
01F3 35C9      1071            addc    a,(_turn_timer + 1)
01F5 F5C9      1072            mov     (_turn_timer + 1),a
01F7           1073   L015011?:
01F7 D0D0      1074            pop     psw
01F9 D0E0      1075            pop     acc
01FB 32        1076            reti
01FC           1077   ;        eliminated unneeded push/pop dpl
01FC           1078   ;        eliminated unneeded push/pop dph
01FC           1079   ;        eliminated unneeded push/pop b
01FC           1080   ;------------------------------------------------------------
01FC           1081   ;Allocation info for local variables in function 'display_LCD'
01FC           1082   ;------------------------------------------------------------
01FC           1083   ;buff                      Allocated with name '_display_LCD_buff_1_94'
01FC           1084   ;------------------------------------------------------------
01FC           1085   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:231: void display_LCD(void){
01FC           1086   ;        -----------------------------------------
01FC           1087   ;         function display_LCD
01FC           1088   ;        -----------------------------------------
01FC           1089   _display_LCD:
01FC           1090   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:234: time_update_flag=0;
01FC C238      1091            clr     _time_update_flag
01FE           1092   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:241: sprintf(buff, "L=%5.2f R:%5.2f", (AD1DAT1/255.0)*3.3, (AD1DAT2/255.0)*3.3); //Display Left and Right Sensor
01FE 85D782    1093            mov     dpl,_AD1DAT2
0201 120100    1094            lcall   ___uchar2fs
0204 AA82      1095            mov     r2,dpl
0206 AB83      1096            mov     r3,dph
0208 ACF0      1097            mov     r4,b
020A FD        1098            mov     r5,a
020B E4        1099            clr     a
020C C0E0      1100            push    acc
020E C0E0      1101            push    acc
0210 747F      1102            mov     a,#0x7F
0212 C0E0      1103            push    acc
0214 7443      1104            mov     a,#0x43
0216 C0E0      1105            push    acc
0218 8A82      1106            mov     dpl,r2
021A 8B83      1107            mov     dph,r3
021C 8CF0      1108            mov     b,r4
021E ED        1109            mov     a,r5
021F 120100    1110            lcall   ___fsdiv
0222 AA82      1111            mov     r2,dpl
0224 AB83      1112            mov     r3,dph
0226 ACF0      1113            mov     r4,b
0228 FD        1114            mov     r5,a
0229 E581      1115            mov     a,sp
022B 24FC      1116            add     a,#0xfc
022D F581      1117            mov     sp,a
022F C002      1118            push    ar2
0231 C003      1119            push    ar3
0233 C004      1120            push    ar4
0235 C005      1121            push    ar5
0237 903333    1122            mov     dptr,#0x3333
023A 75F053    1123            mov     b,#0x53
023D 7440      1124            mov     a,#0x40
023F 120100    1125            lcall   ___fsmul
0242 AA82      1126            mov     r2,dpl
0244 AB83      1127            mov     r3,dph
0246 ACF0      1128            mov     r4,b
0248 FD        1129            mov     r5,a
0249 E581      1130            mov     a,sp
024B 24FC      1131            add     a,#0xfc
024D F581      1132            mov     sp,a
024F 85D682    1133            mov     dpl,_AD1DAT1
0252 C002      1134            push    ar2
0254 C003      1135            push    ar3
0256 C004      1136            push    ar4
0258 C005      1137            push    ar5
025A 120100    1138            lcall   ___uchar2fs
025D AE82      1139            mov     r6,dpl
025F AF83      1140            mov     r7,dph
0261 A8F0      1141            mov     r0,b
0263 F9        1142            mov     r1,a
0264 E4        1143            clr     a
0265 C0E0      1144            push    acc
0267 C0E0      1145            push    acc
0269 747F      1146            mov     a,#0x7F
026B C0E0      1147            push    acc
026D 7443      1148            mov     a,#0x43
026F C0E0      1149            push    acc
0271 8E82      1150            mov     dpl,r6
0273 8F83      1151            mov     dph,r7
0275 88F0      1152            mov     b,r0
0277 E9        1153            mov     a,r1
0278 120100    1154            lcall   ___fsdiv
027B AE82      1155            mov     r6,dpl
027D AF83      1156            mov     r7,dph
027F A8F0      1157            mov     r0,b
0281 F9        1158            mov     r1,a
0282 E581      1159            mov     a,sp
0284 24FC      1160            add     a,#0xfc
0286 F581      1161            mov     sp,a
0288 C006      1162            push    ar6
028A C007      1163            push    ar7
028C C000      1164            push    ar0
028E C001      1165            push    ar1
0290 903333    1166            mov     dptr,#0x3333
0293 75F053    1167            mov     b,#0x53
0296 7440      1168            mov     a,#0x40
0298 120100    1169            lcall   ___fsmul
029B AE82      1170            mov     r6,dpl
029D AF83      1171            mov     r7,dph
029F A8F0      1172            mov     r0,b
02A1 F9        1173            mov     r1,a
02A2 E581      1174            mov     a,sp
02A4 24FC      1175            add     a,#0xfc
02A6 F581      1176            mov     sp,a
02A8 C006      1177            push    ar6
02AA C007      1178            push    ar7
02AC C000      1179            push    ar0
02AE C001      1180            push    ar1
02B0 7418      1181            mov     a,#__str_0
02B2 C0E0      1182            push    acc
02B4 74B0      1183            mov     a,#(__str_0 >> 8)
02B6 C0E0      1184            push    acc
02B8 7480      1185            mov     a,#0x80
02BA C0E0      1186            push    acc
02BC 74D8      1187            mov     a,#_display_LCD_buff_1_94
02BE C0E0      1188            push    acc
02C0 74A2      1189            mov     a,#(_display_LCD_buff_1_94 >> 8)
02C2 C0E0      1190            push    acc
02C4 7440      1191            mov     a,#0x40
02C6 C0E0      1192            push    acc
02C8 120100    1193            lcall   _sprintf
02CB E581      1194            mov     a,sp
02CD 24F2      1195            add     a,#0xf2
02CF F581      1196            mov     sp,a
02D1           1197   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:242: LCDprint(buff, 1, 1);
02D1 758801    1198            mov     _LCDprint_PARM_2,#0x01
02D4 D258      1199            setb    _LCDprint_PARM_3
02D6 90A2D8    1200            mov     dptr,#_display_LCD_buff_1_94
02D9 75F040    1201            mov     b,#0x40
02DC 120100    1202            lcall   _LCDprint
02DF           1203   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:243: sprintf(buff, "LM=%d RM=%d", pwm_left, pwm_right); // Display Motor Values
02DF AA08      1204            mov     r2,_pwm_right
02E1 7B00      1205            mov     r3,#0x00
02E3 AC48      1206            mov     r4,_pwm_left
02E5 7D00      1207            mov     r5,#0x00
02E7 C002      1208            push    ar2
02E9 C003      1209            push    ar3
02EB C004      1210            push    ar4
02ED C005      1211            push    ar5
02EF 7498      1212            mov     a,#__str_1
02F1 C0E0      1213            push    acc
02F3 74B0      1214            mov     a,#(__str_1 >> 8)
02F5 C0E0      1215            push    acc
02F7 7480      1216            mov     a,#0x80
02F9 C0E0      1217            push    acc
02FB 74D8      1218            mov     a,#_display_LCD_buff_1_94
02FD C0E0      1219            push    acc
02FF 74A2      1220            mov     a,#(_display_LCD_buff_1_94 >> 8)
0301 C0E0      1221            push    acc
0303 7440      1222            mov     a,#0x40
0305 C0E0      1223            push    acc
0307 120100    1224            lcall   _sprintf
030A E581      1225            mov     a,sp
030C 24F6      1226            add     a,#0xf6
030E F581      1227            mov     sp,a
0310           1228   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:244: LCDprint(buff, 2, 1);
0310 758802    1229            mov     _LCDprint_PARM_2,#0x02
0313 D258      1230            setb    _LCDprint_PARM_3
0315 90A2D8    1231            mov     dptr,#_display_LCD_buff_1_94
0318 75F040    1232            mov     b,#0x40
031B 020100    1233            ljmp    _LCDprint
031E           1234   ;------------------------------------------------------------
031E           1235   ;Allocation info for local variables in function 'turn_left'
031E           1236   ;------------------------------------------------------------
031E           1237   ;------------------------------------------------------------
031E           1238   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:248: void turn_left(void){
031E           1239   ;        -----------------------------------------
031E           1240   ;         function turn_left
031E           1241   ;        -----------------------------------------
031E           1242   _turn_left:
031E           1243   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:249: turn_timer = 0;
031E E4        1244            clr     a
031F F5C8      1245            mov     _turn_timer,a
0321 F5C9      1246            mov     (_turn_timer + 1),a
0323           1247   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:250: turn_time_update = 1;
0323 D2E8      1248            setb    _turn_time_update
0325           1249   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:251: while(1){
0325           1250   L017004?:
0325           1251   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:252: pwm_left = 20;
0325 754814    1252            mov     _pwm_left,#0x14
0328           1253   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:253: pwm_right = 100;
0328 750864    1254            mov     _pwm_right,#0x64
032B           1255   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:254: if(turn_timer == 2000){
032B 74D0      1256            mov     a,#0xD0
032D B5C8D8    1257            cjne    a,_turn_timer,L017004?
0330 7407      1258            mov     a,#0x07
0332 B5C9D8    1259            cjne    a,(_turn_timer + 1),L017004?
0335           1260   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:255: turn_time_update = 0;
0335 C2E8      1261            clr     _turn_time_update
0337           1262   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:256: turn_timer = 0;
0337 E4        1263            clr     a
0338 F5C8      1264            mov     _turn_timer,a
033A F5C9      1265            mov     (_turn_timer + 1),a
033C           1266   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:257: break;
033C 22        1267            ret
033D           1268   ;------------------------------------------------------------
033D           1269   ;Allocation info for local variables in function 'turn_right'
033D           1270   ;------------------------------------------------------------
033D           1271   ;------------------------------------------------------------
033D           1272   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:261: void turn_right(void){
033D           1273   ;        -----------------------------------------
033D           1274   ;         function turn_right
033D           1275   ;        -----------------------------------------
033D           1276   _turn_right:
033D           1277   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:262: turn_timer = 0;
033D E4        1278            clr     a
033E F5C8      1279            mov     _turn_timer,a
0340 F5C9      1280            mov     (_turn_timer + 1),a
0342           1281   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:263: turn_time_update = 1;
0342 D2E8      1282            setb    _turn_time_update
0344           1283   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:264: while(1){
0344           1284   L018004?:
0344           1285   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:265: pwm_left = 100;
0344 754864    1286            mov     _pwm_left,#0x64
0347           1287   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:266: pwm_right = 20;
0347 750814    1288            mov     _pwm_right,#0x14
034A           1289   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:267: if(turn_timer == 2000){
034A 74D0      1290            mov     a,#0xD0
034C B5C818    1291            cjne    a,_turn_timer,L018004?
034F 7407      1292            mov     a,#0x07
0351 B5C918    1293            cjne    a,(_turn_timer + 1),L018004?
0354           1294   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:268: turn_time_update = 0;
0354 C2E8      1295            clr     _turn_time_update
0356           1296   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:269: turn_timer = 0;
0356 E4        1297            clr     a
0357 F5C8      1298            mov     _turn_timer,a
0359 F5C9      1299            mov     (_turn_timer + 1),a
035B           1300   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:270: break;
035B 22        1301            ret
035C           1302   ;------------------------------------------------------------
035C           1303   ;Allocation info for local variables in function 'stop'
035C           1304   ;------------------------------------------------------------
035C           1305   ;------------------------------------------------------------
035C           1306   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:275: void stop(void){
035C           1307   ;        -----------------------------------------
035C           1308   ;         function stop
035C           1309   ;        -----------------------------------------
035C           1310   _stop:
035C           1311   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:276: while(1){
035C           1312   L019002?:
035C           1313   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:277: pwm_left = 0;
035C 754800    1314            mov     _pwm_left,#0x00
035F           1315   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:278: pwm_right = 0;
035F 750800    1316            mov     _pwm_right,#0x00
0362 8001      1317            sjmp    L019002?
0364           1318   ;------------------------------------------------------------
0364           1319   ;Allocation info for local variables in function 'execute'
0364           1320   ;------------------------------------------------------------
0364           1321   ;command                   Allocated to registers r2 r3 
0364           1322   ;------------------------------------------------------------
0364           1323   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:282: void execute(int command){
0364           1324   ;        -----------------------------------------
0364           1325   ;         function execute
0364           1326   ;        -----------------------------------------
0364           1327   _execute:
0364 AA82      1328            mov     r2,dpl
0366 AB83      1329            mov     r3,dph
0368           1330   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:283: switch(command){
0368 BA0298    1331            cjne    r2,#0x02,L020014?
036B BB0098    1332            cjne    r3,#0x00,L020014?
036E 8001      1333            sjmp    L020001?
0370           1334   L020014?:
0370 BA0318    1335            cjne    r2,#0x03,L020015?
0373 BB0018    1336            cjne    r3,#0x00,L020015?
0376 8001      1337            sjmp    L020002?
0378           1338   L020015?:
0378           1339   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:284: case 2:
0378 BA0498    1340            cjne    r2,#0x04,L020008?
037B BB0098    1341            cjne    r3,#0x00,L020008?
037E 8001      1342            sjmp    L020003?
0380           1343   L020001?:
0380           1344   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:285: turn_left();
0380 120100    1345            lcall   _turn_left
0383           1346   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:286: case 3:
0383           1347   L020002?:
0383           1348   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:287: turn_right();
0383 120100    1349            lcall   _turn_right
0386           1350   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:288: case 4:
0386           1351   L020003?:
0386           1352   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:289: if(start == 1){
0386           1353   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:290: start = 0;
0386 109818    1354            jbc     _start,L020017?
0389 8001      1355            sjmp    L020005?
038B           1356   L020017?:
038B 22        1357            ret
038C           1358   L020005?:
038C           1359   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:293: stop();
038C           1360   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:295: }
038C 020100    1361            ljmp    _stop
038F           1362   L020008?:
038F 22        1363            ret
0390           1364   ;------------------------------------------------------------
0390           1365   ;Allocation info for local variables in function 'main'
0390           1366   ;------------------------------------------------------------
0390           1367   ;cor                       Allocated with name '_main_cor_1_112'
0390           1368   ;cur_error                 Allocated with name '_main_cur_error_1_112'
0390           1369   ;pre_error                 Allocated with name '_main_pre_error_1_112'
0390           1370   ;thresh                    Allocated to registers 
0390           1371   ;left                      Allocated to registers r6 r7 r0 r1 
0390           1372   ;right                     Allocated with name '_main_right_1_112'
0390           1373   ;line_sensor               Allocated with name '_main_line_sensor_1_112'
0390           1374   ;diff                      Allocated with name '_main_diff_1_112'
0390           1375   ;line_counter              Allocated with name '_main_line_counter_1_112'
0390           1376   ;command                   Allocated with name '_main_command_1_112'
0390           1377   ;state                     Allocated with name '_main_state_1_112'
0390           1378   ;------------------------------------------------------------
0390           1379   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:298: void main (void){
0390           1380   ;        -----------------------------------------
0390           1381   ;         function main
0390           1382   ;        -----------------------------------------
0390           1383   _main:
0390           1384   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:300: double cor = 0;
0390 751800    1385            mov     _main_cor_1_112,#0x00
0393 751900    1386            mov     (_main_cor_1_112 + 1),#0x00
0396           1387   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:301: double cur_error =0;
0396           1388   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:306: double left = (AD1DAT1/255.0)*3.3;
0396 E4        1389            clr     a
0397 F51A      1390            mov     (_main_cor_1_112 + 2),a
0399 F51B      1391            mov     (_main_cor_1_112 + 3),a
039B F568      1392            mov     _main_cur_error_1_112,a
039D F569      1393            mov     (_main_cur_error_1_112 + 1),a
039F F56A      1394            mov     (_main_cur_error_1_112 + 2),a
03A1 F56B      1395            mov     (_main_cur_error_1_112 + 3),a
03A3 E5D6      1396            mov     a,_AD1DAT1
03A5           1397   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:307: double right = (AD1DAT2/255.0)*3.3;
03A5 E5D7      1398            mov     a,_AD1DAT2
03A7           1399   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:308: double line_sensor = (AD1DAT3/255.0)*3.3;
03A7 E5F5      1400            mov     a,_AD1DAT3
03A9           1401   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:312: int line_counter = 0;
03A9           1402   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:313: int command = 0;
03A9 E4        1403            clr     a
03AA F5F8      1404            mov     _main_line_counter_1_112,a
03AC F5F9      1405            mov     (_main_line_counter_1_112 + 1),a
03AE F548      1406            mov     _main_command_1_112,a
03B0 F549      1407            mov     (_main_command_1_112 + 1),a
03B2           1408   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:314: int state = 1;  
03B2 759801    1409            mov     _main_state_1_112,#0x01
03B5 E4        1410            clr     a
03B6 F599      1411            mov     (_main_state_1_112 + 1),a
03B8           1412   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:317: InitPorts();
03B8 120100    1413            lcall   _InitPorts
03BB           1414   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:318: LCD_8BIT();
03BB 120100    1415            lcall   _LCD_8BIT
03BE           1416   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:319: InitSerialPort();
03BE 120100    1417            lcall   _InitSerialPort
03C1           1418   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:320: InitADC();
03C1 120100    1419            lcall   _InitADC
03C4           1420   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:321: InitTimer0();
03C4 120100    1421            lcall   _InitTimer0
03C7           1422   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:324: pre_error = 0;
03C7 75B800    1423            mov     _main_pre_error_1_112,#0x00
03CA 75B900    1424            mov     (_main_pre_error_1_112 + 1),#0x00
03CD 75BA00    1425            mov     (_main_pre_error_1_112 + 2),#0x00
03D0 75BB00    1426            mov     (_main_pre_error_1_112 + 3),#0x00
03D3           1427   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:325: while(1)
03D3           1428   L021036?:
03D3           1429   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:335: left = (AD1DAT1/255.0)*3.3;
03D3 85D682    1430            mov     dpl,_AD1DAT1
03D6 120100    1431            lcall   ___uchar2fs
03D9 AE82      1432            mov     r6,dpl
03DB AF83      1433            mov     r7,dph
03DD A8F0      1434            mov     r0,b
03DF F9        1435            mov     r1,a
03E0 E4        1436            clr     a
03E1 C0E0      1437            push    acc
03E3 C0E0      1438            push    acc
03E5 747F      1439            mov     a,#0x7F
03E7 C0E0      1440            push    acc
03E9 7443      1441            mov     a,#0x43
03EB C0E0      1442            push    acc
03ED 8E82      1443            mov     dpl,r6
03EF 8F83      1444            mov     dph,r7
03F1 88F0      1445            mov     b,r0
03F3 E9        1446            mov     a,r1
03F4 120100    1447            lcall   ___fsdiv
03F7 AE82      1448            mov     r6,dpl
03F9 AF83      1449            mov     r7,dph
03FB A8F0      1450            mov     r0,b
03FD F9        1451            mov     r1,a
03FE E581      1452            mov     a,sp
0400 24FC      1453            add     a,#0xfc
0402 F581      1454            mov     sp,a
0404 C006      1455            push    ar6
0406 C007      1456            push    ar7
0408 C000      1457            push    ar0
040A C001      1458            push    ar1
040C 903333    1459            mov     dptr,#0x3333
040F 75F053    1460            mov     b,#0x53
0412 7440      1461            mov     a,#0x40
0414 120100    1462            lcall   ___fsmul
0417 AE82      1463            mov     r6,dpl
0419 AF83      1464            mov     r7,dph
041B A8F0      1465            mov     r0,b
041D F9        1466            mov     r1,a
041E E581      1467            mov     a,sp
0420 24FC      1468            add     a,#0xfc
0422 F581      1469            mov     sp,a
0424           1470   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:336: right = (AD1DAT2/255.0)*3.3;
0424 85D782    1471            mov     dpl,_AD1DAT2
0427 C006      1472            push    ar6
0429 C007      1473            push    ar7
042B C000      1474            push    ar0
042D C001      1475            push    ar1
042F 120100    1476            lcall   ___uchar2fs
0432 AA82      1477            mov     r2,dpl
0434 AB83      1478            mov     r3,dph
0436 ACF0      1479            mov     r4,b
0438 FD        1480            mov     r5,a
0439 E4        1481            clr     a
043A C0E0      1482            push    acc
043C C0E0      1483            push    acc
043E 747F      1484            mov     a,#0x7F
0440 C0E0      1485            push    acc
0442 7443      1486            mov     a,#0x43
0444 C0E0      1487            push    acc
0446 8A82      1488            mov     dpl,r2
0448 8B83      1489            mov     dph,r3
044A 8CF0      1490            mov     b,r4
044C ED        1491            mov     a,r5
044D 120100    1492            lcall   ___fsdiv
0450 AA82      1493            mov     r2,dpl
0452 AB83      1494            mov     r3,dph
0454 ACF0      1495            mov     r4,b
0456 FD        1496            mov     r5,a
0457 E581      1497            mov     a,sp
0459 24FC      1498            add     a,#0xfc
045B F581      1499            mov     sp,a
045D C002      1500            push    ar2
045F C003      1501            push    ar3
0461 C004      1502            push    ar4
0463 C005      1503            push    ar5
0465 903333    1504            mov     dptr,#0x3333
0468 75F053    1505            mov     b,#0x53
046B 7440      1506            mov     a,#0x40
046D 120100    1507            lcall   ___fsmul
0470 858208    1508            mov     _main_right_1_112,dpl
0473 858309    1509            mov     (_main_right_1_112 + 1),dph
0476 85F00A    1510            mov     (_main_right_1_112 + 2),b
0479 F50B      1511            mov     (_main_right_1_112 + 3),a
047B E581      1512            mov     a,sp
047D 24FC      1513            add     a,#0xfc
047F F581      1514            mov     sp,a
0481           1515   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:337: line_sensor = (AD1DAT3/255.0)*3.3;
0481 85F582    1516            mov     dpl,_AD1DAT3
0484 120100    1517            lcall   ___uchar2fs
0487 AA82      1518            mov     r2,dpl
0489 AB83      1519            mov     r3,dph
048B ACF0      1520            mov     r4,b
048D FD        1521            mov     r5,a
048E E4        1522            clr     a
048F C0E0      1523            push    acc
0491 C0E0      1524            push    acc
0493 747F      1525            mov     a,#0x7F
0495 C0E0      1526            push    acc
0497 7443      1527            mov     a,#0x43
0499 C0E0      1528            push    acc
049B 8A82      1529            mov     dpl,r2
049D 8B83      1530            mov     dph,r3
049F 8CF0      1531            mov     b,r4
04A1 ED        1532            mov     a,r5
04A2 120100    1533            lcall   ___fsdiv
04A5 AA82      1534            mov     r2,dpl
04A7 AB83      1535            mov     r3,dph
04A9 ACF0      1536            mov     r4,b
04AB FD        1537            mov     r5,a
04AC E581      1538            mov     a,sp
04AE 24FC      1539            add     a,#0xfc
04B0 F581      1540            mov     sp,a
04B2 C002      1541            push    ar2
04B4 C003      1542            push    ar3
04B6 C004      1543            push    ar4
04B8 C005      1544            push    ar5
04BA 903333    1545            mov     dptr,#0x3333
04BD 75F053    1546            mov     b,#0x53
04C0 7440      1547            mov     a,#0x40
04C2 120100    1548            lcall   ___fsmul
04C5 858258    1549            mov     _main_line_sensor_1_112,dpl
04C8 858359    1550            mov     (_main_line_sensor_1_112 + 1),dph
04CB 85F05A    1551            mov     (_main_line_sensor_1_112 + 2),b
04CE F55B      1552            mov     (_main_line_sensor_1_112 + 3),a
04D0 E581      1553            mov     a,sp
04D2 24FC      1554            add     a,#0xfc
04D4 F581      1555            mov     sp,a
04D6 D001      1556            pop     ar1
04D8 D000      1557            pop     ar0
04DA D007      1558            pop     ar7
04DC D006      1559            pop     ar6
04DE           1560   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:338: diff = left - right;
04DE C006      1561            push    ar6
04E0 C007      1562            push    ar7
04E2 C000      1563            push    ar0
04E4 C001      1564            push    ar1
04E6 C008      1565            push    _main_right_1_112
04E8 C009      1566            push    (_main_right_1_112 + 1)
04EA C00A      1567            push    (_main_right_1_112 + 2)
04EC C00B      1568            push    (_main_right_1_112 + 3)
04EE 8E82      1569            mov     dpl,r6
04F0 8F83      1570            mov     dph,r7
04F2 88F0      1571            mov     b,r0
04F4 E9        1572            mov     a,r1
04F5 120100    1573            lcall   ___fssub
04F8 8582A8    1574            mov     _main_diff_1_112,dpl
04FB 8583A9    1575            mov     (_main_diff_1_112 + 1),dph
04FE 85F0AA    1576            mov     (_main_diff_1_112 + 2),b
0501 F5AB      1577            mov     (_main_diff_1_112 + 3),a
0503 E581      1578            mov     a,sp
0505 24FC      1579            add     a,#0xfc
0507 F581      1580            mov     sp,a
0509 D001      1581            pop     ar1
050B D000      1582            pop     ar0
050D D007      1583            pop     ar7
050F D006      1584            pop     ar6
0511           1585   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:341: if(time_update_flag==1) // If the clock has been updated, refresh the display
0511 303818    1586            jnb     _time_update_flag,L021002?
0514           1587   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:343: display_LCD();
0514 C006      1588            push    ar6
0516 C007      1589            push    ar7
0518 C000      1590            push    ar0
051A C001      1591            push    ar1
051C 120100    1592            lcall   _display_LCD
051F D001      1593            pop     ar1
0521 D000      1594            pop     ar0
0523 D007      1595            pop     ar7
0525 D006      1596            pop     ar6
0527           1597   L021002?:
0527           1598   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:348: if((left > 0.4) && (left < 0.7) && (right > 0.4) && (right < 0.7)){
0527 C006      1599            push    ar6
0529 C007      1600            push    ar7
052B C000      1601            push    ar0
052D C001      1602            push    ar1
052F 74CD      1603            mov     a,#0xCD
0531 C0E0      1604            push    acc
0533 74CC      1605            mov     a,#0xCC
0535 C0E0      1606            push    acc
0537 C0E0      1607            push    acc
0539 743E      1608            mov     a,#0x3E
053B C0E0      1609            push    acc
053D 8E82      1610            mov     dpl,r6
053F 8F83      1611            mov     dph,r7
0541 88F0      1612            mov     b,r0
0543 E9        1613            mov     a,r1
0544 120100    1614            lcall   ___fsgt
0547 AA82      1615            mov     r2,dpl
0549 E581      1616            mov     a,sp
054B 24FC      1617            add     a,#0xfc
054D F581      1618            mov     sp,a
054F D001      1619            pop     ar1
0551 D000      1620            pop     ar0
0553 D007      1621            pop     ar7
0555 D006      1622            pop     ar6
0557 EA        1623            mov     a,r2
0558 7001      1624            jnz     L021062?
055A 020100    1625            ljmp    L021004?
055D           1626   L021062?:
055D C006      1627            push    ar6
055F C007      1628            push    ar7
0561 C000      1629            push    ar0
0563 C001      1630            push    ar1
0565 7433      1631            mov     a,#0x33
0567 C0E0      1632            push    acc
0569 C0E0      1633            push    acc
056B C0E0      1634            push    acc
056D 743F      1635            mov     a,#0x3F
056F C0E0      1636            push    acc
0571 8E82      1637            mov     dpl,r6
0573 8F83      1638            mov     dph,r7
0575 88F0      1639            mov     b,r0
0577 E9        1640            mov     a,r1
0578 120100    1641            lcall   ___fslt
057B AA82      1642            mov     r2,dpl
057D E581      1643            mov     a,sp
057F 24FC      1644            add     a,#0xfc
0581 F581      1645            mov     sp,a
0583 D001      1646            pop     ar1
0585 D000      1647            pop     ar0
0587 D007      1648            pop     ar7
0589 D006      1649            pop     ar6
058B EA        1650            mov     a,r2
058C 7001      1651            jnz     L021063?
058E 020100    1652            ljmp    L021004?
0591           1653   L021063?:
0591 C006      1654            push    ar6
0593 C007      1655            push    ar7
0595 C000      1656            push    ar0
0597 C001      1657            push    ar1
0599 74CD      1658            mov     a,#0xCD
059B C0E0      1659            push    acc
059D 74CC      1660            mov     a,#0xCC
059F C0E0      1661            push    acc
05A1 C0E0      1662            push    acc
05A3 743E      1663            mov     a,#0x3E
05A5 C0E0      1664            push    acc
05A7 850882    1665            mov     dpl,_main_right_1_112
05AA 850983    1666            mov     dph,(_main_right_1_112 + 1)
05AD 850AF0    1667            mov     b,(_main_right_1_112 + 2)
05B0 E50B      1668            mov     a,(_main_right_1_112 + 3)
05B2 120100    1669            lcall   ___fsgt
05B5 AA82      1670            mov     r2,dpl
05B7 E581      1671            mov     a,sp
05B9 24FC      1672            add     a,#0xfc
05BB F581      1673            mov     sp,a
05BD D001      1674            pop     ar1
05BF D000      1675            pop     ar0
05C1 D007      1676            pop     ar7
05C3 D006      1677            pop     ar6
05C5 EA        1678            mov     a,r2
05C6 6001      1679            jz      L021004?
05C8 C006      1680            push    ar6
05CA C007      1681            push    ar7
05CC C000      1682            push    ar0
05CE C001      1683            push    ar1
05D0 7433      1684            mov     a,#0x33
05D2 C0E0      1685            push    acc
05D4 C0E0      1686            push    acc
05D6 C0E0      1687            push    acc
05D8 743F      1688            mov     a,#0x3F
05DA C0E0      1689            push    acc
05DC 850882    1690            mov     dpl,_main_right_1_112
05DF 850983    1691            mov     dph,(_main_right_1_112 + 1)
05E2 850AF0    1692            mov     b,(_main_right_1_112 + 2)
05E5 E50B      1693            mov     a,(_main_right_1_112 + 3)
05E7 120100    1694            lcall   ___fslt
05EA AA82      1695            mov     r2,dpl
05EC E581      1696            mov     a,sp
05EE 24FC      1697            add     a,#0xfc
05F0 F581      1698            mov     sp,a
05F2 D001      1699            pop     ar1
05F4 D000      1700            pop     ar0
05F6 D007      1701            pop     ar7
05F8 D006      1702            pop     ar6
05FA EA        1703            mov     a,r2
05FB 6001      1704            jz      L021004?
05FD           1705   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:349: cur_error = 0;
05FD 756800    1706            mov     _main_cur_error_1_112,#0x00
0600 756900    1707            mov     (_main_cur_error_1_112 + 1),#0x00
0603 756A00    1708            mov     (_main_cur_error_1_112 + 2),#0x00
0606 756B00    1709            mov     (_main_cur_error_1_112 + 3),#0x00
0609           1710   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:350: pwm_left = 100;
0609 754864    1711            mov     _pwm_left,#0x64
060C           1712   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:351: pwm_right = 100;
060C 750864    1713            mov     _pwm_right,#0x64
060F           1714   L021004?:
060F           1715   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:353: if(0.3<diff){   
060F C006      1716            push    ar6
0611 C007      1717            push    ar7
0613 C000      1718            push    ar0
0615 C001      1719            push    ar1
0617 C0A8      1720            push    _main_diff_1_112
0619 C0A9      1721            push    (_main_diff_1_112 + 1)
061B C0AA      1722            push    (_main_diff_1_112 + 2)
061D C0AB      1723            push    (_main_diff_1_112 + 3)
061F 90999A    1724            mov     dptr,#0x999A
0622 75F099    1725            mov     b,#0x99
0625 743E      1726            mov     a,#0x3E
0627 120100    1727            lcall   ___fslt
062A AA82      1728            mov     r2,dpl
062C E581      1729            mov     a,sp
062E 24FC      1730            add     a,#0xfc
0630 F581      1731            mov     sp,a
0632 D001      1732            pop     ar1
0634 D000      1733            pop     ar0
0636 D007      1734            pop     ar7
0638 D006      1735            pop     ar6
063A EA        1736            mov     a,r2
063B 6001      1737            jz      L021009?
063D           1738   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:354: cur_error = 1;
063D 756800    1739            mov     _main_cur_error_1_112,#0x00
0640 756900    1740            mov     (_main_cur_error_1_112 + 1),#0x00
0643 756A80    1741            mov     (_main_cur_error_1_112 + 2),#0x80
0646 756B3F    1742            mov     (_main_cur_error_1_112 + 3),#0x3F
0649           1743   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:355: cor = KP * cur_error + KD*(cur_error - pre_error);
0649 751800    1744            mov     _main_cor_1_112,#0x00
064C 751900    1745            mov     (_main_cor_1_112 + 1),#0x00
064F 751A20    1746            mov     (_main_cor_1_112 + 2),#0x20
0652 751B42    1747            mov     (_main_cor_1_112 + 3),#0x42
0655           1748   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:356: pwm_left = 100 - cor;
0655 75483C    1749            mov     _pwm_left,#0x3C
0658           1750   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:357: pwm_right = 100;
0658 750864    1751            mov     _pwm_right,#0x64
065B           1752   L021009?:
065B           1753   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:359: if(diff<-0.3){
065B C006      1754            push    ar6
065D C007      1755            push    ar7
065F C000      1756            push    ar0
0661 C001      1757            push    ar1
0663 749A      1758            mov     a,#0x9A
0665 C0E0      1759            push    acc
0667 7499      1760            mov     a,#0x99
0669 C0E0      1761            push    acc
066B C0E0      1762            push    acc
066D 74BE      1763            mov     a,#0xBE
066F C0E0      1764            push    acc
0671 85A882    1765            mov     dpl,_main_diff_1_112
0674 85A983    1766            mov     dph,(_main_diff_1_112 + 1)
0677 85AAF0    1767            mov     b,(_main_diff_1_112 + 2)
067A E5AB      1768            mov     a,(_main_diff_1_112 + 3)
067C 120100    1769            lcall   ___fslt
067F AA82      1770            mov     r2,dpl
0681 E581      1771            mov     a,sp
0683 24FC      1772            add     a,#0xfc
0685 F581      1773            mov     sp,a
0687 D001      1774            pop     ar1
0689 D000      1775            pop     ar0
068B D007      1776            pop     ar7
068D D006      1777            pop     ar6
068F EA        1778            mov     a,r2
0690 6001      1779            jz      L021011?
0692           1780   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:360: cur_error= -1;
0692 756800    1781            mov     _main_cur_error_1_112,#0x00
0695 756900    1782            mov     (_main_cur_error_1_112 + 1),#0x00
0698 756A80    1783            mov     (_main_cur_error_1_112 + 2),#0x80
069B 756BBF    1784            mov     (_main_cur_error_1_112 + 3),#0xBF
069E           1785   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:361: cor = KP * cur_error + KD*(cur_error - pre_error);
069E 751800    1786            mov     _main_cor_1_112,#0x00
06A1 751900    1787            mov     (_main_cor_1_112 + 1),#0x00
06A4 751A20    1788            mov     (_main_cor_1_112 + 2),#0x20
06A7 751BC2    1789            mov     (_main_cor_1_112 + 3),#0xC2
06AA           1790   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:362: pwm_left = 100;
06AA 754864    1791            mov     _pwm_left,#0x64
06AD           1792   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:363: pwm_right = 100 + cor;
06AD 75083C    1793            mov     _pwm_right,#0x3C
06B0           1794   L021011?:
06B0           1795   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:365: if((left < 0.3) && (right < 0.3)){
06B0 C006      1796            push    ar6
06B2 C007      1797            push    ar7
06B4 C000      1798            push    ar0
06B6 C001      1799            push    ar1
06B8 749A      1800            mov     a,#0x9A
06BA C0E0      1801            push    acc
06BC 7499      1802            mov     a,#0x99
06BE C0E0      1803            push    acc
06C0 C0E0      1804            push    acc
06C2 743E      1805            mov     a,#0x3E
06C4 C0E0      1806            push    acc
06C6 8E82      1807            mov     dpl,r6
06C8 8F83      1808            mov     dph,r7
06CA 88F0      1809            mov     b,r0
06CC E9        1810            mov     a,r1
06CD 120100    1811            lcall   ___fslt
06D0 AA82      1812            mov     r2,dpl
06D2 E581      1813            mov     a,sp
06D4 24FC      1814            add     a,#0xfc
06D6 F581      1815            mov     sp,a
06D8 D001      1816            pop     ar1
06DA D000      1817            pop     ar0
06DC D007      1818            pop     ar7
06DE D006      1819            pop     ar6
06E0 EA        1820            mov     a,r2
06E1 7001      1821            jnz     L021068?
06E3 020100    1822            ljmp    L021017?
06E6           1823   L021068?:
06E6 C006      1824            push    ar6
06E8 C007      1825            push    ar7
06EA C000      1826            push    ar0
06EC C001      1827            push    ar1
06EE 749A      1828            mov     a,#0x9A
06F0 C0E0      1829            push    acc
06F2 7499      1830            mov     a,#0x99
06F4 C0E0      1831            push    acc
06F6 C0E0      1832            push    acc
06F8 743E      1833            mov     a,#0x3E
06FA C0E0      1834            push    acc
06FC 850882    1835            mov     dpl,_main_right_1_112
06FF 850983    1836            mov     dph,(_main_right_1_112 + 1)
0702 850AF0    1837            mov     b,(_main_right_1_112 + 2)
0705 E50B      1838            mov     a,(_main_right_1_112 + 3)
0707 120100    1839            lcall   ___fslt
070A AA82      1840            mov     r2,dpl
070C E581      1841            mov     a,sp
070E 24FC      1842            add     a,#0xfc
0710 F581      1843            mov     sp,a
0712 D001      1844            pop     ar1
0714 D000      1845            pop     ar0
0716 D007      1846            pop     ar7
0718 D006      1847            pop     ar6
071A EA        1848            mov     a,r2
071B 7001      1849            jnz     L021069?
071D 020100    1850            ljmp    L021017?
0720           1851   L021069?:
0720           1852   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:366: if(pre_error > 0){
0720 C006      1853            push    ar6
0722 C007      1854            push    ar7
0724 C000      1855            push    ar0
0726 C001      1856            push    ar1
0728 E4        1857            clr     a
0729 C0E0      1858            push    acc
072B C0E0      1859            push    acc
072D C0E0      1860            push    acc
072F C0E0      1861            push    acc
0731 85B882    1862            mov     dpl,_main_pre_error_1_112
0734 85B983    1863            mov     dph,(_main_pre_error_1_112 + 1)
0737 85BAF0    1864            mov     b,(_main_pre_error_1_112 + 2)
073A E5BB      1865            mov     a,(_main_pre_error_1_112 + 3)
073C 120100    1866            lcall   ___fsgt
073F AA82      1867            mov     r2,dpl
0741 E581      1868            mov     a,sp
0743 24FC      1869            add     a,#0xfc
0745 F581      1870            mov     sp,a
0747 D001      1871            pop     ar1
0749 D000      1872            pop     ar0
074B D007      1873            pop     ar7
074D D006      1874            pop     ar6
074F EA        1875            mov     a,r2
0750 6001      1876            jz      L021013?
0752           1877   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:370: pwm_left = 0;
0752 754800    1878            mov     _pwm_left,#0x00
0755           1879   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:371: pwm_right = 100;
0755 750864    1880            mov     _pwm_right,#0x64
0758           1881   L021013?:
0758           1882   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:374: if(pre_error < 0){
0758 C006      1883            push    ar6
075A C007      1884            push    ar7
075C C000      1885            push    ar0
075E C001      1886            push    ar1
0760 E4        1887            clr     a
0761 C0E0      1888            push    acc
0763 C0E0      1889            push    acc
0765 C0E0      1890            push    acc
0767 C0E0      1891            push    acc
0769 85B882    1892            mov     dpl,_main_pre_error_1_112
076C 85B983    1893            mov     dph,(_main_pre_error_1_112 + 1)
076F 85BAF0    1894            mov     b,(_main_pre_error_1_112 + 2)
0772 E5BB      1895            mov     a,(_main_pre_error_1_112 + 3)
0774 120100    1896            lcall   ___fslt
0777 AA82      1897            mov     r2,dpl
0779 E581      1898            mov     a,sp
077B 24FC      1899            add     a,#0xfc
077D F581      1900            mov     sp,a
077F D001      1901            pop     ar1
0781 D000      1902            pop     ar0
0783 D007      1903            pop     ar7
0785 D006      1904            pop     ar6
0787 EA        1905            mov     a,r2
0788 6001      1906            jz      L021017?
078A           1907   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:378: pwm_right = 100 + cor;
078A C006      1908            push    ar6
078C C007      1909            push    ar7
078E C000      1910            push    ar0
0790 C001      1911            push    ar1
0792 E4        1912            clr     a
0793 C0E0      1913            push    acc
0795 C0E0      1914            push    acc
0797 74C8      1915            mov     a,#0xC8
0799 C0E0      1916            push    acc
079B 7442      1917            mov     a,#0x42
079D C0E0      1918            push    acc
079F 851882    1919            mov     dpl,_main_cor_1_112
07A2 851983    1920            mov     dph,(_main_cor_1_112 + 1)
07A5 851AF0    1921            mov     b,(_main_cor_1_112 + 2)
07A8 E51B      1922            mov     a,(_main_cor_1_112 + 3)
07AA 120100    1923            lcall   ___fsadd
07AD AA82      1924            mov     r2,dpl
07AF AB83      1925            mov     r3,dph
07B1 ACF0      1926            mov     r4,b
07B3 FD        1927            mov     r5,a
07B4 E581      1928            mov     a,sp
07B6 24FC      1929            add     a,#0xfc
07B8 F581      1930            mov     sp,a
07BA 8A82      1931            mov     dpl,r2
07BC 8B83      1932            mov     dph,r3
07BE 8CF0      1933            mov     b,r4
07C0 ED        1934            mov     a,r5
07C1 120100    1935            lcall   ___fs2uchar
07C4 858208    1936            mov     _pwm_right,dpl
07C7 D001      1937            pop     ar1
07C9 D000      1938            pop     ar0
07CB D007      1939            pop     ar7
07CD D006      1940            pop     ar6
07CF           1941   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:379: pwm_right = 0;
07CF 750800    1942            mov     _pwm_right,#0x00
07D2           1943   L021017?:
07D2           1944   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:383: pre_error = cur_error;
07D2 8568B8    1945            mov     _main_pre_error_1_112,_main_cur_error_1_112
07D5 8569B9    1946            mov     (_main_pre_error_1_112 + 1),(_main_cur_error_1_112 + 1)
07D8 856ABA    1947            mov     (_main_pre_error_1_112 + 2),(_main_cur_error_1_112 + 2)
07DB 856BBB    1948            mov     (_main_pre_error_1_112 + 3),(_main_cur_error_1_112 + 3)
07DE           1949   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:384: printf("Error:%5.2f Left:%5.2f Right:%5.2f Left_Motor:%d Right_Motor:%d                \r", cur_error, left, right, pwm_left, pwm_right);
07DE AA08      1950            mov     r2,_pwm_right
07E0 7B00      1951            mov     r3,#0x00
07E2 AC48      1952            mov     r4,_pwm_left
07E4 7D00      1953            mov     r5,#0x00
07E6 C002      1954            push    ar2
07E8 C003      1955            push    ar3
07EA C004      1956            push    ar4
07EC C005      1957            push    ar5
07EE C008      1958            push    _main_right_1_112
07F0 C009      1959            push    (_main_right_1_112 + 1)
07F2 C00A      1960            push    (_main_right_1_112 + 2)
07F4 C00B      1961            push    (_main_right_1_112 + 3)
07F6 C006      1962            push    ar6
07F8 C007      1963            push    ar7
07FA C000      1964            push    ar0
07FC C001      1965            push    ar1
07FE C068      1966            push    _main_cur_error_1_112
0800 C069      1967            push    (_main_cur_error_1_112 + 1)
0802 C06A      1968            push    (_main_cur_error_1_112 + 2)
0804 C06B      1969            push    (_main_cur_error_1_112 + 3)
0806 7498      1970            mov     a,#__str_2
0808 C0E0      1971            push    acc
080A 74B7      1972            mov     a,#(__str_2 >> 8)
080C C0E0      1973            push    acc
080E 7480      1974            mov     a,#0x80
0810 C0E0      1975            push    acc
0812 120100    1976            lcall   _printf
0815 E581      1977            mov     a,sp
0817 24ED      1978            add     a,#0xed
0819 F581      1979            mov     sp,a
081B           1980   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:387: switch(state){
081B 7401      1981            mov     a,#0x01
081D B59818    1982            cjne    a,_main_state_1_112,L021072?
0820 E4        1983            clr     a
0821 B59918    1984            cjne    a,(_main_state_1_112 + 1),L021072?
0824 8001      1985            sjmp    L021019?
0826           1986   L021072?:
0826 7402      1987            mov     a,#0x02
0828 B59898    1988            cjne    a,_main_state_1_112,L021073?
082B E4        1989            clr     a
082C B59998    1990            cjne    a,(_main_state_1_112 + 1),L021073?
082F 8001      1991            sjmp    L021022?
0831           1992   L021073?:
0831 7403      1993            mov     a,#0x03
0833 B59818    1994            cjne    a,_main_state_1_112,L021074?
0836 E4        1995            clr     a
0837 B59918    1996            cjne    a,(_main_state_1_112 + 1),L021074?
083A 020100    1997            ljmp    L021026?
083D           1998   L021074?:
083D 7404      1999            mov     a,#0x04
083F B59898    2000            cjne    a,_main_state_1_112,L021075?
0842 E4        2001            clr     a
0843 B59998    2002            cjne    a,(_main_state_1_112 + 1),L021075?
0846 020100    2003            ljmp    L021033?
0849           2004   L021075?:
0849 020100    2005            ljmp    L021036?
084C           2006   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:388: case 1:
084C           2007   L021019?:
084C           2008   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:389: if(line_sensor >= HI_THRESH){
084C E4        2009            clr     a
084D C0E0      2010            push    acc
084F C0E0      2011            push    acc
0851 7420      2012            mov     a,#0x20
0853 C0E0      2013            push    acc
0855 7441      2014            mov     a,#0x41
0857 C0E0      2015            push    acc
0859 855882    2016            mov     dpl,_main_line_sensor_1_112
085C 855983    2017            mov     dph,(_main_line_sensor_1_112 + 1)
085F 855AF0    2018            mov     b,(_main_line_sensor_1_112 + 2)
0862 E55B      2019            mov     a,(_main_line_sensor_1_112 + 3)
0864 120100    2020            lcall   ___fslt
0867 AA82      2021            mov     r2,dpl
0869 E581      2022            mov     a,sp
086B 24FC      2023            add     a,#0xfc
086D F581      2024            mov     sp,a
086F EA        2025            mov     a,r2
0870 6001      2026            jz      L021076?
0872 020100    2027            ljmp    L021036?
0875           2028   L021076?:
0875           2029   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:390: state = 2;
0875 759802    2030            mov     _main_state_1_112,#0x02
0878 E4        2031            clr     a
0879 F599      2032            mov     (_main_state_1_112 + 1),a
087B           2033   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:392: break;                          
087B 020100    2034            ljmp    L021036?
087E           2035   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:393: case 2:
087E           2036   L021022?:
087E           2037   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:394: if((LO_THRESH<line_sensor)&&(line_sensor<MID_THRESH)){
087E C058      2038            push    _main_line_sensor_1_112
0880 C059      2039            push    (_main_line_sensor_1_112 + 1)
0882 C05A      2040            push    (_main_line_sensor_1_112 + 2)
0884 C05B      2041            push    (_main_line_sensor_1_112 + 3)
0886 900000    2042            mov     dptr,#(0x00&0x00ff)
0889 E4        2043            clr     a
088A F5F0      2044            mov     b,a
088C 120100    2045            lcall   ___fslt
088F AA82      2046            mov     r2,dpl
0891 E581      2047            mov     a,sp
0893 24FC      2048            add     a,#0xfc
0895 F581      2049            mov     sp,a
0897 EA        2050            mov     a,r2
0898 7001      2051            jnz     L021077?
089A 020100    2052            ljmp    L021036?
089D           2053   L021077?:
089D E4        2054            clr     a
089E C0E0      2055            push    acc
08A0 C0E0      2056            push    acc
08A2 74A0      2057            mov     a,#0xA0
08A4 C0E0      2058            push    acc
08A6 7440      2059            mov     a,#0x40
08A8 C0E0      2060            push    acc
08AA 855882    2061            mov     dpl,_main_line_sensor_1_112
08AD 855983    2062            mov     dph,(_main_line_sensor_1_112 + 1)
08B0 855AF0    2063            mov     b,(_main_line_sensor_1_112 + 2)
08B3 E55B      2064            mov     a,(_main_line_sensor_1_112 + 3)
08B5 120100    2065            lcall   ___fslt
08B8 AA82      2066            mov     r2,dpl
08BA E581      2067            mov     a,sp
08BC 24FC      2068            add     a,#0xfc
08BE F581      2069            mov     sp,a
08C0 EA        2070            mov     a,r2
08C1 7001      2071            jnz     L021078?
08C3 020100    2072            ljmp    L021036?
08C6           2073   L021078?:
08C6           2074   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:395: line_counter++;
08C6 05F8      2075            inc     _main_line_counter_1_112
08C8 E4        2076            clr     a
08C9 B5F8D8    2077            cjne    a,_main_line_counter_1_112,L021079?
08CC 05F9      2078            inc     (_main_line_counter_1_112 + 1)
08CE           2079   L021079?:
08CE           2080   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:396: state = 3;
08CE 759803    2081            mov     _main_state_1_112,#0x03
08D1 E4        2082            clr     a
08D2 F599      2083            mov     (_main_state_1_112 + 1),a
08D4           2084   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:398: break;
08D4 020100    2085            ljmp    L021036?
08D7           2086   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:399: case 3:
08D7           2087   L021026?:
08D7           2088   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:400: if(line_sensor<=LO_THRESH){
08D7 E4        2089            clr     a
08D8 C0E0      2090            push    acc
08DA C0E0      2091            push    acc
08DC C0E0      2092            push    acc
08DE C0E0      2093            push    acc
08E0 855882    2094            mov     dpl,_main_line_sensor_1_112
08E3 855983    2095            mov     dph,(_main_line_sensor_1_112 + 1)
08E6 855AF0    2096            mov     b,(_main_line_sensor_1_112 + 2)
08E9 E55B      2097            mov     a,(_main_line_sensor_1_112 + 3)
08EB 120100    2098            lcall   ___fsgt
08EE AA82      2099            mov     r2,dpl
08F0 E581      2100            mov     a,sp
08F2 24FC      2101            add     a,#0xfc
08F4 F581      2102            mov     sp,a
08F6 EA        2103            mov     a,r2
08F7 7001      2104            jnz     L021031?
08F9           2105   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:401: if(line_counter > 1){
08F9 C3        2106            clr     c
08FA 7401      2107            mov     a,#0x01
08FC 95F8      2108            subb    a,_main_line_counter_1_112
08FE E4        2109            clr     a
08FF 6480      2110            xrl     a,#0x80
0901 85F9F0    2111            mov     b,(_main_line_counter_1_112 + 1)
0904 63F080    2112            xrl     b,#0x80
0907 95F0      2113            subb    a,b
0909 5001      2114            jnc     L021028?
090B           2115   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:402: command = line_counter;
090B 85F848    2116            mov     _main_command_1_112,_main_line_counter_1_112
090E 85F949    2117            mov     (_main_command_1_112 + 1),(_main_line_counter_1_112 + 1)
0911           2118   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:403: state = 1;
0911 759801    2119            mov     _main_state_1_112,#0x01
0914 E4        2120            clr     a
0915 F599      2121            mov     (_main_state_1_112 + 1),a
0917 8001      2122            sjmp    L021029?
0919           2123   L021028?:
0919           2124   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:406: state = 4;
0919 759804    2125            mov     _main_state_1_112,#0x04
091C E4        2126            clr     a
091D F599      2127            mov     (_main_state_1_112 + 1),a
091F           2128   L021029?:
091F           2129   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:408: line_counter = 0;
091F E4        2130            clr     a
0920 F5F8      2131            mov     _main_line_counter_1_112,a
0922 F5F9      2132            mov     (_main_line_counter_1_112 + 1),a
0924 020100    2133            ljmp    L021036?
0927           2134   L021031?:
0927           2135   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:411: state = 1;
0927 759801    2136            mov     _main_state_1_112,#0x01
092A E4        2137            clr     a
092B F599      2138            mov     (_main_state_1_112 + 1),a
092D           2139   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:412: break;
092D 020100    2140            ljmp    L021036?
0930           2141   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:413: case 4:
0930           2142   L021033?:
0930           2143   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:414: execute(command);
0930 854882    2144            mov     dpl,_main_command_1_112
0933 854983    2145            mov     dph,(_main_command_1_112 + 1)
0936 120100    2146            lcall   _execute
0939           2147   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:415: state = 1;
0939 759801    2148            mov     _main_state_1_112,#0x01
093C E4        2149            clr     a
093D F599      2150            mov     (_main_state_1_112 + 1),a
093F           2151   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:417: }
093F 020100    2152            ljmp    L021036?
0942           2153            rseg R_CSEG
0942           2154   
0000           2155            rseg R_XINIT
0000           2156   
0000           2157            rseg R_CONST
0000           2158   __str_0:
0000 4C3D2535  2159            db 'L=%5.2f R:%5.2f'
     2E326620
     523A2535
     2E3266
000F 00        2160            db 0x00
0010           2161   __str_1:
0010 4C4D3D25  2162            db 'LM=%d RM=%d'
     6420524D
     3D2564
001B 00        2163            db 0x00
001C           2164   __str_2:
001C 4572726F  2165            db 'Error:%5.2f Left:%5.2f Right:%5.2f Left_Motor:%d Right_Motor'
     723A2535
     2E326620
     4C656674
     3A25352E
     32662052
     69676874
     3A25352E
     3266204C
     6566745F
     4D6F746F
     723A2564
     20526967
     68745F4D
     6F746F72
0058 3A256420  2166            db ':%d                '
     20202020
     20202020
     20202020
     202020
006B 0D        2167            db 0x0D
006C 00        2168            db 0x00
006D           2169   
000E           2170            CSEG
000E           2171   
000E           2172   end
