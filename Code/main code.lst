0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Dec 11 2012) (MSVC)
0000              4   ; This file was generated Mon Mar 16 17:40:33 2015
0000              5   ;--------------------------------------------------------
                  5   $name main_code
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _display_LCD
0000             29            public _Timer0ISR
0000             30            public _InitTimer0
0000             31            public _InitADC
0000             32            public _InitSerialPort
0000             33            public _Wait1S
0000             34            public _LCDprint
0000             35            public _LCD_8BIT
0000             36            public _WriteCommand
0000             37            public _WriteData
0000             38            public _LCD_byte
0000             39            public _LCD_pulse
0000             40            public _waitms
0000             41            public _Wait50us
0000             42            public _InitPorts
0000             43            public _LCDprint_PARM_3
0000             44            public _line_counter_flag
0000             45            public _time_update_flag
0000             46            public _LCDprint_PARM_2
0000             47            public _line_timer
0000             48            public _pwm_right
0000             49            public _pwm_left
0000             50            public _pwmcount
0000             51            public _mins
0000             52            public _secs
0000             53            public _msCount
0000             54   ;--------------------------------------------------------
0000             55   ; Special Function Registers
0000             56   ;--------------------------------------------------------
0000             57   _ACC            DATA 0xe0
0000             58   _ADCON0         DATA 0x8e
0000             59   _ADCON1         DATA 0x97
0000             60   _ADINS          DATA 0xa3
0000             61   _ADMODA         DATA 0xc0
0000             62   _ADMODB         DATA 0xa1
0000             63   _AD0BH          DATA 0xbb
0000             64   _AD0BL          DATA 0xa6
0000             65   _AD0DAT0        DATA 0xc5
0000             66   _AD0DAT1        DATA 0xc6
0000             67   _AD0DAT2        DATA 0xc7
0000             68   _AD0DAT3        DATA 0xf4
0000             69   _AD1BH          DATA 0xc4
0000             70   _AD1BL          DATA 0xbc
0000             71   _AD1DAT0        DATA 0xd5
0000             72   _AD1DAT1        DATA 0xd6
0000             73   _AD1DAT2        DATA 0xd7
0000             74   _AD1DAT3        DATA 0xf5
0000             75   _AUXR1          DATA 0xa2
0000             76   _B              DATA 0xf0
0000             77   _BRGR0          DATA 0xbe
0000             78   _BRGR1          DATA 0xbf
0000             79   _BRGCON         DATA 0xbd
0000             80   _CCCRA          DATA 0xea
0000             81   _CCCRB          DATA 0xeb
0000             82   _CCCRC          DATA 0xec
0000             83   _CCCRD          DATA 0xed
0000             84   _CMP1           DATA 0xac
0000             85   _CMP2           DATA 0xad
0000             86   _DEECON         DATA 0xf1
0000             87   _DEEDAT         DATA 0xf2
0000             88   _DEEADR         DATA 0xf3
0000             89   _DIVM           DATA 0x95
0000             90   _DPH            DATA 0x83
0000             91   _DPL            DATA 0x82
0000             92   _FMADRH         DATA 0xe7
0000             93   _FMADRL         DATA 0xe6
0000             94   _FMCON          DATA 0xe4
0000             95   _FMDATA         DATA 0xe5
0000             96   _I2ADR          DATA 0xdb
0000             97   _I2CON          DATA 0xd8
0000             98   _I2DAT          DATA 0xda
0000             99   _I2SCLH         DATA 0xdd
0000            100   _I2SCLL         DATA 0xdc
0000            101   _I2STAT         DATA 0xd9
0000            102   _ICRAH          DATA 0xab
0000            103   _ICRAL          DATA 0xaa
0000            104   _ICRBH          DATA 0xaf
0000            105   _ICRBL          DATA 0xae
0000            106   _IEN0           DATA 0xa8
0000            107   _IEN1           DATA 0xe8
0000            108   _IP0            DATA 0xb8
0000            109   _IP0H           DATA 0xb7
0000            110   _IP1            DATA 0xf8
0000            111   _IP1H           DATA 0xf7
0000            112   _KBCON          DATA 0x94
0000            113   _KBMASK         DATA 0x86
0000            114   _KBPATN         DATA 0x93
0000            115   _OCRAH          DATA 0xef
0000            116   _OCRAL          DATA 0xee
0000            117   _OCRBH          DATA 0xfb
0000            118   _OCRBL          DATA 0xfa
0000            119   _OCRCH          DATA 0xfd
0000            120   _OCRCL          DATA 0xfc
0000            121   _OCRDH          DATA 0xff
0000            122   _OCRDL          DATA 0xfe
0000            123   _P0             DATA 0x80
0000            124   _P1             DATA 0x90
0000            125   _P2             DATA 0xa0
0000            126   _P3             DATA 0xb0
0000            127   _P0M1           DATA 0x84
0000            128   _P0M2           DATA 0x85
0000            129   _P1M1           DATA 0x91
0000            130   _P1M2           DATA 0x92
0000            131   _P2M1           DATA 0xa4
0000            132   _P2M2           DATA 0xa5
0000            133   _P3M1           DATA 0xb1
0000            134   _P3M2           DATA 0xb2
0000            135   _PCON           DATA 0x87
0000            136   _PCONA          DATA 0xb5
0000            137   _PSW            DATA 0xd0
0000            138   _PT0AD          DATA 0xf6
0000            139   _RSTSRC         DATA 0xdf
0000            140   _RTCCON         DATA 0xd1
0000            141   _RTCH           DATA 0xd2
0000            142   _RTCL           DATA 0xd3
0000            143   _SADDR          DATA 0xa9
0000            144   _SADEN          DATA 0xb9
0000            145   _SBUF           DATA 0x99
0000            146   _SCON           DATA 0x98
0000            147   _SSTAT          DATA 0xba
0000            148   _SP             DATA 0x81
0000            149   _SPCTL          DATA 0xe2
0000            150   _SPSTAT         DATA 0xe1
0000            151   _SPDAT          DATA 0xe3
0000            152   _TAMOD          DATA 0x8f
0000            153   _TCON           DATA 0x88
0000            154   _TCR20          DATA 0xc8
0000            155   _TCR21          DATA 0xf9
0000            156   _TH0            DATA 0x8c
0000            157   _TH1            DATA 0x8d
0000            158   _TH2            DATA 0xcd
0000            159   _TICR2          DATA 0xc9
0000            160   _TIFR2          DATA 0xe9
0000            161   _TISE2          DATA 0xde
0000            162   _TL0            DATA 0x8a
0000            163   _TL1            DATA 0x8b
0000            164   _TL2            DATA 0xcc
0000            165   _TMOD           DATA 0x89
0000            166   _TOR2H          DATA 0xcf
0000            167   _TOR2L          DATA 0xce
0000            168   _TPCR2H         DATA 0xcb
0000            169   _TPCR2L         DATA 0xca
0000            170   _TRIM           DATA 0x96
0000            171   _WDCON          DATA 0xa7
0000            172   _WDL            DATA 0xc1
0000            173   _WFEED1         DATA 0xc2
0000            174   _WFEED2         DATA 0xc3
0000            175   ;--------------------------------------------------------
0000            176   ; special function bits
0000            177   ;--------------------------------------------------------
0000            178   _ACC_7          BIT 0xe7
0000            179   _ACC_6          BIT 0xe6
0000            180   _ACC_5          BIT 0xe5
0000            181   _ACC_4          BIT 0xe4
0000            182   _ACC_3          BIT 0xe3
0000            183   _ACC_2          BIT 0xe2
0000            184   _ACC_1          BIT 0xe1
0000            185   _ACC_0          BIT 0xe0
0000            186   _ADMODA_7       BIT 0xc7
0000            187   _ADMODA_6       BIT 0xc6
0000            188   _ADMODA_5       BIT 0xc5
0000            189   _ADMODA_4       BIT 0xc4
0000            190   _ADMODA_3       BIT 0xc3
0000            191   _ADMODA_2       BIT 0xc2
0000            192   _ADMODA_1       BIT 0xc1
0000            193   _ADMODA_0       BIT 0xc0
0000            194   _BNDI1          BIT 0xc7
0000            195   _BURST1         BIT 0xc6
0000            196   _SCC1           BIT 0xc5
0000            197   _SCAN1          BIT 0xc4
0000            198   _BNDI0          BIT 0xc3
0000            199   _BURST0         BIT 0xc2
0000            200   _SCC0           BIT 0xc1
0000            201   _SCAN0          BIT 0xc0
0000            202   _B_7            BIT 0xf7
0000            203   _B_6            BIT 0xf6
0000            204   _B_5            BIT 0xf5
0000            205   _B_4            BIT 0xf4
0000            206   _B_3            BIT 0xf3
0000            207   _B_2            BIT 0xf2
0000            208   _B_1            BIT 0xf1
0000            209   _B_0            BIT 0xf0
0000            210   _I2CON_7        BIT 0xdf
0000            211   _I2CON_6        BIT 0xde
0000            212   _I2CON_5        BIT 0xdd
0000            213   _I2CON_4        BIT 0xdc
0000            214   _I2CON_3        BIT 0xdb
0000            215   _I2CON_2        BIT 0xda
0000            216   _I2CON_1        BIT 0xd9
0000            217   _I2CON_0        BIT 0xd8
0000            218   _I2EN           BIT 0xde
0000            219   _STA            BIT 0xdd
0000            220   _STO            BIT 0xdc
0000            221   _SI             BIT 0xdb
0000            222   _AA             BIT 0xda
0000            223   _CRSEL          BIT 0xd8
0000            224   _IEN0_7         BIT 0xaf
0000            225   _IEN0_6         BIT 0xae
0000            226   _IEN0_5         BIT 0xad
0000            227   _IEN0_4         BIT 0xac
0000            228   _IEN0_3         BIT 0xab
0000            229   _IEN0_2         BIT 0xaa
0000            230   _IEN0_1         BIT 0xa9
0000            231   _IEN0_0         BIT 0xa8
0000            232   _EA             BIT 0xaf
0000            233   _EWDRT          BIT 0xae
0000            234   _EBO            BIT 0xad
0000            235   _ES             BIT 0xac
0000            236   _ESR            BIT 0xac
0000            237   _ET1            BIT 0xab
0000            238   _EX1            BIT 0xaa
0000            239   _ET0            BIT 0xa9
0000            240   _EX0            BIT 0xa8
0000            241   _IEN1_7         BIT 0xef
0000            242   _IEN1_6         BIT 0xee
0000            243   _IEN1_5         BIT 0xed
0000            244   _IEN1_4         BIT 0xec
0000            245   _IEN1_3         BIT 0xeb
0000            246   _IEN1_2         BIT 0xea
0000            247   _IEN1_1         BIT 0xe9
0000            248   _IEN1_0         BIT 0xe8
0000            249   _EADEE          BIT 0xef
0000            250   _EST            BIT 0xee
0000            251   _ECCU           BIT 0xec
0000            252   _ESPI           BIT 0xeb
0000            253   _EC             BIT 0xea
0000            254   _EKBI           BIT 0xe9
0000            255   _EI2C           BIT 0xe8
0000            256   _IP0_7          BIT 0xbf
0000            257   _IP0_6          BIT 0xbe
0000            258   _IP0_5          BIT 0xbd
0000            259   _IP0_4          BIT 0xbc
0000            260   _IP0_3          BIT 0xbb
0000            261   _IP0_2          BIT 0xba
0000            262   _IP0_1          BIT 0xb9
0000            263   _IP0_0          BIT 0xb8
0000            264   _PWDRT          BIT 0xbe
0000            265   _PBO            BIT 0xbd
0000            266   _PS             BIT 0xbc
0000            267   _PSR            BIT 0xbc
0000            268   _PT1            BIT 0xbb
0000            269   _PX1            BIT 0xba
0000            270   _PT0            BIT 0xb9
0000            271   _PX0            BIT 0xb8
0000            272   _IP1_7          BIT 0xff
0000            273   _IP1_6          BIT 0xfe
0000            274   _IP1_5          BIT 0xfd
0000            275   _IP1_4          BIT 0xfc
0000            276   _IP1_3          BIT 0xfb
0000            277   _IP1_2          BIT 0xfa
0000            278   _IP1_1          BIT 0xf9
0000            279   _IP1_0          BIT 0xf8
0000            280   _PADEE          BIT 0xff
0000            281   _PST            BIT 0xfe
0000            282   _PCCU           BIT 0xfc
0000            283   _PSPI           BIT 0xfb
0000            284   _PC             BIT 0xfa
0000            285   _PKBI           BIT 0xf9
0000            286   _PI2C           BIT 0xf8
0000            287   _P0_7           BIT 0x87
0000            288   _P0_6           BIT 0x86
0000            289   _P0_5           BIT 0x85
0000            290   _P0_4           BIT 0x84
0000            291   _P0_3           BIT 0x83
0000            292   _P0_2           BIT 0x82
0000            293   _P0_1           BIT 0x81
0000            294   _P0_0           BIT 0x80
0000            295   _T1             BIT 0x87
0000            296   _KB7            BIT 0x87
0000            297   _CMP_1          BIT 0x86
0000            298   _KB6            BIT 0x86
0000            299   _CMPREF         BIT 0x85
0000            300   _KB5            BIT 0x85
0000            301   _CIN1A          BIT 0x84
0000            302   _KB4            BIT 0x84
0000            303   _CIN1B          BIT 0x83
0000            304   _KB3            BIT 0x83
0000            305   _CIN2A          BIT 0x82
0000            306   _KB2            BIT 0x82
0000            307   _CIN2B          BIT 0x81
0000            308   _KB1            BIT 0x81
0000            309   _CMP_2          BIT 0x80
0000            310   _KB0            BIT 0x80
0000            311   _P1_7           BIT 0x97
0000            312   _P1_6           BIT 0x96
0000            313   _P1_5           BIT 0x95
0000            314   _P1_4           BIT 0x94
0000            315   _P1_3           BIT 0x93
0000            316   _P1_2           BIT 0x92
0000            317   _P1_1           BIT 0x91
0000            318   _P1_0           BIT 0x90
0000            319   _OCC            BIT 0x97
0000            320   _OCB            BIT 0x96
0000            321   _RST            BIT 0x95
0000            322   _INT1           BIT 0x94
0000            323   _INT0           BIT 0x93
0000            324   _SDA            BIT 0x93
0000            325   _T0             BIT 0x92
0000            326   _SCL            BIT 0x92
0000            327   _RXD            BIT 0x91
0000            328   _TXD            BIT 0x90
0000            329   _P2_7           BIT 0xa7
0000            330   _P2_6           BIT 0xa6
0000            331   _P2_5           BIT 0xa5
0000            332   _P2_4           BIT 0xa4
0000            333   _P2_3           BIT 0xa3
0000            334   _P2_2           BIT 0xa2
0000            335   _P2_1           BIT 0xa1
0000            336   _P2_0           BIT 0xa0
0000            337   _ICA            BIT 0xa7
0000            338   _OCA            BIT 0xa6
0000            339   _SPICLK         BIT 0xa5
0000            340   _SS             BIT 0xa4
0000            341   _MISO           BIT 0xa3
0000            342   _MOSI           BIT 0xa2
0000            343   _OCD            BIT 0xa1
0000            344   _ICB            BIT 0xa0
0000            345   _P3_7           BIT 0xb7
0000            346   _P3_6           BIT 0xb6
0000            347   _P3_5           BIT 0xb5
0000            348   _P3_4           BIT 0xb4
0000            349   _P3_3           BIT 0xb3
0000            350   _P3_2           BIT 0xb2
0000            351   _P3_1           BIT 0xb1
0000            352   _P3_0           BIT 0xb0
0000            353   _XTAL1          BIT 0xb1
0000            354   _XTAL2          BIT 0xb0
0000            355   _PSW_7          BIT 0xd7
0000            356   _PSW_6          BIT 0xd6
0000            357   _PSW_5          BIT 0xd5
0000            358   _PSW_4          BIT 0xd4
0000            359   _PSW_3          BIT 0xd3
0000            360   _PSW_2          BIT 0xd2
0000            361   _PSW_1          BIT 0xd1
0000            362   _PSW_0          BIT 0xd0
0000            363   _CY             BIT 0xd7
0000            364   _AC             BIT 0xd6
0000            365   _F0             BIT 0xd5
0000            366   _RS1            BIT 0xd4
0000            367   _RS0            BIT 0xd3
0000            368   _OV             BIT 0xd2
0000            369   _F1             BIT 0xd1
0000            370   _P              BIT 0xd0
0000            371   _SCON_7         BIT 0x9f
0000            372   _SCON_6         BIT 0x9e
0000            373   _SCON_5         BIT 0x9d
0000            374   _SCON_4         BIT 0x9c
0000            375   _SCON_3         BIT 0x9b
0000            376   _SCON_2         BIT 0x9a
0000            377   _SCON_1         BIT 0x99
0000            378   _SCON_0         BIT 0x98
0000            379   _SM0            BIT 0x9f
0000            380   _FE             BIT 0x9f
0000            381   _SM1            BIT 0x9e
0000            382   _SM2            BIT 0x9d
0000            383   _REN            BIT 0x9c
0000            384   _TB8            BIT 0x9b
0000            385   _RB8            BIT 0x9a
0000            386   _TI             BIT 0x99
0000            387   _RI             BIT 0x98
0000            388   _TCON_7         BIT 0x8f
0000            389   _TCON_6         BIT 0x8e
0000            390   _TCON_5         BIT 0x8d
0000            391   _TCON_4         BIT 0x8c
0000            392   _TCON_3         BIT 0x8b
0000            393   _TCON_2         BIT 0x8a
0000            394   _TCON_1         BIT 0x89
0000            395   _TCON_0         BIT 0x88
0000            396   _TF1            BIT 0x8f
0000            397   _TR1            BIT 0x8e
0000            398   _TF0            BIT 0x8d
0000            399   _TR0            BIT 0x8c
0000            400   _IE1            BIT 0x8b
0000            401   _IT1            BIT 0x8a
0000            402   _IE0            BIT 0x89
0000            403   _IT0            BIT 0x88
0000            404   _TCR20_7        BIT 0xcf
0000            405   _TCR20_6        BIT 0xce
0000            406   _TCR20_5        BIT 0xcd
0000            407   _TCR20_4        BIT 0xcc
0000            408   _TCR20_3        BIT 0xcb
0000            409   _TCR20_2        BIT 0xca
0000            410   _TCR20_1        BIT 0xc9
0000            411   _TCR20_0        BIT 0xc8
0000            412   _PLEEN          BIT 0xcf
0000            413   _HLTRN          BIT 0xce
0000            414   _HLTEN          BIT 0xcd
0000            415   _ALTCD          BIT 0xcc
0000            416   _ALTAB          BIT 0xcb
0000            417   _TDIR2          BIT 0xca
0000            418   _TMOD21         BIT 0xc9
0000            419   _TMOD20         BIT 0xc8
0000            420   ;--------------------------------------------------------
0000            421   ; overlayable register banks
0000            422   ;--------------------------------------------------------
0000            423            rbank0 segment data overlay
0000            424   ;--------------------------------------------------------
0000            425   ; internal ram data
0000            426   ;--------------------------------------------------------
0000            427            rseg R_DSEG
0000            428   _msCount:
0000            429            ds 2
0002            430   _secs:
0002            431            ds 1
0003            432   _mins:
0003            433            ds 1
0004            434   _pwmcount:
0004            435            ds 1
0005            436   _pwm_left:
0005            437            ds 1
0006            438   _pwm_right:
0006            439            ds 1
0007            440   _line_timer:
0007            441            ds 2
0009            442   _LCDprint_PARM_2:
0009            443            ds 1
000A            444   _display_LCD_buff_1_94:
000A            445            ds 17
001B            446   _main_cor_1_96:
001B            447            ds 4
001F            448   _main_cur_error_1_96:
001F            449            ds 4
0023            450   _main_pre_error_1_96:
0023            451            ds 4
0027            452   _main_new_speed_low_1_96:
0027            453            ds 4
002B            454   _main_new_speed_high_1_96:
002B            455            ds 4
002F            456   _main_exec_1_96:
002F            457            ds 2
0031            458   _main_line_sensor_2_97:
0031            459            ds 4
0035            460   _main_left_2_97:
0035            461            ds 4
0039            462   _main_right_2_97:
0039            463            ds 4
003D            464   _main_sloc0_1_0:
003D            465            ds 1
003E            466   ;--------------------------------------------------------
003E            467   ; overlayable items in internal ram 
003E            468   ;--------------------------------------------------------
0000            469            rseg R_OSEG
0000            470   ;--------------------------------------------------------
0000            471   ; indirectly addressable internal ram data
0000            472   ;--------------------------------------------------------
0000            473            rseg R_ISEG
0000            474   ;--------------------------------------------------------
0000            475   ; absolute internal ram data
0000            476   ;--------------------------------------------------------
0000            477            DSEG
0000            478   ;--------------------------------------------------------
0000            479   ; bit data
0000            480   ;--------------------------------------------------------
0000            481            rseg R_BSEG
0000            482   _time_update_flag:
0000            483            DBIT    1
0001            484   _line_counter_flag:
0001            485            DBIT    1
0002            486   _LCDprint_PARM_3:
0002            487            DBIT    1
0003            488   ;--------------------------------------------------------
0003            489   ; paged external ram data
0003            490   ;--------------------------------------------------------
0000            491            rseg R_PSEG
0000            492   ;--------------------------------------------------------
0000            493   ; external ram data
0000            494   ;--------------------------------------------------------
0000            495            rseg R_XSEG
FFC8            496            XSEG at 0xffc8
FFC8            497   _BODCFG: ds 1
FFC9            498            public _BODCFG
0000            499            rseg R_XSEG
FFDE            500            XSEG at 0xffde
FFDE            501   _CLKCON: ds 1
FFDF            502            public _CLKCON
0000            503            rseg R_XSEG
FFE1            504            XSEG at 0xffe1
FFE1            505   _PGACON1: ds 1
FFE2            506            public _PGACON1
0000            507            rseg R_XSEG
FFE4            508            XSEG at 0xffe4
FFE4            509   _PGACON1B: ds 1
FFE5            510            public _PGACON1B
0000            511            rseg R_XSEG
FFE3            512            XSEG at 0xffe3
FFE3            513   _PGA1TRIM8X16X: ds 1
FFE4            514            public _PGA1TRIM8X16X
0000            515            rseg R_XSEG
FFE2            516            XSEG at 0xffe2
FFE2            517   _PGA1TRIM2X4X: ds 1
FFE3            518            public _PGA1TRIM2X4X
0000            519            rseg R_XSEG
FFCA            520            XSEG at 0xffca
FFCA            521   _PGACON0: ds 1
FFCB            522            public _PGACON0
0000            523            rseg R_XSEG
FFCE            524            XSEG at 0xffce
FFCE            525   _PGACON0B: ds 1
FFCF            526            public _PGACON0B
0000            527            rseg R_XSEG
FFCD            528            XSEG at 0xffcd
FFCD            529   _PGA0TRIM8X16X: ds 1
FFCE            530            public _PGA0TRIM8X16X
0000            531            rseg R_XSEG
FFCC            532            XSEG at 0xffcc
FFCC            533   _PGA0TRIM2X4X: ds 1
FFCD            534            public _PGA0TRIM2X4X
0000            535            rseg R_XSEG
FFBF            536            XSEG at 0xffbf
FFBF            537   _RTCDATH: ds 1
FFC0            538            public _RTCDATH
0000            539            rseg R_XSEG
FFBE            540            XSEG at 0xffbe
FFBE            541   _RTCDATL: ds 1
FFBF            542            public _RTCDATL
0000            543            rseg R_XSEG
0000            544   ;--------------------------------------------------------
0000            545   ; absolute external ram data
0000            546   ;--------------------------------------------------------
FFBF            547            XSEG
FFBF            548   ;--------------------------------------------------------
FFBF            549   ; external initialized ram data
FFBF            550   ;--------------------------------------------------------
0000            551            rseg R_IXSEG
0000            552            rseg R_HOME
0000            553            rseg R_GSINIT
0000            554            rseg R_CSEG
0000            555   ;--------------------------------------------------------
0000            556   ; Reset entry point and interrupt vectors
0000            557   ;--------------------------------------------------------
0000            558            CSEG at 0x0000
0000 020100     559            ljmp    _crt0
000B            560            CSEG at 0x000b
000B 020100     561            ljmp    _Timer0ISR
000E            562   ;--------------------------------------------------------
000E            563   ; global & static initialisations
000E            564   ;--------------------------------------------------------
0000            565            rseg R_HOME
0000            566            rseg R_GSINIT
0000            567            rseg R_GSINIT
0000            568   ;--------------------------------------------------------
0000            569   ; data variables initialization
0000            570   ;--------------------------------------------------------
0000            571            rseg R_DINIT
0000            572   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:33: volatile int msCount=0; // Volatiles can be changed by stuff outside our program, like memory registers
0000 E4         573            clr     a
0001 F558       574            mov     _msCount,a
0003 F559       575            mov     (_msCount + 1),a
0005            576   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:34: volatile unsigned char secs=0, mins=0; // They are like global variables, kinda 
0005 751800     577            mov     _secs,#0x00
0008            578   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:34: volatile bit time_update_flag=0;
0008 75D800     579            mov     _mins,#0x00
000B            580   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:40: volatile int line_timer = 0;
000B E4         581            clr     a
000C F5D8       582            mov     _line_timer,a
000E F5D9       583            mov     (_line_timer + 1),a
0010            584   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:35: volatile bit time_update_flag=0;
0010 C248       585            clr     _time_update_flag
0012            586   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:36: volatile bit line_counter_flag=0;
0012 C2F8       587            clr     _line_counter_flag
0014            588            ; The linker places a 'ret' at the end of segment R_DINIT.
0014            589   ;--------------------------------------------------------
0014            590   ; code
0014            591   ;--------------------------------------------------------
0000            592            rseg R_CSEG
0000            593   ;------------------------------------------------------------
0000            594   ;Allocation info for local variables in function 'InitPorts'
0000            595   ;------------------------------------------------------------
0000            596   ;------------------------------------------------------------
0000            597   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:42: void InitPorts(void)
0000            598   ;        -----------------------------------------
0000            599   ;         function InitPorts
0000            600   ;        -----------------------------------------
0000            601   _InitPorts:
0000            602            using   0
0000            603   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:44: P0M1=0x1E;
0000 75841E     604            mov     _P0M1,#0x1E
0003            605   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:45: P0M2=0x00;
0003 758500     606            mov     _P0M2,#0x00
0006            607   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:46: P1M1=0;
0006 759100     608            mov     _P1M1,#0x00
0009            609   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:47: P1M2=0;
0009 759200     610            mov     _P1M2,#0x00
000C            611   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:48: P2M1=0;
000C 75A400     612            mov     _P2M1,#0x00
000F            613   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:49: P2M2=0;
000F 75A500     614            mov     _P2M2,#0x00
0012            615   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:50: P3M1=0;
0012 75B100     616            mov     _P3M1,#0x00
0015            617   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:51: P3M2=0;
0015 75B200     618            mov     _P3M2,#0x00
0018 22         619            ret
0019            620   ;------------------------------------------------------------
0019            621   ;Allocation info for local variables in function 'Wait50us'
0019            622   ;------------------------------------------------------------
0019            623   ;------------------------------------------------------------
0019            624   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:54: void Wait50us (void)
0019            625   ;        -----------------------------------------
0019            626   ;         function Wait50us
0019            627   ;        -----------------------------------------
0019            628   _Wait50us:
0019            629   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:59: _endasm;
0019            630            
0019 7852       631                mov R0, #82
001B            632            L0:
001B D848       633            djnz R0, L0 ; 2 machine cycles-> 2*0.27126us*92=50us
001D            634                
001D 22         635            ret
001E            636   ;------------------------------------------------------------
001E            637   ;Allocation info for local variables in function 'waitms'
001E            638   ;------------------------------------------------------------
001E            639   ;ms                        Allocated to registers r2 r3 
001E            640   ;j                         Allocated to registers r4 r5 
001E            641   ;k                         Allocated to registers r6 
001E            642   ;------------------------------------------------------------
001E            643   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:62: void waitms (unsigned int ms)
001E            644   ;        -----------------------------------------
001E            645   ;         function waitms
001E            646   ;        -----------------------------------------
001E            647   _waitms:
001E AA82       648            mov     r2,dpl
0020 AB83       649            mov     r3,dph
0022            650   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:68: for(j=0; j<ms; j++)
0022 7C00       651            mov     r4,#0x00
0024 7D00       652            mov     r5,#0x00
0026            653   L004004?:
0026 C3         654            clr     c
0027 EC         655            mov     a,r4
0028 9A         656            subb    a,r2
0029 ED         657            mov     a,r5
002A 9B         658            subb    a,r3
002B 5001       659            jnc     L004008?
002D            660   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:69: for (k=0; k<20; k++) Wait50us();
002D 7E14       661            mov     r6,#0x14
002F            662   L004003?:
002F C002       663            push    ar2
0031 C003       664            push    ar3
0033 C004       665            push    ar4
0035 C005       666            push    ar5
0037 C006       667            push    ar6
0039 120100     668            lcall   _Wait50us
003C D006       669            pop     ar6
003E D005       670            pop     ar5
0040 D004       671            pop     ar4
0042 D003       672            pop     ar3
0044 D002       673            pop     ar2
0046 DE88       674            djnz    r6,L004003?
0048            675   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:68: for(j=0; j<ms; j++)
0048 0C         676            inc     r4
0049 BC0008     677            cjne    r4,#0x00,L004004?
004C 0D         678            inc     r5
004D 8001       679            sjmp    L004004?
004F            680   L004008?:
004F 22         681            ret
0050            682   ;------------------------------------------------------------
0050            683   ;Allocation info for local variables in function 'LCD_pulse'
0050            684   ;------------------------------------------------------------
0050            685   ;------------------------------------------------------------
0050            686   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:72: void LCD_pulse (void)
0050            687   ;        -----------------------------------------
0050            688   ;         function LCD_pulse
0050            689   ;        -----------------------------------------
0050            690   _LCD_pulse:
0050            691   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:74: LCD_E=1;
0050 D2A5       692            setb    _P2_5
0052            693   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:75: Wait50us();
0052 120100     694            lcall   _Wait50us
0055            695   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:76: LCD_E=0;
0055 C2A5       696            clr     _P2_5
0057 22         697            ret
0058            698   ;------------------------------------------------------------
0058            699   ;Allocation info for local variables in function 'LCD_byte'
0058            700   ;------------------------------------------------------------
0058            701   ;x                         Allocated to registers 
0058            702   ;------------------------------------------------------------
0058            703   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:79: void LCD_byte (unsigned char x)
0058            704   ;        -----------------------------------------
0058            705   ;         function LCD_byte
0058            706   ;        -----------------------------------------
0058            707   _LCD_byte:
0058 8582E0     708            mov     _ACC,dpl
005B            709   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:83: LCD_D7=ACC_7;
005B A2E7       710            mov     c,_ACC_7
005D 9294       711            mov     _P1_4,c
005F            712   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:84: LCD_D6=ACC_6;
005F A2E6       713            mov     c,_ACC_6
0061 9296       714            mov     _P1_6,c
0063            715   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:85: LCD_D5=ACC_5;
0063 A2E5       716            mov     c,_ACC_5
0065 9297       717            mov     _P1_7,c
0067            718   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:86: LCD_D4=ACC_4;
0067 A2E4       719            mov     c,_ACC_4
0069 92A0       720            mov     _P2_0,c
006B            721   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:87: LCD_D3=ACC_3;
006B A2E3       722            mov     c,_ACC_3
006D 92A1       723            mov     _P2_1,c
006F            724   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:88: LCD_D2=ACC_2;
006F A2E2       725            mov     c,_ACC_2
0071 92A2       726            mov     _P2_2,c
0073            727   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:89: LCD_D1=ACC_1;
0073 A2E1       728            mov     c,_ACC_1
0075 92A3       729            mov     _P2_3,c
0077            730   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:90: LCD_D0=ACC_0;
0077 A2E0       731            mov     c,_ACC_0
0079 92A4       732            mov     _P2_4,c
007B            733   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:91: LCD_pulse();
007B 020100     734            ljmp    _LCD_pulse
007E            735   ;------------------------------------------------------------
007E            736   ;Allocation info for local variables in function 'WriteData'
007E            737   ;------------------------------------------------------------
007E            738   ;x                         Allocated to registers r2 
007E            739   ;------------------------------------------------------------
007E            740   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:94: void WriteData (unsigned char x)
007E            741   ;        -----------------------------------------
007E            742   ;         function WriteData
007E            743   ;        -----------------------------------------
007E            744   _WriteData:
007E AA82       745            mov     r2,dpl
0080            746   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:96: LCD_RS=1;
0080 D2A7       747            setb    _P2_7
0082            748   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:97: LCD_byte(x);
0082 8A82       749            mov     dpl,r2
0084 120100     750            lcall   _LCD_byte
0087            751   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:98: waitms(2);
0087 900002     752            mov     dptr,#0x0002
008A 020100     753            ljmp    _waitms
008D            754   ;------------------------------------------------------------
008D            755   ;Allocation info for local variables in function 'WriteCommand'
008D            756   ;------------------------------------------------------------
008D            757   ;x                         Allocated to registers r2 
008D            758   ;------------------------------------------------------------
008D            759   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:101: void WriteCommand (unsigned char x)
008D            760   ;        -----------------------------------------
008D            761   ;         function WriteCommand
008D            762   ;        -----------------------------------------
008D            763   _WriteCommand:
008D AA82       764            mov     r2,dpl
008F            765   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:103: LCD_RS=0;
008F C2A7       766            clr     _P2_7
0091            767   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:104: LCD_byte(x);
0091 8A82       768            mov     dpl,r2
0093 120100     769            lcall   _LCD_byte
0096            770   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:105: waitms(5);
0096 900005     771            mov     dptr,#0x0005
0099 020100     772            ljmp    _waitms
009C            773   ;------------------------------------------------------------
009C            774   ;Allocation info for local variables in function 'LCD_8BIT'
009C            775   ;------------------------------------------------------------
009C            776   ;------------------------------------------------------------
009C            777   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:108: void LCD_8BIT (void)
009C            778   ;        -----------------------------------------
009C            779   ;         function LCD_8BIT
009C            780   ;        -----------------------------------------
009C            781   _LCD_8BIT:
009C            782   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:110: LCD_E=0;  // Resting state of LCD's enable is zero
009C C2A5       783            clr     _P2_5
009E            784   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:111: LCD_RW=0; // We are only writing to the LCD in this program
009E C2A6       785            clr     _P2_6
00A0            786   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:112: waitms(20);
00A0 900014     787            mov     dptr,#0x0014
00A3 120100     788            lcall   _waitms
00A6            789   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:114: WriteCommand(0x33);
00A6 758233     790            mov     dpl,#0x33
00A9 120100     791            lcall   _WriteCommand
00AC            792   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:115: WriteCommand(0x33);
00AC 758233     793            mov     dpl,#0x33
00AF 120100     794            lcall   _WriteCommand
00B2            795   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:116: WriteCommand(0x33); // Stay in 8-bit mode
00B2 758233     796            mov     dpl,#0x33
00B5 120100     797            lcall   _WriteCommand
00B8            798   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:119: WriteCommand(0x38);
00B8 758238     799            mov     dpl,#0x38
00BB 120100     800            lcall   _WriteCommand
00BE            801   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:120: WriteCommand(0x0c);
00BE 75820C     802            mov     dpl,#0x0C
00C1 120100     803            lcall   _WriteCommand
00C4            804   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:121: WriteCommand(0x01); // Clear screen command (takes some time)
00C4 758201     805            mov     dpl,#0x01
00C7 120100     806            lcall   _WriteCommand
00CA            807   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:122: waitms(20); // Wait for clear screen command to finsih.
00CA 900014     808            mov     dptr,#0x0014
00CD 020100     809            ljmp    _waitms
00D0            810   ;------------------------------------------------------------
00D0            811   ;Allocation info for local variables in function 'LCDprint'
00D0            812   ;------------------------------------------------------------
00D0            813   ;line                      Allocated with name '_LCDprint_PARM_2'
00D0            814   ;string                    Allocated to registers r2 r3 r4 
00D0            815   ;j                         Allocated to registers r5 
00D0            816   ;------------------------------------------------------------
00D0            817   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:125: void LCDprint(char * string, unsigned char line, bit clear)
00D0            818   ;        -----------------------------------------
00D0            819   ;         function LCDprint
00D0            820   ;        -----------------------------------------
00D0            821   _LCDprint:
00D0 AA82       822            mov     r2,dpl
00D2 AB83       823            mov     r3,dph
00D4 ACF0       824            mov     r4,b
00D6            825   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:129: WriteCommand(line==2?0xc0:0x80);
00D6 7402       826            mov     a,#0x02
00D8 B59808     827            cjne    a,_LCDprint_PARM_2,L010013?
00DB 7DC0       828            mov     r5,#0xC0
00DD 8001       829            sjmp    L010014?
00DF            830   L010013?:
00DF 7D80       831            mov     r5,#0x80
00E1            832   L010014?:
00E1 8D82       833            mov     dpl,r5
00E3 C002       834            push    ar2
00E5 C003       835            push    ar3
00E7 C004       836            push    ar4
00E9 120100     837            lcall   _WriteCommand
00EC            838   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:130: waitms(5);
00EC 900005     839            mov     dptr,#0x0005
00EF 120100     840            lcall   _waitms
00F2 D004       841            pop     ar4
00F4 D003       842            pop     ar3
00F6 D002       843            pop     ar2
00F8            844   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:131: for(j=0; string[j]!=0; j++)      WriteData(string[j]);// Write the message
00F8 7D00       845            mov     r5,#0x00
00FA            846   L010003?:
00FA ED         847            mov     a,r5
00FB 2A         848            add     a,r2
00FC FE         849            mov     r6,a
00FD E4         850            clr     a
00FE 3B         851            addc    a,r3
00FF FF         852            mov     r7,a
0100 8C00       853            mov     ar0,r4
0102 8E82       854            mov     dpl,r6
0104 8F83       855            mov     dph,r7
0106 88F0       856            mov     b,r0
0108 120100     857            lcall   __gptrget
010B FE         858            mov     r6,a
010C 6001       859            jz      L010006?
010E 8E82       860            mov     dpl,r6
0110 C002       861            push    ar2
0112 C003       862            push    ar3
0114 C004       863            push    ar4
0116 C005       864            push    ar5
0118 120100     865            lcall   _WriteData
011B D005       866            pop     ar5
011D D004       867            pop     ar4
011F D003       868            pop     ar3
0121 D002       869            pop     ar2
0123 0D         870            inc     r5
0124 8001       871            sjmp    L010003?
0126            872   L010006?:
0126            873   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:132: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0126 30A848     874            jnb     _LCDprint_PARM_3,L010011?
0129 8D02       875            mov     ar2,r5
012B            876   L010007?:
012B BA10C8     877            cjne    r2,#0x10,L010026?
012E            878   L010026?:
012E 5001       879            jnc     L010011?
0130 758220     880            mov     dpl,#0x20
0133 C002       881            push    ar2
0135 120100     882            lcall   _WriteData
0138 D002       883            pop     ar2
013A 0A         884            inc     r2
013B 8001       885            sjmp    L010007?
013D            886   L010011?:
013D 22         887            ret
013E            888   ;------------------------------------------------------------
013E            889   ;Allocation info for local variables in function 'Wait1S'
013E            890   ;------------------------------------------------------------
013E            891   ;------------------------------------------------------------
013E            892   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:135: void Wait1S (void)
013E            893   ;        -----------------------------------------
013E            894   ;         function Wait1S
013E            895   ;        -----------------------------------------
013E            896   _Wait1S:
013E            897   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:144: _endasm;
013E            898            
013E 7A28       899             mov R2, #40
0140            900            L3:
0140 79FA       901            mov R1, #250
0142            902            L2:
0142 78B8       903            mov R0, #184
0144            904            L1:
0144 D888       905            djnz R0, L1 ; 2 machine cycles-> 2*0.27126us*184=100us
0146 D948       906                djnz R1, L2 ; 100us*250=0.025s
0148 DA08       907                djnz R2, L3 ; 0.025s*40=1s
014A            908                
014A 22         909            ret
014B            910   ;------------------------------------------------------------
014B            911   ;Allocation info for local variables in function 'InitSerialPort'
014B            912   ;------------------------------------------------------------
014B            913   ;------------------------------------------------------------
014B            914   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:147: void InitSerialPort(void)
014B            915   ;        -----------------------------------------
014B            916   ;         function InitSerialPort
014B            917   ;        -----------------------------------------
014B            918   _InitSerialPort:
014B            919   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:149: BRGCON=0x00; //Make sure the baud rate generator is off
014B 75BD00     920            mov     _BRGCON,#0x00
014E            921   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:150: BRGR1=((XTAL/BAUD)-16)/0x100;
014E 75BF00     922            mov     _BRGR1,#0x00
0151            923   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:151: BRGR0=((XTAL/BAUD)-16)%0x100;
0151 75BE30     924            mov     _BRGR0,#0x30
0154            925   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:152: BRGCON=0x03; //Turn-on the baud rate generator
0154 75BD03     926            mov     _BRGCON,#0x03
0157            927   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:153: SCON=0x52; //Serial port in mode 1, ren, txrdy, rxempty
0157 759852     928            mov     _SCON,#0x52
015A            929   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:154: P1M1=0x00; //Enable pins RxD and Txd
015A 759100     930            mov     _P1M1,#0x00
015D            931   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:155: P1M2=0x00; //Enable pins RxD and Txd
015D 759200     932            mov     _P1M2,#0x00
0160 22         933            ret
0161            934   ;------------------------------------------------------------
0161            935   ;Allocation info for local variables in function 'InitADC'
0161            936   ;------------------------------------------------------------
0161            937   ;------------------------------------------------------------
0161            938   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:158: void InitADC(void)
0161            939   ;        -----------------------------------------
0161            940   ;         function InitADC
0161            941   ;        -----------------------------------------
0161            942   _InitADC:
0161            943   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:162: P0M1 |= (P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0161 43841E     944            orl     _P0M1,#0x1E
0164            945   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:163: P0M2 &= ~(P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0164 5385E1     946            anl     _P0M2,#0xE1
0167            947   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:166: BURST1=1; //Autoscan continuous conversion mode
0167 D2C6       948            setb    _BURST1
0169            949   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:167: ADMODB = CLK0; //ADC1 clock is 7.3728MHz/2
0169 75A120     950            mov     _ADMODB,#0x20
016C            951   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:168: ADINS  = (ADI13|ADI12|ADI11|ADI10); // Select the four channels for conversion
016C 75A3F0     952            mov     _ADINS,#0xF0
016F            953   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:169: ADCON1 = (ENADC1|ADCS10); //Enable the converter and start immediately
016F 759705     954            mov     _ADCON1,#0x05
0172            955   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:170: while((ADCI1&ADCON1)==0); //Wait for first conversion to complete
0172            956   L013001?:
0172 E597       957            mov     a,_ADCON1
0174 30E3C8     958            jnb     acc.3,L013001?
0177 22         959            ret
0178            960   ;------------------------------------------------------------
0178            961   ;Allocation info for local variables in function 'InitTimer0'
0178            962   ;------------------------------------------------------------
0178            963   ;------------------------------------------------------------
0178            964   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:173: void InitTimer0 (void)
0178            965   ;        -----------------------------------------
0178            966   ;         function InitTimer0
0178            967   ;        -----------------------------------------
0178            968   _InitTimer0:
0178            969   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:177: TR0=0; // Stop timer 0
0178 C28C       970            clr     _TR0
017A            971   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:178: TMOD=(TMOD&0xf0)|0x01; // 16-bit timer
017A 74F0       972            mov     a,#0xF0
017C 5589       973            anl     a,_TMOD
017E 4401       974            orl     a,#0x01
0180 F589       975            mov     _TMOD,a
0182            976   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:179: TH0=TIMER0_RELOAD_VALUE/0x100; // I think the RHS is 0001 0000 0000, are we dividing?
0182 758CFE     977            mov     _TH0,#0xFE
0185            978   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:180: TL0=TIMER0_RELOAD_VALUE%0x100; // % means modulo, apparently? ...are we modulo-ing?
0185 758A90     979            mov     _TL0,#0x90
0188            980   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:181: TR0=1; // Start timer 0 (bit 4 in TCON)
0188 D28C       981            setb    _TR0
018A            982   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:182: ET0=1; // Enable timer 0 interrupt - the interrupt controller IEN0 is bit-adressable, so we change only the bit we need
018A D2A9       983            setb    _ET0
018C            984   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:183: EA=1;  // Enable global interrupts
018C D2AF       985            setb    _EA
018E 22         986            ret
018F            987   ;------------------------------------------------------------
018F            988   ;Allocation info for local variables in function 'Timer0ISR'
018F            989   ;------------------------------------------------------------
018F            990   ;------------------------------------------------------------
018F            991   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:187: void Timer0ISR (void) interrupt 1{
018F            992   ;        -----------------------------------------
018F            993   ;         function Timer0ISR
018F            994   ;        -----------------------------------------
018F            995   _Timer0ISR:
018F C0E0       996            push    acc
0191 C0D0       997            push    psw
0193 75D000     998            mov     psw,#0x00
0196            999   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:189: TR0=0; // Stop timer 0
0196 C28C      1000            clr     _TR0
0198           1001   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:190: TH0=TIMER0_RELOAD_VALUE/0x100;
0198 758CFE    1002            mov     _TH0,#0xFE
019B           1003   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:191: TL0=TIMER0_RELOAD_VALUE%0x100;
019B 758A90    1004            mov     _TL0,#0x90
019E           1005   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:192: TR0=1; // Start timer 0
019E D28C      1006            setb    _TR0
01A0           1007   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:194: if(++pwmcount>99) pwmcount=0;
01A0 0598      1008            inc     _pwmcount
01A2 E598      1009            mov     a,_pwmcount
01A4 249C      1010            add     a,#0xff - 0x63
01A6 5001      1011            jnc     L015002?
01A8 759800    1012            mov     _pwmcount,#0x00
01AB           1013   L015002?:
01AB           1014   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:195: P0_5=(pwm_left>pwmcount)?1:0;
01AB C3        1015            clr     c
01AC E598      1016            mov     a,_pwmcount
01AE 9558      1017            subb    a,_pwm_left
01B0 9285      1018            mov     _P0_5,c
01B2           1019   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:196: P0_6=(pwm_right>pwmcount)?1:0;
01B2 C3        1020            clr     c
01B3 E598      1021            mov     a,_pwmcount
01B5 9518      1022            subb    a,_pwm_right
01B7 9286      1023            mov     _P0_6,c
01B9           1024   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:198: msCount++;
01B9 7401      1025            mov     a,#0x01
01BB 2558      1026            add     a,_msCount
01BD F558      1027            mov     _msCount,a
01BF E4        1028            clr     a
01C0 3559      1029            addc    a,(_msCount + 1)
01C2 F559      1030            mov     (_msCount + 1),a
01C4           1031   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:199: if(msCount==10000)
01C4 7410      1032            mov     a,#0x10
01C6 B558C8    1033            cjne    a,_msCount,L015008?
01C9 7427      1034            mov     a,#0x27
01CB B559C8    1035            cjne    a,(_msCount + 1),L015008?
01CE           1036   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:201: time_update_flag=1;
01CE D248      1037            setb    _time_update_flag
01D0           1038   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:202: msCount=0;
01D0 E4        1039            clr     a
01D1 F558      1040            mov     _msCount,a
01D3 F559      1041            mov     (_msCount + 1),a
01D5           1042   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:203: secs++;
01D5 0518      1043            inc     _secs
01D7           1044   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:204: if(secs==60)
01D7 743C      1045            mov     a,#0x3C
01D9 B518C8    1046            cjne    a,_secs,L015008?
01DC           1047   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:206: secs=0;
01DC 751800    1048            mov     _secs,#0x00
01DF           1049   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:207: mins++;
01DF 05D8      1050            inc     _mins
01E1           1051   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:208: if(mins==60)
01E1 743C      1052            mov     a,#0x3C
01E3 B5D8C8    1053            cjne    a,_mins,L015008?
01E6           1054   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:210: mins=0;
01E6 75D800    1055            mov     _mins,#0x00
01E9           1056   L015008?:
01E9           1057   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:215: if(line_counter_flag==1){
01E9 30F808    1058            jnb     _line_counter_flag,L015011?
01EC           1059   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:216: line_timer++;
01EC 7401      1060            mov     a,#0x01
01EE 25D8      1061            add     a,_line_timer
01F0 F5D8      1062            mov     _line_timer,a
01F2 E4        1063            clr     a
01F3 35D9      1064            addc    a,(_line_timer + 1)
01F5 F5D9      1065            mov     (_line_timer + 1),a
01F7           1066   L015011?:
01F7 D0D0      1067            pop     psw
01F9 D0E0      1068            pop     acc
01FB 32        1069            reti
01FC           1070   ;        eliminated unneeded push/pop dpl
01FC           1071   ;        eliminated unneeded push/pop dph
01FC           1072   ;        eliminated unneeded push/pop b
01FC           1073   ;------------------------------------------------------------
01FC           1074   ;Allocation info for local variables in function 'display_LCD'
01FC           1075   ;------------------------------------------------------------
01FC           1076   ;buff                      Allocated with name '_display_LCD_buff_1_94'
01FC           1077   ;------------------------------------------------------------
01FC           1078   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:220: void display_LCD(void){
01FC           1079   ;        -----------------------------------------
01FC           1080   ;         function display_LCD
01FC           1081   ;        -----------------------------------------
01FC           1082   _display_LCD:
01FC           1083   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:229: time_update_flag=0;
01FC C248      1084            clr     _time_update_flag
01FE           1085   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:230: sprintf(buff, "V=%5.2f", (AD1DAT0/255.0)*3.3); // Display the voltage at pin P0.1
01FE 85D582    1086            mov     dpl,_AD1DAT0
0201 120100    1087            lcall   ___uchar2fs
0204 AA82      1088            mov     r2,dpl
0206 AB83      1089            mov     r3,dph
0208 ACF0      1090            mov     r4,b
020A FD        1091            mov     r5,a
020B E4        1092            clr     a
020C C0E0      1093            push    acc
020E C0E0      1094            push    acc
0210 747F      1095            mov     a,#0x7F
0212 C0E0      1096            push    acc
0214 7443      1097            mov     a,#0x43
0216 C0E0      1098            push    acc
0218 8A82      1099            mov     dpl,r2
021A 8B83      1100            mov     dph,r3
021C 8CF0      1101            mov     b,r4
021E ED        1102            mov     a,r5
021F 120100    1103            lcall   ___fsdiv
0222 AA82      1104            mov     r2,dpl
0224 AB83      1105            mov     r3,dph
0226 ACF0      1106            mov     r4,b
0228 FD        1107            mov     r5,a
0229 E581      1108            mov     a,sp
022B 24FC      1109            add     a,#0xfc
022D F581      1110            mov     sp,a
022F C002      1111            push    ar2
0231 C003      1112            push    ar3
0233 C004      1113            push    ar4
0235 C005      1114            push    ar5
0237 903333    1115            mov     dptr,#0x3333
023A 75F053    1116            mov     b,#0x53
023D 7440      1117            mov     a,#0x40
023F 120100    1118            lcall   ___fsmul
0242 AA82      1119            mov     r2,dpl
0244 AB83      1120            mov     r3,dph
0246 ACF0      1121            mov     r4,b
0248 FD        1122            mov     r5,a
0249 E581      1123            mov     a,sp
024B 24FC      1124            add     a,#0xfc
024D F581      1125            mov     sp,a
024F C002      1126            push    ar2
0251 C003      1127            push    ar3
0253 C004      1128            push    ar4
0255 C005      1129            push    ar5
0257 7448      1130            mov     a,#__str_0
0259 C0E0      1131            push    acc
025B 74AC      1132            mov     a,#(__str_0 >> 8)
025D C0E0      1133            push    acc
025F 7480      1134            mov     a,#0x80
0261 C0E0      1135            push    acc
0263 74E8      1136            mov     a,#_display_LCD_buff_1_94
0265 C0E0      1137            push    acc
0267 749E      1138            mov     a,#(_display_LCD_buff_1_94 >> 8)
0269 C0E0      1139            push    acc
026B 7440      1140            mov     a,#0x40
026D C0E0      1141            push    acc
026F 120100    1142            lcall   _sprintf
0272 E581      1143            mov     a,sp
0274 24F6      1144            add     a,#0xf6
0276 F581      1145            mov     sp,a
0278           1146   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:231: LCDprint(buff, 1, 1);
0278 759801    1147            mov     _LCDprint_PARM_2,#0x01
027B D2A8      1148            setb    _LCDprint_PARM_3
027D 909EE8    1149            mov     dptr,#_display_LCD_buff_1_94
0280 75F040    1150            mov     b,#0x40
0283 120100    1151            lcall   _LCDprint
0286           1152   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:232: sprintf(buff, "%02d:%02d", mins, secs); // Display the clock
0286 AA18      1153            mov     r2,_secs
0288 7B00      1154            mov     r3,#0x00
028A ACD8      1155            mov     r4,_mins
028C 7D00      1156            mov     r5,#0x00
028E C002      1157            push    ar2
0290 C003      1158            push    ar3
0292 C004      1159            push    ar4
0294 C005      1160            push    ar5
0296 74C8      1161            mov     a,#__str_1
0298 C0E0      1162            push    acc
029A 74AC      1163            mov     a,#(__str_1 >> 8)
029C C0E0      1164            push    acc
029E 7480      1165            mov     a,#0x80
02A0 C0E0      1166            push    acc
02A2 74E8      1167            mov     a,#_display_LCD_buff_1_94
02A4 C0E0      1168            push    acc
02A6 749E      1169            mov     a,#(_display_LCD_buff_1_94 >> 8)
02A8 C0E0      1170            push    acc
02AA 7440      1171            mov     a,#0x40
02AC C0E0      1172            push    acc
02AE 120100    1173            lcall   _sprintf
02B1 E581      1174            mov     a,sp
02B3 24F6      1175            add     a,#0xf6
02B5 F581      1176            mov     sp,a
02B7           1177   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:233: LCDprint(buff, 2, 1);
02B7 759802    1178            mov     _LCDprint_PARM_2,#0x02
02BA D2A8      1179            setb    _LCDprint_PARM_3
02BC 909EE8    1180            mov     dptr,#_display_LCD_buff_1_94
02BF 75F040    1181            mov     b,#0x40
02C2 020100    1182            ljmp    _LCDprint
02C5           1183   ;------------------------------------------------------------
02C5           1184   ;Allocation info for local variables in function 'main'
02C5           1185   ;------------------------------------------------------------
02C5           1186   ;k_p                       Allocated to registers 
02C5           1187   ;k_d                       Allocated to registers 
02C5           1188   ;cor                       Allocated with name '_main_cor_1_96'
02C5           1189   ;cur_error                 Allocated with name '_main_cur_error_1_96'
02C5           1190   ;pre_error                 Allocated with name '_main_pre_error_1_96'
02C5           1191   ;new_speed_low             Allocated with name '_main_new_speed_low_1_96'
02C5           1192   ;new_speed_high            Allocated with name '_main_new_speed_high_1_96'
02C5           1193   ;counter                   Allocated to registers 
02C5           1194   ;thresh                    Allocated to registers 
02C5           1195   ;line_counter              Allocated to registers r6 r7 
02C5           1196   ;exec                      Allocated with name '_main_exec_1_96'
02C5           1197   ;line_sensor               Allocated with name '_main_line_sensor_2_97'
02C5           1198   ;left                      Allocated with name '_main_left_2_97'
02C5           1199   ;right                     Allocated with name '_main_right_2_97'
02C5           1200   ;sloc0                     Allocated with name '_main_sloc0_1_0'
02C5           1201   ;------------------------------------------------------------
02C5           1202   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:236: void main (void)
02C5           1203   ;        -----------------------------------------
02C5           1204   ;         function main
02C5           1205   ;        -----------------------------------------
02C5           1206   _main:
02C5           1207   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:245: double cur_error =0;
02C5 757800    1208            mov     _main_cur_error_1_96,#0x00
02C8           1209   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:251: int line_counter = 0;
02C8           1210   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:252: int exec = 0;
02C8 E4        1211            clr     a
02C9 F579      1212            mov     (_main_cur_error_1_96 + 1),a
02CB F57A      1213            mov     (_main_cur_error_1_96 + 2),a
02CD F57B      1214            mov     (_main_cur_error_1_96 + 3),a
02CF FE        1215            mov     r6,a
02D0 FF        1216            mov     r7,a
02D1 F5A8      1217            mov     _main_exec_1_96,a
02D3 F5A9      1218            mov     (_main_exec_1_96 + 1),a
02D5           1219   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:255: InitPorts();
02D5 C006      1220            push    ar6
02D7 C007      1221            push    ar7
02D9 120100    1222            lcall   _InitPorts
02DC           1223   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:256: LCD_8BIT();
02DC 120100    1224            lcall   _LCD_8BIT
02DF           1225   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:257: InitSerialPort();
02DF 120100    1226            lcall   _InitSerialPort
02E2           1227   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:258: InitADC();
02E2 120100    1228            lcall   _InitADC
02E5           1229   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:259: InitTimer0();
02E5 120100    1230            lcall   _InitTimer0
02E8 D007      1231            pop     ar7
02EA D006      1232            pop     ar6
02EC           1233   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:261: pre_error = 0;
02EC 75C800    1234            mov     _main_pre_error_1_96,#0x00
02EF 75C900    1235            mov     (_main_pre_error_1_96 + 1),#0x00
02F2 75CA00    1236            mov     (_main_pre_error_1_96 + 2),#0x00
02F5 75CB00    1237            mov     (_main_pre_error_1_96 + 3),#0x00
02F8           1238   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:262: while(1)
02F8 7C00      1239            mov     r4,#0x00
02FA 7D00      1240            mov     r5,#0x00
02FC           1241   L017050?:
02FC           1242   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:265: double line_sensor = (AD1DAT3/255.0)*3.3;
02FC 85F582    1243            mov     dpl,_AD1DAT3
02FF C004      1244            push    ar4
0301 C005      1245            push    ar5
0303 C006      1246            push    ar6
0305 C007      1247            push    ar7
0307 120100    1248            lcall   ___uchar2fs
030A AA82      1249            mov     r2,dpl
030C AB83      1250            mov     r3,dph
030E A8F0      1251            mov     r0,b
0310 F9        1252            mov     r1,a
0311 E4        1253            clr     a
0312 C0E0      1254            push    acc
0314 C0E0      1255            push    acc
0316 747F      1256            mov     a,#0x7F
0318 C0E0      1257            push    acc
031A 7443      1258            mov     a,#0x43
031C C0E0      1259            push    acc
031E 8A82      1260            mov     dpl,r2
0320 8B83      1261            mov     dph,r3
0322 88F0      1262            mov     b,r0
0324 E9        1263            mov     a,r1
0325 120100    1264            lcall   ___fsdiv
0328 AA82      1265            mov     r2,dpl
032A AB83      1266            mov     r3,dph
032C A8F0      1267            mov     r0,b
032E F9        1268            mov     r1,a
032F E581      1269            mov     a,sp
0331 24FC      1270            add     a,#0xfc
0333 F581      1271            mov     sp,a
0335 C002      1272            push    ar2
0337 C003      1273            push    ar3
0339 C000      1274            push    ar0
033B C001      1275            push    ar1
033D 903333    1276            mov     dptr,#0x3333
0340 75F053    1277            mov     b,#0x53
0343 7440      1278            mov     a,#0x40
0345 120100    1279            lcall   ___fsmul
0348 8582F8    1280            mov     _main_line_sensor_2_97,dpl
034B 8583F9    1281            mov     (_main_line_sensor_2_97 + 1),dph
034E 85F0FA    1282            mov     (_main_line_sensor_2_97 + 2),b
0351 F5FB      1283            mov     (_main_line_sensor_2_97 + 3),a
0353 E581      1284            mov     a,sp
0355 24FC      1285            add     a,#0xfc
0357 F581      1286            mov     sp,a
0359           1287   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:266: double left = (AD1DAT1/255.0)*3.3;
0359 85D682    1288            mov     dpl,_AD1DAT1
035C 120100    1289            lcall   ___uchar2fs
035F AA82      1290            mov     r2,dpl
0361 AB83      1291            mov     r3,dph
0363 A8F0      1292            mov     r0,b
0365 F9        1293            mov     r1,a
0366 E4        1294            clr     a
0367 C0E0      1295            push    acc
0369 C0E0      1296            push    acc
036B 747F      1297            mov     a,#0x7F
036D C0E0      1298            push    acc
036F 7443      1299            mov     a,#0x43
0371 C0E0      1300            push    acc
0373 8A82      1301            mov     dpl,r2
0375 8B83      1302            mov     dph,r3
0377 88F0      1303            mov     b,r0
0379 E9        1304            mov     a,r1
037A 120100    1305            lcall   ___fsdiv
037D AA82      1306            mov     r2,dpl
037F AB83      1307            mov     r3,dph
0381 A8F0      1308            mov     r0,b
0383 F9        1309            mov     r1,a
0384 E581      1310            mov     a,sp
0386 24FC      1311            add     a,#0xfc
0388 F581      1312            mov     sp,a
038A C002      1313            push    ar2
038C C003      1314            push    ar3
038E C000      1315            push    ar0
0390 C001      1316            push    ar1
0392 903333    1317            mov     dptr,#0x3333
0395 75F053    1318            mov     b,#0x53
0398 7440      1319            mov     a,#0x40
039A 120100    1320            lcall   ___fsmul
039D 858238    1321            mov     _main_left_2_97,dpl
03A0 858339    1322            mov     (_main_left_2_97 + 1),dph
03A3 85F03A    1323            mov     (_main_left_2_97 + 2),b
03A6 F53B      1324            mov     (_main_left_2_97 + 3),a
03A8 E581      1325            mov     a,sp
03AA 24FC      1326            add     a,#0xfc
03AC F581      1327            mov     sp,a
03AE           1328   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:267: double right = (AD1DAT2/255.0)*3.3;
03AE 85D782    1329            mov     dpl,_AD1DAT2
03B1 120100    1330            lcall   ___uchar2fs
03B4 AA82      1331            mov     r2,dpl
03B6 AB83      1332            mov     r3,dph
03B8 A8F0      1333            mov     r0,b
03BA F9        1334            mov     r1,a
03BB E4        1335            clr     a
03BC C0E0      1336            push    acc
03BE C0E0      1337            push    acc
03C0 747F      1338            mov     a,#0x7F
03C2 C0E0      1339            push    acc
03C4 7443      1340            mov     a,#0x43
03C6 C0E0      1341            push    acc
03C8 8A82      1342            mov     dpl,r2
03CA 8B83      1343            mov     dph,r3
03CC 88F0      1344            mov     b,r0
03CE E9        1345            mov     a,r1
03CF 120100    1346            lcall   ___fsdiv
03D2 AA82      1347            mov     r2,dpl
03D4 AB83      1348            mov     r3,dph
03D6 A8F0      1349            mov     r0,b
03D8 F9        1350            mov     r1,a
03D9 E581      1351            mov     a,sp
03DB 24FC      1352            add     a,#0xfc
03DD F581      1353            mov     sp,a
03DF C002      1354            push    ar2
03E1 C003      1355            push    ar3
03E3 C000      1356            push    ar0
03E5 C001      1357            push    ar1
03E7 903333    1358            mov     dptr,#0x3333
03EA 75F053    1359            mov     b,#0x53
03ED 7440      1360            mov     a,#0x40
03EF 120100    1361            lcall   ___fsmul
03F2 858288    1362            mov     _main_right_2_97,dpl
03F5 858389    1363            mov     (_main_right_2_97 + 1),dph
03F8 85F08A    1364            mov     (_main_right_2_97 + 2),b
03FB F58B      1365            mov     (_main_right_2_97 + 3),a
03FD E581      1366            mov     a,sp
03FF 24FC      1367            add     a,#0xfc
0401 F581      1368            mov     sp,a
0403 D007      1369            pop     ar7
0405 D006      1370            pop     ar6
0407 D005      1371            pop     ar5
0409 D004      1372            pop     ar4
040B           1373   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:272: if(time_update_flag==1) // If the clock has been updated, refresh the display
040B 304848    1374            jnb     _time_update_flag,L017002?
040E           1375   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:279: display_LCD();
040E C004      1376            push    ar4
0410 C005      1377            push    ar5
0412 C006      1378            push    ar6
0414 C007      1379            push    ar7
0416 120100    1380            lcall   _display_LCD
0419 D007      1381            pop     ar7
041B D006      1382            pop     ar6
041D D005      1383            pop     ar5
041F D004      1384            pop     ar4
0421           1385   L017002?:
0421           1386   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:283: if((left<thresh)&&(right<thresh))cur_error = 0;
0421 C004      1387            push    ar4
0423 C005      1388            push    ar5
0425 C006      1389            push    ar6
0427 C007      1390            push    ar7
0429 E4        1391            clr     a
042A C0E0      1392            push    acc
042C C0E0      1393            push    acc
042E C0E0      1394            push    acc
0430 C0E0      1395            push    acc
0432 853882    1396            mov     dpl,_main_left_2_97
0435 853983    1397            mov     dph,(_main_left_2_97 + 1)
0438 853AF0    1398            mov     b,(_main_left_2_97 + 2)
043B E53B      1399            mov     a,(_main_left_2_97 + 3)
043D 120100    1400            lcall   ___fslt
0440 8582C8    1401            mov     _main_sloc0_1_0,dpl
0443 E581      1402            mov     a,sp
0445 24FC      1403            add     a,#0xfc
0447 F581      1404            mov     sp,a
0449 D007      1405            pop     ar7
044B D006      1406            pop     ar6
044D D005      1407            pop     ar5
044F D004      1408            pop     ar4
0451 E5C8      1409            mov     a,_main_sloc0_1_0
0453 6001      1410            jz      L017004?
0455 C004      1411            push    ar4
0457 C005      1412            push    ar5
0459 C006      1413            push    ar6
045B C007      1414            push    ar7
045D E4        1415            clr     a
045E C0E0      1416            push    acc
0460 C0E0      1417            push    acc
0462 C0E0      1418            push    acc
0464 C0E0      1419            push    acc
0466 858882    1420            mov     dpl,_main_right_2_97
0469 858983    1421            mov     dph,(_main_right_2_97 + 1)
046C 858AF0    1422            mov     b,(_main_right_2_97 + 2)
046F E58B      1423            mov     a,(_main_right_2_97 + 3)
0471 120100    1424            lcall   ___fslt
0474 AA82      1425            mov     r2,dpl
0476 E581      1426            mov     a,sp
0478 24FC      1427            add     a,#0xfc
047A F581      1428            mov     sp,a
047C D007      1429            pop     ar7
047E D006      1430            pop     ar6
0480 D005      1431            pop     ar5
0482 D004      1432            pop     ar4
0484 EA        1433            mov     a,r2
0485 6001      1434            jz      L017004?
0487 757800    1435            mov     _main_cur_error_1_96,#0x00
048A 757900    1436            mov     (_main_cur_error_1_96 + 1),#0x00
048D 757A00    1437            mov     (_main_cur_error_1_96 + 2),#0x00
0490 757B00    1438            mov     (_main_cur_error_1_96 + 3),#0x00
0493           1439   L017004?:
0493           1440   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:284: if((left<thresh)&&(right>thresh))cur_error = -1;
0493 E5C8      1441            mov     a,_main_sloc0_1_0
0495 6001      1442            jz      L017007?
0497 C004      1443            push    ar4
0499 C005      1444            push    ar5
049B C006      1445            push    ar6
049D C007      1446            push    ar7
049F E4        1447            clr     a
04A0 C0E0      1448            push    acc
04A2 C0E0      1449            push    acc
04A4 C0E0      1450            push    acc
04A6 C0E0      1451            push    acc
04A8 858882    1452            mov     dpl,_main_right_2_97
04AB 858983    1453            mov     dph,(_main_right_2_97 + 1)
04AE 858AF0    1454            mov     b,(_main_right_2_97 + 2)
04B1 E58B      1455            mov     a,(_main_right_2_97 + 3)
04B3 120100    1456            lcall   ___fsgt
04B6 AA82      1457            mov     r2,dpl
04B8 E581      1458            mov     a,sp
04BA 24FC      1459            add     a,#0xfc
04BC F581      1460            mov     sp,a
04BE D007      1461            pop     ar7
04C0 D006      1462            pop     ar6
04C2 D005      1463            pop     ar5
04C4 D004      1464            pop     ar4
04C6 EA        1465            mov     a,r2
04C7 6001      1466            jz      L017007?
04C9 757800    1467            mov     _main_cur_error_1_96,#0x00
04CC 757900    1468            mov     (_main_cur_error_1_96 + 1),#0x00
04CF 757A80    1469            mov     (_main_cur_error_1_96 + 2),#0x80
04D2 757BBF    1470            mov     (_main_cur_error_1_96 + 3),#0xBF
04D5           1471   L017007?:
04D5           1472   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:285: if((left>thresh)&&(right<thresh))cur_error = 1;
04D5 C004      1473            push    ar4
04D7 C005      1474            push    ar5
04D9 C006      1475            push    ar6
04DB C007      1476            push    ar7
04DD E4        1477            clr     a
04DE C0E0      1478            push    acc
04E0 C0E0      1479            push    acc
04E2 C0E0      1480            push    acc
04E4 C0E0      1481            push    acc
04E6 853882    1482            mov     dpl,_main_left_2_97
04E9 853983    1483            mov     dph,(_main_left_2_97 + 1)
04EC 853AF0    1484            mov     b,(_main_left_2_97 + 2)
04EF E53B      1485            mov     a,(_main_left_2_97 + 3)
04F1 120100    1486            lcall   ___fsgt
04F4 AA82      1487            mov     r2,dpl
04F6 E581      1488            mov     a,sp
04F8 24FC      1489            add     a,#0xfc
04FA F581      1490            mov     sp,a
04FC D007      1491            pop     ar7
04FE D006      1492            pop     ar6
0500 D005      1493            pop     ar5
0502 D004      1494            pop     ar4
0504 EA        1495            mov     a,r2
0505 6001      1496            jz      L017010?
0507 C002      1497            push    ar2
0509 C004      1498            push    ar4
050B C005      1499            push    ar5
050D C006      1500            push    ar6
050F C007      1501            push    ar7
0511 E4        1502            clr     a
0512 C0E0      1503            push    acc
0514 C0E0      1504            push    acc
0516 C0E0      1505            push    acc
0518 C0E0      1506            push    acc
051A 858882    1507            mov     dpl,_main_right_2_97
051D 858983    1508            mov     dph,(_main_right_2_97 + 1)
0520 858AF0    1509            mov     b,(_main_right_2_97 + 2)
0523 E58B      1510            mov     a,(_main_right_2_97 + 3)
0525 120100    1511            lcall   ___fslt
0528 AB82      1512            mov     r3,dpl
052A E581      1513            mov     a,sp
052C 24FC      1514            add     a,#0xfc
052E F581      1515            mov     sp,a
0530 D007      1516            pop     ar7
0532 D006      1517            pop     ar6
0534 D005      1518            pop     ar5
0536 D004      1519            pop     ar4
0538 D002      1520            pop     ar2
053A EB        1521            mov     a,r3
053B 6001      1522            jz      L017010?
053D 757800    1523            mov     _main_cur_error_1_96,#0x00
0540 757900    1524            mov     (_main_cur_error_1_96 + 1),#0x00
0543 757A80    1525            mov     (_main_cur_error_1_96 + 2),#0x80
0546 757B3F    1526            mov     (_main_cur_error_1_96 + 3),#0x3F
0549           1527   L017010?:
0549           1528   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:286: if((left>thresh)&&(right>thresh)){
0549 EA        1529            mov     a,r2
054A 7001      1530            jnz     L017087?
054C 020100    1531            ljmp    L017017?
054F           1532   L017087?:
054F C004      1533            push    ar4
0551 C005      1534            push    ar5
0553 C006      1535            push    ar6
0555 C007      1536            push    ar7
0557 E4        1537            clr     a
0558 C0E0      1538            push    acc
055A C0E0      1539            push    acc
055C C0E0      1540            push    acc
055E C0E0      1541            push    acc
0560 858882    1542            mov     dpl,_main_right_2_97
0563 858983    1543            mov     dph,(_main_right_2_97 + 1)
0566 858AF0    1544            mov     b,(_main_right_2_97 + 2)
0569 E58B      1545            mov     a,(_main_right_2_97 + 3)
056B 120100    1546            lcall   ___fsgt
056E AA82      1547            mov     r2,dpl
0570 E581      1548            mov     a,sp
0572 24FC      1549            add     a,#0xfc
0574 F581      1550            mov     sp,a
0576 D007      1551            pop     ar7
0578 D006      1552            pop     ar6
057A D005      1553            pop     ar5
057C D004      1554            pop     ar4
057E EA        1555            mov     a,r2
057F 6001      1556            jz      L017017?
0581           1557   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:287: if(pre_error>0) cur_error = 5;
0581 C004      1558            push    ar4
0583 C005      1559            push    ar5
0585 C006      1560            push    ar6
0587 C007      1561            push    ar7
0589 E4        1562            clr     a
058A C0E0      1563            push    acc
058C C0E0      1564            push    acc
058E C0E0      1565            push    acc
0590 C0E0      1566            push    acc
0592 85C882    1567            mov     dpl,_main_pre_error_1_96
0595 85C983    1568            mov     dph,(_main_pre_error_1_96 + 1)
0598 85CAF0    1569            mov     b,(_main_pre_error_1_96 + 2)
059B E5CB      1570            mov     a,(_main_pre_error_1_96 + 3)
059D 120100    1571            lcall   ___fsgt
05A0 AA82      1572            mov     r2,dpl
05A2 E581      1573            mov     a,sp
05A4 24FC      1574            add     a,#0xfc
05A6 F581      1575            mov     sp,a
05A8 D007      1576            pop     ar7
05AA D006      1577            pop     ar6
05AC D005      1578            pop     ar5
05AE D004      1579            pop     ar4
05B0 EA        1580            mov     a,r2
05B1 6001      1581            jz      L017013?
05B3 757800    1582            mov     _main_cur_error_1_96,#0x00
05B6 757900    1583            mov     (_main_cur_error_1_96 + 1),#0x00
05B9 757AA0    1584            mov     (_main_cur_error_1_96 + 2),#0xA0
05BC 757B40    1585            mov     (_main_cur_error_1_96 + 3),#0x40
05BF           1586   L017013?:
05BF           1587   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:288: if(pre_error<=0) cur_error = -5;
05BF EA        1588            mov     a,r2
05C0 7001      1589            jnz     L017017?
05C2 F578      1590            mov     _main_cur_error_1_96,a
05C4 F579      1591            mov     (_main_cur_error_1_96 + 1),a
05C6 757AA0    1592            mov     (_main_cur_error_1_96 + 2),#0xA0
05C9 757BC0    1593            mov     (_main_cur_error_1_96 + 3),#0xC0
05CC           1594   L017017?:
05CC           1595   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:292: cor = k_p * cur_error + k_d*(cur_error - pre_error)/0.001;
05CC C004      1596            push    ar4
05CE C005      1597            push    ar5
05D0 C006      1598            push    ar6
05D2 C007      1599            push    ar7
05D4 C0C8      1600            push    _main_pre_error_1_96
05D6 C0C9      1601            push    (_main_pre_error_1_96 + 1)
05D8 C0CA      1602            push    (_main_pre_error_1_96 + 2)
05DA C0CB      1603            push    (_main_pre_error_1_96 + 3)
05DC 857882    1604            mov     dpl,_main_cur_error_1_96
05DF 857983    1605            mov     dph,(_main_cur_error_1_96 + 1)
05E2 857AF0    1606            mov     b,(_main_cur_error_1_96 + 2)
05E5 E57B      1607            mov     a,(_main_cur_error_1_96 + 3)
05E7 120100    1608            lcall   ___fssub
05EA AA82      1609            mov     r2,dpl
05EC AB83      1610            mov     r3,dph
05EE A8F0      1611            mov     r0,b
05F0 F9        1612            mov     r1,a
05F1 E581      1613            mov     a,sp
05F3 24FC      1614            add     a,#0xfc
05F5 F581      1615            mov     sp,a
05F7 746F      1616            mov     a,#0x6F
05F9 C0E0      1617            push    acc
05FB 7412      1618            mov     a,#0x12
05FD C0E0      1619            push    acc
05FF 7483      1620            mov     a,#0x83
0601 C0E0      1621            push    acc
0603 743A      1622            mov     a,#0x3A
0605 C0E0      1623            push    acc
0607 8A82      1624            mov     dpl,r2
0609 8B83      1625            mov     dph,r3
060B 88F0      1626            mov     b,r0
060D E9        1627            mov     a,r1
060E 120100    1628            lcall   ___fsdiv
0611 AA82      1629            mov     r2,dpl
0613 AB83      1630            mov     r3,dph
0615 A8F0      1631            mov     r0,b
0617 F9        1632            mov     r1,a
0618 E581      1633            mov     a,sp
061A 24FC      1634            add     a,#0xfc
061C F581      1635            mov     sp,a
061E C002      1636            push    ar2
0620 C003      1637            push    ar3
0622 C000      1638            push    ar0
0624 C001      1639            push    ar1
0626 857882    1640            mov     dpl,_main_cur_error_1_96
0629 857983    1641            mov     dph,(_main_cur_error_1_96 + 1)
062C 857AF0    1642            mov     b,(_main_cur_error_1_96 + 2)
062F E57B      1643            mov     a,(_main_cur_error_1_96 + 3)
0631 120100    1644            lcall   ___fsadd
0634 858228    1645            mov     _main_cor_1_96,dpl
0637 858329    1646            mov     (_main_cor_1_96 + 1),dph
063A 85F02A    1647            mov     (_main_cor_1_96 + 2),b
063D F52B      1648            mov     (_main_cor_1_96 + 3),a
063F E581      1649            mov     a,sp
0641 24FC      1650            add     a,#0xfc
0643 F581      1651            mov     sp,a
0645           1652   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:295: new_speed_low    =100 - cor;
0645 C028      1653            push    _main_cor_1_96
0647 C029      1654            push    (_main_cor_1_96 + 1)
0649 C02A      1655            push    (_main_cor_1_96 + 2)
064B C02B      1656            push    (_main_cor_1_96 + 3)
064D 900000    1657            mov     dptr,#0x0000
0650 75F0C8    1658            mov     b,#0xC8
0653 7442      1659            mov     a,#0x42
0655 120100    1660            lcall   ___fssub
0658 858218    1661            mov     _main_new_speed_low_1_96,dpl
065B 858319    1662            mov     (_main_new_speed_low_1_96 + 1),dph
065E 85F01A    1663            mov     (_main_new_speed_low_1_96 + 2),b
0661 F51B      1664            mov     (_main_new_speed_low_1_96 + 3),a
0663 E581      1665            mov     a,sp
0665 24FC      1666            add     a,#0xfc
0667 F581      1667            mov     sp,a
0669           1668   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:296: new_speed_high   =100 + cor;
0669 E4        1669            clr     a
066A C0E0      1670            push    acc
066C C0E0      1671            push    acc
066E 74C8      1672            mov     a,#0xC8
0670 C0E0      1673            push    acc
0672 7442      1674            mov     a,#0x42
0674 C0E0      1675            push    acc
0676 852882    1676            mov     dpl,_main_cor_1_96
0679 852983    1677            mov     dph,(_main_cor_1_96 + 1)
067C 852AF0    1678            mov     b,(_main_cor_1_96 + 2)
067F E52B      1679            mov     a,(_main_cor_1_96 + 3)
0681 120100    1680            lcall   ___fsadd
0684 858268    1681            mov     _main_new_speed_high_1_96,dpl
0687 858369    1682            mov     (_main_new_speed_high_1_96 + 1),dph
068A 85F06A    1683            mov     (_main_new_speed_high_1_96 + 2),b
068D F56B      1684            mov     (_main_new_speed_high_1_96 + 3),a
068F E581      1685            mov     a,sp
0691 24FC      1686            add     a,#0xfc
0693 F581      1687            mov     sp,a
0695           1688   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:299: if(new_speed_low<0){
0695 E4        1689            clr     a
0696 C0E0      1690            push    acc
0698 C0E0      1691            push    acc
069A C0E0      1692            push    acc
069C C0E0      1693            push    acc
069E 851882    1694            mov     dpl,_main_new_speed_low_1_96
06A1 851983    1695            mov     dph,(_main_new_speed_low_1_96 + 1)
06A4 851AF0    1696            mov     b,(_main_new_speed_low_1_96 + 2)
06A7 E51B      1697            mov     a,(_main_new_speed_low_1_96 + 3)
06A9 120100    1698            lcall   ___fslt
06AC AA82      1699            mov     r2,dpl
06AE E581      1700            mov     a,sp
06B0 24FC      1701            add     a,#0xfc
06B2 F581      1702            mov     sp,a
06B4 D007      1703            pop     ar7
06B6 D006      1704            pop     ar6
06B8 D005      1705            pop     ar5
06BA D004      1706            pop     ar4
06BC EA        1707            mov     a,r2
06BD 6001      1708            jz      L017020?
06BF           1709   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:300: new_speed_low = 0;
06BF 751800    1710            mov     _main_new_speed_low_1_96,#0x00
06C2 751900    1711            mov     (_main_new_speed_low_1_96 + 1),#0x00
06C5 751A00    1712            mov     (_main_new_speed_low_1_96 + 2),#0x00
06C8 751B00    1713            mov     (_main_new_speed_low_1_96 + 3),#0x00
06CB           1714   L017020?:
06CB           1715   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:303: if(new_speed_high>100){
06CB C004      1716            push    ar4
06CD C005      1717            push    ar5
06CF C006      1718            push    ar6
06D1 C007      1719            push    ar7
06D3 E4        1720            clr     a
06D4 C0E0      1721            push    acc
06D6 C0E0      1722            push    acc
06D8 74C8      1723            mov     a,#0xC8
06DA C0E0      1724            push    acc
06DC 7442      1725            mov     a,#0x42
06DE C0E0      1726            push    acc
06E0 856882    1727            mov     dpl,_main_new_speed_high_1_96
06E3 856983    1728            mov     dph,(_main_new_speed_high_1_96 + 1)
06E6 856AF0    1729            mov     b,(_main_new_speed_high_1_96 + 2)
06E9 E56B      1730            mov     a,(_main_new_speed_high_1_96 + 3)
06EB 120100    1731            lcall   ___fsgt
06EE AA82      1732            mov     r2,dpl
06F0 E581      1733            mov     a,sp
06F2 24FC      1734            add     a,#0xfc
06F4 F581      1735            mov     sp,a
06F6 D007      1736            pop     ar7
06F8 D006      1737            pop     ar6
06FA D005      1738            pop     ar5
06FC D004      1739            pop     ar4
06FE EA        1740            mov     a,r2
06FF 6001      1741            jz      L017022?
0701           1742   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:304: new_speed_high = 100;
0701 756800    1743            mov     _main_new_speed_high_1_96,#0x00
0704 756900    1744            mov     (_main_new_speed_high_1_96 + 1),#0x00
0707 756AC8    1745            mov     (_main_new_speed_high_1_96 + 2),#0xC8
070A 756B42    1746            mov     (_main_new_speed_high_1_96 + 3),#0x42
070D           1747   L017022?:
070D           1748   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:308: if(cur_error > 0){               
070D C004      1749            push    ar4
070F C005      1750            push    ar5
0711 C006      1751            push    ar6
0713 C007      1752            push    ar7
0715 E4        1753            clr     a
0716 C0E0      1754            push    acc
0718 C0E0      1755            push    acc
071A C0E0      1756            push    acc
071C C0E0      1757            push    acc
071E 857882    1758            mov     dpl,_main_cur_error_1_96
0721 857983    1759            mov     dph,(_main_cur_error_1_96 + 1)
0724 857AF0    1760            mov     b,(_main_cur_error_1_96 + 2)
0727 E57B      1761            mov     a,(_main_cur_error_1_96 + 3)
0729 120100    1762            lcall   ___fsgt
072C AA82      1763            mov     r2,dpl
072E E581      1764            mov     a,sp
0730 24FC      1765            add     a,#0xfc
0732 F581      1766            mov     sp,a
0734 D007      1767            pop     ar7
0736 D006      1768            pop     ar6
0738 D005      1769            pop     ar5
073A D004      1770            pop     ar4
073C EA        1771            mov     a,r2
073D 6001      1772            jz      L017032?
073F           1773   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:309: pwm_left = new_speed_low;
073F 851882    1774            mov     dpl,_main_new_speed_low_1_96
0742 851983    1775            mov     dph,(_main_new_speed_low_1_96 + 1)
0745 851AF0    1776            mov     b,(_main_new_speed_low_1_96 + 2)
0748 E51B      1777            mov     a,(_main_new_speed_low_1_96 + 3)
074A C004      1778            push    ar4
074C C005      1779            push    ar5
074E C006      1780            push    ar6
0750 C007      1781            push    ar7
0752 120100    1782            lcall   ___fs2uchar
0755 858258    1783            mov     _pwm_left,dpl
0758           1784   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:310: pwm_right = new_speed_high;              
0758 856882    1785            mov     dpl,_main_new_speed_high_1_96
075B 856983    1786            mov     dph,(_main_new_speed_high_1_96 + 1)
075E 856AF0    1787            mov     b,(_main_new_speed_high_1_96 + 2)
0761 E56B      1788            mov     a,(_main_new_speed_high_1_96 + 3)
0763 120100    1789            lcall   ___fs2uchar
0766 858218    1790            mov     _pwm_right,dpl
0769 D007      1791            pop     ar7
076B D006      1792            pop     ar6
076D D005      1793            pop     ar5
076F D004      1794            pop     ar4
0771 020100    1795            ljmp    L017033?
0774           1796   L017032?:
0774           1797   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:312: else if (cur_error < 0){
0774 C004      1798            push    ar4
0776 C005      1799            push    ar5
0778 C006      1800            push    ar6
077A C007      1801            push    ar7
077C E4        1802            clr     a
077D C0E0      1803            push    acc
077F C0E0      1804            push    acc
0781 C0E0      1805            push    acc
0783 C0E0      1806            push    acc
0785 857882    1807            mov     dpl,_main_cur_error_1_96
0788 857983    1808            mov     dph,(_main_cur_error_1_96 + 1)
078B 857AF0    1809            mov     b,(_main_cur_error_1_96 + 2)
078E E57B      1810            mov     a,(_main_cur_error_1_96 + 3)
0790 120100    1811            lcall   ___fslt
0793 AA82      1812            mov     r2,dpl
0795 E581      1813            mov     a,sp
0797 24FC      1814            add     a,#0xfc
0799 F581      1815            mov     sp,a
079B D007      1816            pop     ar7
079D D006      1817            pop     ar6
079F D005      1818            pop     ar5
07A1 D004      1819            pop     ar4
07A3 EA        1820            mov     a,r2
07A4 6001      1821            jz      L017029?
07A6           1822   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:313: pwm_left = new_speed_high;
07A6 856882    1823            mov     dpl,_main_new_speed_high_1_96
07A9 856983    1824            mov     dph,(_main_new_speed_high_1_96 + 1)
07AC 856AF0    1825            mov     b,(_main_new_speed_high_1_96 + 2)
07AF E56B      1826            mov     a,(_main_new_speed_high_1_96 + 3)
07B1 C004      1827            push    ar4
07B3 C005      1828            push    ar5
07B5 C006      1829            push    ar6
07B7 C007      1830            push    ar7
07B9 120100    1831            lcall   ___fs2uchar
07BC 858258    1832            mov     _pwm_left,dpl
07BF           1833   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:314: pwm_right = new_speed_low;
07BF 851882    1834            mov     dpl,_main_new_speed_low_1_96
07C2 851983    1835            mov     dph,(_main_new_speed_low_1_96 + 1)
07C5 851AF0    1836            mov     b,(_main_new_speed_low_1_96 + 2)
07C8 E51B      1837            mov     a,(_main_new_speed_low_1_96 + 3)
07CA 120100    1838            lcall   ___fs2uchar
07CD 858218    1839            mov     _pwm_right,dpl
07D0 D007      1840            pop     ar7
07D2 D006      1841            pop     ar6
07D4 D005      1842            pop     ar5
07D6 D004      1843            pop     ar4
07D8 8001      1844            sjmp    L017033?
07DA           1845   L017029?:
07DA           1846   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:317: if(pre_error > 0){
07DA C004      1847            push    ar4
07DC C005      1848            push    ar5
07DE C006      1849            push    ar6
07E0 C007      1850            push    ar7
07E2 E4        1851            clr     a
07E3 C0E0      1852            push    acc
07E5 C0E0      1853            push    acc
07E7 C0E0      1854            push    acc
07E9 C0E0      1855            push    acc
07EB 85C882    1856            mov     dpl,_main_pre_error_1_96
07EE 85C983    1857            mov     dph,(_main_pre_error_1_96 + 1)
07F1 85CAF0    1858            mov     b,(_main_pre_error_1_96 + 2)
07F4 E5CB      1859            mov     a,(_main_pre_error_1_96 + 3)
07F6 120100    1860            lcall   ___fsgt
07F9 AA82      1861            mov     r2,dpl
07FB E581      1862            mov     a,sp
07FD 24FC      1863            add     a,#0xfc
07FF F581      1864            mov     sp,a
0801 D007      1865            pop     ar7
0803 D006      1866            pop     ar6
0805 D005      1867            pop     ar5
0807 D004      1868            pop     ar4
0809 EA        1869            mov     a,r2
080A 6001      1870            jz      L017026?
080C           1871   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:318: pwm_left = 100;
080C 755864    1872            mov     _pwm_left,#0x64
080F           1873   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:319: pwm_right = 20;
080F 751814    1874            mov     _pwm_right,#0x14
0812 8001      1875            sjmp    L017033?
0814           1876   L017026?:
0814           1877   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:321: else if (pre_error < 0){
0814 C004      1878            push    ar4
0816 C005      1879            push    ar5
0818 C006      1880            push    ar6
081A C007      1881            push    ar7
081C E4        1882            clr     a
081D C0E0      1883            push    acc
081F C0E0      1884            push    acc
0821 C0E0      1885            push    acc
0823 C0E0      1886            push    acc
0825 85C882    1887            mov     dpl,_main_pre_error_1_96
0828 85C983    1888            mov     dph,(_main_pre_error_1_96 + 1)
082B 85CAF0    1889            mov     b,(_main_pre_error_1_96 + 2)
082E E5CB      1890            mov     a,(_main_pre_error_1_96 + 3)
0830 120100    1891            lcall   ___fslt
0833 AA82      1892            mov     r2,dpl
0835 E581      1893            mov     a,sp
0837 24FC      1894            add     a,#0xfc
0839 F581      1895            mov     sp,a
083B D007      1896            pop     ar7
083D D006      1897            pop     ar6
083F D005      1898            pop     ar5
0841 D004      1899            pop     ar4
0843 EA        1900            mov     a,r2
0844 6001      1901            jz      L017033?
0846           1902   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:322: pwm_right = 100;
0846 751864    1903            mov     _pwm_right,#0x64
0849           1904   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:323: pwm_left = 20;
0849 755814    1905            mov     _pwm_left,#0x14
084C           1906   L017033?:
084C           1907   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:326: counter++;
084C 0C        1908            inc     r4
084D BC00C8    1909            cjne    r4,#0x00,L017097?
0850 0D        1910            inc     r5
0851           1911   L017097?:
0851           1912   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:327: pre_error = cur_error;
0851 8578C8    1913            mov     _main_pre_error_1_96,_main_cur_error_1_96
0854 8579C9    1914            mov     (_main_pre_error_1_96 + 1),(_main_cur_error_1_96 + 1)
0857 857ACA    1915            mov     (_main_pre_error_1_96 + 2),(_main_cur_error_1_96 + 2)
085A 857BCB    1916            mov     (_main_pre_error_1_96 + 3),(_main_cur_error_1_96 + 3)
085D           1917   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:328: if(counter==30){
085D BC1E08    1918            cjne    r4,#0x1E,L017035?
0860 BD0008    1919            cjne    r5,#0x00,L017035?
0863           1920   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:329: printf("Error:%5.2f Left:%5.2f Right:%5.2f                 \r", cur_error, left, right, pwm_left, pwm_right);
0863 AA18      1921            mov     r2,_pwm_right
0865 7B00      1922            mov     r3,#0x00
0867 A858      1923            mov     r0,_pwm_left
0869 7900      1924            mov     r1,#0x00
086B C004      1925            push    ar4
086D C005      1926            push    ar5
086F C006      1927            push    ar6
0871 C007      1928            push    ar7
0873 C002      1929            push    ar2
0875 C003      1930            push    ar3
0877 C000      1931            push    ar0
0879 C001      1932            push    ar1
087B C088      1933            push    _main_right_2_97
087D C089      1934            push    (_main_right_2_97 + 1)
087F C08A      1935            push    (_main_right_2_97 + 2)
0881 C08B      1936            push    (_main_right_2_97 + 3)
0883 C038      1937            push    _main_left_2_97
0885 C039      1938            push    (_main_left_2_97 + 1)
0887 C03A      1939            push    (_main_left_2_97 + 2)
0889 C03B      1940            push    (_main_left_2_97 + 3)
088B C078      1941            push    _main_cur_error_1_96
088D C079      1942            push    (_main_cur_error_1_96 + 1)
088F C07A      1943            push    (_main_cur_error_1_96 + 2)
0891 C07B      1944            push    (_main_cur_error_1_96 + 3)
0893 7448      1945            mov     a,#__str_2
0895 C0E0      1946            push    acc
0897 74B2      1947            mov     a,#(__str_2 >> 8)
0899 C0E0      1948            push    acc
089B 7480      1949            mov     a,#0x80
089D C0E0      1950            push    acc
089F 120100    1951            lcall   _printf
08A2 E581      1952            mov     a,sp
08A4 24ED      1953            add     a,#0xed
08A6 F581      1954            mov     sp,a
08A8 D007      1955            pop     ar7
08AA D006      1956            pop     ar6
08AC D005      1957            pop     ar5
08AE D004      1958            pop     ar4
08B0           1959   L017035?:
08B0           1960   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:335: if(line_sensor>thresh){
08B0 C004      1961            push    ar4
08B2 C005      1962            push    ar5
08B4 C006      1963            push    ar6
08B6 C007      1964            push    ar7
08B8 E4        1965            clr     a
08B9 C0E0      1966            push    acc
08BB C0E0      1967            push    acc
08BD C0E0      1968            push    acc
08BF C0E0      1969            push    acc
08C1 85F882    1970            mov     dpl,_main_line_sensor_2_97
08C4 85F983    1971            mov     dph,(_main_line_sensor_2_97 + 1)
08C7 85FAF0    1972            mov     b,(_main_line_sensor_2_97 + 2)
08CA E5FB      1973            mov     a,(_main_line_sensor_2_97 + 3)
08CC 120100    1974            lcall   ___fsgt
08CF AA82      1975            mov     r2,dpl
08D1 E581      1976            mov     a,sp
08D3 24FC      1977            add     a,#0xfc
08D5 F581      1978            mov     sp,a
08D7 D007      1979            pop     ar7
08D9 D006      1980            pop     ar6
08DB D005      1981            pop     ar5
08DD D004      1982            pop     ar4
08DF EA        1983            mov     a,r2
08E0 7001      1984            jnz     L017100?
08E2 020100    1985            ljmp    L017050?
08E5           1986   L017100?:
08E5           1987   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:337: if(line_counter == 0){
08E5 EE        1988            mov     a,r6
08E6 4F        1989            orl     a,r7
08E7 7001      1990            jnz     L017037?
08E9           1991   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:339: line_counter++;
08E9 0E        1992            inc     r6
08EA BE0048    1993            cjne    r6,#0x00,L017102?
08ED 0F        1994            inc     r7
08EE           1995   L017102?:
08EE           1996   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:340: line_counter_flag = 1;
08EE D2F8      1997            setb    _line_counter_flag
08F0 8001      1998            sjmp    L017038?
08F2           1999   L017037?:
08F2           2000   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:344: line_counter++;                                  
08F2 0E        2001            inc     r6
08F3 BE00C8    2002            cjne    r6,#0x00,L017103?
08F6 0F        2003            inc     r7
08F7           2004   L017103?:
08F7           2005   L017038?:
08F7           2006   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:347: if(line_timer == 2000){
08F7 74D0      2007            mov     a,#0xD0
08F9 B5D808    2008            cjne    a,_line_timer,L017040?
08FC 7407      2009            mov     a,#0x07
08FE B5D908    2010            cjne    a,(_line_timer + 1),L017040?
0901           2011   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:348: line_counter_flag = 0;
0901 C2F8      2012            clr     _line_counter_flag
0903           2013   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:349: line_timer = 0;
0903 E4        2014            clr     a
0904 F5D8      2015            mov     _line_timer,a
0906 F5D9      2016            mov     (_line_timer + 1),a
0908           2017   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:350: exec = 1;                                        
0908 75A801    2018            mov     _main_exec_1_96,#0x01
090B E4        2019            clr     a
090C F5A9      2020            mov     (_main_exec_1_96 + 1),a
090E           2021   L017040?:
090E           2022   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:354: if(exec == 1){
090E 7401      2023            mov     a,#0x01
0910 B5A848    2024            cjne    a,_main_exec_1_96,L017106?
0913 E4        2025            clr     a
0914 B5A948    2026            cjne    a,(_main_exec_1_96 + 1),L017106?
0917 8001      2027            sjmp    L017107?
0919           2028   L017106?:
0919 8001      2029            sjmp    L017046?
091B           2030   L017107?:
091B           2031   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:355: switch(line_counter){
091B BE0208    2032            cjne    r6,#0x02,L017108?
091E BF0008    2033            cjne    r7,#0x00,L017108?
0921 8001      2034            sjmp    L017041?
0923           2035   L017108?:
0923 BE0388    2036            cjne    r6,#0x03,L017109?
0926 BF0088    2037            cjne    r7,#0x00,L017109?
0929 8001      2038            sjmp    L017042?
092B           2039   L017109?:
092B           2040   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:356: case 2:
092B BE0408    2041            cjne    r6,#0x04,L017044?
092E BF0008    2042            cjne    r7,#0x00,L017044?
0931 8001      2043            sjmp    L017043?
0933           2044   L017041?:
0933           2045   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:357: printf("TURNING LEFT \r;");
0933 C004      2046            push    ar4
0935 C005      2047            push    ar5
0937 7488      2048            mov     a,#__str_3
0939 C0E0      2049            push    acc
093B 74B6      2050            mov     a,#(__str_3 >> 8)
093D C0E0      2051            push    acc
093F 7480      2052            mov     a,#0x80
0941 C0E0      2053            push    acc
0943 120100    2054            lcall   _printf
0946 1581      2055            dec     sp
0948 1581      2056            dec     sp
094A 1581      2057            dec     sp
094C D005      2058            pop     ar5
094E D004      2059            pop     ar4
0950           2060   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:358: case 3:
0950           2061   L017042?:
0950           2062   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:359: printf("TURNING Right \r;");
0950 C004      2063            push    ar4
0952 C005      2064            push    ar5
0954 74C8      2065            mov     a,#__str_4
0956 C0E0      2066            push    acc
0958 74B6      2067            mov     a,#(__str_4 >> 8)
095A C0E0      2068            push    acc
095C 7480      2069            mov     a,#0x80
095E C0E0      2070            push    acc
0960 120100    2071            lcall   _printf
0963 1581      2072            dec     sp
0965 1581      2073            dec     sp
0967 1581      2074            dec     sp
0969 D005      2075            pop     ar5
096B D004      2076            pop     ar4
096D           2077   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:360: case 4:
096D           2078   L017043?:
096D           2079   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:361: printf("Starting \r;");
096D C004      2080            push    ar4
096F C005      2081            push    ar5
0971 7408      2082            mov     a,#__str_5
0973 C0E0      2083            push    acc
0975 74B7      2084            mov     a,#(__str_5 >> 8)
0977 C0E0      2085            push    acc
0979 7480      2086            mov     a,#0x80
097B C0E0      2087            push    acc
097D 120100    2088            lcall   _printf
0980 1581      2089            dec     sp
0982 1581      2090            dec     sp
0984 1581      2091            dec     sp
0986 D005      2092            pop     ar5
0988 D004      2093            pop     ar4
098A           2094   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:362: }
098A           2095   L017044?:
098A           2096   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:363: exec=0;
098A           2097   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:364: line_counter = 0;
098A E4        2098            clr     a
098B F5A8      2099            mov     _main_exec_1_96,a
098D F5A9      2100            mov     (_main_exec_1_96 + 1),a
098F FE        2101            mov     r6,a
0990 FF        2102            mov     r7,a
0991           2103   L017046?:
0991           2104   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:366: printf("line counter: %d", line_counter);
0991 C004      2105            push    ar4
0993 C005      2106            push    ar5
0995 C006      2107            push    ar6
0997 C007      2108            push    ar7
0999 C006      2109            push    ar6
099B C007      2110            push    ar7
099D 7448      2111            mov     a,#__str_6
099F C0E0      2112            push    acc
09A1 74B7      2113            mov     a,#(__str_6 >> 8)
09A3 C0E0      2114            push    acc
09A5 7480      2115            mov     a,#0x80
09A7 C0E0      2116            push    acc
09A9 120100    2117            lcall   _printf
09AC E581      2118            mov     a,sp
09AE 24FB      2119            add     a,#0xfb
09B0 F581      2120            mov     sp,a
09B2 D007      2121            pop     ar7
09B4 D006      2122            pop     ar6
09B6 D005      2123            pop     ar5
09B8 D004      2124            pop     ar4
09BA 020100    2125            ljmp    L017050?
09BD           2126            rseg R_CSEG
09BD           2127   
0000           2128            rseg R_XINIT
0000           2129   
0000           2130            rseg R_CONST
0000           2131   __str_0:
0000 563D2535  2132            db 'V=%5.2f'
     2E3266
0007 00        2133            db 0x00
0008           2134   __str_1:
0008 25303264  2135            db '%02d:%02d'
     3A253032
     64
0011 00        2136            db 0x00
0012           2137   __str_2:
0012 4572726F  2138            db 'Error:%5.2f Left:%5.2f Right:%5.2f                 '
     723A2535
     2E326620
     4C656674
     3A25352E
     32662052
     69676874
     3A25352E
     32662020
     20202020
     20202020
     20202020
     202020
0045 0D        2139            db 0x0D
0046 00        2140            db 0x00
0047           2141   __str_3:
0047 5455524E  2142            db 'TURNING LEFT '
     494E4720
     4C454654
     20
0054 0D        2143            db 0x0D
0055 3B        2144            db ';'
0056 00        2145            db 0x00
0057           2146   __str_4:
0057 5455524E  2147            db 'TURNING Right '
     494E4720
     52696768
     7420
0065 0D        2148            db 0x0D
0066 3B        2149            db ';'
0067 00        2150            db 0x00
0068           2151   __str_5:
0068 53746172  2152            db 'Starting '
     74696E67
     20
0071 0D        2153            db 0x0D
0072 3B        2154            db ';'
0073 00        2155            db 0x00
0074           2156   __str_6:
0074 6C696E65  2157            db 'line counter: %d'
     20636F75
     6E746572
     3A202564
0084 00        2158            db 0x00
0085           2159   
000E           2160            CSEG
000E           2161   
000E           2162   end
