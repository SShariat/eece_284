0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Dec 11 2012) (MSVC)
0000              4   ; This file was generated Mon Mar 09 18:06:48 2015
0000              5   ;--------------------------------------------------------
                  5   $name main_code
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _motor_control
0000             29            public _display_LCD
0000             30            public _Timer0ISR
0000             31            public _InitTimer0
0000             32            public _InitADC
0000             33            public _InitSerialPort
0000             34            public _Wait1S
0000             35            public _LCDprint
0000             36            public _LCD_8BIT
0000             37            public _WriteCommand
0000             38            public _WriteData
0000             39            public _LCD_byte
0000             40            public _LCD_pulse
0000             41            public _waitms
0000             42            public _Wait50us
0000             43            public _InitPorts
0000             44            public _LCDprint_PARM_3
0000             45            public _time_update_flag
0000             46            public _LCDprint_PARM_2
0000             47            public _pwm_right
0000             48            public _pwm_left
0000             49            public _pwmcount
0000             50            public _mins
0000             51            public _secs
0000             52            public _msCount
0000             53   ;--------------------------------------------------------
0000             54   ; Special Function Registers
0000             55   ;--------------------------------------------------------
0000             56   _ACC            DATA 0xe0
0000             57   _ADCON0         DATA 0x8e
0000             58   _ADCON1         DATA 0x97
0000             59   _ADINS          DATA 0xa3
0000             60   _ADMODA         DATA 0xc0
0000             61   _ADMODB         DATA 0xa1
0000             62   _AD0BH          DATA 0xbb
0000             63   _AD0BL          DATA 0xa6
0000             64   _AD0DAT0        DATA 0xc5
0000             65   _AD0DAT1        DATA 0xc6
0000             66   _AD0DAT2        DATA 0xc7
0000             67   _AD0DAT3        DATA 0xf4
0000             68   _AD1BH          DATA 0xc4
0000             69   _AD1BL          DATA 0xbc
0000             70   _AD1DAT0        DATA 0xd5
0000             71   _AD1DAT1        DATA 0xd6
0000             72   _AD1DAT2        DATA 0xd7
0000             73   _AD1DAT3        DATA 0xf5
0000             74   _AUXR1          DATA 0xa2
0000             75   _B              DATA 0xf0
0000             76   _BRGR0          DATA 0xbe
0000             77   _BRGR1          DATA 0xbf
0000             78   _BRGCON         DATA 0xbd
0000             79   _CCCRA          DATA 0xea
0000             80   _CCCRB          DATA 0xeb
0000             81   _CCCRC          DATA 0xec
0000             82   _CCCRD          DATA 0xed
0000             83   _CMP1           DATA 0xac
0000             84   _CMP2           DATA 0xad
0000             85   _DEECON         DATA 0xf1
0000             86   _DEEDAT         DATA 0xf2
0000             87   _DEEADR         DATA 0xf3
0000             88   _DIVM           DATA 0x95
0000             89   _DPH            DATA 0x83
0000             90   _DPL            DATA 0x82
0000             91   _FMADRH         DATA 0xe7
0000             92   _FMADRL         DATA 0xe6
0000             93   _FMCON          DATA 0xe4
0000             94   _FMDATA         DATA 0xe5
0000             95   _I2ADR          DATA 0xdb
0000             96   _I2CON          DATA 0xd8
0000             97   _I2DAT          DATA 0xda
0000             98   _I2SCLH         DATA 0xdd
0000             99   _I2SCLL         DATA 0xdc
0000            100   _I2STAT         DATA 0xd9
0000            101   _ICRAH          DATA 0xab
0000            102   _ICRAL          DATA 0xaa
0000            103   _ICRBH          DATA 0xaf
0000            104   _ICRBL          DATA 0xae
0000            105   _IEN0           DATA 0xa8
0000            106   _IEN1           DATA 0xe8
0000            107   _IP0            DATA 0xb8
0000            108   _IP0H           DATA 0xb7
0000            109   _IP1            DATA 0xf8
0000            110   _IP1H           DATA 0xf7
0000            111   _KBCON          DATA 0x94
0000            112   _KBMASK         DATA 0x86
0000            113   _KBPATN         DATA 0x93
0000            114   _OCRAH          DATA 0xef
0000            115   _OCRAL          DATA 0xee
0000            116   _OCRBH          DATA 0xfb
0000            117   _OCRBL          DATA 0xfa
0000            118   _OCRCH          DATA 0xfd
0000            119   _OCRCL          DATA 0xfc
0000            120   _OCRDH          DATA 0xff
0000            121   _OCRDL          DATA 0xfe
0000            122   _P0             DATA 0x80
0000            123   _P1             DATA 0x90
0000            124   _P2             DATA 0xa0
0000            125   _P3             DATA 0xb0
0000            126   _P0M1           DATA 0x84
0000            127   _P0M2           DATA 0x85
0000            128   _P1M1           DATA 0x91
0000            129   _P1M2           DATA 0x92
0000            130   _P2M1           DATA 0xa4
0000            131   _P2M2           DATA 0xa5
0000            132   _P3M1           DATA 0xb1
0000            133   _P3M2           DATA 0xb2
0000            134   _PCON           DATA 0x87
0000            135   _PCONA          DATA 0xb5
0000            136   _PSW            DATA 0xd0
0000            137   _PT0AD          DATA 0xf6
0000            138   _RSTSRC         DATA 0xdf
0000            139   _RTCCON         DATA 0xd1
0000            140   _RTCH           DATA 0xd2
0000            141   _RTCL           DATA 0xd3
0000            142   _SADDR          DATA 0xa9
0000            143   _SADEN          DATA 0xb9
0000            144   _SBUF           DATA 0x99
0000            145   _SCON           DATA 0x98
0000            146   _SSTAT          DATA 0xba
0000            147   _SP             DATA 0x81
0000            148   _SPCTL          DATA 0xe2
0000            149   _SPSTAT         DATA 0xe1
0000            150   _SPDAT          DATA 0xe3
0000            151   _TAMOD          DATA 0x8f
0000            152   _TCON           DATA 0x88
0000            153   _TCR20          DATA 0xc8
0000            154   _TCR21          DATA 0xf9
0000            155   _TH0            DATA 0x8c
0000            156   _TH1            DATA 0x8d
0000            157   _TH2            DATA 0xcd
0000            158   _TICR2          DATA 0xc9
0000            159   _TIFR2          DATA 0xe9
0000            160   _TISE2          DATA 0xde
0000            161   _TL0            DATA 0x8a
0000            162   _TL1            DATA 0x8b
0000            163   _TL2            DATA 0xcc
0000            164   _TMOD           DATA 0x89
0000            165   _TOR2H          DATA 0xcf
0000            166   _TOR2L          DATA 0xce
0000            167   _TPCR2H         DATA 0xcb
0000            168   _TPCR2L         DATA 0xca
0000            169   _TRIM           DATA 0x96
0000            170   _WDCON          DATA 0xa7
0000            171   _WDL            DATA 0xc1
0000            172   _WFEED1         DATA 0xc2
0000            173   _WFEED2         DATA 0xc3
0000            174   ;--------------------------------------------------------
0000            175   ; special function bits
0000            176   ;--------------------------------------------------------
0000            177   _ACC_7          BIT 0xe7
0000            178   _ACC_6          BIT 0xe6
0000            179   _ACC_5          BIT 0xe5
0000            180   _ACC_4          BIT 0xe4
0000            181   _ACC_3          BIT 0xe3
0000            182   _ACC_2          BIT 0xe2
0000            183   _ACC_1          BIT 0xe1
0000            184   _ACC_0          BIT 0xe0
0000            185   _ADMODA_7       BIT 0xc7
0000            186   _ADMODA_6       BIT 0xc6
0000            187   _ADMODA_5       BIT 0xc5
0000            188   _ADMODA_4       BIT 0xc4
0000            189   _ADMODA_3       BIT 0xc3
0000            190   _ADMODA_2       BIT 0xc2
0000            191   _ADMODA_1       BIT 0xc1
0000            192   _ADMODA_0       BIT 0xc0
0000            193   _BNDI1          BIT 0xc7
0000            194   _BURST1         BIT 0xc6
0000            195   _SCC1           BIT 0xc5
0000            196   _SCAN1          BIT 0xc4
0000            197   _BNDI0          BIT 0xc3
0000            198   _BURST0         BIT 0xc2
0000            199   _SCC0           BIT 0xc1
0000            200   _SCAN0          BIT 0xc0
0000            201   _B_7            BIT 0xf7
0000            202   _B_6            BIT 0xf6
0000            203   _B_5            BIT 0xf5
0000            204   _B_4            BIT 0xf4
0000            205   _B_3            BIT 0xf3
0000            206   _B_2            BIT 0xf2
0000            207   _B_1            BIT 0xf1
0000            208   _B_0            BIT 0xf0
0000            209   _I2CON_7        BIT 0xdf
0000            210   _I2CON_6        BIT 0xde
0000            211   _I2CON_5        BIT 0xdd
0000            212   _I2CON_4        BIT 0xdc
0000            213   _I2CON_3        BIT 0xdb
0000            214   _I2CON_2        BIT 0xda
0000            215   _I2CON_1        BIT 0xd9
0000            216   _I2CON_0        BIT 0xd8
0000            217   _I2EN           BIT 0xde
0000            218   _STA            BIT 0xdd
0000            219   _STO            BIT 0xdc
0000            220   _SI             BIT 0xdb
0000            221   _AA             BIT 0xda
0000            222   _CRSEL          BIT 0xd8
0000            223   _IEN0_7         BIT 0xaf
0000            224   _IEN0_6         BIT 0xae
0000            225   _IEN0_5         BIT 0xad
0000            226   _IEN0_4         BIT 0xac
0000            227   _IEN0_3         BIT 0xab
0000            228   _IEN0_2         BIT 0xaa
0000            229   _IEN0_1         BIT 0xa9
0000            230   _IEN0_0         BIT 0xa8
0000            231   _EA             BIT 0xaf
0000            232   _EWDRT          BIT 0xae
0000            233   _EBO            BIT 0xad
0000            234   _ES             BIT 0xac
0000            235   _ESR            BIT 0xac
0000            236   _ET1            BIT 0xab
0000            237   _EX1            BIT 0xaa
0000            238   _ET0            BIT 0xa9
0000            239   _EX0            BIT 0xa8
0000            240   _IEN1_7         BIT 0xef
0000            241   _IEN1_6         BIT 0xee
0000            242   _IEN1_5         BIT 0xed
0000            243   _IEN1_4         BIT 0xec
0000            244   _IEN1_3         BIT 0xeb
0000            245   _IEN1_2         BIT 0xea
0000            246   _IEN1_1         BIT 0xe9
0000            247   _IEN1_0         BIT 0xe8
0000            248   _EADEE          BIT 0xef
0000            249   _EST            BIT 0xee
0000            250   _ECCU           BIT 0xec
0000            251   _ESPI           BIT 0xeb
0000            252   _EC             BIT 0xea
0000            253   _EKBI           BIT 0xe9
0000            254   _EI2C           BIT 0xe8
0000            255   _IP0_7          BIT 0xbf
0000            256   _IP0_6          BIT 0xbe
0000            257   _IP0_5          BIT 0xbd
0000            258   _IP0_4          BIT 0xbc
0000            259   _IP0_3          BIT 0xbb
0000            260   _IP0_2          BIT 0xba
0000            261   _IP0_1          BIT 0xb9
0000            262   _IP0_0          BIT 0xb8
0000            263   _PWDRT          BIT 0xbe
0000            264   _PBO            BIT 0xbd
0000            265   _PS             BIT 0xbc
0000            266   _PSR            BIT 0xbc
0000            267   _PT1            BIT 0xbb
0000            268   _PX1            BIT 0xba
0000            269   _PT0            BIT 0xb9
0000            270   _PX0            BIT 0xb8
0000            271   _IP1_7          BIT 0xff
0000            272   _IP1_6          BIT 0xfe
0000            273   _IP1_5          BIT 0xfd
0000            274   _IP1_4          BIT 0xfc
0000            275   _IP1_3          BIT 0xfb
0000            276   _IP1_2          BIT 0xfa
0000            277   _IP1_1          BIT 0xf9
0000            278   _IP1_0          BIT 0xf8
0000            279   _PADEE          BIT 0xff
0000            280   _PST            BIT 0xfe
0000            281   _PCCU           BIT 0xfc
0000            282   _PSPI           BIT 0xfb
0000            283   _PC             BIT 0xfa
0000            284   _PKBI           BIT 0xf9
0000            285   _PI2C           BIT 0xf8
0000            286   _P0_7           BIT 0x87
0000            287   _P0_6           BIT 0x86
0000            288   _P0_5           BIT 0x85
0000            289   _P0_4           BIT 0x84
0000            290   _P0_3           BIT 0x83
0000            291   _P0_2           BIT 0x82
0000            292   _P0_1           BIT 0x81
0000            293   _P0_0           BIT 0x80
0000            294   _T1             BIT 0x87
0000            295   _KB7            BIT 0x87
0000            296   _CMP_1          BIT 0x86
0000            297   _KB6            BIT 0x86
0000            298   _CMPREF         BIT 0x85
0000            299   _KB5            BIT 0x85
0000            300   _CIN1A          BIT 0x84
0000            301   _KB4            BIT 0x84
0000            302   _CIN1B          BIT 0x83
0000            303   _KB3            BIT 0x83
0000            304   _CIN2A          BIT 0x82
0000            305   _KB2            BIT 0x82
0000            306   _CIN2B          BIT 0x81
0000            307   _KB1            BIT 0x81
0000            308   _CMP_2          BIT 0x80
0000            309   _KB0            BIT 0x80
0000            310   _P1_7           BIT 0x97
0000            311   _P1_6           BIT 0x96
0000            312   _P1_5           BIT 0x95
0000            313   _P1_4           BIT 0x94
0000            314   _P1_3           BIT 0x93
0000            315   _P1_2           BIT 0x92
0000            316   _P1_1           BIT 0x91
0000            317   _P1_0           BIT 0x90
0000            318   _OCC            BIT 0x97
0000            319   _OCB            BIT 0x96
0000            320   _RST            BIT 0x95
0000            321   _INT1           BIT 0x94
0000            322   _INT0           BIT 0x93
0000            323   _SDA            BIT 0x93
0000            324   _T0             BIT 0x92
0000            325   _SCL            BIT 0x92
0000            326   _RXD            BIT 0x91
0000            327   _TXD            BIT 0x90
0000            328   _P2_7           BIT 0xa7
0000            329   _P2_6           BIT 0xa6
0000            330   _P2_5           BIT 0xa5
0000            331   _P2_4           BIT 0xa4
0000            332   _P2_3           BIT 0xa3
0000            333   _P2_2           BIT 0xa2
0000            334   _P2_1           BIT 0xa1
0000            335   _P2_0           BIT 0xa0
0000            336   _ICA            BIT 0xa7
0000            337   _OCA            BIT 0xa6
0000            338   _SPICLK         BIT 0xa5
0000            339   _SS             BIT 0xa4
0000            340   _MISO           BIT 0xa3
0000            341   _MOSI           BIT 0xa2
0000            342   _OCD            BIT 0xa1
0000            343   _ICB            BIT 0xa0
0000            344   _P3_7           BIT 0xb7
0000            345   _P3_6           BIT 0xb6
0000            346   _P3_5           BIT 0xb5
0000            347   _P3_4           BIT 0xb4
0000            348   _P3_3           BIT 0xb3
0000            349   _P3_2           BIT 0xb2
0000            350   _P3_1           BIT 0xb1
0000            351   _P3_0           BIT 0xb0
0000            352   _XTAL1          BIT 0xb1
0000            353   _XTAL2          BIT 0xb0
0000            354   _PSW_7          BIT 0xd7
0000            355   _PSW_6          BIT 0xd6
0000            356   _PSW_5          BIT 0xd5
0000            357   _PSW_4          BIT 0xd4
0000            358   _PSW_3          BIT 0xd3
0000            359   _PSW_2          BIT 0xd2
0000            360   _PSW_1          BIT 0xd1
0000            361   _PSW_0          BIT 0xd0
0000            362   _CY             BIT 0xd7
0000            363   _AC             BIT 0xd6
0000            364   _F0             BIT 0xd5
0000            365   _RS1            BIT 0xd4
0000            366   _RS0            BIT 0xd3
0000            367   _OV             BIT 0xd2
0000            368   _F1             BIT 0xd1
0000            369   _P              BIT 0xd0
0000            370   _SCON_7         BIT 0x9f
0000            371   _SCON_6         BIT 0x9e
0000            372   _SCON_5         BIT 0x9d
0000            373   _SCON_4         BIT 0x9c
0000            374   _SCON_3         BIT 0x9b
0000            375   _SCON_2         BIT 0x9a
0000            376   _SCON_1         BIT 0x99
0000            377   _SCON_0         BIT 0x98
0000            378   _SM0            BIT 0x9f
0000            379   _FE             BIT 0x9f
0000            380   _SM1            BIT 0x9e
0000            381   _SM2            BIT 0x9d
0000            382   _REN            BIT 0x9c
0000            383   _TB8            BIT 0x9b
0000            384   _RB8            BIT 0x9a
0000            385   _TI             BIT 0x99
0000            386   _RI             BIT 0x98
0000            387   _TCON_7         BIT 0x8f
0000            388   _TCON_6         BIT 0x8e
0000            389   _TCON_5         BIT 0x8d
0000            390   _TCON_4         BIT 0x8c
0000            391   _TCON_3         BIT 0x8b
0000            392   _TCON_2         BIT 0x8a
0000            393   _TCON_1         BIT 0x89
0000            394   _TCON_0         BIT 0x88
0000            395   _TF1            BIT 0x8f
0000            396   _TR1            BIT 0x8e
0000            397   _TF0            BIT 0x8d
0000            398   _TR0            BIT 0x8c
0000            399   _IE1            BIT 0x8b
0000            400   _IT1            BIT 0x8a
0000            401   _IE0            BIT 0x89
0000            402   _IT0            BIT 0x88
0000            403   _TCR20_7        BIT 0xcf
0000            404   _TCR20_6        BIT 0xce
0000            405   _TCR20_5        BIT 0xcd
0000            406   _TCR20_4        BIT 0xcc
0000            407   _TCR20_3        BIT 0xcb
0000            408   _TCR20_2        BIT 0xca
0000            409   _TCR20_1        BIT 0xc9
0000            410   _TCR20_0        BIT 0xc8
0000            411   _PLEEN          BIT 0xcf
0000            412   _HLTRN          BIT 0xce
0000            413   _HLTEN          BIT 0xcd
0000            414   _ALTCD          BIT 0xcc
0000            415   _ALTAB          BIT 0xcb
0000            416   _TDIR2          BIT 0xca
0000            417   _TMOD21         BIT 0xc9
0000            418   _TMOD20         BIT 0xc8
0000            419   ;--------------------------------------------------------
0000            420   ; overlayable register banks
0000            421   ;--------------------------------------------------------
0000            422            rbank0 segment data overlay
0000            423   ;--------------------------------------------------------
0000            424   ; internal ram data
0000            425   ;--------------------------------------------------------
0000            426            rseg R_DSEG
0000            427   _msCount:
0000            428            ds 2
0002            429   _secs:
0002            430            ds 1
0003            431   _mins:
0003            432            ds 1
0004            433   _pwmcount:
0004            434            ds 1
0005            435   _pwm_left:
0005            436            ds 1
0006            437   _pwm_right:
0006            438            ds 1
0007            439   _LCDprint_PARM_2:
0007            440            ds 1
0008            441   _display_LCD_buff_1_93:
0008            442            ds 17
0019            443   _main_str_1_97:
0019            444            ds 17
002A            445   _main_cor_1_97:
002A            446            ds 4
002E            447   _main_pre_error_1_97:
002E            448            ds 4
0032            449   _main_new_speed_low_1_97:
0032            450            ds 4
0036            451   _main_new_speed_high_1_97:
0036            452            ds 4
003A            453   _main_counter_1_97:
003A            454            ds 4
003E            455   _main_left_2_98:
003E            456            ds 4
0042            457   _main_right_2_98:
0042            458            ds 4
0046            459   ;--------------------------------------------------------
0046            460   ; overlayable items in internal ram 
0046            461   ;--------------------------------------------------------
0000            462            rseg R_OSEG
0000            463   ;--------------------------------------------------------
0000            464   ; indirectly addressable internal ram data
0000            465   ;--------------------------------------------------------
0000            466            rseg R_ISEG
0000            467   ;--------------------------------------------------------
0000            468   ; absolute internal ram data
0000            469   ;--------------------------------------------------------
0000            470            DSEG
0000            471   ;--------------------------------------------------------
0000            472   ; bit data
0000            473   ;--------------------------------------------------------
0000            474            rseg R_BSEG
0000            475   _time_update_flag:
0000            476            DBIT    1
0001            477   _LCDprint_PARM_3:
0001            478            DBIT    1
0002            479   ;--------------------------------------------------------
0002            480   ; paged external ram data
0002            481   ;--------------------------------------------------------
0000            482            rseg R_PSEG
0000            483   ;--------------------------------------------------------
0000            484   ; external ram data
0000            485   ;--------------------------------------------------------
0000            486            rseg R_XSEG
FFC8            487            XSEG at 0xffc8
FFC8            488   _BODCFG: ds 1
FFC9            489            public _BODCFG
0000            490            rseg R_XSEG
FFDE            491            XSEG at 0xffde
FFDE            492   _CLKCON: ds 1
FFDF            493            public _CLKCON
0000            494            rseg R_XSEG
FFE1            495            XSEG at 0xffe1
FFE1            496   _PGACON1: ds 1
FFE2            497            public _PGACON1
0000            498            rseg R_XSEG
FFE4            499            XSEG at 0xffe4
FFE4            500   _PGACON1B: ds 1
FFE5            501            public _PGACON1B
0000            502            rseg R_XSEG
FFE3            503            XSEG at 0xffe3
FFE3            504   _PGA1TRIM8X16X: ds 1
FFE4            505            public _PGA1TRIM8X16X
0000            506            rseg R_XSEG
FFE2            507            XSEG at 0xffe2
FFE2            508   _PGA1TRIM2X4X: ds 1
FFE3            509            public _PGA1TRIM2X4X
0000            510            rseg R_XSEG
FFCA            511            XSEG at 0xffca
FFCA            512   _PGACON0: ds 1
FFCB            513            public _PGACON0
0000            514            rseg R_XSEG
FFCE            515            XSEG at 0xffce
FFCE            516   _PGACON0B: ds 1
FFCF            517            public _PGACON0B
0000            518            rseg R_XSEG
FFCD            519            XSEG at 0xffcd
FFCD            520   _PGA0TRIM8X16X: ds 1
FFCE            521            public _PGA0TRIM8X16X
0000            522            rseg R_XSEG
FFCC            523            XSEG at 0xffcc
FFCC            524   _PGA0TRIM2X4X: ds 1
FFCD            525            public _PGA0TRIM2X4X
0000            526            rseg R_XSEG
FFBF            527            XSEG at 0xffbf
FFBF            528   _RTCDATH: ds 1
FFC0            529            public _RTCDATH
0000            530            rseg R_XSEG
FFBE            531            XSEG at 0xffbe
FFBE            532   _RTCDATL: ds 1
FFBF            533            public _RTCDATL
0000            534            rseg R_XSEG
0000            535   ;--------------------------------------------------------
0000            536   ; absolute external ram data
0000            537   ;--------------------------------------------------------
FFBF            538            XSEG
FFBF            539   ;--------------------------------------------------------
FFBF            540   ; external initialized ram data
FFBF            541   ;--------------------------------------------------------
0000            542            rseg R_IXSEG
0000            543            rseg R_HOME
0000            544            rseg R_GSINIT
0000            545            rseg R_CSEG
0000            546   ;--------------------------------------------------------
0000            547   ; Reset entry point and interrupt vectors
0000            548   ;--------------------------------------------------------
0000            549            CSEG at 0x0000
0000 020100     550            ljmp    _crt0
000B            551            CSEG at 0x000b
000B 020100     552            ljmp    _Timer0ISR
000E            553   ;--------------------------------------------------------
000E            554   ; global & static initialisations
000E            555   ;--------------------------------------------------------
0000            556            rseg R_HOME
0000            557            rseg R_GSINIT
0000            558            rseg R_GSINIT
0000            559   ;--------------------------------------------------------
0000            560   ; data variables initialization
0000            561   ;--------------------------------------------------------
0000            562            rseg R_DINIT
0000            563   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:34: volatile int msCount=0; // Volatiles can be changed by stuff outside our program, like memory registers
0000 E4         564            clr     a
0001 F5A0       565            mov     _msCount,a
0003 F5A1       566            mov     (_msCount + 1),a
0005            567   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:35: volatile unsigned char secs=0, mins=0; // They are like global variables, kinda 
0005 756000     568            mov     _secs,#0x00
0008            569   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:35: volatile bit time_update_flag=0;
0008 752000     570            mov     _mins,#0x00
000B            571   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:36: volatile unsigned char pwmcount;
000B C2D0       572            clr     _time_update_flag
000D            573            ; The linker places a 'ret' at the end of segment R_DINIT.
000D            574   ;--------------------------------------------------------
000D            575   ; code
000D            576   ;--------------------------------------------------------
0000            577            rseg R_CSEG
0000            578   ;------------------------------------------------------------
0000            579   ;Allocation info for local variables in function 'InitPorts'
0000            580   ;------------------------------------------------------------
0000            581   ;------------------------------------------------------------
0000            582   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:41: void InitPorts(void)
0000            583   ;        -----------------------------------------
0000            584   ;         function InitPorts
0000            585   ;        -----------------------------------------
0000            586   _InitPorts:
0000            587            using   0
0000            588   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:43: P0M1=0x1E;
0000 75841E     589            mov     _P0M1,#0x1E
0003            590   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:44: P0M2=0x00;
0003 758500     591            mov     _P0M2,#0x00
0006            592   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:45: P1M1=0;
0006 759100     593            mov     _P1M1,#0x00
0009            594   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:46: P1M2=0;
0009 759200     595            mov     _P1M2,#0x00
000C            596   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:47: P2M1=0;
000C 75A400     597            mov     _P2M1,#0x00
000F            598   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:48: P2M2=0;
000F 75A500     599            mov     _P2M2,#0x00
0012            600   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:49: P3M1=0;
0012 75B100     601            mov     _P3M1,#0x00
0015            602   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:50: P3M2=0;
0015 75B200     603            mov     _P3M2,#0x00
0018 22         604            ret
0019            605   ;------------------------------------------------------------
0019            606   ;Allocation info for local variables in function 'Wait50us'
0019            607   ;------------------------------------------------------------
0019            608   ;------------------------------------------------------------
0019            609   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:53: void Wait50us (void)
0019            610   ;        -----------------------------------------
0019            611   ;         function Wait50us
0019            612   ;        -----------------------------------------
0019            613   _Wait50us:
0019            614   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:58: _endasm;
0019            615            
0019 7852       616                mov R0, #82
001B            617            L0:
001B D870       618            djnz R0, L0 ; 2 machine cycles-> 2*0.27126us*92=50us
001D            619                
001D 22         620            ret
001E            621   ;------------------------------------------------------------
001E            622   ;Allocation info for local variables in function 'waitms'
001E            623   ;------------------------------------------------------------
001E            624   ;ms                        Allocated to registers r2 r3 
001E            625   ;j                         Allocated to registers r4 r5 
001E            626   ;k                         Allocated to registers r6 
001E            627   ;------------------------------------------------------------
001E            628   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:61: void waitms (unsigned int ms)
001E            629   ;        -----------------------------------------
001E            630   ;         function waitms
001E            631   ;        -----------------------------------------
001E            632   _waitms:
001E AA82       633            mov     r2,dpl
0020 AB83       634            mov     r3,dph
0022            635   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:67: for(j=0; j<ms; j++)
0022 7C00       636            mov     r4,#0x00
0024 7D00       637            mov     r5,#0x00
0026            638   L004004?:
0026 C3         639            clr     c
0027 EC         640            mov     a,r4
0028 9A         641            subb    a,r2
0029 ED         642            mov     a,r5
002A 9B         643            subb    a,r3
002B 5001       644            jnc     L004008?
002D            645   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:68: for (k=0; k<20; k++) Wait50us();
002D 7E14       646            mov     r6,#0x14
002F            647   L004003?:
002F C002       648            push    ar2
0031 C003       649            push    ar3
0033 C004       650            push    ar4
0035 C005       651            push    ar5
0037 C006       652            push    ar6
0039 120100     653            lcall   _Wait50us
003C D006       654            pop     ar6
003E D005       655            pop     ar5
0040 D004       656            pop     ar4
0042 D003       657            pop     ar3
0044 D002       658            pop     ar2
0046 DEB0       659            djnz    r6,L004003?
0048            660   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:67: for(j=0; j<ms; j++)
0048 0C         661            inc     r4
0049 BC0030     662            cjne    r4,#0x00,L004004?
004C 0D         663            inc     r5
004D 8001       664            sjmp    L004004?
004F            665   L004008?:
004F 22         666            ret
0050            667   ;------------------------------------------------------------
0050            668   ;Allocation info for local variables in function 'LCD_pulse'
0050            669   ;------------------------------------------------------------
0050            670   ;------------------------------------------------------------
0050            671   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:71: void LCD_pulse (void)
0050            672   ;        -----------------------------------------
0050            673   ;         function LCD_pulse
0050            674   ;        -----------------------------------------
0050            675   _LCD_pulse:
0050            676   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:73: LCD_E=1;
0050 D2A5       677            setb    _P2_5
0052            678   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:74: Wait50us();
0052 120100     679            lcall   _Wait50us
0055            680   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:75: LCD_E=0;
0055 C2A5       681            clr     _P2_5
0057 22         682            ret
0058            683   ;------------------------------------------------------------
0058            684   ;Allocation info for local variables in function 'LCD_byte'
0058            685   ;------------------------------------------------------------
0058            686   ;x                         Allocated to registers 
0058            687   ;------------------------------------------------------------
0058            688   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:78: void LCD_byte (unsigned char x)
0058            689   ;        -----------------------------------------
0058            690   ;         function LCD_byte
0058            691   ;        -----------------------------------------
0058            692   _LCD_byte:
0058 8582E0     693            mov     _ACC,dpl
005B            694   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:82: LCD_D7=ACC_7;
005B A2E7       695            mov     c,_ACC_7
005D 9294       696            mov     _P1_4,c
005F            697   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:83: LCD_D6=ACC_6;
005F A2E6       698            mov     c,_ACC_6
0061 9296       699            mov     _P1_6,c
0063            700   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:84: LCD_D5=ACC_5;
0063 A2E5       701            mov     c,_ACC_5
0065 9297       702            mov     _P1_7,c
0067            703   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:85: LCD_D4=ACC_4;
0067 A2E4       704            mov     c,_ACC_4
0069 92A0       705            mov     _P2_0,c
006B            706   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:86: LCD_D3=ACC_3;
006B A2E3       707            mov     c,_ACC_3
006D 92A1       708            mov     _P2_1,c
006F            709   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:87: LCD_D2=ACC_2;
006F A2E2       710            mov     c,_ACC_2
0071 92A2       711            mov     _P2_2,c
0073            712   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:88: LCD_D1=ACC_1;
0073 A2E1       713            mov     c,_ACC_1
0075 92A3       714            mov     _P2_3,c
0077            715   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:89: LCD_D0=ACC_0;
0077 A2E0       716            mov     c,_ACC_0
0079 92A4       717            mov     _P2_4,c
007B            718   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:90: LCD_pulse();
007B 020100     719            ljmp    _LCD_pulse
007E            720   ;------------------------------------------------------------
007E            721   ;Allocation info for local variables in function 'WriteData'
007E            722   ;------------------------------------------------------------
007E            723   ;x                         Allocated to registers r2 
007E            724   ;------------------------------------------------------------
007E            725   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:93: void WriteData (unsigned char x)
007E            726   ;        -----------------------------------------
007E            727   ;         function WriteData
007E            728   ;        -----------------------------------------
007E            729   _WriteData:
007E AA82       730            mov     r2,dpl
0080            731   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:95: LCD_RS=1;
0080 D2A7       732            setb    _P2_7
0082            733   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:96: LCD_byte(x);
0082 8A82       734            mov     dpl,r2
0084 120100     735            lcall   _LCD_byte
0087            736   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:97: waitms(2);
0087 900002     737            mov     dptr,#0x0002
008A 020100     738            ljmp    _waitms
008D            739   ;------------------------------------------------------------
008D            740   ;Allocation info for local variables in function 'WriteCommand'
008D            741   ;------------------------------------------------------------
008D            742   ;x                         Allocated to registers r2 
008D            743   ;------------------------------------------------------------
008D            744   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:100: void WriteCommand (unsigned char x)
008D            745   ;        -----------------------------------------
008D            746   ;         function WriteCommand
008D            747   ;        -----------------------------------------
008D            748   _WriteCommand:
008D AA82       749            mov     r2,dpl
008F            750   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:102: LCD_RS=0;
008F C2A7       751            clr     _P2_7
0091            752   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:103: LCD_byte(x);
0091 8A82       753            mov     dpl,r2
0093 120100     754            lcall   _LCD_byte
0096            755   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:104: waitms(5);
0096 900005     756            mov     dptr,#0x0005
0099 020100     757            ljmp    _waitms
009C            758   ;------------------------------------------------------------
009C            759   ;Allocation info for local variables in function 'LCD_8BIT'
009C            760   ;------------------------------------------------------------
009C            761   ;------------------------------------------------------------
009C            762   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:107: void LCD_8BIT (void)
009C            763   ;        -----------------------------------------
009C            764   ;         function LCD_8BIT
009C            765   ;        -----------------------------------------
009C            766   _LCD_8BIT:
009C            767   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:109: LCD_E=0;  // Resting state of LCD's enable is zero
009C C2A5       768            clr     _P2_5
009E            769   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:110: LCD_RW=0; // We are only writing to the LCD in this program
009E C2A6       770            clr     _P2_6
00A0            771   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:111: waitms(20);
00A0 900014     772            mov     dptr,#0x0014
00A3 120100     773            lcall   _waitms
00A6            774   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:113: WriteCommand(0x33);
00A6 758233     775            mov     dpl,#0x33
00A9 120100     776            lcall   _WriteCommand
00AC            777   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:114: WriteCommand(0x33);
00AC 758233     778            mov     dpl,#0x33
00AF 120100     779            lcall   _WriteCommand
00B2            780   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:115: WriteCommand(0x33); // Stay in 8-bit mode
00B2 758233     781            mov     dpl,#0x33
00B5 120100     782            lcall   _WriteCommand
00B8            783   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:118: WriteCommand(0x38);
00B8 758238     784            mov     dpl,#0x38
00BB 120100     785            lcall   _WriteCommand
00BE            786   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:119: WriteCommand(0x0c);
00BE 75820C     787            mov     dpl,#0x0C
00C1 120100     788            lcall   _WriteCommand
00C4            789   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:120: WriteCommand(0x01); // Clear screen command (takes some time)
00C4 758201     790            mov     dpl,#0x01
00C7 120100     791            lcall   _WriteCommand
00CA            792   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:121: waitms(20); // Wait for clear screen command to finsih.
00CA 900014     793            mov     dptr,#0x0014
00CD 020100     794            ljmp    _waitms
00D0            795   ;------------------------------------------------------------
00D0            796   ;Allocation info for local variables in function 'LCDprint'
00D0            797   ;------------------------------------------------------------
00D0            798   ;line                      Allocated with name '_LCDprint_PARM_2'
00D0            799   ;string                    Allocated to registers r2 r3 r4 
00D0            800   ;j                         Allocated to registers r5 
00D0            801   ;------------------------------------------------------------
00D0            802   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:124: void LCDprint(char * string, unsigned char line, bit clear)
00D0            803   ;        -----------------------------------------
00D0            804   ;         function LCDprint
00D0            805   ;        -----------------------------------------
00D0            806   _LCDprint:
00D0 AA82       807            mov     r2,dpl
00D2 AB83       808            mov     r3,dph
00D4 ACF0       809            mov     r4,b
00D6            810   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:128: WriteCommand(line==2?0xc0:0x80);
00D6 7402       811            mov     a,#0x02
00D8 B52030     812            cjne    a,_LCDprint_PARM_2,L010013?
00DB 7DC0       813            mov     r5,#0xC0
00DD 8001       814            sjmp    L010014?
00DF            815   L010013?:
00DF 7D80       816            mov     r5,#0x80
00E1            817   L010014?:
00E1 8D82       818            mov     dpl,r5
00E3 C002       819            push    ar2
00E5 C003       820            push    ar3
00E7 C004       821            push    ar4
00E9 120100     822            lcall   _WriteCommand
00EC            823   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:129: waitms(5);
00EC 900005     824            mov     dptr,#0x0005
00EF 120100     825            lcall   _waitms
00F2 D004       826            pop     ar4
00F4 D003       827            pop     ar3
00F6 D002       828            pop     ar2
00F8            829   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:130: for(j=0; string[j]!=0; j++)       WriteData(string[j]);// Write the message
00F8 7D00       830            mov     r5,#0x00
00FA            831   L010003?:
00FA ED         832            mov     a,r5
00FB 2A         833            add     a,r2
00FC FE         834            mov     r6,a
00FD E4         835            clr     a
00FE 3B         836            addc    a,r3
00FF FF         837            mov     r7,a
0100 8C00       838            mov     ar0,r4
0102 8E82       839            mov     dpl,r6
0104 8F83       840            mov     dph,r7
0106 88F0       841            mov     b,r0
0108 120100     842            lcall   __gptrget
010B FE         843            mov     r6,a
010C 6001       844            jz      L010006?
010E 8E82       845            mov     dpl,r6
0110 C002       846            push    ar2
0112 C003       847            push    ar3
0114 C004       848            push    ar4
0116 C005       849            push    ar5
0118 120100     850            lcall   _WriteData
011B D005       851            pop     ar5
011D D004       852            pop     ar4
011F D003       853            pop     ar3
0121 D002       854            pop     ar2
0123 0D         855            inc     r5
0124 8001       856            sjmp    L010003?
0126            857   L010006?:
0126            858   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:131: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0126 308070     859            jnb     _LCDprint_PARM_3,L010011?
0129 8D02       860            mov     ar2,r5
012B            861   L010007?:
012B BA10F0     862            cjne    r2,#0x10,L010026?
012E            863   L010026?:
012E 5001       864            jnc     L010011?
0130 758220     865            mov     dpl,#0x20
0133 C002       866            push    ar2
0135 120100     867            lcall   _WriteData
0138 D002       868            pop     ar2
013A 0A         869            inc     r2
013B 8001       870            sjmp    L010007?
013D            871   L010011?:
013D 22         872            ret
013E            873   ;------------------------------------------------------------
013E            874   ;Allocation info for local variables in function 'Wait1S'
013E            875   ;------------------------------------------------------------
013E            876   ;------------------------------------------------------------
013E            877   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:134: void Wait1S (void)
013E            878   ;        -----------------------------------------
013E            879   ;         function Wait1S
013E            880   ;        -----------------------------------------
013E            881   _Wait1S:
013E            882   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:143: _endasm;
013E            883            
013E 7A28       884             mov R2, #40
0140            885            L3:
0140 79FA       886            mov R1, #250
0142            887            L2:
0142 78B8       888            mov R0, #184
0144            889            L1:
0144 D8B0       890            djnz R0, L1 ; 2 machine cycles-> 2*0.27126us*184=100us
0146 D970       891                djnz R1, L2 ; 100us*250=0.025s
0148 DA30       892                djnz R2, L3 ; 0.025s*40=1s
014A            893                
014A 22         894            ret
014B            895   ;------------------------------------------------------------
014B            896   ;Allocation info for local variables in function 'InitSerialPort'
014B            897   ;------------------------------------------------------------
014B            898   ;------------------------------------------------------------
014B            899   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:146: void InitSerialPort(void)
014B            900   ;        -----------------------------------------
014B            901   ;         function InitSerialPort
014B            902   ;        -----------------------------------------
014B            903   _InitSerialPort:
014B            904   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:148: BRGCON=0x00; //Make sure the baud rate generator is off
014B 75BD00     905            mov     _BRGCON,#0x00
014E            906   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:149: BRGR1=((XTAL/BAUD)-16)/0x100;
014E 75BF00     907            mov     _BRGR1,#0x00
0151            908   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:150: BRGR0=((XTAL/BAUD)-16)%0x100;
0151 75BE30     909            mov     _BRGR0,#0x30
0154            910   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:151: BRGCON=0x03; //Turn-on the baud rate generator
0154 75BD03     911            mov     _BRGCON,#0x03
0157            912   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:152: SCON=0x52; //Serial port in mode 1, ren, txrdy, rxempty
0157 759852     913            mov     _SCON,#0x52
015A            914   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:153: P1M1=0x00; //Enable pins RxD and Txd
015A 759100     915            mov     _P1M1,#0x00
015D            916   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:154: P1M2=0x00; //Enable pins RxD and Txd
015D 759200     917            mov     _P1M2,#0x00
0160 22         918            ret
0161            919   ;------------------------------------------------------------
0161            920   ;Allocation info for local variables in function 'InitADC'
0161            921   ;------------------------------------------------------------
0161            922   ;------------------------------------------------------------
0161            923   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:157: void InitADC(void)
0161            924   ;        -----------------------------------------
0161            925   ;         function InitADC
0161            926   ;        -----------------------------------------
0161            927   _InitADC:
0161            928   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:161: P0M1 |= (P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0161 43841E     929            orl     _P0M1,#0x1E
0164            930   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:162: P0M2 &= ~(P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0164 5385E1     931            anl     _P0M2,#0xE1
0167            932   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:165: BURST1=1; //Autoscan continuous conversion mode
0167 D2C6       933            setb    _BURST1
0169            934   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:166: ADMODB = CLK0; //ADC1 clock is 7.3728MHz/2
0169 75A120     935            mov     _ADMODB,#0x20
016C            936   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:167: ADINS  = (ADI13|ADI12|ADI11|ADI10); // Select the four channels for conversion
016C 75A3F0     937            mov     _ADINS,#0xF0
016F            938   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:168: ADCON1 = (ENADC1|ADCS10); //Enable the converter and start immediately
016F 759705     939            mov     _ADCON1,#0x05
0172            940   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:169: while((ADCI1&ADCON1)==0); //Wait for first conversion to complete
0172            941   L013001?:
0172 E597       942            mov     a,_ADCON1
0174 30E3F0     943            jnb     acc.3,L013001?
0177 22         944            ret
0178            945   ;------------------------------------------------------------
0178            946   ;Allocation info for local variables in function 'InitTimer0'
0178            947   ;------------------------------------------------------------
0178            948   ;------------------------------------------------------------
0178            949   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:172: void InitTimer0 (void)
0178            950   ;        -----------------------------------------
0178            951   ;         function InitTimer0
0178            952   ;        -----------------------------------------
0178            953   _InitTimer0:
0178            954   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:176: TR0=0; // Stop timer 0
0178 C28C       955            clr     _TR0
017A            956   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:177: TMOD=(TMOD&0xf0)|0x01; // 16-bit timer
017A 74F0       957            mov     a,#0xF0
017C 5589       958            anl     a,_TMOD
017E 4401       959            orl     a,#0x01
0180 F589       960            mov     _TMOD,a
0182            961   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:178: TH0=TIMER0_RELOAD_VALUE/0x100; // I think the RHS is 0001 0000 0000, are we dividing?
0182 758CFE     962            mov     _TH0,#0xFE
0185            963   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:179: TL0=TIMER0_RELOAD_VALUE%0x100; // % means modulo, apparently? ...are we modulo-ing?
0185 758A90     964            mov     _TL0,#0x90
0188            965   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:180: TR0=1; // Start timer 0 (bit 4 in TCON)
0188 D28C       966            setb    _TR0
018A            967   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:181: ET0=1; // Enable timer 0 interrupt - the interrupt controller IEN0 is bit-adressable, so we change only the bit we need
018A D2A9       968            setb    _ET0
018C            969   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:182: EA=1;  // Enable global interrupts
018C D2AF       970            setb    _EA
018E 22         971            ret
018F            972   ;------------------------------------------------------------
018F            973   ;Allocation info for local variables in function 'Timer0ISR'
018F            974   ;------------------------------------------------------------
018F            975   ;------------------------------------------------------------
018F            976   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:186: void Timer0ISR (void) interrupt 1
018F            977   ;        -----------------------------------------
018F            978   ;         function Timer0ISR
018F            979   ;        -----------------------------------------
018F            980   _Timer0ISR:
018F C0E0       981            push    acc
0191 C0D0       982            push    psw
0193 75D000     983            mov     psw,#0x00
0196            984   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:189: TR0=0; // Stop timer 0
0196 C28C       985            clr     _TR0
0198            986   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:190: TH0=TIMER0_RELOAD_VALUE/0x100;
0198 758CFE     987            mov     _TH0,#0xFE
019B            988   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:191: TL0=TIMER0_RELOAD_VALUE%0x100;
019B 758A90     989            mov     _TL0,#0x90
019E            990   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:192: TR0=1; // Start timer 0
019E D28C       991            setb    _TR0
01A0            992   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:194: if(++pwmcount>99) pwmcount=0;
01A0 05E0       993            inc     _pwmcount
01A2 E5E0       994            mov     a,_pwmcount
01A4 249C       995            add     a,#0xff - 0x63
01A6 5001       996            jnc     L015002?
01A8 75E000     997            mov     _pwmcount,#0x00
01AB            998   L015002?:
01AB            999   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:195: P0_5=(pwm_left>pwmcount)?1:0;
01AB C3        1000            clr     c
01AC E5E0      1001            mov     a,_pwmcount
01AE 95A0      1002            subb    a,_pwm_left
01B0 9285      1003            mov     _P0_5,c
01B2           1004   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:196: P0_6=(pwm_right>pwmcount)?1:0;
01B2 C3        1005            clr     c
01B3 E5E0      1006            mov     a,_pwmcount
01B5 9560      1007            subb    a,_pwm_right
01B7 9286      1008            mov     _P0_6,c
01B9           1009   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:198: msCount++;
01B9 7401      1010            mov     a,#0x01
01BB 25A0      1011            add     a,_msCount
01BD F5A0      1012            mov     _msCount,a
01BF E4        1013            clr     a
01C0 35A1      1014            addc    a,(_msCount + 1)
01C2 F5A1      1015            mov     (_msCount + 1),a
01C4           1016   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:199: if(msCount==10000)
01C4 7410      1017            mov     a,#0x10
01C6 B5A0F0    1018            cjne    a,_msCount,L015009?
01C9 7427      1019            mov     a,#0x27
01CB B5A1F0    1020            cjne    a,(_msCount + 1),L015009?
01CE           1021   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:201: time_update_flag=1;
01CE D2D0      1022            setb    _time_update_flag
01D0           1023   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:202: msCount=0;
01D0 E4        1024            clr     a
01D1 F5A0      1025            mov     _msCount,a
01D3 F5A1      1026            mov     (_msCount + 1),a
01D5           1027   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:203: secs++;
01D5 0560      1028            inc     _secs
01D7           1029   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:204: if(secs==60)
01D7 743C      1030            mov     a,#0x3C
01D9 B560F0    1031            cjne    a,_secs,L015009?
01DC           1032   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:206: secs=0;
01DC 756000    1033            mov     _secs,#0x00
01DF           1034   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:207: mins++;
01DF 0520      1035            inc     _mins
01E1           1036   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:208: if(mins==60)
01E1 743C      1037            mov     a,#0x3C
01E3 B520F0    1038            cjne    a,_mins,L015009?
01E6           1039   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:210: mins=0;
01E6 752000    1040            mov     _mins,#0x00
01E9           1041   L015009?:
01E9 D0D0      1042            pop     psw
01EB D0E0      1043            pop     acc
01ED 32        1044            reti
01EE           1045   ;        eliminated unneeded push/pop dpl
01EE           1046   ;        eliminated unneeded push/pop dph
01EE           1047   ;        eliminated unneeded push/pop b
01EE           1048   ;------------------------------------------------------------
01EE           1049   ;Allocation info for local variables in function 'display_LCD'
01EE           1050   ;------------------------------------------------------------
01EE           1051   ;buff                      Allocated with name '_display_LCD_buff_1_93'
01EE           1052   ;------------------------------------------------------------
01EE           1053   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:217: void display_LCD(void){
01EE           1054   ;        -----------------------------------------
01EE           1055   ;         function display_LCD
01EE           1056   ;        -----------------------------------------
01EE           1057   _display_LCD:
01EE           1058   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:220: sprintf (buff, "V0: %4.2fV", (AD1DAT0*3.3)/255.0); // Prints 4 digits with 2 decimals, appended by V
01EE 85D582    1059            mov     dpl,_AD1DAT0
01F1 120100    1060            lcall   ___uchar2fs
01F4 AA82      1061            mov     r2,dpl
01F6 AB83      1062            mov     r3,dph
01F8 ACF0      1063            mov     r4,b
01FA FD        1064            mov     r5,a
01FB C002      1065            push    ar2
01FD C003      1066            push    ar3
01FF C004      1067            push    ar4
0201 C005      1068            push    ar5
0203 903333    1069            mov     dptr,#0x3333
0206 75F053    1070            mov     b,#0x53
0209 7440      1071            mov     a,#0x40
020B 120100    1072            lcall   ___fsmul
020E AA82      1073            mov     r2,dpl
0210 AB83      1074            mov     r3,dph
0212 ACF0      1075            mov     r4,b
0214 FD        1076            mov     r5,a
0215 E581      1077            mov     a,sp
0217 24FC      1078            add     a,#0xfc
0219 F581      1079            mov     sp,a
021B E4        1080            clr     a
021C C0E0      1081            push    acc
021E C0E0      1082            push    acc
0220 747F      1083            mov     a,#0x7F
0222 C0E0      1084            push    acc
0224 7443      1085            mov     a,#0x43
0226 C0E0      1086            push    acc
0228 8A82      1087            mov     dpl,r2
022A 8B83      1088            mov     dph,r3
022C 8CF0      1089            mov     b,r4
022E ED        1090            mov     a,r5
022F 120100    1091            lcall   ___fsdiv
0232 AA82      1092            mov     r2,dpl
0234 AB83      1093            mov     r3,dph
0236 ACF0      1094            mov     r4,b
0238 FD        1095            mov     r5,a
0239 E581      1096            mov     a,sp
023B 24FC      1097            add     a,#0xfc
023D F581      1098            mov     sp,a
023F C002      1099            push    ar2
0241 C003      1100            push    ar3
0243 C004      1101            push    ar4
0245 C005      1102            push    ar5
0247 7430      1103            mov     a,#__str_0
0249 C0E0      1104            push    acc
024B 74B0      1105            mov     a,#(__str_0 >> 8)
024D C0E0      1106            push    acc
024F 7480      1107            mov     a,#0x80
0251 C0E0      1108            push    acc
0253 74A0      1109            mov     a,#_display_LCD_buff_1_93
0255 C0E0      1110            push    acc
0257 74A3      1111            mov     a,#(_display_LCD_buff_1_93 >> 8)
0259 C0E0      1112            push    acc
025B 7440      1113            mov     a,#0x40
025D C0E0      1114            push    acc
025F 120100    1115            lcall   _sprintf
0262 E581      1116            mov     a,sp
0264 24F6      1117            add     a,#0xf6
0266 F581      1118            mov     sp,a
0268           1119   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:221: LCDprint(buff, 1, 1);
0268 752001    1120            mov     _LCDprint_PARM_2,#0x01
026B D280      1121            setb    _LCDprint_PARM_3
026D 90A3A0    1122            mov     dptr,#_display_LCD_buff_1_93
0270 75F040    1123            mov     b,#0x40
0273 120100    1124            lcall   _LCDprint
0276           1125   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:223: sprintf (buff, "V1: %4.2fV", (AD1DAT1*3.3)/255.0);
0276 85D682    1126            mov     dpl,_AD1DAT1
0279 120100    1127            lcall   ___uchar2fs
027C AA82      1128            mov     r2,dpl
027E AB83      1129            mov     r3,dph
0280 ACF0      1130            mov     r4,b
0282 FD        1131            mov     r5,a
0283 C002      1132            push    ar2
0285 C003      1133            push    ar3
0287 C004      1134            push    ar4
0289 C005      1135            push    ar5
028B 903333    1136            mov     dptr,#0x3333
028E 75F053    1137            mov     b,#0x53
0291 7440      1138            mov     a,#0x40
0293 120100    1139            lcall   ___fsmul
0296 AA82      1140            mov     r2,dpl
0298 AB83      1141            mov     r3,dph
029A ACF0      1142            mov     r4,b
029C FD        1143            mov     r5,a
029D E581      1144            mov     a,sp
029F 24FC      1145            add     a,#0xfc
02A1 F581      1146            mov     sp,a
02A3 E4        1147            clr     a
02A4 C0E0      1148            push    acc
02A6 C0E0      1149            push    acc
02A8 747F      1150            mov     a,#0x7F
02AA C0E0      1151            push    acc
02AC 7443      1152            mov     a,#0x43
02AE C0E0      1153            push    acc
02B0 8A82      1154            mov     dpl,r2
02B2 8B83      1155            mov     dph,r3
02B4 8CF0      1156            mov     b,r4
02B6 ED        1157            mov     a,r5
02B7 120100    1158            lcall   ___fsdiv
02BA AA82      1159            mov     r2,dpl
02BC AB83      1160            mov     r3,dph
02BE ACF0      1161            mov     r4,b
02C0 FD        1162            mov     r5,a
02C1 E581      1163            mov     a,sp
02C3 24FC      1164            add     a,#0xfc
02C5 F581      1165            mov     sp,a
02C7 C002      1166            push    ar2
02C9 C003      1167            push    ar3
02CB C004      1168            push    ar4
02CD C005      1169            push    ar5
02CF 74B0      1170            mov     a,#__str_1
02D1 C0E0      1171            push    acc
02D3 74B0      1172            mov     a,#(__str_1 >> 8)
02D5 C0E0      1173            push    acc
02D7 7480      1174            mov     a,#0x80
02D9 C0E0      1175            push    acc
02DB 74A0      1176            mov     a,#_display_LCD_buff_1_93
02DD C0E0      1177            push    acc
02DF 74A3      1178            mov     a,#(_display_LCD_buff_1_93 >> 8)
02E1 C0E0      1179            push    acc
02E3 7440      1180            mov     a,#0x40
02E5 C0E0      1181            push    acc
02E7 120100    1182            lcall   _sprintf
02EA E581      1183            mov     a,sp
02EC 24F6      1184            add     a,#0xf6
02EE F581      1185            mov     sp,a
02F0           1186   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:224: LCDprint(buff, 2, 1);
02F0 752002    1187            mov     _LCDprint_PARM_2,#0x02
02F3 D280      1188            setb    _LCDprint_PARM_3
02F5 90A3A0    1189            mov     dptr,#_display_LCD_buff_1_93
02F8 75F040    1190            mov     b,#0x40
02FB 020100    1191            ljmp    _LCDprint
02FE           1192   ;------------------------------------------------------------
02FE           1193   ;Allocation info for local variables in function 'motor_control'
02FE           1194   ;------------------------------------------------------------
02FE           1195   ;------------------------------------------------------------
02FE           1196   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:229: void motor_control(void){
02FE           1197   ;        -----------------------------------------
02FE           1198   ;         function motor_control
02FE           1199   ;        -----------------------------------------
02FE           1200   _motor_control:
02FE           1201   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:230: }
02FE 22        1202            ret
02FF           1203   ;------------------------------------------------------------
02FF           1204   ;Allocation info for local variables in function 'main'
02FF           1205   ;------------------------------------------------------------
02FF           1206   ;str                       Allocated with name '_main_str_1_97'
02FF           1207   ;threshold                 Allocated to registers 
02FF           1208   ;p                         Allocated to registers 
02FF           1209   ;d                         Allocated to registers r6 r7 r0 r1 
02FF           1210   ;k_p                       Allocated to registers 
02FF           1211   ;k_d                       Allocated to registers 
02FF           1212   ;cor                       Allocated with name '_main_cor_1_97'
02FF           1213   ;cur_error                 Allocated to registers r2 r3 r4 r5 
02FF           1214   ;pre_error                 Allocated with name '_main_pre_error_1_97'
02FF           1215   ;dt                        Allocated to registers 
02FF           1216   ;def_speed                 Allocated to registers 
02FF           1217   ;new_speed_low             Allocated with name '_main_new_speed_low_1_97'
02FF           1218   ;new_speed_high            Allocated with name '_main_new_speed_high_1_97'
02FF           1219   ;counter                   Allocated with name '_main_counter_1_97'
02FF           1220   ;thresh                    Allocated to registers 
02FF           1221   ;left                      Allocated with name '_main_left_2_98'
02FF           1222   ;right                     Allocated with name '_main_right_2_98'
02FF           1223   ;voltage                   Allocated to registers r6 r7 r0 r1 
02FF           1224   ;------------------------------------------------------------
02FF           1225   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:233: void main (void)
02FF           1226   ;        -----------------------------------------
02FF           1227   ;         function main
02FF           1228   ;        -----------------------------------------
02FF           1229   _main:
02FF           1230   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:244: double cur_error =0;
02FF 7A00      1231            mov     r2,#0x00
0301 7B00      1232            mov     r3,#0x00
0303 7C00      1233            mov     r4,#0x00
0305 7D00      1234            mov     r5,#0x00
0307           1235   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:250: double counter = 0;
0307 756000    1236            mov     _main_counter_1_97,#0x00
030A 756100    1237            mov     (_main_counter_1_97 + 1),#0x00
030D 756200    1238            mov     (_main_counter_1_97 + 2),#0x00
0310 756300    1239            mov     (_main_counter_1_97 + 3),#0x00
0313           1240   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:253: InitPorts();
0313 C002      1241            push    ar2
0315 C003      1242            push    ar3
0317 C004      1243            push    ar4
0319 C005      1244            push    ar5
031B 120100    1245            lcall   _InitPorts
031E           1246   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:254: LCD_8BIT();
031E 120100    1247            lcall   _LCD_8BIT
0321           1248   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:255: InitSerialPort();
0321 120100    1249            lcall   _InitSerialPort
0324           1250   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:256: InitADC();
0324 120100    1251            lcall   _InitADC
0327           1252   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:257: InitTimer0();
0327 120100    1253            lcall   _InitTimer0
032A D005      1254            pop     ar5
032C D004      1255            pop     ar4
032E D003      1256            pop     ar3
0330 D002      1257            pop     ar2
0332           1258   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:259: pre_error = 0;
0332 757000    1259            mov     _main_pre_error_1_97,#0x00
0335 757100    1260            mov     (_main_pre_error_1_97 + 1),#0x00
0338 757200    1261            mov     (_main_pre_error_1_97 + 2),#0x00
033B 757300    1262            mov     (_main_pre_error_1_97 + 3),#0x00
033E           1263   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:260: while(1)
033E           1264   L018037?:
033E           1265   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:263: double left = (AD1DAT1/255.0)*3.3;
033E 85D682    1266            mov     dpl,_AD1DAT1
0341 C002      1267            push    ar2
0343 C003      1268            push    ar3
0345 C004      1269            push    ar4
0347 C005      1270            push    ar5
0349 120100    1271            lcall   ___uchar2fs
034C AE82      1272            mov     r6,dpl
034E AF83      1273            mov     r7,dph
0350 A8F0      1274            mov     r0,b
0352 F9        1275            mov     r1,a
0353 E4        1276            clr     a
0354 C0E0      1277            push    acc
0356 C0E0      1278            push    acc
0358 747F      1279            mov     a,#0x7F
035A C0E0      1280            push    acc
035C 7443      1281            mov     a,#0x43
035E C0E0      1282            push    acc
0360 8E82      1283            mov     dpl,r6
0362 8F83      1284            mov     dph,r7
0364 88F0      1285            mov     b,r0
0366 E9        1286            mov     a,r1
0367 120100    1287            lcall   ___fsdiv
036A AE82      1288            mov     r6,dpl
036C AF83      1289            mov     r7,dph
036E A8F0      1290            mov     r0,b
0370 F9        1291            mov     r1,a
0371 E581      1292            mov     a,sp
0373 24FC      1293            add     a,#0xfc
0375 F581      1294            mov     sp,a
0377 C006      1295            push    ar6
0379 C007      1296            push    ar7
037B C000      1297            push    ar0
037D C001      1298            push    ar1
037F 903333    1299            mov     dptr,#0x3333
0382 75F053    1300            mov     b,#0x53
0385 7440      1301            mov     a,#0x40
0387 120100    1302            lcall   ___fsmul
038A 8582A0    1303            mov     _main_left_2_98,dpl
038D 8583A1    1304            mov     (_main_left_2_98 + 1),dph
0390 85F0A2    1305            mov     (_main_left_2_98 + 2),b
0393 F5A3      1306            mov     (_main_left_2_98 + 3),a
0395 E581      1307            mov     a,sp
0397 24FC      1308            add     a,#0xfc
0399 F581      1309            mov     sp,a
039B           1310   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:264: double right = (AD1DAT2/255.0)*3.3;
039B 85D782    1311            mov     dpl,_AD1DAT2
039E 120100    1312            lcall   ___uchar2fs
03A1 AE82      1313            mov     r6,dpl
03A3 AF83      1314            mov     r7,dph
03A5 A8F0      1315            mov     r0,b
03A7 F9        1316            mov     r1,a
03A8 E4        1317            clr     a
03A9 C0E0      1318            push    acc
03AB C0E0      1319            push    acc
03AD 747F      1320            mov     a,#0x7F
03AF C0E0      1321            push    acc
03B1 7443      1322            mov     a,#0x43
03B3 C0E0      1323            push    acc
03B5 8E82      1324            mov     dpl,r6
03B7 8F83      1325            mov     dph,r7
03B9 88F0      1326            mov     b,r0
03BB E9        1327            mov     a,r1
03BC 120100    1328            lcall   ___fsdiv
03BF AE82      1329            mov     r6,dpl
03C1 AF83      1330            mov     r7,dph
03C3 A8F0      1331            mov     r0,b
03C5 F9        1332            mov     r1,a
03C6 E581      1333            mov     a,sp
03C8 24FC      1334            add     a,#0xfc
03CA F581      1335            mov     sp,a
03CC C006      1336            push    ar6
03CE C007      1337            push    ar7
03D0 C000      1338            push    ar0
03D2 C001      1339            push    ar1
03D4 903333    1340            mov     dptr,#0x3333
03D7 75F053    1341            mov     b,#0x53
03DA 7440      1342            mov     a,#0x40
03DC 120100    1343            lcall   ___fsmul
03DF 8582F0    1344            mov     _main_right_2_98,dpl
03E2 8583F1    1345            mov     (_main_right_2_98 + 1),dph
03E5 85F0F2    1346            mov     (_main_right_2_98 + 2),b
03E8 F5F3      1347            mov     (_main_right_2_98 + 3),a
03EA E581      1348            mov     a,sp
03EC 24FC      1349            add     a,#0xfc
03EE F581      1350            mov     sp,a
03F0           1351   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:265: double voltage = (AD1DAT0/255.0)*3.3;
03F0 85D582    1352            mov     dpl,_AD1DAT0
03F3 120100    1353            lcall   ___uchar2fs
03F6 AE82      1354            mov     r6,dpl
03F8 AF83      1355            mov     r7,dph
03FA A8F0      1356            mov     r0,b
03FC F9        1357            mov     r1,a
03FD E4        1358            clr     a
03FE C0E0      1359            push    acc
0400 C0E0      1360            push    acc
0402 747F      1361            mov     a,#0x7F
0404 C0E0      1362            push    acc
0406 7443      1363            mov     a,#0x43
0408 C0E0      1364            push    acc
040A 8E82      1365            mov     dpl,r6
040C 8F83      1366            mov     dph,r7
040E 88F0      1367            mov     b,r0
0410 E9        1368            mov     a,r1
0411 120100    1369            lcall   ___fsdiv
0414 AE82      1370            mov     r6,dpl
0416 AF83      1371            mov     r7,dph
0418 A8F0      1372            mov     r0,b
041A F9        1373            mov     r1,a
041B E581      1374            mov     a,sp
041D 24FC      1375            add     a,#0xfc
041F F581      1376            mov     sp,a
0421 C006      1377            push    ar6
0423 C007      1378            push    ar7
0425 C000      1379            push    ar0
0427 C001      1380            push    ar1
0429 903333    1381            mov     dptr,#0x3333
042C 75F053    1382            mov     b,#0x53
042F 7440      1383            mov     a,#0x40
0431 120100    1384            lcall   ___fsmul
0434 AE82      1385            mov     r6,dpl
0436 AF83      1386            mov     r7,dph
0438 A8F0      1387            mov     r0,b
043A F9        1388            mov     r1,a
043B E581      1389            mov     a,sp
043D 24FC      1390            add     a,#0xfc
043F F581      1391            mov     sp,a
0441 D005      1392            pop     ar5
0443 D004      1393            pop     ar4
0445 D003      1394            pop     ar3
0447 D002      1395            pop     ar2
0449           1396   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:268: if(time_update_flag==1) // If the clock has been updated, refresh the display
0449           1397   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:270: time_update_flag=0;
0449 10D030    1398            jbc     _time_update_flag,L018060?
044C 020100    1399            ljmp    L018002?
044F           1400   L018060?:
044F           1401   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:271: sprintf(str, "V=%5.2f", voltage); // Display the voltage at pin P0.1
044F C002      1402            push    ar2
0451 C003      1403            push    ar3
0453 C004      1404            push    ar4
0455 C005      1405            push    ar5
0457 C006      1406            push    ar6
0459 C007      1407            push    ar7
045B C000      1408            push    ar0
045D C001      1409            push    ar1
045F 74B0      1410            mov     a,#__str_2
0461 C0E0      1411            push    acc
0463 74B1      1412            mov     a,#(__str_2 >> 8)
0465 C0E0      1413            push    acc
0467 7480      1414            mov     a,#0x80
0469 C0E0      1415            push    acc
046B 74E0      1416            mov     a,#_main_str_1_97
046D C0E0      1417            push    acc
046F 74A3      1418            mov     a,#(_main_str_1_97 >> 8)
0471 C0E0      1419            push    acc
0473 7440      1420            mov     a,#0x40
0475 C0E0      1421            push    acc
0477 120100    1422            lcall   _sprintf
047A E581      1423            mov     a,sp
047C 24F6      1424            add     a,#0xf6
047E F581      1425            mov     sp,a
0480           1426   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:272: LCDprint(str, 1, 1);
0480 752001    1427            mov     _LCDprint_PARM_2,#0x01
0483 D280      1428            setb    _LCDprint_PARM_3
0485 90A3E0    1429            mov     dptr,#_main_str_1_97
0488 75F040    1430            mov     b,#0x40
048B 120100    1431            lcall   _LCDprint
048E           1432   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:273: sprintf(str, "%02d:%02d", mins, secs); // Display the clock
048E AE60      1433            mov     r6,_secs
0490 7F00      1434            mov     r7,#0x00
0492 A820      1435            mov     r0,_mins
0494 7900      1436            mov     r1,#0x00
0496 C006      1437            push    ar6
0498 C007      1438            push    ar7
049A C000      1439            push    ar0
049C C001      1440            push    ar1
049E 74F0      1441            mov     a,#__str_3
04A0 C0E0      1442            push    acc
04A2 74B1      1443            mov     a,#(__str_3 >> 8)
04A4 C0E0      1444            push    acc
04A6 7480      1445            mov     a,#0x80
04A8 C0E0      1446            push    acc
04AA 74E0      1447            mov     a,#_main_str_1_97
04AC C0E0      1448            push    acc
04AE 74A3      1449            mov     a,#(_main_str_1_97 >> 8)
04B0 C0E0      1450            push    acc
04B2 7440      1451            mov     a,#0x40
04B4 C0E0      1452            push    acc
04B6 120100    1453            lcall   _sprintf
04B9 E581      1454            mov     a,sp
04BB 24F6      1455            add     a,#0xf6
04BD F581      1456            mov     sp,a
04BF           1457   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:274: LCDprint(str, 2, 1);
04BF 752002    1458            mov     _LCDprint_PARM_2,#0x02
04C2 D280      1459            setb    _LCDprint_PARM_3
04C4 90A3E0    1460            mov     dptr,#_main_str_1_97
04C7 75F040    1461            mov     b,#0x40
04CA 120100    1462            lcall   _LCDprint
04CD D005      1463            pop     ar5
04CF D004      1464            pop     ar4
04D1 D003      1465            pop     ar3
04D3 D002      1466            pop     ar2
04D5           1467   L018002?:
04D5           1468   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:300: if((left>thresh)&&(right>thresh))cur_error = 0;
04D5 C002      1469            push    ar2
04D7 C003      1470            push    ar3
04D9 C004      1471            push    ar4
04DB C005      1472            push    ar5
04DD E4        1473            clr     a
04DE C0E0      1474            push    acc
04E0 C0E0      1475            push    acc
04E2 C0E0      1476            push    acc
04E4 C0E0      1477            push    acc
04E6 85A082    1478            mov     dpl,_main_left_2_98
04E9 85A183    1479            mov     dph,(_main_left_2_98 + 1)
04EC 85A2F0    1480            mov     b,(_main_left_2_98 + 2)
04EF E5A3      1481            mov     a,(_main_left_2_98 + 3)
04F1 120100    1482            lcall   ___fsgt
04F4 AE82      1483            mov     r6,dpl
04F6 E581      1484            mov     a,sp
04F8 24FC      1485            add     a,#0xfc
04FA F581      1486            mov     sp,a
04FC D005      1487            pop     ar5
04FE D004      1488            pop     ar4
0500 D003      1489            pop     ar3
0502 D002      1490            pop     ar2
0504 EE        1491            mov     a,r6
0505 6001      1492            jz      L018004?
0507 C002      1493            push    ar2
0509 C003      1494            push    ar3
050B C004      1495            push    ar4
050D C005      1496            push    ar5
050F C006      1497            push    ar6
0511 E4        1498            clr     a
0512 C0E0      1499            push    acc
0514 C0E0      1500            push    acc
0516 C0E0      1501            push    acc
0518 C0E0      1502            push    acc
051A 85F082    1503            mov     dpl,_main_right_2_98
051D 85F183    1504            mov     dph,(_main_right_2_98 + 1)
0520 85F2F0    1505            mov     b,(_main_right_2_98 + 2)
0523 E5F3      1506            mov     a,(_main_right_2_98 + 3)
0525 120100    1507            lcall   ___fsgt
0528 AF82      1508            mov     r7,dpl
052A E581      1509            mov     a,sp
052C 24FC      1510            add     a,#0xfc
052E F581      1511            mov     sp,a
0530 D006      1512            pop     ar6
0532 D005      1513            pop     ar5
0534 D004      1514            pop     ar4
0536 D003      1515            pop     ar3
0538 D002      1516            pop     ar2
053A EF        1517            mov     a,r7
053B 6001      1518            jz      L018004?
053D 7A00      1519            mov     r2,#0x00
053F 7B00      1520            mov     r3,#0x00
0541 7C00      1521            mov     r4,#0x00
0543 7D00      1522            mov     r5,#0x00
0545           1523   L018004?:
0545           1524   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:301: if((left>thresh)&&(right>thresh))cur_error = -1;
0545 EE        1525            mov     a,r6
0546 6001      1526            jz      L018007?
0548 C002      1527            push    ar2
054A C003      1528            push    ar3
054C C004      1529            push    ar4
054E C005      1530            push    ar5
0550 C006      1531            push    ar6
0552 E4        1532            clr     a
0553 C0E0      1533            push    acc
0555 C0E0      1534            push    acc
0557 C0E0      1535            push    acc
0559 C0E0      1536            push    acc
055B 85F082    1537            mov     dpl,_main_right_2_98
055E 85F183    1538            mov     dph,(_main_right_2_98 + 1)
0561 85F2F0    1539            mov     b,(_main_right_2_98 + 2)
0564 E5F3      1540            mov     a,(_main_right_2_98 + 3)
0566 120100    1541            lcall   ___fsgt
0569 AF82      1542            mov     r7,dpl
056B E581      1543            mov     a,sp
056D 24FC      1544            add     a,#0xfc
056F F581      1545            mov     sp,a
0571 D006      1546            pop     ar6
0573 D005      1547            pop     ar5
0575 D004      1548            pop     ar4
0577 D003      1549            pop     ar3
0579 D002      1550            pop     ar2
057B EF        1551            mov     a,r7
057C 6001      1552            jz      L018007?
057E 7A00      1553            mov     r2,#0x00
0580 7B00      1554            mov     r3,#0x00
0582 7C80      1555            mov     r4,#0x80
0584 7DBF      1556            mov     r5,#0xBF
0586           1557   L018007?:
0586           1558   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:302: if((left>thresh)&&(right>thresh))cur_error = 1;
0586 EE        1559            mov     a,r6
0587 6001      1560            jz      L018010?
0589 C002      1561            push    ar2
058B C003      1562            push    ar3
058D C004      1563            push    ar4
058F C005      1564            push    ar5
0591 E4        1565            clr     a
0592 C0E0      1566            push    acc
0594 C0E0      1567            push    acc
0596 C0E0      1568            push    acc
0598 C0E0      1569            push    acc
059A 85F082    1570            mov     dpl,_main_right_2_98
059D 85F183    1571            mov     dph,(_main_right_2_98 + 1)
05A0 85F2F0    1572            mov     b,(_main_right_2_98 + 2)
05A3 E5F3      1573            mov     a,(_main_right_2_98 + 3)
05A5 120100    1574            lcall   ___fsgt
05A8 AE82      1575            mov     r6,dpl
05AA E581      1576            mov     a,sp
05AC 24FC      1577            add     a,#0xfc
05AE F581      1578            mov     sp,a
05B0 D005      1579            pop     ar5
05B2 D004      1580            pop     ar4
05B4 D003      1581            pop     ar3
05B6 D002      1582            pop     ar2
05B8 EE        1583            mov     a,r6
05B9 6001      1584            jz      L018010?
05BB 7A00      1585            mov     r2,#0x00
05BD 7B00      1586            mov     r3,#0x00
05BF 7C80      1587            mov     r4,#0x80
05C1 7D3F      1588            mov     r5,#0x3F
05C3           1589   L018010?:
05C3           1590   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:303: if((left<thresh)&&(right<thresh)){
05C3 C002      1591            push    ar2
05C5 C003      1592            push    ar3
05C7 C004      1593            push    ar4
05C9 C005      1594            push    ar5
05CB E4        1595            clr     a
05CC C0E0      1596            push    acc
05CE C0E0      1597            push    acc
05D0 C0E0      1598            push    acc
05D2 C0E0      1599            push    acc
05D4 85A082    1600            mov     dpl,_main_left_2_98
05D7 85A183    1601            mov     dph,(_main_left_2_98 + 1)
05DA 85A2F0    1602            mov     b,(_main_left_2_98 + 2)
05DD E5A3      1603            mov     a,(_main_left_2_98 + 3)
05DF 120100    1604            lcall   ___fslt
05E2 AE82      1605            mov     r6,dpl
05E4 E581      1606            mov     a,sp
05E6 24FC      1607            add     a,#0xfc
05E8 F581      1608            mov     sp,a
05EA D005      1609            pop     ar5
05EC D004      1610            pop     ar4
05EE D003      1611            pop     ar3
05F0 D002      1612            pop     ar2
05F2 EE        1613            mov     a,r6
05F3 6001      1614            jz      L018017?
05F5 C002      1615            push    ar2
05F7 C003      1616            push    ar3
05F9 C004      1617            push    ar4
05FB C005      1618            push    ar5
05FD E4        1619            clr     a
05FE C0E0      1620            push    acc
0600 C0E0      1621            push    acc
0602 C0E0      1622            push    acc
0604 C0E0      1623            push    acc
0606 85F082    1624            mov     dpl,_main_right_2_98
0609 85F183    1625            mov     dph,(_main_right_2_98 + 1)
060C 85F2F0    1626            mov     b,(_main_right_2_98 + 2)
060F E5F3      1627            mov     a,(_main_right_2_98 + 3)
0611 120100    1628            lcall   ___fslt
0614 AE82      1629            mov     r6,dpl
0616 E581      1630            mov     a,sp
0618 24FC      1631            add     a,#0xfc
061A F581      1632            mov     sp,a
061C D005      1633            pop     ar5
061E D004      1634            pop     ar4
0620 D003      1635            pop     ar3
0622 D002      1636            pop     ar2
0624 EE        1637            mov     a,r6
0625 6001      1638            jz      L018017?
0627           1639   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:304: if(pre_error>0) cur_error = 5;
0627 C002      1640            push    ar2
0629 C003      1641            push    ar3
062B C004      1642            push    ar4
062D C005      1643            push    ar5
062F E4        1644            clr     a
0630 C0E0      1645            push    acc
0632 C0E0      1646            push    acc
0634 C0E0      1647            push    acc
0636 C0E0      1648            push    acc
0638 857082    1649            mov     dpl,_main_pre_error_1_97
063B 857183    1650            mov     dph,(_main_pre_error_1_97 + 1)
063E 8572F0    1651            mov     b,(_main_pre_error_1_97 + 2)
0641 E573      1652            mov     a,(_main_pre_error_1_97 + 3)
0643 120100    1653            lcall   ___fsgt
0646 AE82      1654            mov     r6,dpl
0648 E581      1655            mov     a,sp
064A 24FC      1656            add     a,#0xfc
064C F581      1657            mov     sp,a
064E D005      1658            pop     ar5
0650 D004      1659            pop     ar4
0652 D003      1660            pop     ar3
0654 D002      1661            pop     ar2
0656 EE        1662            mov     a,r6
0657 6001      1663            jz      L018013?
0659 7A00      1664            mov     r2,#0x00
065B 7B00      1665            mov     r3,#0x00
065D 7CA0      1666            mov     r4,#0xA0
065F 7D40      1667            mov     r5,#0x40
0661           1668   L018013?:
0661           1669   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:305: if(pre_error<=0) cur_error = -5;
0661 EE        1670            mov     a,r6
0662 7001      1671            jnz     L018017?
0664 FA        1672            mov     r2,a
0665 FB        1673            mov     r3,a
0666 7CA0      1674            mov     r4,#0xA0
0668 7DC0      1675            mov     r5,#0xC0
066A           1676   L018017?:
066A           1677   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:310: d = k_d*(cur_error - pre_error)/dt;
066A C002      1678            push    ar2
066C C003      1679            push    ar3
066E C004      1680            push    ar4
0670 C005      1681            push    ar5
0672 C070      1682            push    _main_pre_error_1_97
0674 C071      1683            push    (_main_pre_error_1_97 + 1)
0676 C072      1684            push    (_main_pre_error_1_97 + 2)
0678 C073      1685            push    (_main_pre_error_1_97 + 3)
067A 8A82      1686            mov     dpl,r2
067C 8B83      1687            mov     dph,r3
067E 8CF0      1688            mov     b,r4
0680 ED        1689            mov     a,r5
0681 120100    1690            lcall   ___fssub
0684 AE82      1691            mov     r6,dpl
0686 AF83      1692            mov     r7,dph
0688 A8F0      1693            mov     r0,b
068A F9        1694            mov     r1,a
068B E581      1695            mov     a,sp
068D 24FC      1696            add     a,#0xfc
068F F581      1697            mov     sp,a
0691 746F      1698            mov     a,#0x6F
0693 C0E0      1699            push    acc
0695 7412      1700            mov     a,#0x12
0697 C0E0      1701            push    acc
0699 7483      1702            mov     a,#0x83
069B C0E0      1703            push    acc
069D 743A      1704            mov     a,#0x3A
069F C0E0      1705            push    acc
06A1 8E82      1706            mov     dpl,r6
06A3 8F83      1707            mov     dph,r7
06A5 88F0      1708            mov     b,r0
06A7 E9        1709            mov     a,r1
06A8 120100    1710            lcall   ___fsdiv
06AB AE82      1711            mov     r6,dpl
06AD AF83      1712            mov     r7,dph
06AF A8F0      1713            mov     r0,b
06B1 F9        1714            mov     r1,a
06B2 E581      1715            mov     a,sp
06B4 24FC      1716            add     a,#0xfc
06B6 F581      1717            mov     sp,a
06B8 D005      1718            pop     ar5
06BA D004      1719            pop     ar4
06BC D003      1720            pop     ar3
06BE D002      1721            pop     ar2
06C0           1722   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:312: cor = p + d;
06C0 C002      1723            push    ar2
06C2 C003      1724            push    ar3
06C4 C004      1725            push    ar4
06C6 C005      1726            push    ar5
06C8 C006      1727            push    ar6
06CA C007      1728            push    ar7
06CC C000      1729            push    ar0
06CE C001      1730            push    ar1
06D0 8A82      1731            mov     dpl,r2
06D2 8B83      1732            mov     dph,r3
06D4 8CF0      1733            mov     b,r4
06D6 ED        1734            mov     a,r5
06D7 120100    1735            lcall   ___fsadd
06DA 858220    1736            mov     _main_cor_1_97,dpl
06DD 858321    1737            mov     (_main_cor_1_97 + 1),dph
06E0 85F022    1738            mov     (_main_cor_1_97 + 2),b
06E3 F523      1739            mov     (_main_cor_1_97 + 3),a
06E5 E581      1740            mov     a,sp
06E7 24FC      1741            add     a,#0xfc
06E9 F581      1742            mov     sp,a
06EB           1743   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:315: new_speed_low = def_speed - cor;
06EB C020      1744            push    _main_cor_1_97
06ED C021      1745            push    (_main_cor_1_97 + 1)
06EF C022      1746            push    (_main_cor_1_97 + 2)
06F1 C023      1747            push    (_main_cor_1_97 + 3)
06F3 900000    1748            mov     dptr,#0x0000
06F6 75F0C8    1749            mov     b,#0xC8
06F9 7442      1750            mov     a,#0x42
06FB 120100    1751            lcall   ___fssub
06FE 8582C0    1752            mov     _main_new_speed_low_1_97,dpl
0701 8583C1    1753            mov     (_main_new_speed_low_1_97 + 1),dph
0704 85F0C2    1754            mov     (_main_new_speed_low_1_97 + 2),b
0707 F5C3      1755            mov     (_main_new_speed_low_1_97 + 3),a
0709 E581      1756            mov     a,sp
070B 24FC      1757            add     a,#0xfc
070D F581      1758            mov     sp,a
070F           1759   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:316: new_speed_high = def_speed + cor;
070F C020      1760            push    _main_cor_1_97
0711 C021      1761            push    (_main_cor_1_97 + 1)
0713 C022      1762            push    (_main_cor_1_97 + 2)
0715 C023      1763            push    (_main_cor_1_97 + 3)
0717 900000    1764            mov     dptr,#0x0000
071A 75F0C8    1765            mov     b,#0xC8
071D 7442      1766            mov     a,#0x42
071F 120100    1767            lcall   ___fsadd
0722 858210    1768            mov     _main_new_speed_high_1_97,dpl
0725 858311    1769            mov     (_main_new_speed_high_1_97 + 1),dph
0728 85F012    1770            mov     (_main_new_speed_high_1_97 + 2),b
072B F513      1771            mov     (_main_new_speed_high_1_97 + 3),a
072D E581      1772            mov     a,sp
072F 24FC      1773            add     a,#0xfc
0731 F581      1774            mov     sp,a
0733           1775   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:319: if(new_speed_low<0){
0733 E4        1776            clr     a
0734 C0E0      1777            push    acc
0736 C0E0      1778            push    acc
0738 C0E0      1779            push    acc
073A C0E0      1780            push    acc
073C 85C082    1781            mov     dpl,_main_new_speed_low_1_97
073F 85C183    1782            mov     dph,(_main_new_speed_low_1_97 + 1)
0742 85C2F0    1783            mov     b,(_main_new_speed_low_1_97 + 2)
0745 E5C3      1784            mov     a,(_main_new_speed_low_1_97 + 3)
0747 120100    1785            lcall   ___fslt
074A AE82      1786            mov     r6,dpl
074C E581      1787            mov     a,sp
074E 24FC      1788            add     a,#0xfc
0750 F581      1789            mov     sp,a
0752 D005      1790            pop     ar5
0754 D004      1791            pop     ar4
0756 D003      1792            pop     ar3
0758 D002      1793            pop     ar2
075A EE        1794            mov     a,r6
075B 6001      1795            jz      L018020?
075D           1796   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:320: new_speed_low = 0;
075D 75C000    1797            mov     _main_new_speed_low_1_97,#0x00
0760 75C100    1798            mov     (_main_new_speed_low_1_97 + 1),#0x00
0763 75C200    1799            mov     (_main_new_speed_low_1_97 + 2),#0x00
0766 75C300    1800            mov     (_main_new_speed_low_1_97 + 3),#0x00
0769           1801   L018020?:
0769           1802   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:323: if(new_speed_high>100){
0769 C002      1803            push    ar2
076B C003      1804            push    ar3
076D C004      1805            push    ar4
076F C005      1806            push    ar5
0771 E4        1807            clr     a
0772 C0E0      1808            push    acc
0774 C0E0      1809            push    acc
0776 74C8      1810            mov     a,#0xC8
0778 C0E0      1811            push    acc
077A 7442      1812            mov     a,#0x42
077C C0E0      1813            push    acc
077E 851082    1814            mov     dpl,_main_new_speed_high_1_97
0781 851183    1815            mov     dph,(_main_new_speed_high_1_97 + 1)
0784 8512F0    1816            mov     b,(_main_new_speed_high_1_97 + 2)
0787 E513      1817            mov     a,(_main_new_speed_high_1_97 + 3)
0789 120100    1818            lcall   ___fsgt
078C AE82      1819            mov     r6,dpl
078E E581      1820            mov     a,sp
0790 24FC      1821            add     a,#0xfc
0792 F581      1822            mov     sp,a
0794 D005      1823            pop     ar5
0796 D004      1824            pop     ar4
0798 D003      1825            pop     ar3
079A D002      1826            pop     ar2
079C EE        1827            mov     a,r6
079D 6001      1828            jz      L018022?
079F           1829   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:324: new_speed_high = 100;
079F 751000    1830            mov     _main_new_speed_high_1_97,#0x00
07A2 751100    1831            mov     (_main_new_speed_high_1_97 + 1),#0x00
07A5 7512C8    1832            mov     (_main_new_speed_high_1_97 + 2),#0xC8
07A8 751342    1833            mov     (_main_new_speed_high_1_97 + 3),#0x42
07AB           1834   L018022?:
07AB           1835   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:329: if(cur_error > 0){                
07AB C002      1836            push    ar2
07AD C003      1837            push    ar3
07AF C004      1838            push    ar4
07B1 C005      1839            push    ar5
07B3 E4        1840            clr     a
07B4 C0E0      1841            push    acc
07B6 C0E0      1842            push    acc
07B8 C0E0      1843            push    acc
07BA C0E0      1844            push    acc
07BC 8A82      1845            mov     dpl,r2
07BE 8B83      1846            mov     dph,r3
07C0 8CF0      1847            mov     b,r4
07C2 ED        1848            mov     a,r5
07C3 120100    1849            lcall   ___fsgt
07C6 AE82      1850            mov     r6,dpl
07C8 E581      1851            mov     a,sp
07CA 24FC      1852            add     a,#0xfc
07CC F581      1853            mov     sp,a
07CE D005      1854            pop     ar5
07D0 D004      1855            pop     ar4
07D2 D003      1856            pop     ar3
07D4 D002      1857            pop     ar2
07D6 EE        1858            mov     a,r6
07D7 6001      1859            jz      L018032?
07D9           1860   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:330: pwm_left = new_speed_low;
07D9 85C082    1861            mov     dpl,_main_new_speed_low_1_97
07DC 85C183    1862            mov     dph,(_main_new_speed_low_1_97 + 1)
07DF 85C2F0    1863            mov     b,(_main_new_speed_low_1_97 + 2)
07E2 E5C3      1864            mov     a,(_main_new_speed_low_1_97 + 3)
07E4 C002      1865            push    ar2
07E6 C003      1866            push    ar3
07E8 C004      1867            push    ar4
07EA C005      1868            push    ar5
07EC 120100    1869            lcall   ___fs2uchar
07EF 8582A0    1870            mov     _pwm_left,dpl
07F2           1871   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:331: pwm_right = new_speed_high;               
07F2 851082    1872            mov     dpl,_main_new_speed_high_1_97
07F5 851183    1873            mov     dph,(_main_new_speed_high_1_97 + 1)
07F8 8512F0    1874            mov     b,(_main_new_speed_high_1_97 + 2)
07FB E513      1875            mov     a,(_main_new_speed_high_1_97 + 3)
07FD 120100    1876            lcall   ___fs2uchar
0800 858260    1877            mov     _pwm_right,dpl
0803 D005      1878            pop     ar5
0805 D004      1879            pop     ar4
0807 D003      1880            pop     ar3
0809 D002      1881            pop     ar2
080B 020100    1882            ljmp    L018033?
080E           1883   L018032?:
080E           1884   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:333: else if (cur_error < 0){
080E C002      1885            push    ar2
0810 C003      1886            push    ar3
0812 C004      1887            push    ar4
0814 C005      1888            push    ar5
0816 E4        1889            clr     a
0817 C0E0      1890            push    acc
0819 C0E0      1891            push    acc
081B C0E0      1892            push    acc
081D C0E0      1893            push    acc
081F 8A82      1894            mov     dpl,r2
0821 8B83      1895            mov     dph,r3
0823 8CF0      1896            mov     b,r4
0825 ED        1897            mov     a,r5
0826 120100    1898            lcall   ___fslt
0829 AE82      1899            mov     r6,dpl
082B E581      1900            mov     a,sp
082D 24FC      1901            add     a,#0xfc
082F F581      1902            mov     sp,a
0831 D005      1903            pop     ar5
0833 D004      1904            pop     ar4
0835 D003      1905            pop     ar3
0837 D002      1906            pop     ar2
0839 EE        1907            mov     a,r6
083A 6001      1908            jz      L018029?
083C           1909   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:334: pwm_left = new_speed_high;
083C 851082    1910            mov     dpl,_main_new_speed_high_1_97
083F 851183    1911            mov     dph,(_main_new_speed_high_1_97 + 1)
0842 8512F0    1912            mov     b,(_main_new_speed_high_1_97 + 2)
0845 E513      1913            mov     a,(_main_new_speed_high_1_97 + 3)
0847 C002      1914            push    ar2
0849 C003      1915            push    ar3
084B C004      1916            push    ar4
084D C005      1917            push    ar5
084F 120100    1918            lcall   ___fs2uchar
0852 8582A0    1919            mov     _pwm_left,dpl
0855           1920   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:335: pwm_right = new_speed_low;
0855 85C082    1921            mov     dpl,_main_new_speed_low_1_97
0858 85C183    1922            mov     dph,(_main_new_speed_low_1_97 + 1)
085B 85C2F0    1923            mov     b,(_main_new_speed_low_1_97 + 2)
085E E5C3      1924            mov     a,(_main_new_speed_low_1_97 + 3)
0860 120100    1925            lcall   ___fs2uchar
0863 858260    1926            mov     _pwm_right,dpl
0866 D005      1927            pop     ar5
0868 D004      1928            pop     ar4
086A D003      1929            pop     ar3
086C D002      1930            pop     ar2
086E 8001      1931            sjmp    L018033?
0870           1932   L018029?:
0870           1933   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:338: if(pre_error > 0){
0870 C002      1934            push    ar2
0872 C003      1935            push    ar3
0874 C004      1936            push    ar4
0876 C005      1937            push    ar5
0878 E4        1938            clr     a
0879 C0E0      1939            push    acc
087B C0E0      1940            push    acc
087D C0E0      1941            push    acc
087F C0E0      1942            push    acc
0881 857082    1943            mov     dpl,_main_pre_error_1_97
0884 857183    1944            mov     dph,(_main_pre_error_1_97 + 1)
0887 8572F0    1945            mov     b,(_main_pre_error_1_97 + 2)
088A E573      1946            mov     a,(_main_pre_error_1_97 + 3)
088C 120100    1947            lcall   ___fsgt
088F AE82      1948            mov     r6,dpl
0891 E581      1949            mov     a,sp
0893 24FC      1950            add     a,#0xfc
0895 F581      1951            mov     sp,a
0897 D005      1952            pop     ar5
0899 D004      1953            pop     ar4
089B D003      1954            pop     ar3
089D D002      1955            pop     ar2
089F EE        1956            mov     a,r6
08A0 6001      1957            jz      L018026?
08A2           1958   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:339: pwm_left = 100;
08A2 75A064    1959            mov     _pwm_left,#0x64
08A5           1960   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:340: pwm_right = 20;
08A5 756014    1961            mov     _pwm_right,#0x14
08A8 8001      1962            sjmp    L018033?
08AA           1963   L018026?:
08AA           1964   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:342: else if (pre_error < 0){
08AA C002      1965            push    ar2
08AC C003      1966            push    ar3
08AE C004      1967            push    ar4
08B0 C005      1968            push    ar5
08B2 E4        1969            clr     a
08B3 C0E0      1970            push    acc
08B5 C0E0      1971            push    acc
08B7 C0E0      1972            push    acc
08B9 C0E0      1973            push    acc
08BB 857082    1974            mov     dpl,_main_pre_error_1_97
08BE 857183    1975            mov     dph,(_main_pre_error_1_97 + 1)
08C1 8572F0    1976            mov     b,(_main_pre_error_1_97 + 2)
08C4 E573      1977            mov     a,(_main_pre_error_1_97 + 3)
08C6 120100    1978            lcall   ___fslt
08C9 AE82      1979            mov     r6,dpl
08CB E581      1980            mov     a,sp
08CD 24FC      1981            add     a,#0xfc
08CF F581      1982            mov     sp,a
08D1 D005      1983            pop     ar5
08D3 D004      1984            pop     ar4
08D5 D003      1985            pop     ar3
08D7 D002      1986            pop     ar2
08D9 EE        1987            mov     a,r6
08DA 6001      1988            jz      L018033?
08DC           1989   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:343: pwm_right = 100;
08DC 756064    1990            mov     _pwm_right,#0x64
08DF           1991   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:344: pwm_left = 20;
08DF 75A014    1992            mov     _pwm_left,#0x14
08E2           1993   L018033?:
08E2           1994   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:347: counter++;
08E2 C002      1995            push    ar2
08E4 C003      1996            push    ar3
08E6 C004      1997            push    ar4
08E8 C005      1998            push    ar5
08EA E4        1999            clr     a
08EB C0E0      2000            push    acc
08ED C0E0      2001            push    acc
08EF 7480      2002            mov     a,#0x80
08F1 C0E0      2003            push    acc
08F3 743F      2004            mov     a,#0x3F
08F5 C0E0      2005            push    acc
08F7 856082    2006            mov     dpl,_main_counter_1_97
08FA 856183    2007            mov     dph,(_main_counter_1_97 + 1)
08FD 8562F0    2008            mov     b,(_main_counter_1_97 + 2)
0900 E563      2009            mov     a,(_main_counter_1_97 + 3)
0902 120100    2010            lcall   ___fsadd
0905 858260    2011            mov     _main_counter_1_97,dpl
0908 858361    2012            mov     (_main_counter_1_97 + 1),dph
090B 85F062    2013            mov     (_main_counter_1_97 + 2),b
090E F563      2014            mov     (_main_counter_1_97 + 3),a
0910 E581      2015            mov     a,sp
0912 24FC      2016            add     a,#0xfc
0914 F581      2017            mov     sp,a
0916 D005      2018            pop     ar5
0918 D004      2019            pop     ar4
091A D003      2020            pop     ar3
091C D002      2021            pop     ar2
091E           2022   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:348: pre_error = cur_error;
091E 8A70      2023            mov     _main_pre_error_1_97,r2
0920 8B71      2024            mov     (_main_pre_error_1_97 + 1),r3
0922 8C72      2025            mov     (_main_pre_error_1_97 + 2),r4
0924 8D73      2026            mov     (_main_pre_error_1_97 + 3),r5
0926           2027   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:349: if(counter==30){
0926 C002      2028            push    ar2
0928 C003      2029            push    ar3
092A C004      2030            push    ar4
092C C005      2031            push    ar5
092E E4        2032            clr     a
092F C0E0      2033            push    acc
0931 C0E0      2034            push    acc
0933 74F0      2035            mov     a,#0xF0
0935 C0E0      2036            push    acc
0937 7441      2037            mov     a,#0x41
0939 C0E0      2038            push    acc
093B 856082    2039            mov     dpl,_main_counter_1_97
093E 856183    2040            mov     dph,(_main_counter_1_97 + 1)
0941 8562F0    2041            mov     b,(_main_counter_1_97 + 2)
0944 E563      2042            mov     a,(_main_counter_1_97 + 3)
0946 120100    2043            lcall   ___fseq
0949 AE82      2044            mov     r6,dpl
094B E581      2045            mov     a,sp
094D 24FC      2046            add     a,#0xfc
094F F581      2047            mov     sp,a
0951 D005      2048            pop     ar5
0953 D004      2049            pop     ar4
0955 D003      2050            pop     ar3
0957 D002      2051            pop     ar2
0959 EE        2052            mov     a,r6
095A 7001      2053            jnz     L018077?
095C 020100    2054            ljmp    L018037?
095F           2055   L018077?:
095F           2056   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:350: printf("Error:%5.2f Left:%5.2f Right:%5.2f                 \r", cur_error, left, right, pwm_left, pwm_right);
095F AE60      2057            mov     r6,_pwm_right
0961 7F00      2058            mov     r7,#0x00
0963 A8A0      2059            mov     r0,_pwm_left
0965 7900      2060            mov     r1,#0x00
0967 C002      2061            push    ar2
0969 C003      2062            push    ar3
096B C004      2063            push    ar4
096D C005      2064            push    ar5
096F C006      2065            push    ar6
0971 C007      2066            push    ar7
0973 C000      2067            push    ar0
0975 C001      2068            push    ar1
0977 C0F0      2069            push    _main_right_2_98
0979 C0F1      2070            push    (_main_right_2_98 + 1)
097B C0F2      2071            push    (_main_right_2_98 + 2)
097D C0F3      2072            push    (_main_right_2_98 + 3)
097F C0A0      2073            push    _main_left_2_98
0981 C0A1      2074            push    (_main_left_2_98 + 1)
0983 C0A2      2075            push    (_main_left_2_98 + 2)
0985 C0A3      2076            push    (_main_left_2_98 + 3)
0987 C002      2077            push    ar2
0989 C003      2078            push    ar3
098B C004      2079            push    ar4
098D C005      2080            push    ar5
098F 74B0      2081            mov     a,#__str_4
0991 C0E0      2082            push    acc
0993 74B6      2083            mov     a,#(__str_4 >> 8)
0995 C0E0      2084            push    acc
0997 7480      2085            mov     a,#0x80
0999 C0E0      2086            push    acc
099B 120100    2087            lcall   _printf
099E E581      2088            mov     a,sp
09A0 24ED      2089            add     a,#0xed
09A2 F581      2090            mov     sp,a
09A4 D005      2091            pop     ar5
09A6 D004      2092            pop     ar4
09A8 D003      2093            pop     ar3
09AA D002      2094            pop     ar2
09AC 020100    2095            ljmp    L018037?
09AF           2096            rseg R_CSEG
09AF           2097   
0000           2098            rseg R_XINIT
0000           2099   
0000           2100            rseg R_CONST
0000           2101   __str_0:
0000 56303A20  2102            db 'V0: %4.2fV'
     25342E32
     6656
000A 00        2103            db 0x00
000B           2104   __str_1:
000B 56313A20  2105            db 'V1: %4.2fV'
     25342E32
     6656
0015 00        2106            db 0x00
0016           2107   __str_2:
0016 563D2535  2108            db 'V=%5.2f'
     2E3266
001D 00        2109            db 0x00
001E           2110   __str_3:
001E 25303264  2111            db '%02d:%02d'
     3A253032
     64
0027 00        2112            db 0x00
0028           2113   __str_4:
0028 4572726F  2114            db 'Error:%5.2f Left:%5.2f Right:%5.2f                 '
     723A2535
     2E326620
     4C656674
     3A25352E
     32662052
     69676874
     3A25352E
     32662020
     20202020
     20202020
     20202020
     202020
005B 0D        2115            db 0x0D
005C 00        2116            db 0x00
005D           2117   
000E           2118            CSEG
000E           2119   
000E           2120   end
