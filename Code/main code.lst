0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Dec 11 2012) (MSVC)
0000              4   ; This file was generated Sun Mar 22 16:36:14 2015
0000              5   ;--------------------------------------------------------
                  5   $name main_code
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _display_LCD
0000             29            public _Timer0ISR
0000             30            public _InitTimer0
0000             31            public _InitADC
0000             32            public _InitSerialPort
0000             33            public _Wait1S
0000             34            public _LCDprint
0000             35            public _LCD_8BIT
0000             36            public _WriteCommand
0000             37            public _WriteData
0000             38            public _LCD_byte
0000             39            public _LCD_pulse
0000             40            public _waitms
0000             41            public _Wait50us
0000             42            public _InitPorts
0000             43            public _LCDprint_PARM_3
0000             44            public _line_counter_flag
0000             45            public _time_update_flag
0000             46            public _LCDprint_PARM_2
0000             47            public _line_timer
0000             48            public _pwm_right
0000             49            public _pwm_left
0000             50            public _pwmcount
0000             51            public _mins
0000             52            public _secs
0000             53            public _msCount
0000             54   ;--------------------------------------------------------
0000             55   ; Special Function Registers
0000             56   ;--------------------------------------------------------
0000             57   _ACC            DATA 0xe0
0000             58   _ADCON0         DATA 0x8e
0000             59   _ADCON1         DATA 0x97
0000             60   _ADINS          DATA 0xa3
0000             61   _ADMODA         DATA 0xc0
0000             62   _ADMODB         DATA 0xa1
0000             63   _AD0BH          DATA 0xbb
0000             64   _AD0BL          DATA 0xa6
0000             65   _AD0DAT0        DATA 0xc5
0000             66   _AD0DAT1        DATA 0xc6
0000             67   _AD0DAT2        DATA 0xc7
0000             68   _AD0DAT3        DATA 0xf4
0000             69   _AD1BH          DATA 0xc4
0000             70   _AD1BL          DATA 0xbc
0000             71   _AD1DAT0        DATA 0xd5
0000             72   _AD1DAT1        DATA 0xd6
0000             73   _AD1DAT2        DATA 0xd7
0000             74   _AD1DAT3        DATA 0xf5
0000             75   _AUXR1          DATA 0xa2
0000             76   _B              DATA 0xf0
0000             77   _BRGR0          DATA 0xbe
0000             78   _BRGR1          DATA 0xbf
0000             79   _BRGCON         DATA 0xbd
0000             80   _CCCRA          DATA 0xea
0000             81   _CCCRB          DATA 0xeb
0000             82   _CCCRC          DATA 0xec
0000             83   _CCCRD          DATA 0xed
0000             84   _CMP1           DATA 0xac
0000             85   _CMP2           DATA 0xad
0000             86   _DEECON         DATA 0xf1
0000             87   _DEEDAT         DATA 0xf2
0000             88   _DEEADR         DATA 0xf3
0000             89   _DIVM           DATA 0x95
0000             90   _DPH            DATA 0x83
0000             91   _DPL            DATA 0x82
0000             92   _FMADRH         DATA 0xe7
0000             93   _FMADRL         DATA 0xe6
0000             94   _FMCON          DATA 0xe4
0000             95   _FMDATA         DATA 0xe5
0000             96   _I2ADR          DATA 0xdb
0000             97   _I2CON          DATA 0xd8
0000             98   _I2DAT          DATA 0xda
0000             99   _I2SCLH         DATA 0xdd
0000            100   _I2SCLL         DATA 0xdc
0000            101   _I2STAT         DATA 0xd9
0000            102   _ICRAH          DATA 0xab
0000            103   _ICRAL          DATA 0xaa
0000            104   _ICRBH          DATA 0xaf
0000            105   _ICRBL          DATA 0xae
0000            106   _IEN0           DATA 0xa8
0000            107   _IEN1           DATA 0xe8
0000            108   _IP0            DATA 0xb8
0000            109   _IP0H           DATA 0xb7
0000            110   _IP1            DATA 0xf8
0000            111   _IP1H           DATA 0xf7
0000            112   _KBCON          DATA 0x94
0000            113   _KBMASK         DATA 0x86
0000            114   _KBPATN         DATA 0x93
0000            115   _OCRAH          DATA 0xef
0000            116   _OCRAL          DATA 0xee
0000            117   _OCRBH          DATA 0xfb
0000            118   _OCRBL          DATA 0xfa
0000            119   _OCRCH          DATA 0xfd
0000            120   _OCRCL          DATA 0xfc
0000            121   _OCRDH          DATA 0xff
0000            122   _OCRDL          DATA 0xfe
0000            123   _P0             DATA 0x80
0000            124   _P1             DATA 0x90
0000            125   _P2             DATA 0xa0
0000            126   _P3             DATA 0xb0
0000            127   _P0M1           DATA 0x84
0000            128   _P0M2           DATA 0x85
0000            129   _P1M1           DATA 0x91
0000            130   _P1M2           DATA 0x92
0000            131   _P2M1           DATA 0xa4
0000            132   _P2M2           DATA 0xa5
0000            133   _P3M1           DATA 0xb1
0000            134   _P3M2           DATA 0xb2
0000            135   _PCON           DATA 0x87
0000            136   _PCONA          DATA 0xb5
0000            137   _PSW            DATA 0xd0
0000            138   _PT0AD          DATA 0xf6
0000            139   _RSTSRC         DATA 0xdf
0000            140   _RTCCON         DATA 0xd1
0000            141   _RTCH           DATA 0xd2
0000            142   _RTCL           DATA 0xd3
0000            143   _SADDR          DATA 0xa9
0000            144   _SADEN          DATA 0xb9
0000            145   _SBUF           DATA 0x99
0000            146   _SCON           DATA 0x98
0000            147   _SSTAT          DATA 0xba
0000            148   _SP             DATA 0x81
0000            149   _SPCTL          DATA 0xe2
0000            150   _SPSTAT         DATA 0xe1
0000            151   _SPDAT          DATA 0xe3
0000            152   _TAMOD          DATA 0x8f
0000            153   _TCON           DATA 0x88
0000            154   _TCR20          DATA 0xc8
0000            155   _TCR21          DATA 0xf9
0000            156   _TH0            DATA 0x8c
0000            157   _TH1            DATA 0x8d
0000            158   _TH2            DATA 0xcd
0000            159   _TICR2          DATA 0xc9
0000            160   _TIFR2          DATA 0xe9
0000            161   _TISE2          DATA 0xde
0000            162   _TL0            DATA 0x8a
0000            163   _TL1            DATA 0x8b
0000            164   _TL2            DATA 0xcc
0000            165   _TMOD           DATA 0x89
0000            166   _TOR2H          DATA 0xcf
0000            167   _TOR2L          DATA 0xce
0000            168   _TPCR2H         DATA 0xcb
0000            169   _TPCR2L         DATA 0xca
0000            170   _TRIM           DATA 0x96
0000            171   _WDCON          DATA 0xa7
0000            172   _WDL            DATA 0xc1
0000            173   _WFEED1         DATA 0xc2
0000            174   _WFEED2         DATA 0xc3
0000            175   ;--------------------------------------------------------
0000            176   ; special function bits
0000            177   ;--------------------------------------------------------
0000            178   _ACC_7          BIT 0xe7
0000            179   _ACC_6          BIT 0xe6
0000            180   _ACC_5          BIT 0xe5
0000            181   _ACC_4          BIT 0xe4
0000            182   _ACC_3          BIT 0xe3
0000            183   _ACC_2          BIT 0xe2
0000            184   _ACC_1          BIT 0xe1
0000            185   _ACC_0          BIT 0xe0
0000            186   _ADMODA_7       BIT 0xc7
0000            187   _ADMODA_6       BIT 0xc6
0000            188   _ADMODA_5       BIT 0xc5
0000            189   _ADMODA_4       BIT 0xc4
0000            190   _ADMODA_3       BIT 0xc3
0000            191   _ADMODA_2       BIT 0xc2
0000            192   _ADMODA_1       BIT 0xc1
0000            193   _ADMODA_0       BIT 0xc0
0000            194   _BNDI1          BIT 0xc7
0000            195   _BURST1         BIT 0xc6
0000            196   _SCC1           BIT 0xc5
0000            197   _SCAN1          BIT 0xc4
0000            198   _BNDI0          BIT 0xc3
0000            199   _BURST0         BIT 0xc2
0000            200   _SCC0           BIT 0xc1
0000            201   _SCAN0          BIT 0xc0
0000            202   _B_7            BIT 0xf7
0000            203   _B_6            BIT 0xf6
0000            204   _B_5            BIT 0xf5
0000            205   _B_4            BIT 0xf4
0000            206   _B_3            BIT 0xf3
0000            207   _B_2            BIT 0xf2
0000            208   _B_1            BIT 0xf1
0000            209   _B_0            BIT 0xf0
0000            210   _I2CON_7        BIT 0xdf
0000            211   _I2CON_6        BIT 0xde
0000            212   _I2CON_5        BIT 0xdd
0000            213   _I2CON_4        BIT 0xdc
0000            214   _I2CON_3        BIT 0xdb
0000            215   _I2CON_2        BIT 0xda
0000            216   _I2CON_1        BIT 0xd9
0000            217   _I2CON_0        BIT 0xd8
0000            218   _I2EN           BIT 0xde
0000            219   _STA            BIT 0xdd
0000            220   _STO            BIT 0xdc
0000            221   _SI             BIT 0xdb
0000            222   _AA             BIT 0xda
0000            223   _CRSEL          BIT 0xd8
0000            224   _IEN0_7         BIT 0xaf
0000            225   _IEN0_6         BIT 0xae
0000            226   _IEN0_5         BIT 0xad
0000            227   _IEN0_4         BIT 0xac
0000            228   _IEN0_3         BIT 0xab
0000            229   _IEN0_2         BIT 0xaa
0000            230   _IEN0_1         BIT 0xa9
0000            231   _IEN0_0         BIT 0xa8
0000            232   _EA             BIT 0xaf
0000            233   _EWDRT          BIT 0xae
0000            234   _EBO            BIT 0xad
0000            235   _ES             BIT 0xac
0000            236   _ESR            BIT 0xac
0000            237   _ET1            BIT 0xab
0000            238   _EX1            BIT 0xaa
0000            239   _ET0            BIT 0xa9
0000            240   _EX0            BIT 0xa8
0000            241   _IEN1_7         BIT 0xef
0000            242   _IEN1_6         BIT 0xee
0000            243   _IEN1_5         BIT 0xed
0000            244   _IEN1_4         BIT 0xec
0000            245   _IEN1_3         BIT 0xeb
0000            246   _IEN1_2         BIT 0xea
0000            247   _IEN1_1         BIT 0xe9
0000            248   _IEN1_0         BIT 0xe8
0000            249   _EADEE          BIT 0xef
0000            250   _EST            BIT 0xee
0000            251   _ECCU           BIT 0xec
0000            252   _ESPI           BIT 0xeb
0000            253   _EC             BIT 0xea
0000            254   _EKBI           BIT 0xe9
0000            255   _EI2C           BIT 0xe8
0000            256   _IP0_7          BIT 0xbf
0000            257   _IP0_6          BIT 0xbe
0000            258   _IP0_5          BIT 0xbd
0000            259   _IP0_4          BIT 0xbc
0000            260   _IP0_3          BIT 0xbb
0000            261   _IP0_2          BIT 0xba
0000            262   _IP0_1          BIT 0xb9
0000            263   _IP0_0          BIT 0xb8
0000            264   _PWDRT          BIT 0xbe
0000            265   _PBO            BIT 0xbd
0000            266   _PS             BIT 0xbc
0000            267   _PSR            BIT 0xbc
0000            268   _PT1            BIT 0xbb
0000            269   _PX1            BIT 0xba
0000            270   _PT0            BIT 0xb9
0000            271   _PX0            BIT 0xb8
0000            272   _IP1_7          BIT 0xff
0000            273   _IP1_6          BIT 0xfe
0000            274   _IP1_5          BIT 0xfd
0000            275   _IP1_4          BIT 0xfc
0000            276   _IP1_3          BIT 0xfb
0000            277   _IP1_2          BIT 0xfa
0000            278   _IP1_1          BIT 0xf9
0000            279   _IP1_0          BIT 0xf8
0000            280   _PADEE          BIT 0xff
0000            281   _PST            BIT 0xfe
0000            282   _PCCU           BIT 0xfc
0000            283   _PSPI           BIT 0xfb
0000            284   _PC             BIT 0xfa
0000            285   _PKBI           BIT 0xf9
0000            286   _PI2C           BIT 0xf8
0000            287   _P0_7           BIT 0x87
0000            288   _P0_6           BIT 0x86
0000            289   _P0_5           BIT 0x85
0000            290   _P0_4           BIT 0x84
0000            291   _P0_3           BIT 0x83
0000            292   _P0_2           BIT 0x82
0000            293   _P0_1           BIT 0x81
0000            294   _P0_0           BIT 0x80
0000            295   _T1             BIT 0x87
0000            296   _KB7            BIT 0x87
0000            297   _CMP_1          BIT 0x86
0000            298   _KB6            BIT 0x86
0000            299   _CMPREF         BIT 0x85
0000            300   _KB5            BIT 0x85
0000            301   _CIN1A          BIT 0x84
0000            302   _KB4            BIT 0x84
0000            303   _CIN1B          BIT 0x83
0000            304   _KB3            BIT 0x83
0000            305   _CIN2A          BIT 0x82
0000            306   _KB2            BIT 0x82
0000            307   _CIN2B          BIT 0x81
0000            308   _KB1            BIT 0x81
0000            309   _CMP_2          BIT 0x80
0000            310   _KB0            BIT 0x80
0000            311   _P1_7           BIT 0x97
0000            312   _P1_6           BIT 0x96
0000            313   _P1_5           BIT 0x95
0000            314   _P1_4           BIT 0x94
0000            315   _P1_3           BIT 0x93
0000            316   _P1_2           BIT 0x92
0000            317   _P1_1           BIT 0x91
0000            318   _P1_0           BIT 0x90
0000            319   _OCC            BIT 0x97
0000            320   _OCB            BIT 0x96
0000            321   _RST            BIT 0x95
0000            322   _INT1           BIT 0x94
0000            323   _INT0           BIT 0x93
0000            324   _SDA            BIT 0x93
0000            325   _T0             BIT 0x92
0000            326   _SCL            BIT 0x92
0000            327   _RXD            BIT 0x91
0000            328   _TXD            BIT 0x90
0000            329   _P2_7           BIT 0xa7
0000            330   _P2_6           BIT 0xa6
0000            331   _P2_5           BIT 0xa5
0000            332   _P2_4           BIT 0xa4
0000            333   _P2_3           BIT 0xa3
0000            334   _P2_2           BIT 0xa2
0000            335   _P2_1           BIT 0xa1
0000            336   _P2_0           BIT 0xa0
0000            337   _ICA            BIT 0xa7
0000            338   _OCA            BIT 0xa6
0000            339   _SPICLK         BIT 0xa5
0000            340   _SS             BIT 0xa4
0000            341   _MISO           BIT 0xa3
0000            342   _MOSI           BIT 0xa2
0000            343   _OCD            BIT 0xa1
0000            344   _ICB            BIT 0xa0
0000            345   _P3_7           BIT 0xb7
0000            346   _P3_6           BIT 0xb6
0000            347   _P3_5           BIT 0xb5
0000            348   _P3_4           BIT 0xb4
0000            349   _P3_3           BIT 0xb3
0000            350   _P3_2           BIT 0xb2
0000            351   _P3_1           BIT 0xb1
0000            352   _P3_0           BIT 0xb0
0000            353   _XTAL1          BIT 0xb1
0000            354   _XTAL2          BIT 0xb0
0000            355   _PSW_7          BIT 0xd7
0000            356   _PSW_6          BIT 0xd6
0000            357   _PSW_5          BIT 0xd5
0000            358   _PSW_4          BIT 0xd4
0000            359   _PSW_3          BIT 0xd3
0000            360   _PSW_2          BIT 0xd2
0000            361   _PSW_1          BIT 0xd1
0000            362   _PSW_0          BIT 0xd0
0000            363   _CY             BIT 0xd7
0000            364   _AC             BIT 0xd6
0000            365   _F0             BIT 0xd5
0000            366   _RS1            BIT 0xd4
0000            367   _RS0            BIT 0xd3
0000            368   _OV             BIT 0xd2
0000            369   _F1             BIT 0xd1
0000            370   _P              BIT 0xd0
0000            371   _SCON_7         BIT 0x9f
0000            372   _SCON_6         BIT 0x9e
0000            373   _SCON_5         BIT 0x9d
0000            374   _SCON_4         BIT 0x9c
0000            375   _SCON_3         BIT 0x9b
0000            376   _SCON_2         BIT 0x9a
0000            377   _SCON_1         BIT 0x99
0000            378   _SCON_0         BIT 0x98
0000            379   _SM0            BIT 0x9f
0000            380   _FE             BIT 0x9f
0000            381   _SM1            BIT 0x9e
0000            382   _SM2            BIT 0x9d
0000            383   _REN            BIT 0x9c
0000            384   _TB8            BIT 0x9b
0000            385   _RB8            BIT 0x9a
0000            386   _TI             BIT 0x99
0000            387   _RI             BIT 0x98
0000            388   _TCON_7         BIT 0x8f
0000            389   _TCON_6         BIT 0x8e
0000            390   _TCON_5         BIT 0x8d
0000            391   _TCON_4         BIT 0x8c
0000            392   _TCON_3         BIT 0x8b
0000            393   _TCON_2         BIT 0x8a
0000            394   _TCON_1         BIT 0x89
0000            395   _TCON_0         BIT 0x88
0000            396   _TF1            BIT 0x8f
0000            397   _TR1            BIT 0x8e
0000            398   _TF0            BIT 0x8d
0000            399   _TR0            BIT 0x8c
0000            400   _IE1            BIT 0x8b
0000            401   _IT1            BIT 0x8a
0000            402   _IE0            BIT 0x89
0000            403   _IT0            BIT 0x88
0000            404   _TCR20_7        BIT 0xcf
0000            405   _TCR20_6        BIT 0xce
0000            406   _TCR20_5        BIT 0xcd
0000            407   _TCR20_4        BIT 0xcc
0000            408   _TCR20_3        BIT 0xcb
0000            409   _TCR20_2        BIT 0xca
0000            410   _TCR20_1        BIT 0xc9
0000            411   _TCR20_0        BIT 0xc8
0000            412   _PLEEN          BIT 0xcf
0000            413   _HLTRN          BIT 0xce
0000            414   _HLTEN          BIT 0xcd
0000            415   _ALTCD          BIT 0xcc
0000            416   _ALTAB          BIT 0xcb
0000            417   _TDIR2          BIT 0xca
0000            418   _TMOD21         BIT 0xc9
0000            419   _TMOD20         BIT 0xc8
0000            420   ;--------------------------------------------------------
0000            421   ; overlayable register banks
0000            422   ;--------------------------------------------------------
0000            423            rbank0 segment data overlay
0000            424   ;--------------------------------------------------------
0000            425   ; internal ram data
0000            426   ;--------------------------------------------------------
0000            427            rseg R_DSEG
0000            428   _msCount:
0000            429            ds 2
0002            430   _secs:
0002            431            ds 1
0003            432   _mins:
0003            433            ds 1
0004            434   _pwmcount:
0004            435            ds 1
0005            436   _pwm_left:
0005            437            ds 1
0006            438   _pwm_right:
0006            439            ds 1
0007            440   _line_timer:
0007            441            ds 2
0009            442   _LCDprint_PARM_2:
0009            443            ds 1
000A            444   _display_LCD_buff_1_94:
000A            445            ds 17
001B            446   _main_cor_1_96:
001B            447            ds 4
001F            448   _main_cur_error_1_96:
001F            449            ds 4
0023            450   _main_pre_error_1_96:
0023            451            ds 4
0027            452   _main_line_counter_1_96:
0027            453            ds 2
0029            454   _main_exec_1_96:
0029            455            ds 2
002B            456   _main_left_1_96:
002B            457            ds 4
002F            458   _main_right_1_96:
002F            459            ds 4
0033            460   _main_line_sensor_1_96:
0033            461            ds 4
0037            462   _main_diff_1_96:
0037            463            ds 4
003B            464   ;--------------------------------------------------------
003B            465   ; overlayable items in internal ram 
003B            466   ;--------------------------------------------------------
0000            467            rseg R_OSEG
0000            468   ;--------------------------------------------------------
0000            469   ; indirectly addressable internal ram data
0000            470   ;--------------------------------------------------------
0000            471            rseg R_ISEG
0000            472   ;--------------------------------------------------------
0000            473   ; absolute internal ram data
0000            474   ;--------------------------------------------------------
0000            475            DSEG
0000            476   ;--------------------------------------------------------
0000            477   ; bit data
0000            478   ;--------------------------------------------------------
0000            479            rseg R_BSEG
0000            480   _time_update_flag:
0000            481            DBIT    1
0001            482   _line_counter_flag:
0001            483            DBIT    1
0002            484   _LCDprint_PARM_3:
0002            485            DBIT    1
0003            486   ;--------------------------------------------------------
0003            487   ; paged external ram data
0003            488   ;--------------------------------------------------------
0000            489            rseg R_PSEG
0000            490   ;--------------------------------------------------------
0000            491   ; external ram data
0000            492   ;--------------------------------------------------------
0000            493            rseg R_XSEG
FFC8            494            XSEG at 0xffc8
FFC8            495   _BODCFG: ds 1
FFC9            496            public _BODCFG
0000            497            rseg R_XSEG
FFDE            498            XSEG at 0xffde
FFDE            499   _CLKCON: ds 1
FFDF            500            public _CLKCON
0000            501            rseg R_XSEG
FFE1            502            XSEG at 0xffe1
FFE1            503   _PGACON1: ds 1
FFE2            504            public _PGACON1
0000            505            rseg R_XSEG
FFE4            506            XSEG at 0xffe4
FFE4            507   _PGACON1B: ds 1
FFE5            508            public _PGACON1B
0000            509            rseg R_XSEG
FFE3            510            XSEG at 0xffe3
FFE3            511   _PGA1TRIM8X16X: ds 1
FFE4            512            public _PGA1TRIM8X16X
0000            513            rseg R_XSEG
FFE2            514            XSEG at 0xffe2
FFE2            515   _PGA1TRIM2X4X: ds 1
FFE3            516            public _PGA1TRIM2X4X
0000            517            rseg R_XSEG
FFCA            518            XSEG at 0xffca
FFCA            519   _PGACON0: ds 1
FFCB            520            public _PGACON0
0000            521            rseg R_XSEG
FFCE            522            XSEG at 0xffce
FFCE            523   _PGACON0B: ds 1
FFCF            524            public _PGACON0B
0000            525            rseg R_XSEG
FFCD            526            XSEG at 0xffcd
FFCD            527   _PGA0TRIM8X16X: ds 1
FFCE            528            public _PGA0TRIM8X16X
0000            529            rseg R_XSEG
FFCC            530            XSEG at 0xffcc
FFCC            531   _PGA0TRIM2X4X: ds 1
FFCD            532            public _PGA0TRIM2X4X
0000            533            rseg R_XSEG
FFBF            534            XSEG at 0xffbf
FFBF            535   _RTCDATH: ds 1
FFC0            536            public _RTCDATH
0000            537            rseg R_XSEG
FFBE            538            XSEG at 0xffbe
FFBE            539   _RTCDATL: ds 1
FFBF            540            public _RTCDATL
0000            541            rseg R_XSEG
0000            542   ;--------------------------------------------------------
0000            543   ; absolute external ram data
0000            544   ;--------------------------------------------------------
FFBF            545            XSEG
FFBF            546   ;--------------------------------------------------------
FFBF            547   ; external initialized ram data
FFBF            548   ;--------------------------------------------------------
0000            549            rseg R_IXSEG
0000            550            rseg R_HOME
0000            551            rseg R_GSINIT
0000            552            rseg R_CSEG
0000            553   ;--------------------------------------------------------
0000            554   ; Reset entry point and interrupt vectors
0000            555   ;--------------------------------------------------------
0000            556            CSEG at 0x0000
0000 020100     557            ljmp    _crt0
000B            558            CSEG at 0x000b
000B 020100     559            ljmp    _Timer0ISR
000E            560   ;--------------------------------------------------------
000E            561   ; global & static initialisations
000E            562   ;--------------------------------------------------------
0000            563            rseg R_HOME
0000            564            rseg R_GSINIT
0000            565            rseg R_GSINIT
0000            566   ;--------------------------------------------------------
0000            567   ; data variables initialization
0000            568   ;--------------------------------------------------------
0000            569            rseg R_DINIT
0000            570   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:33: volatile int msCount=0; // Volatiles can be changed by stuff outside our program, like memory registers
0000 E4         571            clr     a
0001 F5F0       572            mov     _msCount,a
0003 F5F1       573            mov     (_msCount + 1),a
0005            574   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:34: volatile unsigned char secs=0, mins=0; // They are like global variables, kinda 
0005 75B000     575            mov     _secs,#0x00
0008            576   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:34: volatile bit time_update_flag=0;
0008 757000     577            mov     _mins,#0x00
000B            578   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:40: volatile int line_timer = 0;
000B E4         579            clr     a
000C F570       580            mov     _line_timer,a
000E F571       581            mov     (_line_timer + 1),a
0010            582   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:35: volatile bit time_update_flag=0;
0010 C2E0       583            clr     _time_update_flag
0012            584   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:36: volatile bit line_counter_flag=0;
0012 C290       585            clr     _line_counter_flag
0014            586            ; The linker places a 'ret' at the end of segment R_DINIT.
0014            587   ;--------------------------------------------------------
0014            588   ; code
0014            589   ;--------------------------------------------------------
0000            590            rseg R_CSEG
0000            591   ;------------------------------------------------------------
0000            592   ;Allocation info for local variables in function 'InitPorts'
0000            593   ;------------------------------------------------------------
0000            594   ;------------------------------------------------------------
0000            595   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:42: void InitPorts(void)
0000            596   ;        -----------------------------------------
0000            597   ;         function InitPorts
0000            598   ;        -----------------------------------------
0000            599   _InitPorts:
0000            600            using   0
0000            601   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:44: P0M1=0x1E;
0000 75841E     602            mov     _P0M1,#0x1E
0003            603   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:45: P0M2=0x00;
0003 758500     604            mov     _P0M2,#0x00
0006            605   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:46: P1M1=0;
0006 759100     606            mov     _P1M1,#0x00
0009            607   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:47: P1M2=0;
0009 759200     608            mov     _P1M2,#0x00
000C            609   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:48: P2M1=0;
000C 75A400     610            mov     _P2M1,#0x00
000F            611   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:49: P2M2=0;
000F 75A500     612            mov     _P2M2,#0x00
0012            613   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:50: P3M1=0;
0012 75B100     614            mov     _P3M1,#0x00
0015            615   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:51: P3M2=0;
0015 75B200     616            mov     _P3M2,#0x00
0018 22         617            ret
0019            618   ;------------------------------------------------------------
0019            619   ;Allocation info for local variables in function 'Wait50us'
0019            620   ;------------------------------------------------------------
0019            621   ;------------------------------------------------------------
0019            622   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:54: void Wait50us (void)
0019            623   ;        -----------------------------------------
0019            624   ;         function Wait50us
0019            625   ;        -----------------------------------------
0019            626   _Wait50us:
0019            627   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:59: _endasm;
0019            628            
0019 7852       629             mov R0, #82
001B            630             L0:
001B D808       631            djnz R0, L0 ; 2 machine cycles-> 2*0.27126us*92=50us
001D            632             
001D 22         633            ret
001E            634   ;------------------------------------------------------------
001E            635   ;Allocation info for local variables in function 'waitms'
001E            636   ;------------------------------------------------------------
001E            637   ;ms                        Allocated to registers r2 r3 
001E            638   ;j                         Allocated to registers r4 r5 
001E            639   ;k                         Allocated to registers r6 
001E            640   ;------------------------------------------------------------
001E            641   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:62: void waitms (unsigned int ms)
001E            642   ;        -----------------------------------------
001E            643   ;         function waitms
001E            644   ;        -----------------------------------------
001E            645   _waitms:
001E AA82       646            mov     r2,dpl
0020 AB83       647            mov     r3,dph
0022            648   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:68: for(j=0; j<ms; j++)
0022 7C00       649            mov     r4,#0x00
0024 7D00       650            mov     r5,#0x00
0026            651   L004004?:
0026 C3         652            clr     c
0027 EC         653            mov     a,r4
0028 9A         654            subb    a,r2
0029 ED         655            mov     a,r5
002A 9B         656            subb    a,r3
002B 5001       657            jnc     L004008?
002D            658   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:69: for (k=0; k<20; k++) Wait50us();
002D 7E14       659            mov     r6,#0x14
002F            660   L004003?:
002F C002       661            push    ar2
0031 C003       662            push    ar3
0033 C004       663            push    ar4
0035 C005       664            push    ar5
0037 C006       665            push    ar6
0039 120100     666            lcall   _Wait50us
003C D006       667            pop     ar6
003E D005       668            pop     ar5
0040 D004       669            pop     ar4
0042 D003       670            pop     ar3
0044 D002       671            pop     ar2
0046 DE48       672            djnz    r6,L004003?
0048            673   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:68: for(j=0; j<ms; j++)
0048 0C         674            inc     r4
0049 BC00C8     675            cjne    r4,#0x00,L004004?
004C 0D         676            inc     r5
004D 8001       677            sjmp    L004004?
004F            678   L004008?:
004F 22         679            ret
0050            680   ;------------------------------------------------------------
0050            681   ;Allocation info for local variables in function 'LCD_pulse'
0050            682   ;------------------------------------------------------------
0050            683   ;------------------------------------------------------------
0050            684   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:72: void LCD_pulse (void)
0050            685   ;        -----------------------------------------
0050            686   ;         function LCD_pulse
0050            687   ;        -----------------------------------------
0050            688   _LCD_pulse:
0050            689   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:74: LCD_E=1;
0050 D2A5       690            setb    _P2_5
0052            691   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:75: Wait50us();
0052 120100     692            lcall   _Wait50us
0055            693   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:76: LCD_E=0;
0055 C2A5       694            clr     _P2_5
0057 22         695            ret
0058            696   ;------------------------------------------------------------
0058            697   ;Allocation info for local variables in function 'LCD_byte'
0058            698   ;------------------------------------------------------------
0058            699   ;x                         Allocated to registers 
0058            700   ;------------------------------------------------------------
0058            701   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:79: void LCD_byte (unsigned char x)
0058            702   ;        -----------------------------------------
0058            703   ;         function LCD_byte
0058            704   ;        -----------------------------------------
0058            705   _LCD_byte:
0058 8582E0     706            mov     _ACC,dpl
005B            707   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:83: LCD_D7=ACC_7;
005B A2E7       708            mov     c,_ACC_7
005D 9294       709            mov     _P1_4,c
005F            710   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:84: LCD_D6=ACC_6;
005F A2E6       711            mov     c,_ACC_6
0061 9296       712            mov     _P1_6,c
0063            713   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:85: LCD_D5=ACC_5;
0063 A2E5       714            mov     c,_ACC_5
0065 9297       715            mov     _P1_7,c
0067            716   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:86: LCD_D4=ACC_4;
0067 A2E4       717            mov     c,_ACC_4
0069 92A0       718            mov     _P2_0,c
006B            719   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:87: LCD_D3=ACC_3;
006B A2E3       720            mov     c,_ACC_3
006D 92A1       721            mov     _P2_1,c
006F            722   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:88: LCD_D2=ACC_2;
006F A2E2       723            mov     c,_ACC_2
0071 92A2       724            mov     _P2_2,c
0073            725   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:89: LCD_D1=ACC_1;
0073 A2E1       726            mov     c,_ACC_1
0075 92A3       727            mov     _P2_3,c
0077            728   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:90: LCD_D0=ACC_0;
0077 A2E0       729            mov     c,_ACC_0
0079 92A4       730            mov     _P2_4,c
007B            731   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:91: LCD_pulse();
007B 020100     732            ljmp    _LCD_pulse
007E            733   ;------------------------------------------------------------
007E            734   ;Allocation info for local variables in function 'WriteData'
007E            735   ;------------------------------------------------------------
007E            736   ;x                         Allocated to registers r2 
007E            737   ;------------------------------------------------------------
007E            738   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:94: void WriteData (unsigned char x)
007E            739   ;        -----------------------------------------
007E            740   ;         function WriteData
007E            741   ;        -----------------------------------------
007E            742   _WriteData:
007E AA82       743            mov     r2,dpl
0080            744   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:96: LCD_RS=1;
0080 D2A7       745            setb    _P2_7
0082            746   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:97: LCD_byte(x);
0082 8A82       747            mov     dpl,r2
0084 120100     748            lcall   _LCD_byte
0087            749   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:98: waitms(2);
0087 900002     750            mov     dptr,#0x0002
008A 020100     751            ljmp    _waitms
008D            752   ;------------------------------------------------------------
008D            753   ;Allocation info for local variables in function 'WriteCommand'
008D            754   ;------------------------------------------------------------
008D            755   ;x                         Allocated to registers r2 
008D            756   ;------------------------------------------------------------
008D            757   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:101: void WriteCommand (unsigned char x)
008D            758   ;        -----------------------------------------
008D            759   ;         function WriteCommand
008D            760   ;        -----------------------------------------
008D            761   _WriteCommand:
008D AA82       762            mov     r2,dpl
008F            763   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:103: LCD_RS=0;
008F C2A7       764            clr     _P2_7
0091            765   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:104: LCD_byte(x);
0091 8A82       766            mov     dpl,r2
0093 120100     767            lcall   _LCD_byte
0096            768   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:105: waitms(5);
0096 900005     769            mov     dptr,#0x0005
0099 020100     770            ljmp    _waitms
009C            771   ;------------------------------------------------------------
009C            772   ;Allocation info for local variables in function 'LCD_8BIT'
009C            773   ;------------------------------------------------------------
009C            774   ;------------------------------------------------------------
009C            775   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:108: void LCD_8BIT (void)
009C            776   ;        -----------------------------------------
009C            777   ;         function LCD_8BIT
009C            778   ;        -----------------------------------------
009C            779   _LCD_8BIT:
009C            780   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:110: LCD_E=0;  // Resting state of LCD's enable is zero
009C C2A5       781            clr     _P2_5
009E            782   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:111: LCD_RW=0; // We are only writing to the LCD in this program
009E C2A6       783            clr     _P2_6
00A0            784   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:112: waitms(20);
00A0 900014     785            mov     dptr,#0x0014
00A3 120100     786            lcall   _waitms
00A6            787   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:114: WriteCommand(0x33);
00A6 758233     788            mov     dpl,#0x33
00A9 120100     789            lcall   _WriteCommand
00AC            790   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:115: WriteCommand(0x33);
00AC 758233     791            mov     dpl,#0x33
00AF 120100     792            lcall   _WriteCommand
00B2            793   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:116: WriteCommand(0x33); // Stay in 8-bit mode
00B2 758233     794            mov     dpl,#0x33
00B5 120100     795            lcall   _WriteCommand
00B8            796   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:119: WriteCommand(0x38);
00B8 758238     797            mov     dpl,#0x38
00BB 120100     798            lcall   _WriteCommand
00BE            799   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:120: WriteCommand(0x0c);
00BE 75820C     800            mov     dpl,#0x0C
00C1 120100     801            lcall   _WriteCommand
00C4            802   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:121: WriteCommand(0x01); // Clear screen command (takes some time)
00C4 758201     803            mov     dpl,#0x01
00C7 120100     804            lcall   _WriteCommand
00CA            805   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:122: waitms(20); // Wait for clear screen command to finsih.
00CA 900014     806            mov     dptr,#0x0014
00CD 020100     807            ljmp    _waitms
00D0            808   ;------------------------------------------------------------
00D0            809   ;Allocation info for local variables in function 'LCDprint'
00D0            810   ;------------------------------------------------------------
00D0            811   ;line                      Allocated with name '_LCDprint_PARM_2'
00D0            812   ;string                    Allocated to registers r2 r3 r4 
00D0            813   ;j                         Allocated to registers r5 
00D0            814   ;------------------------------------------------------------
00D0            815   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:125: void LCDprint(char * string, unsigned char line, bit clear)
00D0            816   ;        -----------------------------------------
00D0            817   ;         function LCDprint
00D0            818   ;        -----------------------------------------
00D0            819   _LCDprint:
00D0 AA82       820            mov     r2,dpl
00D2 AB83       821            mov     r3,dph
00D4 ACF0       822            mov     r4,b
00D6            823   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:129: WriteCommand(line==2?0xc0:0x80);
00D6 7402       824            mov     a,#0x02
00D8 B530C8     825            cjne    a,_LCDprint_PARM_2,L010013?
00DB 7DC0       826            mov     r5,#0xC0
00DD 8001       827            sjmp    L010014?
00DF            828   L010013?:
00DF 7D80       829            mov     r5,#0x80
00E1            830   L010014?:
00E1 8D82       831            mov     dpl,r5
00E3 C002       832            push    ar2
00E5 C003       833            push    ar3
00E7 C004       834            push    ar4
00E9 120100     835            lcall   _WriteCommand
00EC            836   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:130: waitms(5);
00EC 900005     837            mov     dptr,#0x0005
00EF 120100     838            lcall   _waitms
00F2 D004       839            pop     ar4
00F4 D003       840            pop     ar3
00F6 D002       841            pop     ar2
00F8            842   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:131: for(j=0; string[j]!=0; j++)       WriteData(string[j]);// Write the message
00F8 7D00       843            mov     r5,#0x00
00FA            844   L010003?:
00FA ED         845            mov     a,r5
00FB 2A         846            add     a,r2
00FC FE         847            mov     r6,a
00FD E4         848            clr     a
00FE 3B         849            addc    a,r3
00FF FF         850            mov     r7,a
0100 8C00       851            mov     ar0,r4
0102 8E82       852            mov     dpl,r6
0104 8F83       853            mov     dph,r7
0106 88F0       854            mov     b,r0
0108 120100     855            lcall   __gptrget
010B FE         856            mov     r6,a
010C 6001       857            jz      L010006?
010E 8E82       858            mov     dpl,r6
0110 C002       859            push    ar2
0112 C003       860            push    ar3
0114 C004       861            push    ar4
0116 C005       862            push    ar5
0118 120100     863            lcall   _WriteData
011B D005       864            pop     ar5
011D D004       865            pop     ar4
011F D003       866            pop     ar3
0121 D002       867            pop     ar2
0123 0D         868            inc     r5
0124 8001       869            sjmp    L010003?
0126            870   L010006?:
0126            871   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:132: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0126 304008     872            jnb     _LCDprint_PARM_3,L010011?
0129 8D02       873            mov     ar2,r5
012B            874   L010007?:
012B BA1088     875            cjne    r2,#0x10,L010026?
012E            876   L010026?:
012E 5001       877            jnc     L010011?
0130 758220     878            mov     dpl,#0x20
0133 C002       879            push    ar2
0135 120100     880            lcall   _WriteData
0138 D002       881            pop     ar2
013A 0A         882            inc     r2
013B 8001       883            sjmp    L010007?
013D            884   L010011?:
013D 22         885            ret
013E            886   ;------------------------------------------------------------
013E            887   ;Allocation info for local variables in function 'Wait1S'
013E            888   ;------------------------------------------------------------
013E            889   ;------------------------------------------------------------
013E            890   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:135: void Wait1S (void)
013E            891   ;        -----------------------------------------
013E            892   ;         function Wait1S
013E            893   ;        -----------------------------------------
013E            894   _Wait1S:
013E            895   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:144: _endasm;
013E            896            
013E 7A28       897             mov R2, #40
0140            898             L3:
0140 79FA       899            mov R1, #250
0142            900             L2:
0142 78B8       901            mov R0, #184
0144            902             L1:
0144 D848       903            djnz R0, L1 ; 2 machine cycles-> 2*0.27126us*184=100us
0146 D908       904             djnz R1, L2 ; 100us*250=0.025s
0148 DAC8       905             djnz R2, L3 ; 0.025s*40=1s
014A            906             
014A 22         907            ret
014B            908   ;------------------------------------------------------------
014B            909   ;Allocation info for local variables in function 'InitSerialPort'
014B            910   ;------------------------------------------------------------
014B            911   ;------------------------------------------------------------
014B            912   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:147: void InitSerialPort(void)
014B            913   ;        -----------------------------------------
014B            914   ;         function InitSerialPort
014B            915   ;        -----------------------------------------
014B            916   _InitSerialPort:
014B            917   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:149: BRGCON=0x00; //Make sure the baud rate generator is off
014B 75BD00     918            mov     _BRGCON,#0x00
014E            919   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:150: BRGR1=((XTAL/BAUD)-16)/0x100;
014E 75BF00     920            mov     _BRGR1,#0x00
0151            921   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:151: BRGR0=((XTAL/BAUD)-16)%0x100;
0151 75BE30     922            mov     _BRGR0,#0x30
0154            923   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:152: BRGCON=0x03; //Turn-on the baud rate generator
0154 75BD03     924            mov     _BRGCON,#0x03
0157            925   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:153: SCON=0x52; //Serial port in mode 1, ren, txrdy, rxempty
0157 759852     926            mov     _SCON,#0x52
015A            927   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:154: P1M1=0x00; //Enable pins RxD and Txd
015A 759100     928            mov     _P1M1,#0x00
015D            929   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:155: P1M2=0x00; //Enable pins RxD and Txd
015D 759200     930            mov     _P1M2,#0x00
0160 22         931            ret
0161            932   ;------------------------------------------------------------
0161            933   ;Allocation info for local variables in function 'InitADC'
0161            934   ;------------------------------------------------------------
0161            935   ;------------------------------------------------------------
0161            936   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:158: void InitADC(void)
0161            937   ;        -----------------------------------------
0161            938   ;         function InitADC
0161            939   ;        -----------------------------------------
0161            940   _InitADC:
0161            941   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:162: P0M1 |= (P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0161 43841E     942            orl     _P0M1,#0x1E
0164            943   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:163: P0M2 &= ~(P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0164 5385E1     944            anl     _P0M2,#0xE1
0167            945   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:166: BURST1=1; //Autoscan continuous conversion mode
0167 D2C6       946            setb    _BURST1
0169            947   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:167: ADMODB = CLK0; //ADC1 clock is 7.3728MHz/2
0169 75A120     948            mov     _ADMODB,#0x20
016C            949   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:168: ADINS  = (ADI13|ADI12|ADI11|ADI10); // Select the four channels for conversion
016C 75A3F0     950            mov     _ADINS,#0xF0
016F            951   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:169: ADCON1 = (ENADC1|ADCS10); //Enable the converter and start immediately
016F 759705     952            mov     _ADCON1,#0x05
0172            953   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:170: while((ADCI1&ADCON1)==0); //Wait for first conversion to complete
0172            954   L013001?:
0172 E597       955            mov     a,_ADCON1
0174 30E388     956            jnb     acc.3,L013001?
0177 22         957            ret
0178            958   ;------------------------------------------------------------
0178            959   ;Allocation info for local variables in function 'InitTimer0'
0178            960   ;------------------------------------------------------------
0178            961   ;------------------------------------------------------------
0178            962   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:173: void InitTimer0 (void)
0178            963   ;        -----------------------------------------
0178            964   ;         function InitTimer0
0178            965   ;        -----------------------------------------
0178            966   _InitTimer0:
0178            967   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:177: TR0=0; // Stop timer 0
0178 C28C       968            clr     _TR0
017A            969   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:178: TMOD=(TMOD&0xf0)|0x01; // 16-bit timer
017A 74F0       970            mov     a,#0xF0
017C 5589       971            anl     a,_TMOD
017E 4401       972            orl     a,#0x01
0180 F589       973            mov     _TMOD,a
0182            974   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:179: TH0=TIMER0_RELOAD_VALUE/0x100; // I think the RHS is 0001 0000 0000, are we dividing?
0182 758CFE     975            mov     _TH0,#0xFE
0185            976   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:180: TL0=TIMER0_RELOAD_VALUE%0x100; // % means modulo, apparently? ...are we modulo-ing?
0185 758A90     977            mov     _TL0,#0x90
0188            978   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:181: TR0=1; // Start timer 0 (bit 4 in TCON)
0188 D28C       979            setb    _TR0
018A            980   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:182: ET0=1; // Enable timer 0 interrupt - the interrupt controller IEN0 is bit-adressable, so we change only the bit we need
018A D2A9       981            setb    _ET0
018C            982   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:183: EA=1;  // Enable global interrupts
018C D2AF       983            setb    _EA
018E 22         984            ret
018F            985   ;------------------------------------------------------------
018F            986   ;Allocation info for local variables in function 'Timer0ISR'
018F            987   ;------------------------------------------------------------
018F            988   ;------------------------------------------------------------
018F            989   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:187: void Timer0ISR (void) interrupt 1{
018F            990   ;        -----------------------------------------
018F            991   ;         function Timer0ISR
018F            992   ;        -----------------------------------------
018F            993   _Timer0ISR:
018F C0E0       994            push    acc
0191 C0D0       995            push    psw
0193 75D000     996            mov     psw,#0x00
0196            997   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:189: TR0=0; // Stop timer 0
0196 C28C       998            clr     _TR0
0198            999   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:190: TH0=TIMER0_RELOAD_VALUE/0x100;
0198 758CFE    1000            mov     _TH0,#0xFE
019B           1001   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:191: TL0=TIMER0_RELOAD_VALUE%0x100;
019B 758A90    1002            mov     _TL0,#0x90
019E           1003   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:192: TR0=1; // Start timer 0
019E D28C      1004            setb    _TR0
01A0           1005   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:194: if(++pwmcount>99) pwmcount=0;
01A0 0530      1006            inc     _pwmcount
01A2 E530      1007            mov     a,_pwmcount
01A4 249C      1008            add     a,#0xff - 0x63
01A6 5001      1009            jnc     L015002?
01A8 753000    1010            mov     _pwmcount,#0x00
01AB           1011   L015002?:
01AB           1012   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:195: P0_5=(pwm_left>pwmcount)?1:0;
01AB C3        1013            clr     c
01AC E530      1014            mov     a,_pwmcount
01AE 95F0      1015            subb    a,_pwm_left
01B0 9285      1016            mov     _P0_5,c
01B2           1017   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:196: P0_6=(pwm_right>pwmcount)?1:0;
01B2 C3        1018            clr     c
01B3 E530      1019            mov     a,_pwmcount
01B5 95B0      1020            subb    a,_pwm_right
01B7 9286      1021            mov     _P0_6,c
01B9           1022   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:198: msCount++;
01B9 7401      1023            mov     a,#0x01
01BB 25F0      1024            add     a,_msCount
01BD F5F0      1025            mov     _msCount,a
01BF E4        1026            clr     a
01C0 35F1      1027            addc    a,(_msCount + 1)
01C2 F5F1      1028            mov     (_msCount + 1),a
01C4           1029   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:199: if(msCount==10000)
01C4 7410      1030            mov     a,#0x10
01C6 B5F088    1031            cjne    a,_msCount,L015008?
01C9 7427      1032            mov     a,#0x27
01CB B5F188    1033            cjne    a,(_msCount + 1),L015008?
01CE           1034   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:201: time_update_flag=1;
01CE D2E0      1035            setb    _time_update_flag
01D0           1036   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:202: msCount=0;
01D0 E4        1037            clr     a
01D1 F5F0      1038            mov     _msCount,a
01D3 F5F1      1039            mov     (_msCount + 1),a
01D5           1040   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:203: secs++;
01D5 05B0      1041            inc     _secs
01D7           1042   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:204: if(secs==60)
01D7 743C      1043            mov     a,#0x3C
01D9 B5B088    1044            cjne    a,_secs,L015008?
01DC           1045   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:206: secs=0;
01DC 75B000    1046            mov     _secs,#0x00
01DF           1047   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:207: mins++;
01DF 0570      1048            inc     _mins
01E1           1049   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:208: if(mins==60)
01E1 743C      1050            mov     a,#0x3C
01E3 B57088    1051            cjne    a,_mins,L015008?
01E6           1052   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:210: mins=0;
01E6 757000    1053            mov     _mins,#0x00
01E9           1054   L015008?:
01E9           1055   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:215: if(line_counter_flag==1){
01E9 3090C8    1056            jnb     _line_counter_flag,L015011?
01EC           1057   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:216: line_timer++;
01EC 7401      1058            mov     a,#0x01
01EE 2570      1059            add     a,_line_timer
01F0 F570      1060            mov     _line_timer,a
01F2 E4        1061            clr     a
01F3 3571      1062            addc    a,(_line_timer + 1)
01F5 F571      1063            mov     (_line_timer + 1),a
01F7           1064   L015011?:
01F7 D0D0      1065            pop     psw
01F9 D0E0      1066            pop     acc
01FB 32        1067            reti
01FC           1068   ;        eliminated unneeded push/pop dpl
01FC           1069   ;        eliminated unneeded push/pop dph
01FC           1070   ;        eliminated unneeded push/pop b
01FC           1071   ;------------------------------------------------------------
01FC           1072   ;Allocation info for local variables in function 'display_LCD'
01FC           1073   ;------------------------------------------------------------
01FC           1074   ;buff                      Allocated with name '_display_LCD_buff_1_94'
01FC           1075   ;------------------------------------------------------------
01FC           1076   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:220: void display_LCD(void){
01FC           1077   ;        -----------------------------------------
01FC           1078   ;         function display_LCD
01FC           1079   ;        -----------------------------------------
01FC           1080   _display_LCD:
01FC           1081   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:223: time_update_flag=0;
01FC C2E0      1082            clr     _time_update_flag
01FE           1083   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:224: sprintf(buff, "V=%5.2f L:%5.2f", (AD1DAT0/255.0)*3.3, (AD1DAT1/255.0)*3.3); // Display the voltage at pin P0.1
01FE 85D682    1084            mov     dpl,_AD1DAT1
0201 120100    1085            lcall   ___uchar2fs
0204 AA82      1086            mov     r2,dpl
0206 AB83      1087            mov     r3,dph
0208 ACF0      1088            mov     r4,b
020A FD        1089            mov     r5,a
020B E4        1090            clr     a
020C C0E0      1091            push    acc
020E C0E0      1092            push    acc
0210 747F      1093            mov     a,#0x7F
0212 C0E0      1094            push    acc
0214 7443      1095            mov     a,#0x43
0216 C0E0      1096            push    acc
0218 8A82      1097            mov     dpl,r2
021A 8B83      1098            mov     dph,r3
021C 8CF0      1099            mov     b,r4
021E ED        1100            mov     a,r5
021F 120100    1101            lcall   ___fsdiv
0222 AA82      1102            mov     r2,dpl
0224 AB83      1103            mov     r3,dph
0226 ACF0      1104            mov     r4,b
0228 FD        1105            mov     r5,a
0229 E581      1106            mov     a,sp
022B 24FC      1107            add     a,#0xfc
022D F581      1108            mov     sp,a
022F C002      1109            push    ar2
0231 C003      1110            push    ar3
0233 C004      1111            push    ar4
0235 C005      1112            push    ar5
0237 903333    1113            mov     dptr,#0x3333
023A 75F053    1114            mov     b,#0x53
023D 7440      1115            mov     a,#0x40
023F 120100    1116            lcall   ___fsmul
0242 AA82      1117            mov     r2,dpl
0244 AB83      1118            mov     r3,dph
0246 ACF0      1119            mov     r4,b
0248 FD        1120            mov     r5,a
0249 E581      1121            mov     a,sp
024B 24FC      1122            add     a,#0xfc
024D F581      1123            mov     sp,a
024F 85D582    1124            mov     dpl,_AD1DAT0
0252 C002      1125            push    ar2
0254 C003      1126            push    ar3
0256 C004      1127            push    ar4
0258 C005      1128            push    ar5
025A 120100    1129            lcall   ___uchar2fs
025D AE82      1130            mov     r6,dpl
025F AF83      1131            mov     r7,dph
0261 A8F0      1132            mov     r0,b
0263 F9        1133            mov     r1,a
0264 E4        1134            clr     a
0265 C0E0      1135            push    acc
0267 C0E0      1136            push    acc
0269 747F      1137            mov     a,#0x7F
026B C0E0      1138            push    acc
026D 7443      1139            mov     a,#0x43
026F C0E0      1140            push    acc
0271 8E82      1141            mov     dpl,r6
0273 8F83      1142            mov     dph,r7
0275 88F0      1143            mov     b,r0
0277 E9        1144            mov     a,r1
0278 120100    1145            lcall   ___fsdiv
027B AE82      1146            mov     r6,dpl
027D AF83      1147            mov     r7,dph
027F A8F0      1148            mov     r0,b
0281 F9        1149            mov     r1,a
0282 E581      1150            mov     a,sp
0284 24FC      1151            add     a,#0xfc
0286 F581      1152            mov     sp,a
0288 C006      1153            push    ar6
028A C007      1154            push    ar7
028C C000      1155            push    ar0
028E C001      1156            push    ar1
0290 903333    1157            mov     dptr,#0x3333
0293 75F053    1158            mov     b,#0x53
0296 7440      1159            mov     a,#0x40
0298 120100    1160            lcall   ___fsmul
029B AE82      1161            mov     r6,dpl
029D AF83      1162            mov     r7,dph
029F A8F0      1163            mov     r0,b
02A1 F9        1164            mov     r1,a
02A2 E581      1165            mov     a,sp
02A4 24FC      1166            add     a,#0xfc
02A6 F581      1167            mov     sp,a
02A8 C006      1168            push    ar6
02AA C007      1169            push    ar7
02AC C000      1170            push    ar0
02AE C001      1171            push    ar1
02B0 7408      1172            mov     a,#__str_0
02B2 C0E0      1173            push    acc
02B4 74B1      1174            mov     a,#(__str_0 >> 8)
02B6 C0E0      1175            push    acc
02B8 7480      1176            mov     a,#0x80
02BA C0E0      1177            push    acc
02BC 74F8      1178            mov     a,#_display_LCD_buff_1_94
02BE C0E0      1179            push    acc
02C0 74A3      1180            mov     a,#(_display_LCD_buff_1_94 >> 8)
02C2 C0E0      1181            push    acc
02C4 7440      1182            mov     a,#0x40
02C6 C0E0      1183            push    acc
02C8 120100    1184            lcall   _sprintf
02CB E581      1185            mov     a,sp
02CD 24F2      1186            add     a,#0xf2
02CF F581      1187            mov     sp,a
02D1           1188   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:225: LCDprint(buff, 1, 1);
02D1 753001    1189            mov     _LCDprint_PARM_2,#0x01
02D4 D240      1190            setb    _LCDprint_PARM_3
02D6 90A3F8    1191            mov     dptr,#_display_LCD_buff_1_94
02D9 75F040    1192            mov     b,#0x40
02DC 120100    1193            lcall   _LCDprint
02DF           1194   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:226: sprintf(buff, "%02d:%02d R: %5.2f ", mins, secs, (AD1DAT2/255.0)*3.3); // Display the clock
02DF 85D782    1195            mov     dpl,_AD1DAT2
02E2 120100    1196            lcall   ___uchar2fs
02E5 AA82      1197            mov     r2,dpl
02E7 AB83      1198            mov     r3,dph
02E9 ACF0      1199            mov     r4,b
02EB FD        1200            mov     r5,a
02EC E4        1201            clr     a
02ED C0E0      1202            push    acc
02EF C0E0      1203            push    acc
02F1 747F      1204            mov     a,#0x7F
02F3 C0E0      1205            push    acc
02F5 7443      1206            mov     a,#0x43
02F7 C0E0      1207            push    acc
02F9 8A82      1208            mov     dpl,r2
02FB 8B83      1209            mov     dph,r3
02FD 8CF0      1210            mov     b,r4
02FF ED        1211            mov     a,r5
0300 120100    1212            lcall   ___fsdiv
0303 AA82      1213            mov     r2,dpl
0305 AB83      1214            mov     r3,dph
0307 ACF0      1215            mov     r4,b
0309 FD        1216            mov     r5,a
030A E581      1217            mov     a,sp
030C 24FC      1218            add     a,#0xfc
030E F581      1219            mov     sp,a
0310 C002      1220            push    ar2
0312 C003      1221            push    ar3
0314 C004      1222            push    ar4
0316 C005      1223            push    ar5
0318 903333    1224            mov     dptr,#0x3333
031B 75F053    1225            mov     b,#0x53
031E 7440      1226            mov     a,#0x40
0320 120100    1227            lcall   ___fsmul
0323 AA82      1228            mov     r2,dpl
0325 AB83      1229            mov     r3,dph
0327 ACF0      1230            mov     r4,b
0329 FD        1231            mov     r5,a
032A E581      1232            mov     a,sp
032C 24FC      1233            add     a,#0xfc
032E F581      1234            mov     sp,a
0330 AEB0      1235            mov     r6,_secs
0332 7F00      1236            mov     r7,#0x00
0334 A870      1237            mov     r0,_mins
0336 7900      1238            mov     r1,#0x00
0338 C002      1239            push    ar2
033A C003      1240            push    ar3
033C C004      1241            push    ar4
033E C005      1242            push    ar5
0340 C006      1243            push    ar6
0342 C007      1244            push    ar7
0344 C000      1245            push    ar0
0346 C001      1246            push    ar1
0348 7488      1247            mov     a,#__str_1
034A C0E0      1248            push    acc
034C 74B1      1249            mov     a,#(__str_1 >> 8)
034E C0E0      1250            push    acc
0350 7480      1251            mov     a,#0x80
0352 C0E0      1252            push    acc
0354 74F8      1253            mov     a,#_display_LCD_buff_1_94
0356 C0E0      1254            push    acc
0358 74A3      1255            mov     a,#(_display_LCD_buff_1_94 >> 8)
035A C0E0      1256            push    acc
035C 7440      1257            mov     a,#0x40
035E C0E0      1258            push    acc
0360 120100    1259            lcall   _sprintf
0363 E581      1260            mov     a,sp
0365 24F2      1261            add     a,#0xf2
0367 F581      1262            mov     sp,a
0369           1263   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:227: LCDprint(buff, 2, 1);
0369 753002    1264            mov     _LCDprint_PARM_2,#0x02
036C D240      1265            setb    _LCDprint_PARM_3
036E 90A3F8    1266            mov     dptr,#_display_LCD_buff_1_94
0371 75F040    1267            mov     b,#0x40
0374 020100    1268            ljmp    _LCDprint
0377           1269   ;------------------------------------------------------------
0377           1270   ;Allocation info for local variables in function 'main'
0377           1271   ;------------------------------------------------------------
0377           1272   ;k_p                       Allocated to registers 
0377           1273   ;k_d                       Allocated to registers 
0377           1274   ;cor                       Allocated with name '_main_cor_1_96'
0377           1275   ;cur_error                 Allocated with name '_main_cur_error_1_96'
0377           1276   ;pre_error                 Allocated with name '_main_pre_error_1_96'
0377           1277   ;thresh                    Allocated to registers 
0377           1278   ;line_counter              Allocated with name '_main_line_counter_1_96'
0377           1279   ;exec                      Allocated with name '_main_exec_1_96'
0377           1280   ;start                     Allocated to registers 
0377           1281   ;left                      Allocated with name '_main_left_1_96'
0377           1282   ;right                     Allocated with name '_main_right_1_96'
0377           1283   ;line_sensor               Allocated with name '_main_line_sensor_1_96'
0377           1284   ;diff                      Allocated with name '_main_diff_1_96'
0377           1285   ;------------------------------------------------------------
0377           1286   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:230: void main (void){
0377           1287   ;        -----------------------------------------
0377           1288   ;         function main
0377           1289   ;        -----------------------------------------
0377           1290   _main:
0377           1291   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:235: double cur_error =0;
0377           1292   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:238: int line_counter = 0;
0377           1293   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:239: int exec = 0;
0377 E4        1294            clr     a
0378 F588      1295            mov     _main_cur_error_1_96,a
037A F589      1296            mov     (_main_cur_error_1_96 + 1),a
037C F58A      1297            mov     (_main_cur_error_1_96 + 2),a
037E F58B      1298            mov     (_main_cur_error_1_96 + 3),a
0380 F528      1299            mov     _main_line_counter_1_96,a
0382 F529      1300            mov     (_main_line_counter_1_96 + 1),a
0384 F568      1301            mov     _main_exec_1_96,a
0386 F569      1302            mov     (_main_exec_1_96 + 1),a
0388           1303   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:243: double left = (AD1DAT1/255.0)*3.3;
0388 E5D6      1304            mov     a,_AD1DAT1
038A           1305   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:244: double right = (AD1DAT2/255.0)*3.3;
038A E5D7      1306            mov     a,_AD1DAT2
038C           1307   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:245: double line_sensor = (AD1DAT3/255.0)*3.3;
038C E5F5      1308            mov     a,_AD1DAT3
038E           1309   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:249: InitPorts();
038E 120100    1310            lcall   _InitPorts
0391           1311   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:250: LCD_8BIT();
0391 120100    1312            lcall   _LCD_8BIT
0394           1313   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:251: InitSerialPort();
0394 120100    1314            lcall   _InitSerialPort
0397           1315   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:252: InitADC();
0397 120100    1316            lcall   _InitADC
039A           1317   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:253: InitTimer0();
039A 120100    1318            lcall   _InitTimer0
039D           1319   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:261: pre_error = 0;
039D 75D800    1320            mov     _main_pre_error_1_96,#0x00
03A0 75D900    1321            mov     (_main_pre_error_1_96 + 1),#0x00
03A3 75DA00    1322            mov     (_main_pre_error_1_96 + 2),#0x00
03A6 75DB00    1323            mov     (_main_pre_error_1_96 + 3),#0x00
03A9           1324   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:262: while(1)
03A9           1325   L017036?:
03A9           1326   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:272: left = (AD1DAT1/255.0)*3.3;
03A9 85D682    1327            mov     dpl,_AD1DAT1
03AC 120100    1328            lcall   ___uchar2fs
03AF AC82      1329            mov     r4,dpl
03B1 AD83      1330            mov     r5,dph
03B3 AAF0      1331            mov     r2,b
03B5 FB        1332            mov     r3,a
03B6 E4        1333            clr     a
03B7 C0E0      1334            push    acc
03B9 C0E0      1335            push    acc
03BB 747F      1336            mov     a,#0x7F
03BD C0E0      1337            push    acc
03BF 7443      1338            mov     a,#0x43
03C1 C0E0      1339            push    acc
03C3 8C82      1340            mov     dpl,r4
03C5 8D83      1341            mov     dph,r5
03C7 8AF0      1342            mov     b,r2
03C9 EB        1343            mov     a,r3
03CA 120100    1344            lcall   ___fsdiv
03CD AA82      1345            mov     r2,dpl
03CF AB83      1346            mov     r3,dph
03D1 ACF0      1347            mov     r4,b
03D3 FD        1348            mov     r5,a
03D4 E581      1349            mov     a,sp
03D6 24FC      1350            add     a,#0xfc
03D8 F581      1351            mov     sp,a
03DA C002      1352            push    ar2
03DC C003      1353            push    ar3
03DE C004      1354            push    ar4
03E0 C005      1355            push    ar5
03E2 903333    1356            mov     dptr,#0x3333
03E5 75F053    1357            mov     b,#0x53
03E8 7440      1358            mov     a,#0x40
03EA 120100    1359            lcall   ___fsmul
03ED 8582A8    1360            mov     _main_left_1_96,dpl
03F0 8583A9    1361            mov     (_main_left_1_96 + 1),dph
03F3 85F0AA    1362            mov     (_main_left_1_96 + 2),b
03F6 F5AB      1363            mov     (_main_left_1_96 + 3),a
03F8 E581      1364            mov     a,sp
03FA 24FC      1365            add     a,#0xfc
03FC F581      1366            mov     sp,a
03FE           1367   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:273: right = (AD1DAT2/255.0)*3.3;
03FE 85D782    1368            mov     dpl,_AD1DAT2
0401 120100    1369            lcall   ___uchar2fs
0404 A882      1370            mov     r0,dpl
0406 A983      1371            mov     r1,dph
0408 AAF0      1372            mov     r2,b
040A FB        1373            mov     r3,a
040B E4        1374            clr     a
040C C0E0      1375            push    acc
040E C0E0      1376            push    acc
0410 747F      1377            mov     a,#0x7F
0412 C0E0      1378            push    acc
0414 7443      1379            mov     a,#0x43
0416 C0E0      1380            push    acc
0418 8882      1381            mov     dpl,r0
041A 8983      1382            mov     dph,r1
041C 8AF0      1383            mov     b,r2
041E EB        1384            mov     a,r3
041F 120100    1385            lcall   ___fsdiv
0422 AA82      1386            mov     r2,dpl
0424 AB83      1387            mov     r3,dph
0426 ACF0      1388            mov     r4,b
0428 FD        1389            mov     r5,a
0429 E581      1390            mov     a,sp
042B 24FC      1391            add     a,#0xfc
042D F581      1392            mov     sp,a
042F C002      1393            push    ar2
0431 C003      1394            push    ar3
0433 C004      1395            push    ar4
0435 C005      1396            push    ar5
0437 903333    1397            mov     dptr,#0x3333
043A 75F053    1398            mov     b,#0x53
043D 7440      1399            mov     a,#0x40
043F 120100    1400            lcall   ___fsmul
0442 8582F8    1401            mov     _main_right_1_96,dpl
0445 8583F9    1402            mov     (_main_right_1_96 + 1),dph
0448 85F0FA    1403            mov     (_main_right_1_96 + 2),b
044B F5FB      1404            mov     (_main_right_1_96 + 3),a
044D E581      1405            mov     a,sp
044F 24FC      1406            add     a,#0xfc
0451 F581      1407            mov     sp,a
0453           1408   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:274: line_sensor = (AD1DAT3/255.0)*3.3;
0453 85F582    1409            mov     dpl,_AD1DAT3
0456 120100    1410            lcall   ___uchar2fs
0459 A882      1411            mov     r0,dpl
045B A983      1412            mov     r1,dph
045D AAF0      1413            mov     r2,b
045F FB        1414            mov     r3,a
0460 E4        1415            clr     a
0461 C0E0      1416            push    acc
0463 C0E0      1417            push    acc
0465 747F      1418            mov     a,#0x7F
0467 C0E0      1419            push    acc
0469 7443      1420            mov     a,#0x43
046B C0E0      1421            push    acc
046D 8882      1422            mov     dpl,r0
046F 8983      1423            mov     dph,r1
0471 8AF0      1424            mov     b,r2
0473 EB        1425            mov     a,r3
0474 120100    1426            lcall   ___fsdiv
0477 AA82      1427            mov     r2,dpl
0479 AB83      1428            mov     r3,dph
047B ACF0      1429            mov     r4,b
047D FD        1430            mov     r5,a
047E E581      1431            mov     a,sp
0480 24FC      1432            add     a,#0xfc
0482 F581      1433            mov     sp,a
0484 C002      1434            push    ar2
0486 C003      1435            push    ar3
0488 C004      1436            push    ar4
048A C005      1437            push    ar5
048C 903333    1438            mov     dptr,#0x3333
048F 75F053    1439            mov     b,#0x53
0492 7440      1440            mov     a,#0x40
0494 120100    1441            lcall   ___fsmul
0497 858248    1442            mov     _main_line_sensor_1_96,dpl
049A 858349    1443            mov     (_main_line_sensor_1_96 + 1),dph
049D 85F04A    1444            mov     (_main_line_sensor_1_96 + 2),b
04A0 F54B      1445            mov     (_main_line_sensor_1_96 + 3),a
04A2 E581      1446            mov     a,sp
04A4 24FC      1447            add     a,#0xfc
04A6 F581      1448            mov     sp,a
04A8           1449   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:275: diff = left - right;
04A8 C0F8      1450            push    _main_right_1_96
04AA C0F9      1451            push    (_main_right_1_96 + 1)
04AC C0FA      1452            push    (_main_right_1_96 + 2)
04AE C0FB      1453            push    (_main_right_1_96 + 3)
04B0 85A882    1454            mov     dpl,_main_left_1_96
04B3 85A983    1455            mov     dph,(_main_left_1_96 + 1)
04B6 85AAF0    1456            mov     b,(_main_left_1_96 + 2)
04B9 E5AB      1457            mov     a,(_main_left_1_96 + 3)
04BB 120100    1458            lcall   ___fssub
04BE 858288    1459            mov     _main_diff_1_96,dpl
04C1 858389    1460            mov     (_main_diff_1_96 + 1),dph
04C4 85F08A    1461            mov     (_main_diff_1_96 + 2),b
04C7 F58B      1462            mov     (_main_diff_1_96 + 3),a
04C9 E581      1463            mov     a,sp
04CB 24FC      1464            add     a,#0xfc
04CD F581      1465            mov     sp,a
04CF           1466   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:278: if(time_update_flag==1) // If the clock has been updated, refresh the display
04CF 30E048    1467            jnb     _time_update_flag,L017002?
04D2           1468   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:280: display_LCD();
04D2 120100    1469            lcall   _display_LCD
04D5           1470   L017002?:
04D5           1471   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:284: cor = k_p * cur_error + k_d*(cur_error - pre_error)/0.001;
04D5 C088      1472            push    _main_cur_error_1_96
04D7 C089      1473            push    (_main_cur_error_1_96 + 1)
04D9 C08A      1474            push    (_main_cur_error_1_96 + 2)
04DB C08B      1475            push    (_main_cur_error_1_96 + 3)
04DD 900000    1476            mov     dptr,#0x0000
04E0 75F0A0    1477            mov     b,#0xA0
04E3 7441      1478            mov     a,#0x41
04E5 120100    1479            lcall   ___fsmul
04E8 AC82      1480            mov     r4,dpl
04EA AD83      1481            mov     r5,dph
04EC AAF0      1482            mov     r2,b
04EE FB        1483            mov     r3,a
04EF E581      1484            mov     a,sp
04F1 24FC      1485            add     a,#0xfc
04F3 F581      1486            mov     sp,a
04F5 C002      1487            push    ar2
04F7 C003      1488            push    ar3
04F9 C004      1489            push    ar4
04FB C005      1490            push    ar5
04FD C0D8      1491            push    _main_pre_error_1_96
04FF C0D9      1492            push    (_main_pre_error_1_96 + 1)
0501 C0DA      1493            push    (_main_pre_error_1_96 + 2)
0503 C0DB      1494            push    (_main_pre_error_1_96 + 3)
0505 858882    1495            mov     dpl,_main_cur_error_1_96
0508 858983    1496            mov     dph,(_main_cur_error_1_96 + 1)
050B 858AF0    1497            mov     b,(_main_cur_error_1_96 + 2)
050E E58B      1498            mov     a,(_main_cur_error_1_96 + 3)
0510 120100    1499            lcall   ___fssub
0513 A882      1500            mov     r0,dpl
0515 A983      1501            mov     r1,dph
0517 AEF0      1502            mov     r6,b
0519 FF        1503            mov     r7,a
051A E581      1504            mov     a,sp
051C 24FC      1505            add     a,#0xfc
051E F581      1506            mov     sp,a
0520 746F      1507            mov     a,#0x6F
0522 C0E0      1508            push    acc
0524 7412      1509            mov     a,#0x12
0526 C0E0      1510            push    acc
0528 7483      1511            mov     a,#0x83
052A C0E0      1512            push    acc
052C 743A      1513            mov     a,#0x3A
052E C0E0      1514            push    acc
0530 8882      1515            mov     dpl,r0
0532 8983      1516            mov     dph,r1
0534 8EF0      1517            mov     b,r6
0536 EF        1518            mov     a,r7
0537 120100    1519            lcall   ___fsdiv
053A AE82      1520            mov     r6,dpl
053C AF83      1521            mov     r7,dph
053E A8F0      1522            mov     r0,b
0540 F9        1523            mov     r1,a
0541 E581      1524            mov     a,sp
0543 24FC      1525            add     a,#0xfc
0545 F581      1526            mov     sp,a
0547 D005      1527            pop     ar5
0549 D004      1528            pop     ar4
054B D003      1529            pop     ar3
054D D002      1530            pop     ar2
054F C006      1531            push    ar6
0551 C007      1532            push    ar7
0553 C000      1533            push    ar0
0555 C001      1534            push    ar1
0557 8C82      1535            mov     dpl,r4
0559 8D83      1536            mov     dph,r5
055B 8AF0      1537            mov     b,r2
055D EB        1538            mov     a,r3
055E 120100    1539            lcall   ___fsadd
0561 858238    1540            mov     _main_cor_1_96,dpl
0564 858339    1541            mov     (_main_cor_1_96 + 1),dph
0567 85F03A    1542            mov     (_main_cor_1_96 + 2),b
056A F53B      1543            mov     (_main_cor_1_96 + 3),a
056C E581      1544            mov     a,sp
056E 24FC      1545            add     a,#0xfc
0570 F581      1546            mov     sp,a
0572           1547   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:286: if((left > 0.7) && (left < 1) && (right > 0.7) && (right < 1)){
0572 7433      1548            mov     a,#0x33
0574 C0E0      1549            push    acc
0576 C0E0      1550            push    acc
0578 C0E0      1551            push    acc
057A 743F      1552            mov     a,#0x3F
057C C0E0      1553            push    acc
057E 85A882    1554            mov     dpl,_main_left_1_96
0581 85A983    1555            mov     dph,(_main_left_1_96 + 1)
0584 85AAF0    1556            mov     b,(_main_left_1_96 + 2)
0587 E5AB      1557            mov     a,(_main_left_1_96 + 3)
0589 120100    1558            lcall   ___fsgt
058C AE82      1559            mov     r6,dpl
058E E581      1560            mov     a,sp
0590 24FC      1561            add     a,#0xfc
0592 F581      1562            mov     sp,a
0594 EE        1563            mov     a,r6
0595 7001      1564            jnz     L017061?
0597 020100    1565            ljmp    L017004?
059A           1566   L017061?:
059A E4        1567            clr     a
059B C0E0      1568            push    acc
059D C0E0      1569            push    acc
059F 7480      1570            mov     a,#0x80
05A1 C0E0      1571            push    acc
05A3 743F      1572            mov     a,#0x3F
05A5 C0E0      1573            push    acc
05A7 85A882    1574            mov     dpl,_main_left_1_96
05AA 85A983    1575            mov     dph,(_main_left_1_96 + 1)
05AD 85AAF0    1576            mov     b,(_main_left_1_96 + 2)
05B0 E5AB      1577            mov     a,(_main_left_1_96 + 3)
05B2 120100    1578            lcall   ___fslt
05B5 AE82      1579            mov     r6,dpl
05B7 E581      1580            mov     a,sp
05B9 24FC      1581            add     a,#0xfc
05BB F581      1582            mov     sp,a
05BD EE        1583            mov     a,r6
05BE 6001      1584            jz      L017004?
05C0 7433      1585            mov     a,#0x33
05C2 C0E0      1586            push    acc
05C4 C0E0      1587            push    acc
05C6 C0E0      1588            push    acc
05C8 743F      1589            mov     a,#0x3F
05CA C0E0      1590            push    acc
05CC 85F882    1591            mov     dpl,_main_right_1_96
05CF 85F983    1592            mov     dph,(_main_right_1_96 + 1)
05D2 85FAF0    1593            mov     b,(_main_right_1_96 + 2)
05D5 E5FB      1594            mov     a,(_main_right_1_96 + 3)
05D7 120100    1595            lcall   ___fsgt
05DA AE82      1596            mov     r6,dpl
05DC E581      1597            mov     a,sp
05DE 24FC      1598            add     a,#0xfc
05E0 F581      1599            mov     sp,a
05E2 EE        1600            mov     a,r6
05E3 6001      1601            jz      L017004?
05E5 E4        1602            clr     a
05E6 C0E0      1603            push    acc
05E8 C0E0      1604            push    acc
05EA 7480      1605            mov     a,#0x80
05EC C0E0      1606            push    acc
05EE 743F      1607            mov     a,#0x3F
05F0 C0E0      1608            push    acc
05F2 85F882    1609            mov     dpl,_main_right_1_96
05F5 85F983    1610            mov     dph,(_main_right_1_96 + 1)
05F8 85FAF0    1611            mov     b,(_main_right_1_96 + 2)
05FB E5FB      1612            mov     a,(_main_right_1_96 + 3)
05FD 120100    1613            lcall   ___fslt
0600 AE82      1614            mov     r6,dpl
0602 E581      1615            mov     a,sp
0604 24FC      1616            add     a,#0xfc
0606 F581      1617            mov     sp,a
0608 EE        1618            mov     a,r6
0609 6001      1619            jz      L017004?
060B           1620   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:287: cur_error = 0;
060B 758800    1621            mov     _main_cur_error_1_96,#0x00
060E 758900    1622            mov     (_main_cur_error_1_96 + 1),#0x00
0611 758A00    1623            mov     (_main_cur_error_1_96 + 2),#0x00
0614 758B00    1624            mov     (_main_cur_error_1_96 + 3),#0x00
0617           1625   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:288: pwm_left = 100;
0617 75F064    1626            mov     _pwm_left,#0x64
061A           1627   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:289: pwm_right = 100;
061A 75B064    1628            mov     _pwm_right,#0x64
061D           1629   L017004?:
061D           1630   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:291: if(1<diff){       
061D C088      1631            push    _main_diff_1_96
061F C089      1632            push    (_main_diff_1_96 + 1)
0621 C08A      1633            push    (_main_diff_1_96 + 2)
0623 C08B      1634            push    (_main_diff_1_96 + 3)
0625 900000    1635            mov     dptr,#0x0000
0628 75F080    1636            mov     b,#0x80
062B 743F      1637            mov     a,#0x3F
062D 120100    1638            lcall   ___fslt
0630 AE82      1639            mov     r6,dpl
0632 E581      1640            mov     a,sp
0634 24FC      1641            add     a,#0xfc
0636 F581      1642            mov     sp,a
0638 EE        1643            mov     a,r6
0639 6001      1644            jz      L017009?
063B           1645   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:292: cur_error = 1;
063B 758800    1646            mov     _main_cur_error_1_96,#0x00
063E 758900    1647            mov     (_main_cur_error_1_96 + 1),#0x00
0641 758A80    1648            mov     (_main_cur_error_1_96 + 2),#0x80
0644 758B3F    1649            mov     (_main_cur_error_1_96 + 3),#0x3F
0647           1650   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:293: pwm_left = 100 - cor;
0647 C038      1651            push    _main_cor_1_96
0649 C039      1652            push    (_main_cor_1_96 + 1)
064B C03A      1653            push    (_main_cor_1_96 + 2)
064D C03B      1654            push    (_main_cor_1_96 + 3)
064F 900000    1655            mov     dptr,#0x0000
0652 75F0C8    1656            mov     b,#0xC8
0655 7442      1657            mov     a,#0x42
0657 120100    1658            lcall   ___fssub
065A AE82      1659            mov     r6,dpl
065C AF83      1660            mov     r7,dph
065E A8F0      1661            mov     r0,b
0660 F9        1662            mov     r1,a
0661 E581      1663            mov     a,sp
0663 24FC      1664            add     a,#0xfc
0665 F581      1665            mov     sp,a
0667 8E82      1666            mov     dpl,r6
0669 8F83      1667            mov     dph,r7
066B 88F0      1668            mov     b,r0
066D E9        1669            mov     a,r1
066E 120100    1670            lcall   ___fs2uchar
0671 8582F0    1671            mov     _pwm_left,dpl
0674           1672   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:294: pwm_right = 100;
0674 75B064    1673            mov     _pwm_right,#0x64
0677           1674   L017009?:
0677           1675   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:296: if(diff<-1){
0677 E4        1676            clr     a
0678 C0E0      1677            push    acc
067A C0E0      1678            push    acc
067C 7480      1679            mov     a,#0x80
067E C0E0      1680            push    acc
0680 74BF      1681            mov     a,#0xBF
0682 C0E0      1682            push    acc
0684 858882    1683            mov     dpl,_main_diff_1_96
0687 858983    1684            mov     dph,(_main_diff_1_96 + 1)
068A 858AF0    1685            mov     b,(_main_diff_1_96 + 2)
068D E58B      1686            mov     a,(_main_diff_1_96 + 3)
068F 120100    1687            lcall   ___fslt
0692 AE82      1688            mov     r6,dpl
0694 E581      1689            mov     a,sp
0696 24FC      1690            add     a,#0xfc
0698 F581      1691            mov     sp,a
069A EE        1692            mov     a,r6
069B 6001      1693            jz      L017011?
069D           1694   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:297: cur_error= -1;
069D 758800    1695            mov     _main_cur_error_1_96,#0x00
06A0 758900    1696            mov     (_main_cur_error_1_96 + 1),#0x00
06A3 758A80    1697            mov     (_main_cur_error_1_96 + 2),#0x80
06A6 758BBF    1698            mov     (_main_cur_error_1_96 + 3),#0xBF
06A9           1699   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:298: pwm_left = 100;
06A9 75F064    1700            mov     _pwm_left,#0x64
06AC           1701   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:299: pwm_right = 100 + cor;
06AC E4        1702            clr     a
06AD C0E0      1703            push    acc
06AF C0E0      1704            push    acc
06B1 74C8      1705            mov     a,#0xC8
06B3 C0E0      1706            push    acc
06B5 7442      1707            mov     a,#0x42
06B7 C0E0      1708            push    acc
06B9 853882    1709            mov     dpl,_main_cor_1_96
06BC 853983    1710            mov     dph,(_main_cor_1_96 + 1)
06BF 853AF0    1711            mov     b,(_main_cor_1_96 + 2)
06C2 E53B      1712            mov     a,(_main_cor_1_96 + 3)
06C4 120100    1713            lcall   ___fsadd
06C7 AE82      1714            mov     r6,dpl
06C9 AF83      1715            mov     r7,dph
06CB A8F0      1716            mov     r0,b
06CD F9        1717            mov     r1,a
06CE E581      1718            mov     a,sp
06D0 24FC      1719            add     a,#0xfc
06D2 F581      1720            mov     sp,a
06D4 8E82      1721            mov     dpl,r6
06D6 8F83      1722            mov     dph,r7
06D8 88F0      1723            mov     b,r0
06DA E9        1724            mov     a,r1
06DB 120100    1725            lcall   ___fs2uchar
06DE 8582B0    1726            mov     _pwm_right,dpl
06E1           1727   L017011?:
06E1           1728   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:301: if((left < 0.5) && (right < 0.5)){
06E1 E4        1729            clr     a
06E2 C0E0      1730            push    acc
06E4 C0E0      1731            push    acc
06E6 C0E0      1732            push    acc
06E8 743F      1733            mov     a,#0x3F
06EA C0E0      1734            push    acc
06EC 85A882    1735            mov     dpl,_main_left_1_96
06EF 85A983    1736            mov     dph,(_main_left_1_96 + 1)
06F2 85AAF0    1737            mov     b,(_main_left_1_96 + 2)
06F5 E5AB      1738            mov     a,(_main_left_1_96 + 3)
06F7 120100    1739            lcall   ___fslt
06FA AE82      1740            mov     r6,dpl
06FC E581      1741            mov     a,sp
06FE 24FC      1742            add     a,#0xfc
0700 F581      1743            mov     sp,a
0702 EE        1744            mov     a,r6
0703 7001      1745            jnz     L017067?
0705 020100    1746            ljmp    L017017?
0708           1747   L017067?:
0708 E4        1748            clr     a
0709 C0E0      1749            push    acc
070B C0E0      1750            push    acc
070D C0E0      1751            push    acc
070F 743F      1752            mov     a,#0x3F
0711 C0E0      1753            push    acc
0713 85F882    1754            mov     dpl,_main_right_1_96
0716 85F983    1755            mov     dph,(_main_right_1_96 + 1)
0719 85FAF0    1756            mov     b,(_main_right_1_96 + 2)
071C E5FB      1757            mov     a,(_main_right_1_96 + 3)
071E 120100    1758            lcall   ___fslt
0721 AE82      1759            mov     r6,dpl
0723 E581      1760            mov     a,sp
0725 24FC      1761            add     a,#0xfc
0727 F581      1762            mov     sp,a
0729 EE        1763            mov     a,r6
072A 7001      1764            jnz     L017068?
072C 020100    1765            ljmp    L017017?
072F           1766   L017068?:
072F           1767   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:302: if(pre_error>0){
072F E4        1768            clr     a
0730 C0E0      1769            push    acc
0732 C0E0      1770            push    acc
0734 C0E0      1771            push    acc
0736 C0E0      1772            push    acc
0738 85D882    1773            mov     dpl,_main_pre_error_1_96
073B 85D983    1774            mov     dph,(_main_pre_error_1_96 + 1)
073E 85DAF0    1775            mov     b,(_main_pre_error_1_96 + 2)
0741 E5DB      1776            mov     a,(_main_pre_error_1_96 + 3)
0743 120100    1777            lcall   ___fsgt
0746 AE82      1778            mov     r6,dpl
0748 E581      1779            mov     a,sp
074A 24FC      1780            add     a,#0xfc
074C F581      1781            mov     sp,a
074E EE        1782            mov     a,r6
074F 6001      1783            jz      L017013?
0751           1784   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:303: cur_error = 5;
0751 758800    1785            mov     _main_cur_error_1_96,#0x00
0754 758900    1786            mov     (_main_cur_error_1_96 + 1),#0x00
0757 758AA0    1787            mov     (_main_cur_error_1_96 + 2),#0xA0
075A 758B40    1788            mov     (_main_cur_error_1_96 + 3),#0x40
075D           1789   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:305: pwm_left = 100;
075D 75F064    1790            mov     _pwm_left,#0x64
0760           1791   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:306: pwm_right = 100 - cor;
0760 C006      1792            push    ar6
0762 C038      1793            push    _main_cor_1_96
0764 C039      1794            push    (_main_cor_1_96 + 1)
0766 C03A      1795            push    (_main_cor_1_96 + 2)
0768 C03B      1796            push    (_main_cor_1_96 + 3)
076A 900000    1797            mov     dptr,#0x0000
076D 75F0C8    1798            mov     b,#0xC8
0770 7442      1799            mov     a,#0x42
0772 120100    1800            lcall   ___fssub
0775 AF82      1801            mov     r7,dpl
0777 A883      1802            mov     r0,dph
0779 A9F0      1803            mov     r1,b
077B FA        1804            mov     r2,a
077C E581      1805            mov     a,sp
077E 24FC      1806            add     a,#0xfc
0780 F581      1807            mov     sp,a
0782 8F82      1808            mov     dpl,r7
0784 8883      1809            mov     dph,r0
0786 89F0      1810            mov     b,r1
0788 EA        1811            mov     a,r2
0789 120100    1812            lcall   ___fs2uchar
078C 8582B0    1813            mov     _pwm_right,dpl
078F D006      1814            pop     ar6
0791           1815   L017013?:
0791           1816   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:308: if(pre_error<=0){
0791 EE        1817            mov     a,r6
0792           1818   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:309: cur_error = -5;
0792 7001      1819            jnz     L017017?
0794 F588      1820            mov     _main_cur_error_1_96,a
0796 F589      1821            mov     (_main_cur_error_1_96 + 1),a
0798 758AA0    1822            mov     (_main_cur_error_1_96 + 2),#0xA0
079B 758BC0    1823            mov     (_main_cur_error_1_96 + 3),#0xC0
079E           1824   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:310: pwm_left = 100;
079E 75F064    1825            mov     _pwm_left,#0x64
07A1           1826   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:311: pwm_right = 100 + cor;
07A1 E4        1827            clr     a
07A2 C0E0      1828            push    acc
07A4 C0E0      1829            push    acc
07A6 74C8      1830            mov     a,#0xC8
07A8 C0E0      1831            push    acc
07AA 7442      1832            mov     a,#0x42
07AC C0E0      1833            push    acc
07AE 853882    1834            mov     dpl,_main_cor_1_96
07B1 853983    1835            mov     dph,(_main_cor_1_96 + 1)
07B4 853AF0    1836            mov     b,(_main_cor_1_96 + 2)
07B7 E53B      1837            mov     a,(_main_cor_1_96 + 3)
07B9 120100    1838            lcall   ___fsadd
07BC AA82      1839            mov     r2,dpl
07BE AB83      1840            mov     r3,dph
07C0 ACF0      1841            mov     r4,b
07C2 FD        1842            mov     r5,a
07C3 E581      1843            mov     a,sp
07C5 24FC      1844            add     a,#0xfc
07C7 F581      1845            mov     sp,a
07C9 8A82      1846            mov     dpl,r2
07CB 8B83      1847            mov     dph,r3
07CD 8CF0      1848            mov     b,r4
07CF ED        1849            mov     a,r5
07D0 120100    1850            lcall   ___fs2uchar
07D3 8582B0    1851            mov     _pwm_right,dpl
07D6           1852   L017017?:
07D6           1853   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:314: pre_error = cur_error;
07D6 8588D8    1854            mov     _main_pre_error_1_96,_main_cur_error_1_96
07D9 8589D9    1855            mov     (_main_pre_error_1_96 + 1),(_main_cur_error_1_96 + 1)
07DC 858ADA    1856            mov     (_main_pre_error_1_96 + 2),(_main_cur_error_1_96 + 2)
07DF 858BDB    1857            mov     (_main_pre_error_1_96 + 3),(_main_cur_error_1_96 + 3)
07E2           1858   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:315: printf("Error:%5.2f Left:%5.2f Right:%5.2f Left_Motor:%d Right_Motor:%d                \r", cur_error, left, right, pwm_left, pwm_right);
07E2 AAB0      1859            mov     r2,_pwm_right
07E4 7B00      1860            mov     r3,#0x00
07E6 ACF0      1861            mov     r4,_pwm_left
07E8 7D00      1862            mov     r5,#0x00
07EA C002      1863            push    ar2
07EC C003      1864            push    ar3
07EE C004      1865            push    ar4
07F0 C005      1866            push    ar5
07F2 C0F8      1867            push    _main_right_1_96
07F4 C0F9      1868            push    (_main_right_1_96 + 1)
07F6 C0FA      1869            push    (_main_right_1_96 + 2)
07F8 C0FB      1870            push    (_main_right_1_96 + 3)
07FA C0A8      1871            push    _main_left_1_96
07FC C0A9      1872            push    (_main_left_1_96 + 1)
07FE C0AA      1873            push    (_main_left_1_96 + 2)
0800 C0AB      1874            push    (_main_left_1_96 + 3)
0802 C088      1875            push    _main_cur_error_1_96
0804 C089      1876            push    (_main_cur_error_1_96 + 1)
0806 C08A      1877            push    (_main_cur_error_1_96 + 2)
0808 C08B      1878            push    (_main_cur_error_1_96 + 3)
080A 7488      1879            mov     a,#__str_2
080C C0E0      1880            push    acc
080E 74B5      1881            mov     a,#(__str_2 >> 8)
0810 C0E0      1882            push    acc
0812 7480      1883            mov     a,#0x80
0814 C0E0      1884            push    acc
0816 120100    1885            lcall   _printf
0819 E581      1886            mov     a,sp
081B 24ED      1887            add     a,#0xed
081D F581      1888            mov     sp,a
081F           1889   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:320: if(line_sensor>thresh){
081F E4        1890            clr     a
0820 C0E0      1891            push    acc
0822 C0E0      1892            push    acc
0824 C0E0      1893            push    acc
0826 7440      1894            mov     a,#0x40
0828 C0E0      1895            push    acc
082A 854882    1896            mov     dpl,_main_line_sensor_1_96
082D 854983    1897            mov     dph,(_main_line_sensor_1_96 + 1)
0830 854AF0    1898            mov     b,(_main_line_sensor_1_96 + 2)
0833 E54B      1899            mov     a,(_main_line_sensor_1_96 + 3)
0835 120100    1900            lcall   ___fsgt
0838 AA82      1901            mov     r2,dpl
083A E581      1902            mov     a,sp
083C 24FC      1903            add     a,#0xfc
083E F581      1904            mov     sp,a
0840 EA        1905            mov     a,r2
0841 7001      1906            jnz     L017071?
0843 020100    1907            ljmp    L017036?
0846           1908   L017071?:
0846           1909   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:322: if(line_counter == 0){
0846 E528      1910            mov     a,_main_line_counter_1_96
0848 4529      1911            orl     a,(_main_line_counter_1_96 + 1)
084A 7001      1912            jnz     L017020?
084C           1913   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:324: line_counter++;
084C 0528      1914            inc     _main_line_counter_1_96
084E E4        1915            clr     a
084F B52888    1916            cjne    a,_main_line_counter_1_96,L017073?
0852 0529      1917            inc     (_main_line_counter_1_96 + 1)
0854           1918   L017073?:
0854           1919   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:325: line_counter_flag = 1;
0854 D290      1920            setb    _line_counter_flag
0856 8001      1921            sjmp    L017021?
0858           1922   L017020?:
0858           1923   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:329: line_counter++;                                   
0858 0528      1924            inc     _main_line_counter_1_96
085A E4        1925            clr     a
085B B52808    1926            cjne    a,_main_line_counter_1_96,L017074?
085E 0529      1927            inc     (_main_line_counter_1_96 + 1)
0860           1928   L017074?:
0860           1929   L017021?:
0860           1930   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:332: if(line_timer == 2000){
0860 74D0      1931            mov     a,#0xD0
0862 B57048    1932            cjne    a,_line_timer,L017023?
0865 7407      1933            mov     a,#0x07
0867 B57148    1934            cjne    a,(_line_timer + 1),L017023?
086A           1935   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:333: line_counter_flag = 0;
086A C290      1936            clr     _line_counter_flag
086C           1937   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:334: line_timer = 0;
086C E4        1938            clr     a
086D F570      1939            mov     _line_timer,a
086F F571      1940            mov     (_line_timer + 1),a
0871           1941   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:335: exec = 1;                                         
0871 756801    1942            mov     _main_exec_1_96,#0x01
0874 E4        1943            clr     a
0875 F569      1944            mov     (_main_exec_1_96 + 1),a
0877           1945   L017023?:
0877           1946   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:339: if(exec == 1){
0877 7401      1947            mov     a,#0x01
0879 B56888    1948            cjne    a,_main_exec_1_96,L017077?
087C E4        1949            clr     a
087D B56988    1950            cjne    a,(_main_exec_1_96 + 1),L017077?
0880 8001      1951            sjmp    L017078?
0882           1952   L017077?:
0882 020100    1953            ljmp    L017032?
0885           1954   L017078?:
0885           1955   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:340: switch(line_counter){
0885 7402      1956            mov     a,#0x02
0887 B52848    1957            cjne    a,_main_line_counter_1_96,L017079?
088A E4        1958            clr     a
088B B52948    1959            cjne    a,(_main_line_counter_1_96 + 1),L017079?
088E 8001      1960            sjmp    L017024?
0890           1961   L017079?:
0890 7403      1962            mov     a,#0x03
0892 B528C8    1963            cjne    a,_main_line_counter_1_96,L017080?
0895 E4        1964            clr     a
0896 B529C8    1965            cjne    a,(_main_line_counter_1_96 + 1),L017080?
0899 8001      1966            sjmp    L017025?
089B           1967   L017080?:
089B 7404      1968            mov     a,#0x04
089D B52848    1969            cjne    a,_main_line_counter_1_96,L017081?
08A0 E4        1970            clr     a
08A1 B52948    1971            cjne    a,(_main_line_counter_1_96 + 1),L017081?
08A4 8001      1972            sjmp    L017026?
08A6           1973   L017081?:
08A6           1974   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:341: case 2:
08A6 8001      1975            sjmp    L017030?
08A8           1976   L017024?:
08A8           1977   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:342: printf("TURNING LEFT \r;");
08A8 7408      1978            mov     a,#__str_3
08AA C0E0      1979            push    acc
08AC 74BA      1980            mov     a,#(__str_3 >> 8)
08AE C0E0      1981            push    acc
08B0 7480      1982            mov     a,#0x80
08B2 C0E0      1983            push    acc
08B4 120100    1984            lcall   _printf
08B7 1581      1985            dec     sp
08B9 1581      1986            dec     sp
08BB 1581      1987            dec     sp
08BD           1988   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:343: pwm_left          = 100;
08BD 75F064    1989            mov     _pwm_left,#0x64
08C0           1990   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:344: pwm_right         =  20; 
08C0 75B014    1991            mov     _pwm_right,#0x14
08C3           1992   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:345: case 3:
08C3           1993   L017025?:
08C3           1994   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:346: printf("TURNING Right \r;");
08C3 7448      1995            mov     a,#__str_4
08C5 C0E0      1996            push    acc
08C7 74BA      1997            mov     a,#(__str_4 >> 8)
08C9 C0E0      1998            push    acc
08CB 7480      1999            mov     a,#0x80
08CD C0E0      2000            push    acc
08CF 120100    2001            lcall   _printf
08D2 1581      2002            dec     sp
08D4 1581      2003            dec     sp
08D6 1581      2004            dec     sp
08D8           2005   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:347: pwm_left          = 20;
08D8 75F014    2006            mov     _pwm_left,#0x14
08DB           2007   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:348: pwm_right         =  100;
08DB 75B064    2008            mov     _pwm_right,#0x64
08DE           2009   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:349: case 4:
08DE           2010   L017026?:
08DE           2011   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:350: printf("Starting \r;");
08DE 7488      2012            mov     a,#__str_5
08E0 C0E0      2013            push    acc
08E2 74BA      2014            mov     a,#(__str_5 >> 8)
08E4 C0E0      2015            push    acc
08E6 7480      2016            mov     a,#0x80
08E8 C0E0      2017            push    acc
08EA 120100    2018            lcall   _printf
08ED 1581      2019            dec     sp
08EF 1581      2020            dec     sp
08F1 1581      2021            dec     sp
08F3           2022   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:352: pwm_left = 100;
08F3 75F064    2023            mov     _pwm_left,#0x64
08F6           2024   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:353: pwm_right = 100;
08F6 75B064    2025            mov     _pwm_right,#0x64
08F9           2026   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:359: }
08F9           2027   L017030?:
08F9           2028   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:360: exec=0;
08F9           2029   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:361: line_counter = 0;
08F9 E4        2030            clr     a
08FA F568      2031            mov     _main_exec_1_96,a
08FC F569      2032            mov     (_main_exec_1_96 + 1),a
08FE F528      2033            mov     _main_line_counter_1_96,a
0900 F529      2034            mov     (_main_line_counter_1_96 + 1),a
0902           2035   L017032?:
0902           2036   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:363: printf("line counter: %d", line_counter);
0902 C028      2037            push    _main_line_counter_1_96
0904 C029      2038            push    (_main_line_counter_1_96 + 1)
0906 74C8      2039            mov     a,#__str_6
0908 C0E0      2040            push    acc
090A 74BA      2041            mov     a,#(__str_6 >> 8)
090C C0E0      2042            push    acc
090E 7480      2043            mov     a,#0x80
0910 C0E0      2044            push    acc
0912 120100    2045            lcall   _printf
0915 E581      2046            mov     a,sp
0917 24FB      2047            add     a,#0xfb
0919 F581      2048            mov     sp,a
091B 020100    2049            ljmp    L017036?
091E           2050            rseg R_CSEG
091E           2051   
0000           2052            rseg R_XINIT
0000           2053   
0000           2054            rseg R_CONST
0000           2055   __str_0:
0000 563D2535  2056            db 'V=%5.2f L:%5.2f'
     2E326620
     4C3A2535
     2E3266
000F 00        2057            db 0x00
0010           2058   __str_1:
0010 25303264  2059            db '%02d:%02d R: %5.2f '
     3A253032
     6420523A
     2025352E
     326620
0023 00        2060            db 0x00
0024           2061   __str_2:
0024 4572726F  2062            db 'Error:%5.2f Left:%5.2f Right:%5.2f Left_Motor:%d Right_Motor'
     723A2535
     2E326620
     4C656674
     3A25352E
     32662052
     69676874
     3A25352E
     3266204C
     6566745F
     4D6F746F
     723A2564
     20526967
     68745F4D
     6F746F72
0060 3A256420  2063            db ':%d                '
     20202020
     20202020
     20202020
     202020
0073 0D        2064            db 0x0D
0074 00        2065            db 0x00
0075           2066   __str_3:
0075 5455524E  2067            db 'TURNING LEFT '
     494E4720
     4C454654
     20
0082 0D        2068            db 0x0D
0083 3B        2069            db ';'
0084 00        2070            db 0x00
0085           2071   __str_4:
0085 5455524E  2072            db 'TURNING Right '
     494E4720
     52696768
     7420
0093 0D        2073            db 0x0D
0094 3B        2074            db ';'
0095 00        2075            db 0x00
0096           2076   __str_5:
0096 53746172  2077            db 'Starting '
     74696E67
     20
009F 0D        2078            db 0x0D
00A0 3B        2079            db ';'
00A1 00        2080            db 0x00
00A2           2081   __str_6:
00A2 6C696E65  2082            db 'line counter: %d'
     20636F75
     6E746572
     3A202564
00B2 00        2083            db 0x00
00B3           2084   
000E           2085            CSEG
000E           2086   
000E           2087   end
