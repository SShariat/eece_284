0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Dec 11 2012) (MSVC)
0000              4   ; This file was generated Sun Mar 29 10:59:17 2015
0000              5   ;--------------------------------------------------------
                  5   $name main_code
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _execute
0000             29            public _stop
0000             30            public _turn_right
0000             31            public _turn_left
0000             32            public _display_LCD
0000             33            public _Timer0ISR
0000             34            public _InitTimer0
0000             35            public _InitADC
0000             36            public _InitSerialPort
0000             37            public _Wait1S
0000             38            public _LCDprint
0000             39            public _LCD_8BIT
0000             40            public _WriteCommand
0000             41            public _WriteData
0000             42            public _LCD_byte
0000             43            public _LCD_pulse
0000             44            public _waitms
0000             45            public _Wait50us
0000             46            public _InitPorts
0000             47            public _LCDprint_PARM_3
0000             48            public _start_timer
0000             49            public _start
0000             50            public _turn_time_update
0000             51            public _time_update_flag
0000             52            public _LCDprint_PARM_2
0000             53            public _line_counter
0000             54            public _action_timer
0000             55            public _turn_timer
0000             56            public _pwm_right
0000             57            public _pwm_left
0000             58            public _pwmcount
0000             59            public _mins
0000             60            public _secs
0000             61            public _msCount
0000             62   ;--------------------------------------------------------
0000             63   ; Special Function Registers
0000             64   ;--------------------------------------------------------
0000             65   _ACC            DATA 0xe0
0000             66   _ADCON0         DATA 0x8e
0000             67   _ADCON1         DATA 0x97
0000             68   _ADINS          DATA 0xa3
0000             69   _ADMODA         DATA 0xc0
0000             70   _ADMODB         DATA 0xa1
0000             71   _AD0BH          DATA 0xbb
0000             72   _AD0BL          DATA 0xa6
0000             73   _AD0DAT0        DATA 0xc5
0000             74   _AD0DAT1        DATA 0xc6
0000             75   _AD0DAT2        DATA 0xc7
0000             76   _AD0DAT3        DATA 0xf4
0000             77   _AD1BH          DATA 0xc4
0000             78   _AD1BL          DATA 0xbc
0000             79   _AD1DAT0        DATA 0xd5
0000             80   _AD1DAT1        DATA 0xd6
0000             81   _AD1DAT2        DATA 0xd7
0000             82   _AD1DAT3        DATA 0xf5
0000             83   _AUXR1          DATA 0xa2
0000             84   _B              DATA 0xf0
0000             85   _BRGR0          DATA 0xbe
0000             86   _BRGR1          DATA 0xbf
0000             87   _BRGCON         DATA 0xbd
0000             88   _CCCRA          DATA 0xea
0000             89   _CCCRB          DATA 0xeb
0000             90   _CCCRC          DATA 0xec
0000             91   _CCCRD          DATA 0xed
0000             92   _CMP1           DATA 0xac
0000             93   _CMP2           DATA 0xad
0000             94   _DEECON         DATA 0xf1
0000             95   _DEEDAT         DATA 0xf2
0000             96   _DEEADR         DATA 0xf3
0000             97   _DIVM           DATA 0x95
0000             98   _DPH            DATA 0x83
0000             99   _DPL            DATA 0x82
0000            100   _FMADRH         DATA 0xe7
0000            101   _FMADRL         DATA 0xe6
0000            102   _FMCON          DATA 0xe4
0000            103   _FMDATA         DATA 0xe5
0000            104   _I2ADR          DATA 0xdb
0000            105   _I2CON          DATA 0xd8
0000            106   _I2DAT          DATA 0xda
0000            107   _I2SCLH         DATA 0xdd
0000            108   _I2SCLL         DATA 0xdc
0000            109   _I2STAT         DATA 0xd9
0000            110   _ICRAH          DATA 0xab
0000            111   _ICRAL          DATA 0xaa
0000            112   _ICRBH          DATA 0xaf
0000            113   _ICRBL          DATA 0xae
0000            114   _IEN0           DATA 0xa8
0000            115   _IEN1           DATA 0xe8
0000            116   _IP0            DATA 0xb8
0000            117   _IP0H           DATA 0xb7
0000            118   _IP1            DATA 0xf8
0000            119   _IP1H           DATA 0xf7
0000            120   _KBCON          DATA 0x94
0000            121   _KBMASK         DATA 0x86
0000            122   _KBPATN         DATA 0x93
0000            123   _OCRAH          DATA 0xef
0000            124   _OCRAL          DATA 0xee
0000            125   _OCRBH          DATA 0xfb
0000            126   _OCRBL          DATA 0xfa
0000            127   _OCRCH          DATA 0xfd
0000            128   _OCRCL          DATA 0xfc
0000            129   _OCRDH          DATA 0xff
0000            130   _OCRDL          DATA 0xfe
0000            131   _P0             DATA 0x80
0000            132   _P1             DATA 0x90
0000            133   _P2             DATA 0xa0
0000            134   _P3             DATA 0xb0
0000            135   _P0M1           DATA 0x84
0000            136   _P0M2           DATA 0x85
0000            137   _P1M1           DATA 0x91
0000            138   _P1M2           DATA 0x92
0000            139   _P2M1           DATA 0xa4
0000            140   _P2M2           DATA 0xa5
0000            141   _P3M1           DATA 0xb1
0000            142   _P3M2           DATA 0xb2
0000            143   _PCON           DATA 0x87
0000            144   _PCONA          DATA 0xb5
0000            145   _PSW            DATA 0xd0
0000            146   _PT0AD          DATA 0xf6
0000            147   _RSTSRC         DATA 0xdf
0000            148   _RTCCON         DATA 0xd1
0000            149   _RTCH           DATA 0xd2
0000            150   _RTCL           DATA 0xd3
0000            151   _SADDR          DATA 0xa9
0000            152   _SADEN          DATA 0xb9
0000            153   _SBUF           DATA 0x99
0000            154   _SCON           DATA 0x98
0000            155   _SSTAT          DATA 0xba
0000            156   _SP             DATA 0x81
0000            157   _SPCTL          DATA 0xe2
0000            158   _SPSTAT         DATA 0xe1
0000            159   _SPDAT          DATA 0xe3
0000            160   _TAMOD          DATA 0x8f
0000            161   _TCON           DATA 0x88
0000            162   _TCR20          DATA 0xc8
0000            163   _TCR21          DATA 0xf9
0000            164   _TH0            DATA 0x8c
0000            165   _TH1            DATA 0x8d
0000            166   _TH2            DATA 0xcd
0000            167   _TICR2          DATA 0xc9
0000            168   _TIFR2          DATA 0xe9
0000            169   _TISE2          DATA 0xde
0000            170   _TL0            DATA 0x8a
0000            171   _TL1            DATA 0x8b
0000            172   _TL2            DATA 0xcc
0000            173   _TMOD           DATA 0x89
0000            174   _TOR2H          DATA 0xcf
0000            175   _TOR2L          DATA 0xce
0000            176   _TPCR2H         DATA 0xcb
0000            177   _TPCR2L         DATA 0xca
0000            178   _TRIM           DATA 0x96
0000            179   _WDCON          DATA 0xa7
0000            180   _WDL            DATA 0xc1
0000            181   _WFEED1         DATA 0xc2
0000            182   _WFEED2         DATA 0xc3
0000            183   ;--------------------------------------------------------
0000            184   ; special function bits
0000            185   ;--------------------------------------------------------
0000            186   _ACC_7          BIT 0xe7
0000            187   _ACC_6          BIT 0xe6
0000            188   _ACC_5          BIT 0xe5
0000            189   _ACC_4          BIT 0xe4
0000            190   _ACC_3          BIT 0xe3
0000            191   _ACC_2          BIT 0xe2
0000            192   _ACC_1          BIT 0xe1
0000            193   _ACC_0          BIT 0xe0
0000            194   _ADMODA_7       BIT 0xc7
0000            195   _ADMODA_6       BIT 0xc6
0000            196   _ADMODA_5       BIT 0xc5
0000            197   _ADMODA_4       BIT 0xc4
0000            198   _ADMODA_3       BIT 0xc3
0000            199   _ADMODA_2       BIT 0xc2
0000            200   _ADMODA_1       BIT 0xc1
0000            201   _ADMODA_0       BIT 0xc0
0000            202   _BNDI1          BIT 0xc7
0000            203   _BURST1         BIT 0xc6
0000            204   _SCC1           BIT 0xc5
0000            205   _SCAN1          BIT 0xc4
0000            206   _BNDI0          BIT 0xc3
0000            207   _BURST0         BIT 0xc2
0000            208   _SCC0           BIT 0xc1
0000            209   _SCAN0          BIT 0xc0
0000            210   _B_7            BIT 0xf7
0000            211   _B_6            BIT 0xf6
0000            212   _B_5            BIT 0xf5
0000            213   _B_4            BIT 0xf4
0000            214   _B_3            BIT 0xf3
0000            215   _B_2            BIT 0xf2
0000            216   _B_1            BIT 0xf1
0000            217   _B_0            BIT 0xf0
0000            218   _I2CON_7        BIT 0xdf
0000            219   _I2CON_6        BIT 0xde
0000            220   _I2CON_5        BIT 0xdd
0000            221   _I2CON_4        BIT 0xdc
0000            222   _I2CON_3        BIT 0xdb
0000            223   _I2CON_2        BIT 0xda
0000            224   _I2CON_1        BIT 0xd9
0000            225   _I2CON_0        BIT 0xd8
0000            226   _I2EN           BIT 0xde
0000            227   _STA            BIT 0xdd
0000            228   _STO            BIT 0xdc
0000            229   _SI             BIT 0xdb
0000            230   _AA             BIT 0xda
0000            231   _CRSEL          BIT 0xd8
0000            232   _IEN0_7         BIT 0xaf
0000            233   _IEN0_6         BIT 0xae
0000            234   _IEN0_5         BIT 0xad
0000            235   _IEN0_4         BIT 0xac
0000            236   _IEN0_3         BIT 0xab
0000            237   _IEN0_2         BIT 0xaa
0000            238   _IEN0_1         BIT 0xa9
0000            239   _IEN0_0         BIT 0xa8
0000            240   _EA             BIT 0xaf
0000            241   _EWDRT          BIT 0xae
0000            242   _EBO            BIT 0xad
0000            243   _ES             BIT 0xac
0000            244   _ESR            BIT 0xac
0000            245   _ET1            BIT 0xab
0000            246   _EX1            BIT 0xaa
0000            247   _ET0            BIT 0xa9
0000            248   _EX0            BIT 0xa8
0000            249   _IEN1_7         BIT 0xef
0000            250   _IEN1_6         BIT 0xee
0000            251   _IEN1_5         BIT 0xed
0000            252   _IEN1_4         BIT 0xec
0000            253   _IEN1_3         BIT 0xeb
0000            254   _IEN1_2         BIT 0xea
0000            255   _IEN1_1         BIT 0xe9
0000            256   _IEN1_0         BIT 0xe8
0000            257   _EADEE          BIT 0xef
0000            258   _EST            BIT 0xee
0000            259   _ECCU           BIT 0xec
0000            260   _ESPI           BIT 0xeb
0000            261   _EC             BIT 0xea
0000            262   _EKBI           BIT 0xe9
0000            263   _EI2C           BIT 0xe8
0000            264   _IP0_7          BIT 0xbf
0000            265   _IP0_6          BIT 0xbe
0000            266   _IP0_5          BIT 0xbd
0000            267   _IP0_4          BIT 0xbc
0000            268   _IP0_3          BIT 0xbb
0000            269   _IP0_2          BIT 0xba
0000            270   _IP0_1          BIT 0xb9
0000            271   _IP0_0          BIT 0xb8
0000            272   _PWDRT          BIT 0xbe
0000            273   _PBO            BIT 0xbd
0000            274   _PS             BIT 0xbc
0000            275   _PSR            BIT 0xbc
0000            276   _PT1            BIT 0xbb
0000            277   _PX1            BIT 0xba
0000            278   _PT0            BIT 0xb9
0000            279   _PX0            BIT 0xb8
0000            280   _IP1_7          BIT 0xff
0000            281   _IP1_6          BIT 0xfe
0000            282   _IP1_5          BIT 0xfd
0000            283   _IP1_4          BIT 0xfc
0000            284   _IP1_3          BIT 0xfb
0000            285   _IP1_2          BIT 0xfa
0000            286   _IP1_1          BIT 0xf9
0000            287   _IP1_0          BIT 0xf8
0000            288   _PADEE          BIT 0xff
0000            289   _PST            BIT 0xfe
0000            290   _PCCU           BIT 0xfc
0000            291   _PSPI           BIT 0xfb
0000            292   _PC             BIT 0xfa
0000            293   _PKBI           BIT 0xf9
0000            294   _PI2C           BIT 0xf8
0000            295   _P0_7           BIT 0x87
0000            296   _P0_6           BIT 0x86
0000            297   _P0_5           BIT 0x85
0000            298   _P0_4           BIT 0x84
0000            299   _P0_3           BIT 0x83
0000            300   _P0_2           BIT 0x82
0000            301   _P0_1           BIT 0x81
0000            302   _P0_0           BIT 0x80
0000            303   _T1             BIT 0x87
0000            304   _KB7            BIT 0x87
0000            305   _CMP_1          BIT 0x86
0000            306   _KB6            BIT 0x86
0000            307   _CMPREF         BIT 0x85
0000            308   _KB5            BIT 0x85
0000            309   _CIN1A          BIT 0x84
0000            310   _KB4            BIT 0x84
0000            311   _CIN1B          BIT 0x83
0000            312   _KB3            BIT 0x83
0000            313   _CIN2A          BIT 0x82
0000            314   _KB2            BIT 0x82
0000            315   _CIN2B          BIT 0x81
0000            316   _KB1            BIT 0x81
0000            317   _CMP_2          BIT 0x80
0000            318   _KB0            BIT 0x80
0000            319   _P1_7           BIT 0x97
0000            320   _P1_6           BIT 0x96
0000            321   _P1_5           BIT 0x95
0000            322   _P1_4           BIT 0x94
0000            323   _P1_3           BIT 0x93
0000            324   _P1_2           BIT 0x92
0000            325   _P1_1           BIT 0x91
0000            326   _P1_0           BIT 0x90
0000            327   _OCC            BIT 0x97
0000            328   _OCB            BIT 0x96
0000            329   _RST            BIT 0x95
0000            330   _INT1           BIT 0x94
0000            331   _INT0           BIT 0x93
0000            332   _SDA            BIT 0x93
0000            333   _T0             BIT 0x92
0000            334   _SCL            BIT 0x92
0000            335   _RXD            BIT 0x91
0000            336   _TXD            BIT 0x90
0000            337   _P2_7           BIT 0xa7
0000            338   _P2_6           BIT 0xa6
0000            339   _P2_5           BIT 0xa5
0000            340   _P2_4           BIT 0xa4
0000            341   _P2_3           BIT 0xa3
0000            342   _P2_2           BIT 0xa2
0000            343   _P2_1           BIT 0xa1
0000            344   _P2_0           BIT 0xa0
0000            345   _ICA            BIT 0xa7
0000            346   _OCA            BIT 0xa6
0000            347   _SPICLK         BIT 0xa5
0000            348   _SS             BIT 0xa4
0000            349   _MISO           BIT 0xa3
0000            350   _MOSI           BIT 0xa2
0000            351   _OCD            BIT 0xa1
0000            352   _ICB            BIT 0xa0
0000            353   _P3_7           BIT 0xb7
0000            354   _P3_6           BIT 0xb6
0000            355   _P3_5           BIT 0xb5
0000            356   _P3_4           BIT 0xb4
0000            357   _P3_3           BIT 0xb3
0000            358   _P3_2           BIT 0xb2
0000            359   _P3_1           BIT 0xb1
0000            360   _P3_0           BIT 0xb0
0000            361   _XTAL1          BIT 0xb1
0000            362   _XTAL2          BIT 0xb0
0000            363   _PSW_7          BIT 0xd7
0000            364   _PSW_6          BIT 0xd6
0000            365   _PSW_5          BIT 0xd5
0000            366   _PSW_4          BIT 0xd4
0000            367   _PSW_3          BIT 0xd3
0000            368   _PSW_2          BIT 0xd2
0000            369   _PSW_1          BIT 0xd1
0000            370   _PSW_0          BIT 0xd0
0000            371   _CY             BIT 0xd7
0000            372   _AC             BIT 0xd6
0000            373   _F0             BIT 0xd5
0000            374   _RS1            BIT 0xd4
0000            375   _RS0            BIT 0xd3
0000            376   _OV             BIT 0xd2
0000            377   _F1             BIT 0xd1
0000            378   _P              BIT 0xd0
0000            379   _SCON_7         BIT 0x9f
0000            380   _SCON_6         BIT 0x9e
0000            381   _SCON_5         BIT 0x9d
0000            382   _SCON_4         BIT 0x9c
0000            383   _SCON_3         BIT 0x9b
0000            384   _SCON_2         BIT 0x9a
0000            385   _SCON_1         BIT 0x99
0000            386   _SCON_0         BIT 0x98
0000            387   _SM0            BIT 0x9f
0000            388   _FE             BIT 0x9f
0000            389   _SM1            BIT 0x9e
0000            390   _SM2            BIT 0x9d
0000            391   _REN            BIT 0x9c
0000            392   _TB8            BIT 0x9b
0000            393   _RB8            BIT 0x9a
0000            394   _TI             BIT 0x99
0000            395   _RI             BIT 0x98
0000            396   _TCON_7         BIT 0x8f
0000            397   _TCON_6         BIT 0x8e
0000            398   _TCON_5         BIT 0x8d
0000            399   _TCON_4         BIT 0x8c
0000            400   _TCON_3         BIT 0x8b
0000            401   _TCON_2         BIT 0x8a
0000            402   _TCON_1         BIT 0x89
0000            403   _TCON_0         BIT 0x88
0000            404   _TF1            BIT 0x8f
0000            405   _TR1            BIT 0x8e
0000            406   _TF0            BIT 0x8d
0000            407   _TR0            BIT 0x8c
0000            408   _IE1            BIT 0x8b
0000            409   _IT1            BIT 0x8a
0000            410   _IE0            BIT 0x89
0000            411   _IT0            BIT 0x88
0000            412   _TCR20_7        BIT 0xcf
0000            413   _TCR20_6        BIT 0xce
0000            414   _TCR20_5        BIT 0xcd
0000            415   _TCR20_4        BIT 0xcc
0000            416   _TCR20_3        BIT 0xcb
0000            417   _TCR20_2        BIT 0xca
0000            418   _TCR20_1        BIT 0xc9
0000            419   _TCR20_0        BIT 0xc8
0000            420   _PLEEN          BIT 0xcf
0000            421   _HLTRN          BIT 0xce
0000            422   _HLTEN          BIT 0xcd
0000            423   _ALTCD          BIT 0xcc
0000            424   _ALTAB          BIT 0xcb
0000            425   _TDIR2          BIT 0xca
0000            426   _TMOD21         BIT 0xc9
0000            427   _TMOD20         BIT 0xc8
0000            428   ;--------------------------------------------------------
0000            429   ; overlayable register banks
0000            430   ;--------------------------------------------------------
0000            431            rbank0 segment data overlay
0000            432   ;--------------------------------------------------------
0000            433   ; internal ram data
0000            434   ;--------------------------------------------------------
0000            435            rseg R_DSEG
0000            436   _msCount:
0000            437            ds 2
0002            438   _secs:
0002            439            ds 1
0003            440   _mins:
0003            441            ds 1
0004            442   _pwmcount:
0004            443            ds 1
0005            444   _pwm_left:
0005            445            ds 1
0006            446   _pwm_right:
0006            447            ds 1
0007            448   _turn_timer:
0007            449            ds 2
0009            450   _action_timer:
0009            451            ds 2
000B            452   _line_counter:
000B            453            ds 2
000D            454   _LCDprint_PARM_2:
000D            455            ds 1
000E            456   _display_LCD_buff_1_96:
000E            457            ds 17
001F            458   _main_cor_1_114:
001F            459            ds 4
0023            460   _main_cur_error_1_114:
0023            461            ds 4
0027            462   _main_pre_error_1_114:
0027            463            ds 4
002B            464   _main_left_1_114:
002B            465            ds 4
002F            466   _main_right_1_114:
002F            467            ds 4
0033            468   _main_line_sensor_1_114:
0033            469            ds 4
0037            470   _main_diff_1_114:
0037            471            ds 4
003B            472   _main_line_counter_1_114:
003B            473            ds 2
003D            474   _main_command_1_114:
003D            475            ds 2
003F            476   ;--------------------------------------------------------
003F            477   ; overlayable items in internal ram 
003F            478   ;--------------------------------------------------------
0000            479            rseg R_OSEG
0000            480   ;--------------------------------------------------------
0000            481   ; indirectly addressable internal ram data
0000            482   ;--------------------------------------------------------
0000            483            rseg R_ISEG
0000            484   ;--------------------------------------------------------
0000            485   ; absolute internal ram data
0000            486   ;--------------------------------------------------------
0000            487            DSEG
0000            488   ;--------------------------------------------------------
0000            489   ; bit data
0000            490   ;--------------------------------------------------------
0000            491            rseg R_BSEG
0000            492   _time_update_flag:
0000            493            DBIT    1
0001            494   _turn_time_update:
0001            495            DBIT    1
0002            496   _start:
0002            497            DBIT    1
0003            498   _start_timer:
0003            499            DBIT    1
0004            500   _LCDprint_PARM_3:
0004            501            DBIT    1
0005            502   ;--------------------------------------------------------
0005            503   ; paged external ram data
0005            504   ;--------------------------------------------------------
0000            505            rseg R_PSEG
0000            506   ;--------------------------------------------------------
0000            507   ; external ram data
0000            508   ;--------------------------------------------------------
0000            509            rseg R_XSEG
FFC8            510            XSEG at 0xffc8
FFC8            511   _BODCFG: ds 1
FFC9            512            public _BODCFG
0000            513            rseg R_XSEG
FFDE            514            XSEG at 0xffde
FFDE            515   _CLKCON: ds 1
FFDF            516            public _CLKCON
0000            517            rseg R_XSEG
FFE1            518            XSEG at 0xffe1
FFE1            519   _PGACON1: ds 1
FFE2            520            public _PGACON1
0000            521            rseg R_XSEG
FFE4            522            XSEG at 0xffe4
FFE4            523   _PGACON1B: ds 1
FFE5            524            public _PGACON1B
0000            525            rseg R_XSEG
FFE3            526            XSEG at 0xffe3
FFE3            527   _PGA1TRIM8X16X: ds 1
FFE4            528            public _PGA1TRIM8X16X
0000            529            rseg R_XSEG
FFE2            530            XSEG at 0xffe2
FFE2            531   _PGA1TRIM2X4X: ds 1
FFE3            532            public _PGA1TRIM2X4X
0000            533            rseg R_XSEG
FFCA            534            XSEG at 0xffca
FFCA            535   _PGACON0: ds 1
FFCB            536            public _PGACON0
0000            537            rseg R_XSEG
FFCE            538            XSEG at 0xffce
FFCE            539   _PGACON0B: ds 1
FFCF            540            public _PGACON0B
0000            541            rseg R_XSEG
FFCD            542            XSEG at 0xffcd
FFCD            543   _PGA0TRIM8X16X: ds 1
FFCE            544            public _PGA0TRIM8X16X
0000            545            rseg R_XSEG
FFCC            546            XSEG at 0xffcc
FFCC            547   _PGA0TRIM2X4X: ds 1
FFCD            548            public _PGA0TRIM2X4X
0000            549            rseg R_XSEG
FFBF            550            XSEG at 0xffbf
FFBF            551   _RTCDATH: ds 1
FFC0            552            public _RTCDATH
0000            553            rseg R_XSEG
FFBE            554            XSEG at 0xffbe
FFBE            555   _RTCDATL: ds 1
FFBF            556            public _RTCDATL
0000            557            rseg R_XSEG
0000            558   ;--------------------------------------------------------
0000            559   ; absolute external ram data
0000            560   ;--------------------------------------------------------
FFBF            561            XSEG
FFBF            562   ;--------------------------------------------------------
FFBF            563   ; external initialized ram data
FFBF            564   ;--------------------------------------------------------
0000            565            rseg R_IXSEG
0000            566            rseg R_HOME
0000            567            rseg R_GSINIT
0000            568            rseg R_CSEG
0000            569   ;--------------------------------------------------------
0000            570   ; Reset entry point and interrupt vectors
0000            571   ;--------------------------------------------------------
0000            572            CSEG at 0x0000
0000 020100     573            ljmp    _crt0
000B            574            CSEG at 0x000b
000B 020100     575            ljmp    _Timer0ISR
000E            576   ;--------------------------------------------------------
000E            577   ; global & static initialisations
000E            578   ;--------------------------------------------------------
0000            579            rseg R_HOME
0000            580            rseg R_GSINIT
0000            581            rseg R_GSINIT
0000            582   ;--------------------------------------------------------
0000            583   ; data variables initialization
0000            584   ;--------------------------------------------------------
0000            585            rseg R_DINIT
0000            586   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:43: volatile int msCount=0; // Volatiles can be changed by stuff outside our program, like memory registers
0000 E4         587            clr     a
0001 F508       588            mov     _msCount,a
0003 F509       589            mov     (_msCount + 1),a
0005            590   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:44: volatile unsigned char secs=0, mins=0; // They are like global variables, kinda 
0005 75C800     591            mov     _secs,#0x00
0008            592   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:44: volatile bit time_update_flag=0;
0008 758800     593            mov     _mins,#0x00
000B            594   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:49: volatile int turn_timer = 0;
000B E4         595            clr     a
000C F588       596            mov     _turn_timer,a
000E F589       597            mov     (_turn_timer + 1),a
0010            598   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:53: volatile int action_timer = 0;
0010 E4         599            clr     a
0011 F548       600            mov     _action_timer,a
0013 F549       601            mov     (_action_timer + 1),a
0015            602   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:54: volatile int line_counter = 0;
0015 E4         603            clr     a
0016 F508       604            mov     _line_counter,a
0018 F509       605            mov     (_line_counter + 1),a
001A            606   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:45: volatile bit time_update_flag=0;
001A C278       607            clr     _time_update_flag
001C            608   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:50: volatile bit turn_time_update=0;
001C C228       609            clr     _turn_time_update
001E            610   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:51: volatile bit start = 1;
001E D2D8       611            setb    _start
0020            612   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:52: volatile bit start_timer = 0;
0020 C298       613            clr     _start_timer
0022            614            ; The linker places a 'ret' at the end of segment R_DINIT.
0022            615   ;--------------------------------------------------------
0022            616   ; code
0022            617   ;--------------------------------------------------------
0000            618            rseg R_CSEG
0000            619   ;------------------------------------------------------------
0000            620   ;Allocation info for local variables in function 'InitPorts'
0000            621   ;------------------------------------------------------------
0000            622   ;------------------------------------------------------------
0000            623   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:56: void InitPorts(void)
0000            624   ;        -----------------------------------------
0000            625   ;         function InitPorts
0000            626   ;        -----------------------------------------
0000            627   _InitPorts:
0000            628            using   0
0000            629   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:58: P0M1=0x1E;
0000 75841E     630            mov     _P0M1,#0x1E
0003            631   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:59: P0M2=0x00;
0003 758500     632            mov     _P0M2,#0x00
0006            633   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:60: P1M1=0;
0006 759100     634            mov     _P1M1,#0x00
0009            635   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:61: P1M2=0;
0009 759200     636            mov     _P1M2,#0x00
000C            637   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:62: P2M1=0;
000C 75A400     638            mov     _P2M1,#0x00
000F            639   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:63: P2M2=0;
000F 75A500     640            mov     _P2M2,#0x00
0012            641   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:64: P3M1=0;
0012 75B100     642            mov     _P3M1,#0x00
0015            643   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:65: P3M2=0;
0015 75B200     644            mov     _P3M2,#0x00
0018 22         645            ret
0019            646   ;------------------------------------------------------------
0019            647   ;Allocation info for local variables in function 'Wait50us'
0019            648   ;------------------------------------------------------------
0019            649   ;------------------------------------------------------------
0019            650   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:68: void Wait50us (void)
0019            651   ;        -----------------------------------------
0019            652   ;         function Wait50us
0019            653   ;        -----------------------------------------
0019            654   _Wait50us:
0019            655   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:73: _endasm;
0019            656            
0019 7852       657             mov R0, #82
001B            658             L0:
001B D8D8       659            djnz R0, L0 ; 2 machine cycles-> 2*0.27126us*92=50us
001D            660             
001D 22         661            ret
001E            662   ;------------------------------------------------------------
001E            663   ;Allocation info for local variables in function 'waitms'
001E            664   ;------------------------------------------------------------
001E            665   ;ms                        Allocated to registers r2 r3 
001E            666   ;j                         Allocated to registers r4 r5 
001E            667   ;k                         Allocated to registers r6 
001E            668   ;------------------------------------------------------------
001E            669   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:76: void waitms (unsigned int ms)
001E            670   ;        -----------------------------------------
001E            671   ;         function waitms
001E            672   ;        -----------------------------------------
001E            673   _waitms:
001E AA82       674            mov     r2,dpl
0020 AB83       675            mov     r3,dph
0022            676   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:82: for(j=0; j<ms; j++)
0022 7C00       677            mov     r4,#0x00
0024 7D00       678            mov     r5,#0x00
0026            679   L004004?:
0026 C3         680            clr     c
0027 EC         681            mov     a,r4
0028 9A         682            subb    a,r2
0029 ED         683            mov     a,r5
002A 9B         684            subb    a,r3
002B 5001       685            jnc     L004008?
002D            686   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:83: for (k=0; k<20; k++) Wait50us();
002D 7E14       687            mov     r6,#0x14
002F            688   L004003?:
002F C002       689            push    ar2
0031 C003       690            push    ar3
0033 C004       691            push    ar4
0035 C005       692            push    ar5
0037 C006       693            push    ar6
0039 120100     694            lcall   _Wait50us
003C D006       695            pop     ar6
003E D005       696            pop     ar5
0040 D004       697            pop     ar4
0042 D003       698            pop     ar3
0044 D002       699            pop     ar2
0046 DE18       700            djnz    r6,L004003?
0048            701   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:82: for(j=0; j<ms; j++)
0048 0C         702            inc     r4
0049 BC0098     703            cjne    r4,#0x00,L004004?
004C 0D         704            inc     r5
004D 8001       705            sjmp    L004004?
004F            706   L004008?:
004F 22         707            ret
0050            708   ;------------------------------------------------------------
0050            709   ;Allocation info for local variables in function 'LCD_pulse'
0050            710   ;------------------------------------------------------------
0050            711   ;------------------------------------------------------------
0050            712   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:86: void LCD_pulse (void)
0050            713   ;        -----------------------------------------
0050            714   ;         function LCD_pulse
0050            715   ;        -----------------------------------------
0050            716   _LCD_pulse:
0050            717   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:88: LCD_E=1;
0050 D2A5       718            setb    _P2_5
0052            719   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:89: Wait50us();
0052 120100     720            lcall   _Wait50us
0055            721   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:90: LCD_E=0;
0055 C2A5       722            clr     _P2_5
0057 22         723            ret
0058            724   ;------------------------------------------------------------
0058            725   ;Allocation info for local variables in function 'LCD_byte'
0058            726   ;------------------------------------------------------------
0058            727   ;x                         Allocated to registers 
0058            728   ;------------------------------------------------------------
0058            729   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:93: void LCD_byte (unsigned char x)
0058            730   ;        -----------------------------------------
0058            731   ;         function LCD_byte
0058            732   ;        -----------------------------------------
0058            733   _LCD_byte:
0058 8582E0     734            mov     _ACC,dpl
005B            735   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:97: LCD_D7=ACC_7;
005B A2E7       736            mov     c,_ACC_7
005D 9294       737            mov     _P1_4,c
005F            738   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:98: LCD_D6=ACC_6;
005F A2E6       739            mov     c,_ACC_6
0061 9296       740            mov     _P1_6,c
0063            741   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:99: LCD_D5=ACC_5;
0063 A2E5       742            mov     c,_ACC_5
0065 9297       743            mov     _P1_7,c
0067            744   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:100: LCD_D4=ACC_4;
0067 A2E4       745            mov     c,_ACC_4
0069 92A0       746            mov     _P2_0,c
006B            747   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:101: LCD_D3=ACC_3;
006B A2E3       748            mov     c,_ACC_3
006D 92A1       749            mov     _P2_1,c
006F            750   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:102: LCD_D2=ACC_2;
006F A2E2       751            mov     c,_ACC_2
0071 92A2       752            mov     _P2_2,c
0073            753   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:103: LCD_D1=ACC_1;
0073 A2E1       754            mov     c,_ACC_1
0075 92A3       755            mov     _P2_3,c
0077            756   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:104: LCD_D0=ACC_0;
0077 A2E0       757            mov     c,_ACC_0
0079 92A4       758            mov     _P2_4,c
007B            759   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:105: LCD_pulse();
007B 020100     760            ljmp    _LCD_pulse
007E            761   ;------------------------------------------------------------
007E            762   ;Allocation info for local variables in function 'WriteData'
007E            763   ;------------------------------------------------------------
007E            764   ;x                         Allocated to registers r2 
007E            765   ;------------------------------------------------------------
007E            766   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:108: void WriteData (unsigned char x)
007E            767   ;        -----------------------------------------
007E            768   ;         function WriteData
007E            769   ;        -----------------------------------------
007E            770   _WriteData:
007E AA82       771            mov     r2,dpl
0080            772   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:110: LCD_RS=1;
0080 D2A7       773            setb    _P2_7
0082            774   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:111: LCD_byte(x);
0082 8A82       775            mov     dpl,r2
0084 120100     776            lcall   _LCD_byte
0087            777   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:112: waitms(2);
0087 900002     778            mov     dptr,#0x0002
008A 020100     779            ljmp    _waitms
008D            780   ;------------------------------------------------------------
008D            781   ;Allocation info for local variables in function 'WriteCommand'
008D            782   ;------------------------------------------------------------
008D            783   ;x                         Allocated to registers r2 
008D            784   ;------------------------------------------------------------
008D            785   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:115: void WriteCommand (unsigned char x)
008D            786   ;        -----------------------------------------
008D            787   ;         function WriteCommand
008D            788   ;        -----------------------------------------
008D            789   _WriteCommand:
008D AA82       790            mov     r2,dpl
008F            791   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:117: LCD_RS=0;
008F C2A7       792            clr     _P2_7
0091            793   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:118: LCD_byte(x);
0091 8A82       794            mov     dpl,r2
0093 120100     795            lcall   _LCD_byte
0096            796   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:119: waitms(5);
0096 900005     797            mov     dptr,#0x0005
0099 020100     798            ljmp    _waitms
009C            799   ;------------------------------------------------------------
009C            800   ;Allocation info for local variables in function 'LCD_8BIT'
009C            801   ;------------------------------------------------------------
009C            802   ;------------------------------------------------------------
009C            803   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:122: void LCD_8BIT (void)
009C            804   ;        -----------------------------------------
009C            805   ;         function LCD_8BIT
009C            806   ;        -----------------------------------------
009C            807   _LCD_8BIT:
009C            808   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:124: LCD_E=0;  // Resting state of LCD's enable is zero
009C C2A5       809            clr     _P2_5
009E            810   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:125: LCD_RW=0; // We are only writing to the LCD in this program
009E C2A6       811            clr     _P2_6
00A0            812   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:126: waitms(20);
00A0 900014     813            mov     dptr,#0x0014
00A3 120100     814            lcall   _waitms
00A6            815   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:128: WriteCommand(0x33);
00A6 758233     816            mov     dpl,#0x33
00A9 120100     817            lcall   _WriteCommand
00AC            818   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:129: WriteCommand(0x33);
00AC 758233     819            mov     dpl,#0x33
00AF 120100     820            lcall   _WriteCommand
00B2            821   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:130: WriteCommand(0x33); // Stay in 8-bit mode
00B2 758233     822            mov     dpl,#0x33
00B5 120100     823            lcall   _WriteCommand
00B8            824   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:133: WriteCommand(0x38);
00B8 758238     825            mov     dpl,#0x38
00BB 120100     826            lcall   _WriteCommand
00BE            827   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:134: WriteCommand(0x0c);
00BE 75820C     828            mov     dpl,#0x0C
00C1 120100     829            lcall   _WriteCommand
00C4            830   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:135: WriteCommand(0x01); // Clear screen command (takes some time)
00C4 758201     831            mov     dpl,#0x01
00C7 120100     832            lcall   _WriteCommand
00CA            833   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:136: waitms(20); // Wait for clear screen command to finsih.
00CA 900014     834            mov     dptr,#0x0014
00CD 020100     835            ljmp    _waitms
00D0            836   ;------------------------------------------------------------
00D0            837   ;Allocation info for local variables in function 'LCDprint'
00D0            838   ;------------------------------------------------------------
00D0            839   ;line                      Allocated with name '_LCDprint_PARM_2'
00D0            840   ;string                    Allocated to registers r2 r3 r4 
00D0            841   ;j                         Allocated to registers r5 
00D0            842   ;------------------------------------------------------------
00D0            843   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:139: void LCDprint(char * string, unsigned char line, bit clear)
00D0            844   ;        -----------------------------------------
00D0            845   ;         function LCDprint
00D0            846   ;        -----------------------------------------
00D0            847   _LCDprint:
00D0 AA82       848            mov     r2,dpl
00D2 AB83       849            mov     r3,dph
00D4 ACF0       850            mov     r4,b
00D6            851   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:143: WriteCommand(line==2?0xc0:0x80);
00D6 7402       852            mov     a,#0x02
00D8 B5C898     853            cjne    a,_LCDprint_PARM_2,L010013?
00DB 7DC0       854            mov     r5,#0xC0
00DD 8001       855            sjmp    L010014?
00DF            856   L010013?:
00DF 7D80       857            mov     r5,#0x80
00E1            858   L010014?:
00E1 8D82       859            mov     dpl,r5
00E3 C002       860            push    ar2
00E5 C003       861            push    ar3
00E7 C004       862            push    ar4
00E9 120100     863            lcall   _WriteCommand
00EC            864   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:144: waitms(5);
00EC 900005     865            mov     dptr,#0x0005
00EF 120100     866            lcall   _waitms
00F2 D004       867            pop     ar4
00F4 D003       868            pop     ar3
00F6 D002       869            pop     ar2
00F8            870   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:145: for(j=0; string[j]!=0; j++)     WriteData(string[j]);// Write the message
00F8 7D00       871            mov     r5,#0x00
00FA            872   L010003?:
00FA ED         873            mov     a,r5
00FB 2A         874            add     a,r2
00FC FE         875            mov     r6,a
00FD E4         876            clr     a
00FE 3B         877            addc    a,r3
00FF FF         878            mov     r7,a
0100 8C00       879            mov     ar0,r4
0102 8E82       880            mov     dpl,r6
0104 8F83       881            mov     dph,r7
0106 88F0       882            mov     b,r0
0108 120100     883            lcall   __gptrget
010B FE         884            mov     r6,a
010C 6001       885            jz      L010006?
010E 8E82       886            mov     dpl,r6
0110 C002       887            push    ar2
0112 C003       888            push    ar3
0114 C004       889            push    ar4
0116 C005       890            push    ar5
0118 120100     891            lcall   _WriteData
011B D005       892            pop     ar5
011D D004       893            pop     ar4
011F D003       894            pop     ar3
0121 D002       895            pop     ar2
0123 0D         896            inc     r5
0124 8001       897            sjmp    L010003?
0126            898   L010006?:
0126            899   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:146: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0126 3058D8     900            jnb     _LCDprint_PARM_3,L010011?
0129 8D02       901            mov     ar2,r5
012B            902   L010007?:
012B BA1058     903            cjne    r2,#0x10,L010026?
012E            904   L010026?:
012E 5001       905            jnc     L010011?
0130 758220     906            mov     dpl,#0x20
0133 C002       907            push    ar2
0135 120100     908            lcall   _WriteData
0138 D002       909            pop     ar2
013A 0A         910            inc     r2
013B 8001       911            sjmp    L010007?
013D            912   L010011?:
013D 22         913            ret
013E            914   ;------------------------------------------------------------
013E            915   ;Allocation info for local variables in function 'Wait1S'
013E            916   ;------------------------------------------------------------
013E            917   ;------------------------------------------------------------
013E            918   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:149: void Wait1S (void)
013E            919   ;        -----------------------------------------
013E            920   ;         function Wait1S
013E            921   ;        -----------------------------------------
013E            922   _Wait1S:
013E            923   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:158: _endasm;
013E            924            
013E 7A28       925             mov R2, #40
0140            926             L3:
0140 79FA       927            mov R1, #250
0142            928             L2:
0142 78B8       929            mov R0, #184
0144            930             L1:
0144 D818       931            djnz R0, L1 ; 2 machine cycles-> 2*0.27126us*184=100us
0146 D9D8       932             djnz R1, L2 ; 100us*250=0.025s
0148 DA98       933             djnz R2, L3 ; 0.025s*40=1s
014A            934             
014A 22         935            ret
014B            936   ;------------------------------------------------------------
014B            937   ;Allocation info for local variables in function 'InitSerialPort'
014B            938   ;------------------------------------------------------------
014B            939   ;------------------------------------------------------------
014B            940   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:161: void InitSerialPort(void)
014B            941   ;        -----------------------------------------
014B            942   ;         function InitSerialPort
014B            943   ;        -----------------------------------------
014B            944   _InitSerialPort:
014B            945   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:163: BRGCON=0x00; //Make sure the baud rate generator is off
014B 75BD00     946            mov     _BRGCON,#0x00
014E            947   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:164: BRGR1=((XTAL/BAUD)-16)/0x100;
014E 75BF00     948            mov     _BRGR1,#0x00
0151            949   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:165: BRGR0=((XTAL/BAUD)-16)%0x100;
0151 75BE30     950            mov     _BRGR0,#0x30
0154            951   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:166: BRGCON=0x03; //Turn-on the baud rate generator
0154 75BD03     952            mov     _BRGCON,#0x03
0157            953   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:167: SCON=0x52; //Serial port in mode 1, ren, txrdy, rxempty
0157 759852     954            mov     _SCON,#0x52
015A            955   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:168: P1M1=0x00; //Enable pins RxD and Txd
015A 759100     956            mov     _P1M1,#0x00
015D            957   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:169: P1M2=0x00; //Enable pins RxD and Txd
015D 759200     958            mov     _P1M2,#0x00
0160 22         959            ret
0161            960   ;------------------------------------------------------------
0161            961   ;Allocation info for local variables in function 'InitADC'
0161            962   ;------------------------------------------------------------
0161            963   ;------------------------------------------------------------
0161            964   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:172: void InitADC(void)
0161            965   ;        -----------------------------------------
0161            966   ;         function InitADC
0161            967   ;        -----------------------------------------
0161            968   _InitADC:
0161            969   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:176: P0M1 |= (P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0161 43841E     970            orl     _P0M1,#0x1E
0164            971   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:177: P0M2 &= ~(P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0164 5385E1     972            anl     _P0M2,#0xE1
0167            973   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:180: BURST1=1; //Autoscan continuous conversion mode
0167 D2C6       974            setb    _BURST1
0169            975   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:181: ADMODB = CLK0; //ADC1 clock is 7.3728MHz/2
0169 75A120     976            mov     _ADMODB,#0x20
016C            977   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:182: ADINS  = (ADI13|ADI12|ADI11|ADI10); // Select the four channels for conversion
016C 75A3F0     978            mov     _ADINS,#0xF0
016F            979   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:183: ADCON1 = (ENADC1|ADCS10); //Enable the converter and start immediately
016F 759705     980            mov     _ADCON1,#0x05
0172            981   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:184: while((ADCI1&ADCON1)==0); //Wait for first conversion to complete
0172            982   L013001?:
0172 E597       983            mov     a,_ADCON1
0174 30E358     984            jnb     acc.3,L013001?
0177 22         985            ret
0178            986   ;------------------------------------------------------------
0178            987   ;Allocation info for local variables in function 'InitTimer0'
0178            988   ;------------------------------------------------------------
0178            989   ;------------------------------------------------------------
0178            990   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:187: void InitTimer0 (void)
0178            991   ;        -----------------------------------------
0178            992   ;         function InitTimer0
0178            993   ;        -----------------------------------------
0178            994   _InitTimer0:
0178            995   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:191: TR0=0; // Stop timer 0
0178 C28C       996            clr     _TR0
017A            997   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:192: TMOD=(TMOD&0xf0)|0x01; // 16-bit timer
017A 74F0       998            mov     a,#0xF0
017C 5589       999            anl     a,_TMOD
017E 4401      1000            orl     a,#0x01
0180 F589      1001            mov     _TMOD,a
0182           1002   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:193: TH0=TIMER0_RELOAD_VALUE/0x100; // I think the RHS is 0001 0000 0000, are we dividing?
0182 758CFE    1003            mov     _TH0,#0xFE
0185           1004   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:194: TL0=TIMER0_RELOAD_VALUE%0x100; // % means modulo, apparently? ...are we modulo-ing?
0185 758A90    1005            mov     _TL0,#0x90
0188           1006   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:195: TR0=1; // Start timer 0 (bit 4 in TCON)
0188 D28C      1007            setb    _TR0
018A           1008   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:196: ET0=1; // Enable timer 0 interrupt - the interrupt controller IEN0 is bit-adressable, so we change only the bit we need
018A D2A9      1009            setb    _ET0
018C           1010   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:197: EA=1;  // Enable global interrupts
018C D2AF      1011            setb    _EA
018E 22        1012            ret
018F           1013   ;------------------------------------------------------------
018F           1014   ;Allocation info for local variables in function 'Timer0ISR'
018F           1015   ;------------------------------------------------------------
018F           1016   ;------------------------------------------------------------
018F           1017   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:201: void Timer0ISR (void) interrupt 1{
018F           1018   ;        -----------------------------------------
018F           1019   ;         function Timer0ISR
018F           1020   ;        -----------------------------------------
018F           1021   _Timer0ISR:
018F C0E0      1022            push    acc
0191 C0D0      1023            push    psw
0193 75D000    1024            mov     psw,#0x00
0196           1025   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:203: TR0=0; // Stop timer 0
0196 C28C      1026            clr     _TR0
0198           1027   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:204: TH0=TIMER0_RELOAD_VALUE/0x100;
0198 758CFE    1028            mov     _TH0,#0xFE
019B           1029   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:205: TL0=TIMER0_RELOAD_VALUE%0x100;
019B 758A90    1030            mov     _TL0,#0x90
019E           1031   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:206: TR0=1; // Start timer 0
019E D28C      1032            setb    _TR0
01A0           1033   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:208: if(++pwmcount>99) pwmcount=0;
01A0 0548      1034            inc     _pwmcount
01A2 E548      1035            mov     a,_pwmcount
01A4 249C      1036            add     a,#0xff - 0x63
01A6 5001      1037            jnc     L015002?
01A8 754800    1038            mov     _pwmcount,#0x00
01AB           1039   L015002?:
01AB           1040   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:209: P0_5=(pwm_left>pwmcount)?1:0;
01AB C3        1041            clr     c
01AC E548      1042            mov     a,_pwmcount
01AE 9508      1043            subb    a,_pwm_left
01B0 9285      1044            mov     _P0_5,c
01B2           1045   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:210: P0_6=(pwm_right>pwmcount)?1:0;
01B2 C3        1046            clr     c
01B3 E548      1047            mov     a,_pwmcount
01B5 95C8      1048            subb    a,_pwm_right
01B7 9286      1049            mov     _P0_6,c
01B9           1050   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:212: msCount++;
01B9 7401      1051            mov     a,#0x01
01BB 2508      1052            add     a,_msCount
01BD F508      1053            mov     _msCount,a
01BF E4        1054            clr     a
01C0 3509      1055            addc    a,(_msCount + 1)
01C2 F509      1056            mov     (_msCount + 1),a
01C4           1057   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:213: if(msCount==10000)
01C4 7410      1058            mov     a,#0x10
01C6 B50858    1059            cjne    a,_msCount,L015008?
01C9 7427      1060            mov     a,#0x27
01CB B50958    1061            cjne    a,(_msCount + 1),L015008?
01CE           1062   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:215: time_update_flag=1;
01CE D278      1063            setb    _time_update_flag
01D0           1064   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:216: msCount=0;
01D0 E4        1065            clr     a
01D1 F508      1066            mov     _msCount,a
01D3 F509      1067            mov     (_msCount + 1),a
01D5           1068   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:217: secs++;
01D5 05C8      1069            inc     _secs
01D7           1070   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:218: if(secs==60)
01D7 743C      1071            mov     a,#0x3C
01D9 B5C858    1072            cjne    a,_secs,L015008?
01DC           1073   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:220: secs=0;
01DC 75C800    1074            mov     _secs,#0x00
01DF           1075   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:221: mins++;
01DF 0588      1076            inc     _mins
01E1           1077   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:222: if(mins==60)
01E1 743C      1078            mov     a,#0x3C
01E3 B58858    1079            cjne    a,_mins,L015008?
01E6           1080   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:224: mins=0;
01E6 758800    1081            mov     _mins,#0x00
01E9           1082   L015008?:
01E9           1083   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:229: if(turn_time_update == 1){
01E9 302898    1084            jnb     _turn_time_update,L015010?
01EC           1085   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:230: turn_timer++;
01EC 7401      1086            mov     a,#0x01
01EE 2588      1087            add     a,_turn_timer
01F0 F588      1088            mov     _turn_timer,a
01F2 E4        1089            clr     a
01F3 3589      1090            addc    a,(_turn_timer + 1)
01F5 F589      1091            mov     (_turn_timer + 1),a
01F7           1092   L015010?:
01F7           1093   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:233: if(start_timer == 1){
01F7 3098D8    1094            jnb     _start_timer,L015015?
01FA           1095   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:234: action_timer++;
01FA 7401      1096            mov     a,#0x01
01FC 2548      1097            add     a,_action_timer
01FE F548      1098            mov     _action_timer,a
0200 E4        1099            clr     a
0201 3549      1100            addc    a,(_action_timer + 1)
0203 F549      1101            mov     (_action_timer + 1),a
0205           1102   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:235: if(action_timer == 5000){
0205 7488      1103            mov     a,#0x88
0207 B548D8    1104            cjne    a,_action_timer,L015015?
020A 7413      1105            mov     a,#0x13
020C B549D8    1106            cjne    a,(_action_timer + 1),L015015?
020F           1107   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:236: action_timer = 0;
020F E4        1108            clr     a
0210 F548      1109            mov     _action_timer,a
0212 F549      1110            mov     (_action_timer + 1),a
0214           1111   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:237: start_timer = 0;
0214 C298      1112            clr     _start_timer
0216           1113   L015015?:
0216 D0D0      1114            pop     psw
0218 D0E0      1115            pop     acc
021A 32        1116            reti
021B           1117   ;        eliminated unneeded push/pop dpl
021B           1118   ;        eliminated unneeded push/pop dph
021B           1119   ;        eliminated unneeded push/pop b
021B           1120   ;------------------------------------------------------------
021B           1121   ;Allocation info for local variables in function 'display_LCD'
021B           1122   ;------------------------------------------------------------
021B           1123   ;buff                      Allocated with name '_display_LCD_buff_1_96'
021B           1124   ;------------------------------------------------------------
021B           1125   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:243: void display_LCD(void){
021B           1126   ;        -----------------------------------------
021B           1127   ;         function display_LCD
021B           1128   ;        -----------------------------------------
021B           1129   _display_LCD:
021B           1130   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:246: time_update_flag=0;
021B C278      1131            clr     _time_update_flag
021D           1132   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:259: sprintf(buff, "LS=%5.2f", (AD1DAT3/255.0)*3.3); //Display Line Sensor
021D 85F582    1133            mov     dpl,_AD1DAT3
0220 120100    1134            lcall   ___uchar2fs
0223 AA82      1135            mov     r2,dpl
0225 AB83      1136            mov     r3,dph
0227 ACF0      1137            mov     r4,b
0229 FD        1138            mov     r5,a
022A E4        1139            clr     a
022B C0E0      1140            push    acc
022D C0E0      1141            push    acc
022F 747F      1142            mov     a,#0x7F
0231 C0E0      1143            push    acc
0233 7443      1144            mov     a,#0x43
0235 C0E0      1145            push    acc
0237 8A82      1146            mov     dpl,r2
0239 8B83      1147            mov     dph,r3
023B 8CF0      1148            mov     b,r4
023D ED        1149            mov     a,r5
023E 120100    1150            lcall   ___fsdiv
0241 AA82      1151            mov     r2,dpl
0243 AB83      1152            mov     r3,dph
0245 ACF0      1153            mov     r4,b
0247 FD        1154            mov     r5,a
0248 E581      1155            mov     a,sp
024A 24FC      1156            add     a,#0xfc
024C F581      1157            mov     sp,a
024E C002      1158            push    ar2
0250 C003      1159            push    ar3
0252 C004      1160            push    ar4
0254 C005      1161            push    ar5
0256 903333    1162            mov     dptr,#0x3333
0259 75F053    1163            mov     b,#0x53
025C 7440      1164            mov     a,#0x40
025E 120100    1165            lcall   ___fsmul
0261 AA82      1166            mov     r2,dpl
0263 AB83      1167            mov     r3,dph
0265 ACF0      1168            mov     r4,b
0267 FD        1169            mov     r5,a
0268 E581      1170            mov     a,sp
026A 24FC      1171            add     a,#0xfc
026C F581      1172            mov     sp,a
026E C002      1173            push    ar2
0270 C003      1174            push    ar3
0272 C004      1175            push    ar4
0274 C005      1176            push    ar5
0276 7418      1177            mov     a,#__str_0
0278 C0E0      1178            push    acc
027A 74B1      1179            mov     a,#(__str_0 >> 8)
027C C0E0      1180            push    acc
027E 7480      1181            mov     a,#0x80
0280 C0E0      1182            push    acc
0282 7498      1183            mov     a,#_display_LCD_buff_1_96
0284 C0E0      1184            push    acc
0286 74A3      1185            mov     a,#(_display_LCD_buff_1_96 >> 8)
0288 C0E0      1186            push    acc
028A 7440      1187            mov     a,#0x40
028C C0E0      1188            push    acc
028E 120100    1189            lcall   _sprintf
0291 E581      1190            mov     a,sp
0293 24F6      1191            add     a,#0xf6
0295 F581      1192            mov     sp,a
0297           1193   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:260: LCDprint(buff, 1, 1);
0297 75C801    1194            mov     _LCDprint_PARM_2,#0x01
029A D258      1195            setb    _LCDprint_PARM_3
029C 90A398    1196            mov     dptr,#_display_LCD_buff_1_96
029F 75F040    1197            mov     b,#0x40
02A2 120100    1198            lcall   _LCDprint
02A5           1199   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:261: sprintf(buff, "LC=%d ST=%d", line_counter, start_timer); // Display line counter, start_timer
02A5 A298      1200            mov     c,_start_timer
02A7 E4        1201            clr     a
02A8 33        1202            rlc     a
02A9 FA        1203            mov     r2,a
02AA 7B00      1204            mov     r3,#0x00
02AC C002      1205            push    ar2
02AE C003      1206            push    ar3
02B0 C008      1207            push    _line_counter
02B2 C009      1208            push    (_line_counter + 1)
02B4 7498      1209            mov     a,#__str_1
02B6 C0E0      1210            push    acc
02B8 74B1      1211            mov     a,#(__str_1 >> 8)
02BA C0E0      1212            push    acc
02BC 7480      1213            mov     a,#0x80
02BE C0E0      1214            push    acc
02C0 7498      1215            mov     a,#_display_LCD_buff_1_96
02C2 C0E0      1216            push    acc
02C4 74A3      1217            mov     a,#(_display_LCD_buff_1_96 >> 8)
02C6 C0E0      1218            push    acc
02C8 7440      1219            mov     a,#0x40
02CA C0E0      1220            push    acc
02CC 120100    1221            lcall   _sprintf
02CF E581      1222            mov     a,sp
02D1 24F6      1223            add     a,#0xf6
02D3 F581      1224            mov     sp,a
02D5           1225   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:262: LCDprint(buff, 2, 1);
02D5 75C802    1226            mov     _LCDprint_PARM_2,#0x02
02D8 D258      1227            setb    _LCDprint_PARM_3
02DA 90A398    1228            mov     dptr,#_display_LCD_buff_1_96
02DD 75F040    1229            mov     b,#0x40
02E0 020100    1230            ljmp    _LCDprint
02E3           1231   ;------------------------------------------------------------
02E3           1232   ;Allocation info for local variables in function 'turn_left'
02E3           1233   ;------------------------------------------------------------
02E3           1234   ;------------------------------------------------------------
02E3           1235   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:266: void turn_left(void){
02E3           1236   ;        -----------------------------------------
02E3           1237   ;         function turn_left
02E3           1238   ;        -----------------------------------------
02E3           1239   _turn_left:
02E3           1240   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:267: turn_timer = 0;
02E3 E4        1241            clr     a
02E4 F588      1242            mov     _turn_timer,a
02E6 F589      1243            mov     (_turn_timer + 1),a
02E8           1244   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:268: turn_time_update = 1;
02E8 D228      1245            setb    _turn_time_update
02EA           1246   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:269: while(1){
02EA           1247   L017004?:
02EA           1248   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:270: pwm_left = 20;
02EA 750814    1249            mov     _pwm_left,#0x14
02ED           1250   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:271: pwm_right = 100;
02ED 75C864    1251            mov     _pwm_right,#0x64
02F0           1252   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:272: if(turn_timer == 2000){
02F0 74D0      1253            mov     a,#0xD0
02F2 B588D8    1254            cjne    a,_turn_timer,L017004?
02F5 7407      1255            mov     a,#0x07
02F7 B589D8    1256            cjne    a,(_turn_timer + 1),L017004?
02FA           1257   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:273: turn_time_update = 0;
02FA C228      1258            clr     _turn_time_update
02FC           1259   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:274: turn_timer = 0;
02FC E4        1260            clr     a
02FD F588      1261            mov     _turn_timer,a
02FF F589      1262            mov     (_turn_timer + 1),a
0301           1263   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:275: break;
0301 22        1264            ret
0302           1265   ;------------------------------------------------------------
0302           1266   ;Allocation info for local variables in function 'turn_right'
0302           1267   ;------------------------------------------------------------
0302           1268   ;------------------------------------------------------------
0302           1269   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:279: void turn_right(void){
0302           1270   ;        -----------------------------------------
0302           1271   ;         function turn_right
0302           1272   ;        -----------------------------------------
0302           1273   _turn_right:
0302           1274   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:280: turn_timer = 0;
0302 E4        1275            clr     a
0303 F588      1276            mov     _turn_timer,a
0305 F589      1277            mov     (_turn_timer + 1),a
0307           1278   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:281: turn_time_update = 1;
0307 D228      1279            setb    _turn_time_update
0309           1280   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:282: while(1){
0309           1281   L018004?:
0309           1282   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:283: pwm_left = 100;
0309 750864    1283            mov     _pwm_left,#0x64
030C           1284   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:284: pwm_right = 20;
030C 75C814    1285            mov     _pwm_right,#0x14
030F           1286   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:285: if(turn_timer == 2000){
030F 74D0      1287            mov     a,#0xD0
0311 B58818    1288            cjne    a,_turn_timer,L018004?
0314 7407      1289            mov     a,#0x07
0316 B58918    1290            cjne    a,(_turn_timer + 1),L018004?
0319           1291   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:286: turn_time_update = 0;
0319 C228      1292            clr     _turn_time_update
031B           1293   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:287: turn_timer = 0;
031B E4        1294            clr     a
031C F588      1295            mov     _turn_timer,a
031E F589      1296            mov     (_turn_timer + 1),a
0320           1297   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:288: break;
0320 22        1298            ret
0321           1299   ;------------------------------------------------------------
0321           1300   ;Allocation info for local variables in function 'stop'
0321           1301   ;------------------------------------------------------------
0321           1302   ;------------------------------------------------------------
0321           1303   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:293: void stop(void){
0321           1304   ;        -----------------------------------------
0321           1305   ;         function stop
0321           1306   ;        -----------------------------------------
0321           1307   _stop:
0321           1308   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:294: while(1){
0321           1309   L019002?:
0321           1310   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:295: pwm_left = 0;
0321 750800    1311            mov     _pwm_left,#0x00
0324           1312   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:296: pwm_right = 0;
0324 75C800    1313            mov     _pwm_right,#0x00
0327 8001      1314            sjmp    L019002?
0329           1315   ;------------------------------------------------------------
0329           1316   ;Allocation info for local variables in function 'execute'
0329           1317   ;------------------------------------------------------------
0329           1318   ;command                   Allocated to registers r2 r3 
0329           1319   ;------------------------------------------------------------
0329           1320   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:300: void execute(int command){
0329           1321   ;        -----------------------------------------
0329           1322   ;         function execute
0329           1323   ;        -----------------------------------------
0329           1324   _execute:
0329 AA82      1325            mov     r2,dpl
032B AB83      1326            mov     r3,dph
032D           1327   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:301: switch(command){
032D BA0298    1328            cjne    r2,#0x02,L020014?
0330 BB0098    1329            cjne    r3,#0x00,L020014?
0333 8001      1330            sjmp    L020001?
0335           1331   L020014?:
0335 BA0318    1332            cjne    r2,#0x03,L020015?
0338 BB0018    1333            cjne    r3,#0x00,L020015?
033B 8001      1334            sjmp    L020002?
033D           1335   L020015?:
033D           1336   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:302: case 2:
033D BA0498    1337            cjne    r2,#0x04,L020008?
0340 BB0098    1338            cjne    r3,#0x00,L020008?
0343 8001      1339            sjmp    L020003?
0345           1340   L020001?:
0345           1341   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:303: turn_left();
0345 120100    1342            lcall   _turn_left
0348           1343   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:304: case 3:
0348           1344   L020002?:
0348           1345   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:305: turn_right();
0348 120100    1346            lcall   _turn_right
034B           1347   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:306: case 4:
034B           1348   L020003?:
034B           1349   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:307: if(start == 1){
034B           1350   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:308: start = 0;
034B 10D818    1351            jbc     _start,L020017?
034E 8001      1352            sjmp    L020005?
0350           1353   L020017?:
0350 22        1354            ret
0351           1355   L020005?:
0351           1356   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:311: stop();
0351           1357   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:313: }
0351 020100    1358            ljmp    _stop
0354           1359   L020008?:
0354 22        1360            ret
0355           1361   ;------------------------------------------------------------
0355           1362   ;Allocation info for local variables in function 'main'
0355           1363   ;------------------------------------------------------------
0355           1364   ;cor                       Allocated with name '_main_cor_1_114'
0355           1365   ;cur_error                 Allocated with name '_main_cur_error_1_114'
0355           1366   ;pre_error                 Allocated with name '_main_pre_error_1_114'
0355           1367   ;thresh                    Allocated to registers 
0355           1368   ;left                      Allocated with name '_main_left_1_114'
0355           1369   ;right                     Allocated with name '_main_right_1_114'
0355           1370   ;line_sensor               Allocated with name '_main_line_sensor_1_114'
0355           1371   ;diff                      Allocated with name '_main_diff_1_114'
0355           1372   ;line_counter              Allocated with name '_main_line_counter_1_114'
0355           1373   ;command                   Allocated with name '_main_command_1_114'
0355           1374   ;state                     Allocated to registers r6 r7 
0355           1375   ;------------------------------------------------------------
0355           1376   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:316: void main (void){
0355           1377   ;        -----------------------------------------
0355           1378   ;         function main
0355           1379   ;        -----------------------------------------
0355           1380   _main:
0355           1381   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:319: double cur_error =0;
0355           1382   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:324: double left = (AD1DAT1/255.0)*3.3;
0355 E4        1383            clr     a
0356 F528      1384            mov     _main_cur_error_1_114,a
0358 F529      1385            mov     (_main_cur_error_1_114 + 1),a
035A F52A      1386            mov     (_main_cur_error_1_114 + 2),a
035C F52B      1387            mov     (_main_cur_error_1_114 + 3),a
035E E5D6      1388            mov     a,_AD1DAT1
0360           1389   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:325: double right = (AD1DAT2/255.0)*3.3;
0360 E5D7      1390            mov     a,_AD1DAT2
0362           1391   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:326: double line_sensor = (AD1DAT3/255.0)*3.3;
0362 E5F5      1392            mov     a,_AD1DAT3
0364           1393   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:330: int line_counter = 0;
0364           1394   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:331: int command = 0;
0364 E4        1395            clr     a
0365 F508      1396            mov     _main_line_counter_1_114,a
0367 F509      1397            mov     (_main_line_counter_1_114 + 1),a
0369 F558      1398            mov     _main_command_1_114,a
036B F559      1399            mov     (_main_command_1_114 + 1),a
036D           1400   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:332: int state = 1;  
036D 7E01      1401            mov     r6,#0x01
036F 7F00      1402            mov     r7,#0x00
0371           1403   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:335: InitPorts();
0371 C006      1404            push    ar6
0373 C007      1405            push    ar7
0375 120100    1406            lcall   _InitPorts
0378           1407   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:336: LCD_8BIT();
0378 120100    1408            lcall   _LCD_8BIT
037B           1409   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:337: InitSerialPort();
037B 120100    1410            lcall   _InitSerialPort
037E           1411   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:338: InitADC();
037E 120100    1412            lcall   _InitADC
0381           1413   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:339: InitTimer0();
0381 120100    1414            lcall   _InitTimer0
0384 D007      1415            pop     ar7
0386 D006      1416            pop     ar6
0388           1417   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:342: pre_error = 0;
0388 757800    1418            mov     _main_pre_error_1_114,#0x00
038B 757900    1419            mov     (_main_pre_error_1_114 + 1),#0x00
038E 757A00    1420            mov     (_main_pre_error_1_114 + 2),#0x00
0391 757B00    1421            mov     (_main_pre_error_1_114 + 3),#0x00
0394           1422   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:343: while(1)
0394           1423   L021036?:
0394           1424   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:353: left = (AD1DAT1/255.0)*3.3;
0394 85D682    1425            mov     dpl,_AD1DAT1
0397 C006      1426            push    ar6
0399 C007      1427            push    ar7
039B 120100    1428            lcall   ___uchar2fs
039E AA82      1429            mov     r2,dpl
03A0 AB83      1430            mov     r3,dph
03A2 ACF0      1431            mov     r4,b
03A4 FD        1432            mov     r5,a
03A5 E4        1433            clr     a
03A6 C0E0      1434            push    acc
03A8 C0E0      1435            push    acc
03AA 747F      1436            mov     a,#0x7F
03AC C0E0      1437            push    acc
03AE 7443      1438            mov     a,#0x43
03B0 C0E0      1439            push    acc
03B2 8A82      1440            mov     dpl,r2
03B4 8B83      1441            mov     dph,r3
03B6 8CF0      1442            mov     b,r4
03B8 ED        1443            mov     a,r5
03B9 120100    1444            lcall   ___fsdiv
03BC AA82      1445            mov     r2,dpl
03BE AB83      1446            mov     r3,dph
03C0 ACF0      1447            mov     r4,b
03C2 FD        1448            mov     r5,a
03C3 E581      1449            mov     a,sp
03C5 24FC      1450            add     a,#0xfc
03C7 F581      1451            mov     sp,a
03C9 C002      1452            push    ar2
03CB C003      1453            push    ar3
03CD C004      1454            push    ar4
03CF C005      1455            push    ar5
03D1 903333    1456            mov     dptr,#0x3333
03D4 75F053    1457            mov     b,#0x53
03D7 7440      1458            mov     a,#0x40
03D9 120100    1459            lcall   ___fsmul
03DC 8582C8    1460            mov     _main_left_1_114,dpl
03DF 8583C9    1461            mov     (_main_left_1_114 + 1),dph
03E2 85F0CA    1462            mov     (_main_left_1_114 + 2),b
03E5 F5CB      1463            mov     (_main_left_1_114 + 3),a
03E7 E581      1464            mov     a,sp
03E9 24FC      1465            add     a,#0xfc
03EB F581      1466            mov     sp,a
03ED           1467   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:354: right = (AD1DAT2/255.0)*3.3;
03ED 85D782    1468            mov     dpl,_AD1DAT2
03F0 120100    1469            lcall   ___uchar2fs
03F3 A882      1470            mov     r0,dpl
03F5 A983      1471            mov     r1,dph
03F7 AAF0      1472            mov     r2,b
03F9 FB        1473            mov     r3,a
03FA E4        1474            clr     a
03FB C0E0      1475            push    acc
03FD C0E0      1476            push    acc
03FF 747F      1477            mov     a,#0x7F
0401 C0E0      1478            push    acc
0403 7443      1479            mov     a,#0x43
0405 C0E0      1480            push    acc
0407 8882      1481            mov     dpl,r0
0409 8983      1482            mov     dph,r1
040B 8AF0      1483            mov     b,r2
040D EB        1484            mov     a,r3
040E 120100    1485            lcall   ___fsdiv
0411 AA82      1486            mov     r2,dpl
0413 AB83      1487            mov     r3,dph
0415 ACF0      1488            mov     r4,b
0417 FD        1489            mov     r5,a
0418 E581      1490            mov     a,sp
041A 24FC      1491            add     a,#0xfc
041C F581      1492            mov     sp,a
041E C002      1493            push    ar2
0420 C003      1494            push    ar3
0422 C004      1495            push    ar4
0424 C005      1496            push    ar5
0426 903333    1497            mov     dptr,#0x3333
0429 75F053    1498            mov     b,#0x53
042C 7440      1499            mov     a,#0x40
042E 120100    1500            lcall   ___fsmul
0431 858218    1501            mov     _main_right_1_114,dpl
0434 858319    1502            mov     (_main_right_1_114 + 1),dph
0437 85F01A    1503            mov     (_main_right_1_114 + 2),b
043A F51B      1504            mov     (_main_right_1_114 + 3),a
043C E581      1505            mov     a,sp
043E 24FC      1506            add     a,#0xfc
0440 F581      1507            mov     sp,a
0442           1508   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:355: line_sensor = (AD1DAT3/255.0)*3.3;
0442 85F582    1509            mov     dpl,_AD1DAT3
0445 120100    1510            lcall   ___uchar2fs
0448 A882      1511            mov     r0,dpl
044A A983      1512            mov     r1,dph
044C AAF0      1513            mov     r2,b
044E FB        1514            mov     r3,a
044F E4        1515            clr     a
0450 C0E0      1516            push    acc
0452 C0E0      1517            push    acc
0454 747F      1518            mov     a,#0x7F
0456 C0E0      1519            push    acc
0458 7443      1520            mov     a,#0x43
045A C0E0      1521            push    acc
045C 8882      1522            mov     dpl,r0
045E 8983      1523            mov     dph,r1
0460 8AF0      1524            mov     b,r2
0462 EB        1525            mov     a,r3
0463 120100    1526            lcall   ___fsdiv
0466 AA82      1527            mov     r2,dpl
0468 AB83      1528            mov     r3,dph
046A ACF0      1529            mov     r4,b
046C FD        1530            mov     r5,a
046D E581      1531            mov     a,sp
046F 24FC      1532            add     a,#0xfc
0471 F581      1533            mov     sp,a
0473 C002      1534            push    ar2
0475 C003      1535            push    ar3
0477 C004      1536            push    ar4
0479 C005      1537            push    ar5
047B 903333    1538            mov     dptr,#0x3333
047E 75F053    1539            mov     b,#0x53
0481 7440      1540            mov     a,#0x40
0483 120100    1541            lcall   ___fsmul
0486 858268    1542            mov     _main_line_sensor_1_114,dpl
0489 858369    1543            mov     (_main_line_sensor_1_114 + 1),dph
048C 85F06A    1544            mov     (_main_line_sensor_1_114 + 2),b
048F F56B      1545            mov     (_main_line_sensor_1_114 + 3),a
0491 E581      1546            mov     a,sp
0493 24FC      1547            add     a,#0xfc
0495 F581      1548            mov     sp,a
0497           1549   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:356: diff = left - right;
0497 C018      1550            push    _main_right_1_114
0499 C019      1551            push    (_main_right_1_114 + 1)
049B C01A      1552            push    (_main_right_1_114 + 2)
049D C01B      1553            push    (_main_right_1_114 + 3)
049F 85C882    1554            mov     dpl,_main_left_1_114
04A2 85C983    1555            mov     dph,(_main_left_1_114 + 1)
04A5 85CAF0    1556            mov     b,(_main_left_1_114 + 2)
04A8 E5CB      1557            mov     a,(_main_left_1_114 + 3)
04AA 120100    1558            lcall   ___fssub
04AD 8582B8    1559            mov     _main_diff_1_114,dpl
04B0 8583B9    1560            mov     (_main_diff_1_114 + 1),dph
04B3 85F0BA    1561            mov     (_main_diff_1_114 + 2),b
04B6 F5BB      1562            mov     (_main_diff_1_114 + 3),a
04B8 E581      1563            mov     a,sp
04BA 24FC      1564            add     a,#0xfc
04BC F581      1565            mov     sp,a
04BE D007      1566            pop     ar7
04C0 D006      1567            pop     ar6
04C2           1568   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:359: if(time_update_flag==1) // If the clock has been updated, refresh the display
04C2 307818    1569            jnb     _time_update_flag,L021002?
04C5           1570   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:361: display_LCD();
04C5 C006      1571            push    ar6
04C7 C007      1572            push    ar7
04C9 120100    1573            lcall   _display_LCD
04CC D007      1574            pop     ar7
04CE D006      1575            pop     ar6
04D0           1576   L021002?:
04D0           1577   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:365: cor = KP * cur_error + KD*(cur_error - pre_error);
04D0 C006      1578            push    ar6
04D2 C007      1579            push    ar7
04D4 C028      1580            push    _main_cur_error_1_114
04D6 C029      1581            push    (_main_cur_error_1_114 + 1)
04D8 C02A      1582            push    (_main_cur_error_1_114 + 2)
04DA C02B      1583            push    (_main_cur_error_1_114 + 3)
04DC 900000    1584            mov     dptr,#0x0000
04DF 75F0C8    1585            mov     b,#0xC8
04E2 7441      1586            mov     a,#0x41
04E4 120100    1587            lcall   ___fsmul
04E7 8582D8    1588            mov     _main_cor_1_114,dpl
04EA 8583D9    1589            mov     (_main_cor_1_114 + 1),dph
04ED 85F0DA    1590            mov     (_main_cor_1_114 + 2),b
04F0 F5DB      1591            mov     (_main_cor_1_114 + 3),a
04F2 E581      1592            mov     a,sp
04F4 24FC      1593            add     a,#0xfc
04F6 F581      1594            mov     sp,a
04F8           1595   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:367: if((0.4 < left) && (left < 0.7) && (0.4 < right) && (right < 0.7)){
04F8 C0C8      1596            push    _main_left_1_114
04FA C0C9      1597            push    (_main_left_1_114 + 1)
04FC C0CA      1598            push    (_main_left_1_114 + 2)
04FE C0CB      1599            push    (_main_left_1_114 + 3)
0500 90CCCD    1600            mov     dptr,#0xCCCD
0503 75F0CC    1601            mov     b,#0xCC
0506 743E      1602            mov     a,#0x3E
0508 120100    1603            lcall   ___fslt
050B A882      1604            mov     r0,dpl
050D E581      1605            mov     a,sp
050F 24FC      1606            add     a,#0xfc
0511 F581      1607            mov     sp,a
0513 D007      1608            pop     ar7
0515 D006      1609            pop     ar6
0517 E8        1610            mov     a,r0
0518 7001      1611            jnz     L021062?
051A 020100    1612            ljmp    L021004?
051D           1613   L021062?:
051D C006      1614            push    ar6
051F C007      1615            push    ar7
0521 7433      1616            mov     a,#0x33
0523 C0E0      1617            push    acc
0525 C0E0      1618            push    acc
0527 C0E0      1619            push    acc
0529 743F      1620            mov     a,#0x3F
052B C0E0      1621            push    acc
052D 85C882    1622            mov     dpl,_main_left_1_114
0530 85C983    1623            mov     dph,(_main_left_1_114 + 1)
0533 85CAF0    1624            mov     b,(_main_left_1_114 + 2)
0536 E5CB      1625            mov     a,(_main_left_1_114 + 3)
0538 120100    1626            lcall   ___fslt
053B A882      1627            mov     r0,dpl
053D E581      1628            mov     a,sp
053F 24FC      1629            add     a,#0xfc
0541 F581      1630            mov     sp,a
0543 D007      1631            pop     ar7
0545 D006      1632            pop     ar6
0547 E8        1633            mov     a,r0
0548 6001      1634            jz      L021004?
054A C006      1635            push    ar6
054C C007      1636            push    ar7
054E C018      1637            push    _main_right_1_114
0550 C019      1638            push    (_main_right_1_114 + 1)
0552 C01A      1639            push    (_main_right_1_114 + 2)
0554 C01B      1640            push    (_main_right_1_114 + 3)
0556 90CCCD    1641            mov     dptr,#0xCCCD
0559 75F0CC    1642            mov     b,#0xCC
055C 743E      1643            mov     a,#0x3E
055E 120100    1644            lcall   ___fslt
0561 A882      1645            mov     r0,dpl
0563 E581      1646            mov     a,sp
0565 24FC      1647            add     a,#0xfc
0567 F581      1648            mov     sp,a
0569 D007      1649            pop     ar7
056B D006      1650            pop     ar6
056D E8        1651            mov     a,r0
056E 6001      1652            jz      L021004?
0570 C006      1653            push    ar6
0572 C007      1654            push    ar7
0574 7433      1655            mov     a,#0x33
0576 C0E0      1656            push    acc
0578 C0E0      1657            push    acc
057A C0E0      1658            push    acc
057C 743F      1659            mov     a,#0x3F
057E C0E0      1660            push    acc
0580 851882    1661            mov     dpl,_main_right_1_114
0583 851983    1662            mov     dph,(_main_right_1_114 + 1)
0586 851AF0    1663            mov     b,(_main_right_1_114 + 2)
0589 E51B      1664            mov     a,(_main_right_1_114 + 3)
058B 120100    1665            lcall   ___fslt
058E A882      1666            mov     r0,dpl
0590 E581      1667            mov     a,sp
0592 24FC      1668            add     a,#0xfc
0594 F581      1669            mov     sp,a
0596 D007      1670            pop     ar7
0598 D006      1671            pop     ar6
059A E8        1672            mov     a,r0
059B 6001      1673            jz      L021004?
059D           1674   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:368: cur_error = 0;
059D 752800    1675            mov     _main_cur_error_1_114,#0x00
05A0 752900    1676            mov     (_main_cur_error_1_114 + 1),#0x00
05A3 752A00    1677            mov     (_main_cur_error_1_114 + 2),#0x00
05A6 752B00    1678            mov     (_main_cur_error_1_114 + 3),#0x00
05A9           1679   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:369: pwm_left = 100;
05A9 750864    1680            mov     _pwm_left,#0x64
05AC           1681   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:370: pwm_right = 100;
05AC 75C864    1682            mov     _pwm_right,#0x64
05AF           1683   L021004?:
05AF           1684   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:372: if(0.5<diff){   
05AF C006      1685            push    ar6
05B1 C007      1686            push    ar7
05B3 C0B8      1687            push    _main_diff_1_114
05B5 C0B9      1688            push    (_main_diff_1_114 + 1)
05B7 C0BA      1689            push    (_main_diff_1_114 + 2)
05B9 C0BB      1690            push    (_main_diff_1_114 + 3)
05BB 900000    1691            mov     dptr,#(0x00&0x00ff)
05BE E4        1692            clr     a
05BF F5F0      1693            mov     b,a
05C1 743F      1694            mov     a,#0x3F
05C3 120100    1695            lcall   ___fslt
05C6 A882      1696            mov     r0,dpl
05C8 E581      1697            mov     a,sp
05CA 24FC      1698            add     a,#0xfc
05CC F581      1699            mov     sp,a
05CE D007      1700            pop     ar7
05D0 D006      1701            pop     ar6
05D2 E8        1702            mov     a,r0
05D3 6001      1703            jz      L021009?
05D5           1704   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:373: cur_error = 3;
05D5 752800    1705            mov     _main_cur_error_1_114,#0x00
05D8 752900    1706            mov     (_main_cur_error_1_114 + 1),#0x00
05DB 752A40    1707            mov     (_main_cur_error_1_114 + 2),#0x40
05DE 752B40    1708            mov     (_main_cur_error_1_114 + 3),#0x40
05E1           1709   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:374: pwm_left = 100 - cor;
05E1 C006      1710            push    ar6
05E3 C007      1711            push    ar7
05E5 C0D8      1712            push    _main_cor_1_114
05E7 C0D9      1713            push    (_main_cor_1_114 + 1)
05E9 C0DA      1714            push    (_main_cor_1_114 + 2)
05EB C0DB      1715            push    (_main_cor_1_114 + 3)
05ED 900000    1716            mov     dptr,#0x0000
05F0 75F0C8    1717            mov     b,#0xC8
05F3 7442      1718            mov     a,#0x42
05F5 120100    1719            lcall   ___fssub
05F8 A882      1720            mov     r0,dpl
05FA A983      1721            mov     r1,dph
05FC AAF0      1722            mov     r2,b
05FE FB        1723            mov     r3,a
05FF E581      1724            mov     a,sp
0601 24FC      1725            add     a,#0xfc
0603 F581      1726            mov     sp,a
0605 8882      1727            mov     dpl,r0
0607 8983      1728            mov     dph,r1
0609 8AF0      1729            mov     b,r2
060B EB        1730            mov     a,r3
060C 120100    1731            lcall   ___fs2uchar
060F 858208    1732            mov     _pwm_left,dpl
0612 D007      1733            pop     ar7
0614 D006      1734            pop     ar6
0616           1735   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:375: pwm_right = 100;
0616 75C864    1736            mov     _pwm_right,#0x64
0619           1737   L021009?:
0619           1738   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:377: if(diff<-0.5){
0619 C006      1739            push    ar6
061B C007      1740            push    ar7
061D E4        1741            clr     a
061E C0E0      1742            push    acc
0620 C0E0      1743            push    acc
0622 C0E0      1744            push    acc
0624 74BF      1745            mov     a,#0xBF
0626 C0E0      1746            push    acc
0628 85B882    1747            mov     dpl,_main_diff_1_114
062B 85B983    1748            mov     dph,(_main_diff_1_114 + 1)
062E 85BAF0    1749            mov     b,(_main_diff_1_114 + 2)
0631 E5BB      1750            mov     a,(_main_diff_1_114 + 3)
0633 120100    1751            lcall   ___fslt
0636 AA82      1752            mov     r2,dpl
0638 E581      1753            mov     a,sp
063A 24FC      1754            add     a,#0xfc
063C F581      1755            mov     sp,a
063E D007      1756            pop     ar7
0640 D006      1757            pop     ar6
0642 EA        1758            mov     a,r2
0643 6001      1759            jz      L021011?
0645           1760   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:378: cur_error= -3;
0645 752800    1761            mov     _main_cur_error_1_114,#0x00
0648 752900    1762            mov     (_main_cur_error_1_114 + 1),#0x00
064B 752A40    1763            mov     (_main_cur_error_1_114 + 2),#0x40
064E 752BC0    1764            mov     (_main_cur_error_1_114 + 3),#0xC0
0651           1765   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:379: pwm_left = 100;
0651 750864    1766            mov     _pwm_left,#0x64
0654           1767   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:380: pwm_right = 100 + cor;
0654 C006      1768            push    ar6
0656 C007      1769            push    ar7
0658 E4        1770            clr     a
0659 C0E0      1771            push    acc
065B C0E0      1772            push    acc
065D 74C8      1773            mov     a,#0xC8
065F C0E0      1774            push    acc
0661 7442      1775            mov     a,#0x42
0663 C0E0      1776            push    acc
0665 85D882    1777            mov     dpl,_main_cor_1_114
0668 85D983    1778            mov     dph,(_main_cor_1_114 + 1)
066B 85DAF0    1779            mov     b,(_main_cor_1_114 + 2)
066E E5DB      1780            mov     a,(_main_cor_1_114 + 3)
0670 120100    1781            lcall   ___fsadd
0673 AA82      1782            mov     r2,dpl
0675 AB83      1783            mov     r3,dph
0677 ACF0      1784            mov     r4,b
0679 FD        1785            mov     r5,a
067A E581      1786            mov     a,sp
067C 24FC      1787            add     a,#0xfc
067E F581      1788            mov     sp,a
0680 8A82      1789            mov     dpl,r2
0682 8B83      1790            mov     dph,r3
0684 8CF0      1791            mov     b,r4
0686 ED        1792            mov     a,r5
0687 120100    1793            lcall   ___fs2uchar
068A 8582C8    1794            mov     _pwm_right,dpl
068D D007      1795            pop     ar7
068F D006      1796            pop     ar6
0691           1797   L021011?:
0691           1798   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:383: if((left < 0.4) && (right < 0.4)){
0691 C006      1799            push    ar6
0693 C007      1800            push    ar7
0695 74CD      1801            mov     a,#0xCD
0697 C0E0      1802            push    acc
0699 74CC      1803            mov     a,#0xCC
069B C0E0      1804            push    acc
069D C0E0      1805            push    acc
069F 743E      1806            mov     a,#0x3E
06A1 C0E0      1807            push    acc
06A3 85C882    1808            mov     dpl,_main_left_1_114
06A6 85C983    1809            mov     dph,(_main_left_1_114 + 1)
06A9 85CAF0    1810            mov     b,(_main_left_1_114 + 2)
06AC E5CB      1811            mov     a,(_main_left_1_114 + 3)
06AE 120100    1812            lcall   ___fslt
06B1 AA82      1813            mov     r2,dpl
06B3 E581      1814            mov     a,sp
06B5 24FC      1815            add     a,#0xfc
06B7 F581      1816            mov     sp,a
06B9 D007      1817            pop     ar7
06BB D006      1818            pop     ar6
06BD EA        1819            mov     a,r2
06BE 7001      1820            jnz     L021068?
06C0 020100    1821            ljmp    L021017?
06C3           1822   L021068?:
06C3 C006      1823            push    ar6
06C5 C007      1824            push    ar7
06C7 74CD      1825            mov     a,#0xCD
06C9 C0E0      1826            push    acc
06CB 74CC      1827            mov     a,#0xCC
06CD C0E0      1828            push    acc
06CF C0E0      1829            push    acc
06D1 743E      1830            mov     a,#0x3E
06D3 C0E0      1831            push    acc
06D5 851882    1832            mov     dpl,_main_right_1_114
06D8 851983    1833            mov     dph,(_main_right_1_114 + 1)
06DB 851AF0    1834            mov     b,(_main_right_1_114 + 2)
06DE E51B      1835            mov     a,(_main_right_1_114 + 3)
06E0 120100    1836            lcall   ___fslt
06E3 AA82      1837            mov     r2,dpl
06E5 E581      1838            mov     a,sp
06E7 24FC      1839            add     a,#0xfc
06E9 F581      1840            mov     sp,a
06EB D007      1841            pop     ar7
06ED D006      1842            pop     ar6
06EF EA        1843            mov     a,r2
06F0 7001      1844            jnz     L021069?
06F2 020100    1845            ljmp    L021017?
06F5           1846   L021069?:
06F5           1847   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:384: if(pre_error>0){
06F5 C006      1848            push    ar6
06F7 C007      1849            push    ar7
06F9 E4        1850            clr     a
06FA C0E0      1851            push    acc
06FC C0E0      1852            push    acc
06FE C0E0      1853            push    acc
0700 C0E0      1854            push    acc
0702 857882    1855            mov     dpl,_main_pre_error_1_114
0705 857983    1856            mov     dph,(_main_pre_error_1_114 + 1)
0708 857AF0    1857            mov     b,(_main_pre_error_1_114 + 2)
070B E57B      1858            mov     a,(_main_pre_error_1_114 + 3)
070D 120100    1859            lcall   ___fsgt
0710 AA82      1860            mov     r2,dpl
0712 E581      1861            mov     a,sp
0714 24FC      1862            add     a,#0xfc
0716 F581      1863            mov     sp,a
0718 D007      1864            pop     ar7
071A D006      1865            pop     ar6
071C EA        1866            mov     a,r2
071D 6001      1867            jz      L021013?
071F           1868   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:385: cur_error = 5;
071F 752800    1869            mov     _main_cur_error_1_114,#0x00
0722 752900    1870            mov     (_main_cur_error_1_114 + 1),#0x00
0725 752AA0    1871            mov     (_main_cur_error_1_114 + 2),#0xA0
0728 752B40    1872            mov     (_main_cur_error_1_114 + 3),#0x40
072B           1873   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:386: pwm_left = 100 - cor;
072B C006      1874            push    ar6
072D C007      1875            push    ar7
072F C0D8      1876            push    _main_cor_1_114
0731 C0D9      1877            push    (_main_cor_1_114 + 1)
0733 C0DA      1878            push    (_main_cor_1_114 + 2)
0735 C0DB      1879            push    (_main_cor_1_114 + 3)
0737 900000    1880            mov     dptr,#0x0000
073A 75F0C8    1881            mov     b,#0xC8
073D 7442      1882            mov     a,#0x42
073F 120100    1883            lcall   ___fssub
0742 AA82      1884            mov     r2,dpl
0744 AB83      1885            mov     r3,dph
0746 ACF0      1886            mov     r4,b
0748 FD        1887            mov     r5,a
0749 E581      1888            mov     a,sp
074B 24FC      1889            add     a,#0xfc
074D F581      1890            mov     sp,a
074F 8A82      1891            mov     dpl,r2
0751 8B83      1892            mov     dph,r3
0753 8CF0      1893            mov     b,r4
0755 ED        1894            mov     a,r5
0756 120100    1895            lcall   ___fs2uchar
0759 858208    1896            mov     _pwm_left,dpl
075C D007      1897            pop     ar7
075E D006      1898            pop     ar6
0760           1899   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:387: pwm_right = 100;
0760 75C864    1900            mov     _pwm_right,#0x64
0763           1901   L021013?:
0763           1902   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:389: if(pre_error<0){
0763 C006      1903            push    ar6
0765 C007      1904            push    ar7
0767 E4        1905            clr     a
0768 C0E0      1906            push    acc
076A C0E0      1907            push    acc
076C C0E0      1908            push    acc
076E C0E0      1909            push    acc
0770 857882    1910            mov     dpl,_main_pre_error_1_114
0773 857983    1911            mov     dph,(_main_pre_error_1_114 + 1)
0776 857AF0    1912            mov     b,(_main_pre_error_1_114 + 2)
0779 E57B      1913            mov     a,(_main_pre_error_1_114 + 3)
077B 120100    1914            lcall   ___fslt
077E AA82      1915            mov     r2,dpl
0780 E581      1916            mov     a,sp
0782 24FC      1917            add     a,#0xfc
0784 F581      1918            mov     sp,a
0786 D007      1919            pop     ar7
0788 D006      1920            pop     ar6
078A EA        1921            mov     a,r2
078B 6001      1922            jz      L021017?
078D           1923   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:390: cur_error = -5;
078D 752800    1924            mov     _main_cur_error_1_114,#0x00
0790 752900    1925            mov     (_main_cur_error_1_114 + 1),#0x00
0793 752AA0    1926            mov     (_main_cur_error_1_114 + 2),#0xA0
0796 752BC0    1927            mov     (_main_cur_error_1_114 + 3),#0xC0
0799           1928   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:391: pwm_left = 100;
0799 750864    1929            mov     _pwm_left,#0x64
079C           1930   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:392: pwm_right = 100 + cor;
079C C006      1931            push    ar6
079E C007      1932            push    ar7
07A0 E4        1933            clr     a
07A1 C0E0      1934            push    acc
07A3 C0E0      1935            push    acc
07A5 74C8      1936            mov     a,#0xC8
07A7 C0E0      1937            push    acc
07A9 7442      1938            mov     a,#0x42
07AB C0E0      1939            push    acc
07AD 85D882    1940            mov     dpl,_main_cor_1_114
07B0 85D983    1941            mov     dph,(_main_cor_1_114 + 1)
07B3 85DAF0    1942            mov     b,(_main_cor_1_114 + 2)
07B6 E5DB      1943            mov     a,(_main_cor_1_114 + 3)
07B8 120100    1944            lcall   ___fsadd
07BB AA82      1945            mov     r2,dpl
07BD AB83      1946            mov     r3,dph
07BF ACF0      1947            mov     r4,b
07C1 FD        1948            mov     r5,a
07C2 E581      1949            mov     a,sp
07C4 24FC      1950            add     a,#0xfc
07C6 F581      1951            mov     sp,a
07C8 8A82      1952            mov     dpl,r2
07CA 8B83      1953            mov     dph,r3
07CC 8CF0      1954            mov     b,r4
07CE ED        1955            mov     a,r5
07CF 120100    1956            lcall   ___fs2uchar
07D2 8582C8    1957            mov     _pwm_right,dpl
07D5 D007      1958            pop     ar7
07D7 D006      1959            pop     ar6
07D9           1960   L021017?:
07D9           1961   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:395: pre_error = cur_error;
07D9 852878    1962            mov     _main_pre_error_1_114,_main_cur_error_1_114
07DC 852979    1963            mov     (_main_pre_error_1_114 + 1),(_main_cur_error_1_114 + 1)
07DF 852A7A    1964            mov     (_main_pre_error_1_114 + 2),(_main_cur_error_1_114 + 2)
07E2 852B7B    1965            mov     (_main_pre_error_1_114 + 3),(_main_cur_error_1_114 + 3)
07E5           1966   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:396: printf("State:%2d Command:%3d Sensor:%5.2f Timer: %2d                 \r\n", state, command, line_sensor, start_timer);
07E5 A298      1967            mov     c,_start_timer
07E7 E4        1968            clr     a
07E8 33        1969            rlc     a
07E9 FA        1970            mov     r2,a
07EA 7B00      1971            mov     r3,#0x00
07EC C006      1972            push    ar6
07EE C007      1973            push    ar7
07F0 C002      1974            push    ar2
07F2 C003      1975            push    ar3
07F4 C068      1976            push    _main_line_sensor_1_114
07F6 C069      1977            push    (_main_line_sensor_1_114 + 1)
07F8 C06A      1978            push    (_main_line_sensor_1_114 + 2)
07FA C06B      1979            push    (_main_line_sensor_1_114 + 3)
07FC C058      1980            push    _main_command_1_114
07FE C059      1981            push    (_main_command_1_114 + 1)
0800 C006      1982            push    ar6
0802 C007      1983            push    ar7
0804 7458      1984            mov     a,#__str_2
0806 C0E0      1985            push    acc
0808 74B8      1986            mov     a,#(__str_2 >> 8)
080A C0E0      1987            push    acc
080C 7480      1988            mov     a,#0x80
080E C0E0      1989            push    acc
0810 120100    1990            lcall   _printf
0813 E581      1991            mov     a,sp
0815 24F3      1992            add     a,#0xf3
0817 F581      1993            mov     sp,a
0819 D007      1994            pop     ar7
081B D006      1995            pop     ar6
081D           1996   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:399: switch(state){
081D BE01D8    1997            cjne    r6,#0x01,L021072?
0820 BF00D8    1998            cjne    r7,#0x00,L021072?
0823 8001      1999            sjmp    L021019?
0825           2000   L021072?:
0825 BE0258    2001            cjne    r6,#0x02,L021073?
0828 BF0058    2002            cjne    r7,#0x00,L021073?
082B 8001      2003            sjmp    L021022?
082D           2004   L021073?:
082D BE03D8    2005            cjne    r6,#0x03,L021074?
0830 BF00D8    2006            cjne    r7,#0x00,L021074?
0833 020100    2007            ljmp    L021025?
0836           2008   L021074?:
0836 BE0458    2009            cjne    r6,#0x04,L021075?
0839 BF0058    2010            cjne    r7,#0x00,L021075?
083C 020100    2011            ljmp    L021031?
083F           2012   L021075?:
083F 020100    2013            ljmp    L021036?
0842           2014   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:448: case 1:
0842           2015   L021019?:
0842           2016   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:449: if(line_sensor > HI_THRESH){
0842 C006      2017            push    ar6
0844 C007      2018            push    ar7
0846 E4        2019            clr     a
0847 C0E0      2020            push    acc
0849 C0E0      2021            push    acc
084B C0E0      2022            push    acc
084D 743F      2023            mov     a,#0x3F
084F C0E0      2024            push    acc
0851 856882    2025            mov     dpl,_main_line_sensor_1_114
0854 856983    2026            mov     dph,(_main_line_sensor_1_114 + 1)
0857 856AF0    2027            mov     b,(_main_line_sensor_1_114 + 2)
085A E56B      2028            mov     a,(_main_line_sensor_1_114 + 3)
085C 120100    2029            lcall   ___fsgt
085F AA82      2030            mov     r2,dpl
0861 E581      2031            mov     a,sp
0863 24FC      2032            add     a,#0xfc
0865 F581      2033            mov     sp,a
0867 D007      2034            pop     ar7
0869 D006      2035            pop     ar6
086B EA        2036            mov     a,r2
086C 6001      2037            jz      L021021?
086E           2038   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:450: state = 2;
086E 7E02      2039            mov     r6,#0x02
0870 7F00      2040            mov     r7,#0x00
0872           2041   L021021?:
0872           2042   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:452: printf("headed to %2d from 1\n", state);
0872 C006      2043            push    ar6
0874 C007      2044            push    ar7
0876 C006      2045            push    ar6
0878 C007      2046            push    ar7
087A 7418      2047            mov     a,#__str_3
087C C0E0      2048            push    acc
087E 74BB      2049            mov     a,#(__str_3 >> 8)
0880 C0E0      2050            push    acc
0882 7480      2051            mov     a,#0x80
0884 C0E0      2052            push    acc
0886 120100    2053            lcall   _printf
0889 E581      2054            mov     a,sp
088B 24FB      2055            add     a,#0xfb
088D F581      2056            mov     sp,a
088F D007      2057            pop     ar7
0891 D006      2058            pop     ar6
0893           2059   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:453: break;                          
0893 020100    2060            ljmp    L021036?
0896           2061   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:454: case 2:
0896           2062   L021022?:
0896           2063   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:455: if(line_sensor < LO_THRESH){
0896 C006      2064            push    ar6
0898 C007      2065            push    ar7
089A 7429      2066            mov     a,#0x29
089C C0E0      2067            push    acc
089E 745C      2068            mov     a,#0x5C
08A0 C0E0      2069            push    acc
08A2 748F      2070            mov     a,#0x8F
08A4 C0E0      2071            push    acc
08A6 743D      2072            mov     a,#0x3D
08A8 C0E0      2073            push    acc
08AA 856882    2074            mov     dpl,_main_line_sensor_1_114
08AD 856983    2075            mov     dph,(_main_line_sensor_1_114 + 1)
08B0 856AF0    2076            mov     b,(_main_line_sensor_1_114 + 2)
08B3 E56B      2077            mov     a,(_main_line_sensor_1_114 + 3)
08B5 120100    2078            lcall   ___fslt
08B8 AA82      2079            mov     r2,dpl
08BA E581      2080            mov     a,sp
08BC 24FC      2081            add     a,#0xfc
08BE F581      2082            mov     sp,a
08C0 D007      2083            pop     ar7
08C2 D006      2084            pop     ar6
08C4 EA        2085            mov     a,r2
08C5 6001      2086            jz      L021024?
08C7           2087   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:456: line_counter++;
08C7 0508      2088            inc     _main_line_counter_1_114
08C9 E4        2089            clr     a
08CA B50898    2090            cjne    a,_main_line_counter_1_114,L021078?
08CD 0509      2091            inc     (_main_line_counter_1_114 + 1)
08CF           2092   L021078?:
08CF           2093   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:457: start_timer = 1;
08CF D298      2094            setb    _start_timer
08D1           2095   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:458: state = 3;
08D1 7E03      2096            mov     r6,#0x03
08D3 7F00      2097            mov     r7,#0x00
08D5           2098   L021024?:
08D5           2099   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:460: printf("headed to %2d from 2\n", state);
08D5 C006      2100            push    ar6
08D7 C007      2101            push    ar7
08D9 C006      2102            push    ar6
08DB C007      2103            push    ar7
08DD 74D8      2104            mov     a,#__str_4
08DF C0E0      2105            push    acc
08E1 74BB      2106            mov     a,#(__str_4 >> 8)
08E3 C0E0      2107            push    acc
08E5 7480      2108            mov     a,#0x80
08E7 C0E0      2109            push    acc
08E9 120100    2110            lcall   _printf
08EC E581      2111            mov     a,sp
08EE 24FB      2112            add     a,#0xfb
08F0 F581      2113            mov     sp,a
08F2 D007      2114            pop     ar7
08F4 D006      2115            pop     ar6
08F6           2116   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:461: break;
08F6 020100    2117            ljmp    L021036?
08F9           2118   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:462: case 3:
08F9           2119   L021025?:
08F9           2120   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:463: if(start_timer == 1){
08F9 309818    2121            jnb     _start_timer,L021029?
08FC           2122   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:464: if(line_sensor > HI_THRESH){
08FC C006      2123            push    ar6
08FE C007      2124            push    ar7
0900 E4        2125            clr     a
0901 C0E0      2126            push    acc
0903 C0E0      2127            push    acc
0905 C0E0      2128            push    acc
0907 743F      2129            mov     a,#0x3F
0909 C0E0      2130            push    acc
090B 856882    2131            mov     dpl,_main_line_sensor_1_114
090E 856983    2132            mov     dph,(_main_line_sensor_1_114 + 1)
0911 856AF0    2133            mov     b,(_main_line_sensor_1_114 + 2)
0914 E56B      2134            mov     a,(_main_line_sensor_1_114 + 3)
0916 120100    2135            lcall   ___fsgt
0919 AA82      2136            mov     r2,dpl
091B E581      2137            mov     a,sp
091D 24FC      2138            add     a,#0xfc
091F F581      2139            mov     sp,a
0921 D007      2140            pop     ar7
0923 D006      2141            pop     ar6
0925 EA        2142            mov     a,r2
0926 6001      2143            jz      L021030?
0928           2144   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:465: start_timer = 0;
0928 C298      2145            clr     _start_timer
092A           2146   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:466: action_timer = 0;
092A E4        2147            clr     a
092B F548      2148            mov     _action_timer,a
092D F549      2149            mov     (_action_timer + 1),a
092F           2150   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:467: state = 2;
092F 7E02      2151            mov     r6,#0x02
0931 7F00      2152            mov     r7,#0x00
0933 8001      2153            sjmp    L021030?
0935           2154   L021029?:
0935           2155   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:471: command = line_counter;
0935 850858    2156            mov     _main_command_1_114,_main_line_counter_1_114
0938 850959    2157            mov     (_main_command_1_114 + 1),(_main_line_counter_1_114 + 1)
093B           2158   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:472: line_counter = 0;
093B E4        2159            clr     a
093C F508      2160            mov     _main_line_counter_1_114,a
093E F509      2161            mov     (_main_line_counter_1_114 + 1),a
0940           2162   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:473: state = 4;
0940 7E04      2163            mov     r6,#0x04
0942 7F00      2164            mov     r7,#0x00
0944           2165   L021030?:
0944           2166   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:475: printf("headed to %2d from 3\n", state);
0944 C006      2167            push    ar6
0946 C007      2168            push    ar7
0948 C006      2169            push    ar6
094A C007      2170            push    ar7
094C 7498      2171            mov     a,#__str_5
094E C0E0      2172            push    acc
0950 74BC      2173            mov     a,#(__str_5 >> 8)
0952 C0E0      2174            push    acc
0954 7480      2175            mov     a,#0x80
0956 C0E0      2176            push    acc
0958 120100    2177            lcall   _printf
095B E581      2178            mov     a,sp
095D 24FB      2179            add     a,#0xfb
095F F581      2180            mov     sp,a
0961 D007      2181            pop     ar7
0963 D006      2182            pop     ar6
0965           2183   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:476: break;
0965 020100    2184            ljmp    L021036?
0968           2185   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:477: case 4:
0968           2186   L021031?:
0968           2187   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:478: if(line_sensor > HI_THRESH){
0968 C006      2188            push    ar6
096A C007      2189            push    ar7
096C E4        2190            clr     a
096D C0E0      2191            push    acc
096F C0E0      2192            push    acc
0971 C0E0      2193            push    acc
0973 743F      2194            mov     a,#0x3F
0975 C0E0      2195            push    acc
0977 856882    2196            mov     dpl,_main_line_sensor_1_114
097A 856983    2197            mov     dph,(_main_line_sensor_1_114 + 1)
097D 856AF0    2198            mov     b,(_main_line_sensor_1_114 + 2)
0980 E56B      2199            mov     a,(_main_line_sensor_1_114 + 3)
0982 120100    2200            lcall   ___fsgt
0985 AA82      2201            mov     r2,dpl
0987 E581      2202            mov     a,sp
0989 24FC      2203            add     a,#0xfc
098B F581      2204            mov     sp,a
098D D007      2205            pop     ar7
098F D006      2206            pop     ar6
0991 EA        2207            mov     a,r2
0992 7001      2208            jnz     L021081?
0994 020100    2209            ljmp    L021036?
0997           2210   L021081?:
0997           2211   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:479: printf("ERMAGERD: %2d \n", command);
0997 C058      2212            push    _main_command_1_114
0999 C059      2213            push    (_main_command_1_114 + 1)
099B 7418      2214            mov     a,#__str_6
099D C0E0      2215            push    acc
099F 74BD      2216            mov     a,#(__str_6 >> 8)
09A1 C0E0      2217            push    acc
09A3 7480      2218            mov     a,#0x80
09A5 C0E0      2219            push    acc
09A7 120100    2220            lcall   _printf
09AA E581      2221            mov     a,sp
09AC 24FB      2222            add     a,#0xfb
09AE F581      2223            mov     sp,a
09B0           2224   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:480: execute(command);
09B0 855882    2225            mov     dpl,_main_command_1_114
09B3 855983    2226            mov     dph,(_main_command_1_114 + 1)
09B6 120100    2227            lcall   _execute
09B9           2228   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:481: state = 1;
09B9 7E01      2229            mov     r6,#0x01
09BB 7F00      2230            mov     r7,#0x00
09BD           2231   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:484: }
09BD 020100    2232            ljmp    L021036?
09C0           2233            rseg R_CSEG
09C0           2234   
0000           2235            rseg R_XINIT
0000           2236   
0000           2237            rseg R_CONST
0000           2238   __str_0:
0000 4C533D25  2239            db 'LS=%5.2f'
     352E3266
0008 00        2240            db 0x00
0009           2241   __str_1:
0009 4C433D25  2242            db 'LC=%d ST=%d'
     64205354
     3D2564
0014 00        2243            db 0x00
0015           2244   __str_2:
0015 53746174  2245            db 'State:%2d Command:%3d Sensor:%5.2f Timer: %2d               '
     653A2532
     6420436F
     6D6D616E
     643A2533
     64205365
     6E736F72
     3A25352E
     32662054
     696D6572
     3A202532
     64202020
     20202020
     20202020
     20202020
0051 2020      2246            db '  '
0053 0D        2247            db 0x0D
0054 0A        2248            db 0x0A
0055 00        2249            db 0x00
0056           2250   __str_3:
0056 68656164  2251            db 'headed to %2d from 1'
     65642074
     6F202532
     64206672
     6F6D2031
006A 0A        2252            db 0x0A
006B 00        2253            db 0x00
006C           2254   __str_4:
006C 68656164  2255            db 'headed to %2d from 2'
     65642074
     6F202532
     64206672
     6F6D2032
0080 0A        2256            db 0x0A
0081 00        2257            db 0x00
0082           2258   __str_5:
0082 68656164  2259            db 'headed to %2d from 3'
     65642074
     6F202532
     64206672
     6F6D2033
0096 0A        2260            db 0x0A
0097 00        2261            db 0x00
0098           2262   __str_6:
0098 45524D41  2263            db 'ERMAGERD: %2d '
     47455244
     3A202532
     6420
00A6 0A        2264            db 0x0A
00A7 00        2265            db 0x00
00A8           2266   
000E           2267            CSEG
000E           2268   
000E           2269   end
