0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Dec 11 2012) (MSVC)
0000              4   ; This file was generated Mon Mar 23 16:13:45 2015
0000              5   ;--------------------------------------------------------
                  5   $name main_code
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _display_LCD
0000             29            public _Timer0ISR
0000             30            public _InitTimer0
0000             31            public _InitADC
0000             32            public _InitSerialPort
0000             33            public _Wait1S
0000             34            public _LCDprint
0000             35            public _LCD_8BIT
0000             36            public _WriteCommand
0000             37            public _WriteData
0000             38            public _LCD_byte
0000             39            public _LCD_pulse
0000             40            public _waitms
0000             41            public _Wait50us
0000             42            public _InitPorts
0000             43            public _LCDprint_PARM_3
0000             44            public _line_counter_flag
0000             45            public _time_update_flag
0000             46            public _LCDprint_PARM_2
0000             47            public _line_timer
0000             48            public _pwm_right
0000             49            public _pwm_left
0000             50            public _pwmcount
0000             51            public _mins
0000             52            public _secs
0000             53            public _msCount
0000             54   ;--------------------------------------------------------
0000             55   ; Special Function Registers
0000             56   ;--------------------------------------------------------
0000             57   _ACC            DATA 0xe0
0000             58   _ADCON0         DATA 0x8e
0000             59   _ADCON1         DATA 0x97
0000             60   _ADINS          DATA 0xa3
0000             61   _ADMODA         DATA 0xc0
0000             62   _ADMODB         DATA 0xa1
0000             63   _AD0BH          DATA 0xbb
0000             64   _AD0BL          DATA 0xa6
0000             65   _AD0DAT0        DATA 0xc5
0000             66   _AD0DAT1        DATA 0xc6
0000             67   _AD0DAT2        DATA 0xc7
0000             68   _AD0DAT3        DATA 0xf4
0000             69   _AD1BH          DATA 0xc4
0000             70   _AD1BL          DATA 0xbc
0000             71   _AD1DAT0        DATA 0xd5
0000             72   _AD1DAT1        DATA 0xd6
0000             73   _AD1DAT2        DATA 0xd7
0000             74   _AD1DAT3        DATA 0xf5
0000             75   _AUXR1          DATA 0xa2
0000             76   _B              DATA 0xf0
0000             77   _BRGR0          DATA 0xbe
0000             78   _BRGR1          DATA 0xbf
0000             79   _BRGCON         DATA 0xbd
0000             80   _CCCRA          DATA 0xea
0000             81   _CCCRB          DATA 0xeb
0000             82   _CCCRC          DATA 0xec
0000             83   _CCCRD          DATA 0xed
0000             84   _CMP1           DATA 0xac
0000             85   _CMP2           DATA 0xad
0000             86   _DEECON         DATA 0xf1
0000             87   _DEEDAT         DATA 0xf2
0000             88   _DEEADR         DATA 0xf3
0000             89   _DIVM           DATA 0x95
0000             90   _DPH            DATA 0x83
0000             91   _DPL            DATA 0x82
0000             92   _FMADRH         DATA 0xe7
0000             93   _FMADRL         DATA 0xe6
0000             94   _FMCON          DATA 0xe4
0000             95   _FMDATA         DATA 0xe5
0000             96   _I2ADR          DATA 0xdb
0000             97   _I2CON          DATA 0xd8
0000             98   _I2DAT          DATA 0xda
0000             99   _I2SCLH         DATA 0xdd
0000            100   _I2SCLL         DATA 0xdc
0000            101   _I2STAT         DATA 0xd9
0000            102   _ICRAH          DATA 0xab
0000            103   _ICRAL          DATA 0xaa
0000            104   _ICRBH          DATA 0xaf
0000            105   _ICRBL          DATA 0xae
0000            106   _IEN0           DATA 0xa8
0000            107   _IEN1           DATA 0xe8
0000            108   _IP0            DATA 0xb8
0000            109   _IP0H           DATA 0xb7
0000            110   _IP1            DATA 0xf8
0000            111   _IP1H           DATA 0xf7
0000            112   _KBCON          DATA 0x94
0000            113   _KBMASK         DATA 0x86
0000            114   _KBPATN         DATA 0x93
0000            115   _OCRAH          DATA 0xef
0000            116   _OCRAL          DATA 0xee
0000            117   _OCRBH          DATA 0xfb
0000            118   _OCRBL          DATA 0xfa
0000            119   _OCRCH          DATA 0xfd
0000            120   _OCRCL          DATA 0xfc
0000            121   _OCRDH          DATA 0xff
0000            122   _OCRDL          DATA 0xfe
0000            123   _P0             DATA 0x80
0000            124   _P1             DATA 0x90
0000            125   _P2             DATA 0xa0
0000            126   _P3             DATA 0xb0
0000            127   _P0M1           DATA 0x84
0000            128   _P0M2           DATA 0x85
0000            129   _P1M1           DATA 0x91
0000            130   _P1M2           DATA 0x92
0000            131   _P2M1           DATA 0xa4
0000            132   _P2M2           DATA 0xa5
0000            133   _P3M1           DATA 0xb1
0000            134   _P3M2           DATA 0xb2
0000            135   _PCON           DATA 0x87
0000            136   _PCONA          DATA 0xb5
0000            137   _PSW            DATA 0xd0
0000            138   _PT0AD          DATA 0xf6
0000            139   _RSTSRC         DATA 0xdf
0000            140   _RTCCON         DATA 0xd1
0000            141   _RTCH           DATA 0xd2
0000            142   _RTCL           DATA 0xd3
0000            143   _SADDR          DATA 0xa9
0000            144   _SADEN          DATA 0xb9
0000            145   _SBUF           DATA 0x99
0000            146   _SCON           DATA 0x98
0000            147   _SSTAT          DATA 0xba
0000            148   _SP             DATA 0x81
0000            149   _SPCTL          DATA 0xe2
0000            150   _SPSTAT         DATA 0xe1
0000            151   _SPDAT          DATA 0xe3
0000            152   _TAMOD          DATA 0x8f
0000            153   _TCON           DATA 0x88
0000            154   _TCR20          DATA 0xc8
0000            155   _TCR21          DATA 0xf9
0000            156   _TH0            DATA 0x8c
0000            157   _TH1            DATA 0x8d
0000            158   _TH2            DATA 0xcd
0000            159   _TICR2          DATA 0xc9
0000            160   _TIFR2          DATA 0xe9
0000            161   _TISE2          DATA 0xde
0000            162   _TL0            DATA 0x8a
0000            163   _TL1            DATA 0x8b
0000            164   _TL2            DATA 0xcc
0000            165   _TMOD           DATA 0x89
0000            166   _TOR2H          DATA 0xcf
0000            167   _TOR2L          DATA 0xce
0000            168   _TPCR2H         DATA 0xcb
0000            169   _TPCR2L         DATA 0xca
0000            170   _TRIM           DATA 0x96
0000            171   _WDCON          DATA 0xa7
0000            172   _WDL            DATA 0xc1
0000            173   _WFEED1         DATA 0xc2
0000            174   _WFEED2         DATA 0xc3
0000            175   ;--------------------------------------------------------
0000            176   ; special function bits
0000            177   ;--------------------------------------------------------
0000            178   _ACC_7          BIT 0xe7
0000            179   _ACC_6          BIT 0xe6
0000            180   _ACC_5          BIT 0xe5
0000            181   _ACC_4          BIT 0xe4
0000            182   _ACC_3          BIT 0xe3
0000            183   _ACC_2          BIT 0xe2
0000            184   _ACC_1          BIT 0xe1
0000            185   _ACC_0          BIT 0xe0
0000            186   _ADMODA_7       BIT 0xc7
0000            187   _ADMODA_6       BIT 0xc6
0000            188   _ADMODA_5       BIT 0xc5
0000            189   _ADMODA_4       BIT 0xc4
0000            190   _ADMODA_3       BIT 0xc3
0000            191   _ADMODA_2       BIT 0xc2
0000            192   _ADMODA_1       BIT 0xc1
0000            193   _ADMODA_0       BIT 0xc0
0000            194   _BNDI1          BIT 0xc7
0000            195   _BURST1         BIT 0xc6
0000            196   _SCC1           BIT 0xc5
0000            197   _SCAN1          BIT 0xc4
0000            198   _BNDI0          BIT 0xc3
0000            199   _BURST0         BIT 0xc2
0000            200   _SCC0           BIT 0xc1
0000            201   _SCAN0          BIT 0xc0
0000            202   _B_7            BIT 0xf7
0000            203   _B_6            BIT 0xf6
0000            204   _B_5            BIT 0xf5
0000            205   _B_4            BIT 0xf4
0000            206   _B_3            BIT 0xf3
0000            207   _B_2            BIT 0xf2
0000            208   _B_1            BIT 0xf1
0000            209   _B_0            BIT 0xf0
0000            210   _I2CON_7        BIT 0xdf
0000            211   _I2CON_6        BIT 0xde
0000            212   _I2CON_5        BIT 0xdd
0000            213   _I2CON_4        BIT 0xdc
0000            214   _I2CON_3        BIT 0xdb
0000            215   _I2CON_2        BIT 0xda
0000            216   _I2CON_1        BIT 0xd9
0000            217   _I2CON_0        BIT 0xd8
0000            218   _I2EN           BIT 0xde
0000            219   _STA            BIT 0xdd
0000            220   _STO            BIT 0xdc
0000            221   _SI             BIT 0xdb
0000            222   _AA             BIT 0xda
0000            223   _CRSEL          BIT 0xd8
0000            224   _IEN0_7         BIT 0xaf
0000            225   _IEN0_6         BIT 0xae
0000            226   _IEN0_5         BIT 0xad
0000            227   _IEN0_4         BIT 0xac
0000            228   _IEN0_3         BIT 0xab
0000            229   _IEN0_2         BIT 0xaa
0000            230   _IEN0_1         BIT 0xa9
0000            231   _IEN0_0         BIT 0xa8
0000            232   _EA             BIT 0xaf
0000            233   _EWDRT          BIT 0xae
0000            234   _EBO            BIT 0xad
0000            235   _ES             BIT 0xac
0000            236   _ESR            BIT 0xac
0000            237   _ET1            BIT 0xab
0000            238   _EX1            BIT 0xaa
0000            239   _ET0            BIT 0xa9
0000            240   _EX0            BIT 0xa8
0000            241   _IEN1_7         BIT 0xef
0000            242   _IEN1_6         BIT 0xee
0000            243   _IEN1_5         BIT 0xed
0000            244   _IEN1_4         BIT 0xec
0000            245   _IEN1_3         BIT 0xeb
0000            246   _IEN1_2         BIT 0xea
0000            247   _IEN1_1         BIT 0xe9
0000            248   _IEN1_0         BIT 0xe8
0000            249   _EADEE          BIT 0xef
0000            250   _EST            BIT 0xee
0000            251   _ECCU           BIT 0xec
0000            252   _ESPI           BIT 0xeb
0000            253   _EC             BIT 0xea
0000            254   _EKBI           BIT 0xe9
0000            255   _EI2C           BIT 0xe8
0000            256   _IP0_7          BIT 0xbf
0000            257   _IP0_6          BIT 0xbe
0000            258   _IP0_5          BIT 0xbd
0000            259   _IP0_4          BIT 0xbc
0000            260   _IP0_3          BIT 0xbb
0000            261   _IP0_2          BIT 0xba
0000            262   _IP0_1          BIT 0xb9
0000            263   _IP0_0          BIT 0xb8
0000            264   _PWDRT          BIT 0xbe
0000            265   _PBO            BIT 0xbd
0000            266   _PS             BIT 0xbc
0000            267   _PSR            BIT 0xbc
0000            268   _PT1            BIT 0xbb
0000            269   _PX1            BIT 0xba
0000            270   _PT0            BIT 0xb9
0000            271   _PX0            BIT 0xb8
0000            272   _IP1_7          BIT 0xff
0000            273   _IP1_6          BIT 0xfe
0000            274   _IP1_5          BIT 0xfd
0000            275   _IP1_4          BIT 0xfc
0000            276   _IP1_3          BIT 0xfb
0000            277   _IP1_2          BIT 0xfa
0000            278   _IP1_1          BIT 0xf9
0000            279   _IP1_0          BIT 0xf8
0000            280   _PADEE          BIT 0xff
0000            281   _PST            BIT 0xfe
0000            282   _PCCU           BIT 0xfc
0000            283   _PSPI           BIT 0xfb
0000            284   _PC             BIT 0xfa
0000            285   _PKBI           BIT 0xf9
0000            286   _PI2C           BIT 0xf8
0000            287   _P0_7           BIT 0x87
0000            288   _P0_6           BIT 0x86
0000            289   _P0_5           BIT 0x85
0000            290   _P0_4           BIT 0x84
0000            291   _P0_3           BIT 0x83
0000            292   _P0_2           BIT 0x82
0000            293   _P0_1           BIT 0x81
0000            294   _P0_0           BIT 0x80
0000            295   _T1             BIT 0x87
0000            296   _KB7            BIT 0x87
0000            297   _CMP_1          BIT 0x86
0000            298   _KB6            BIT 0x86
0000            299   _CMPREF         BIT 0x85
0000            300   _KB5            BIT 0x85
0000            301   _CIN1A          BIT 0x84
0000            302   _KB4            BIT 0x84
0000            303   _CIN1B          BIT 0x83
0000            304   _KB3            BIT 0x83
0000            305   _CIN2A          BIT 0x82
0000            306   _KB2            BIT 0x82
0000            307   _CIN2B          BIT 0x81
0000            308   _KB1            BIT 0x81
0000            309   _CMP_2          BIT 0x80
0000            310   _KB0            BIT 0x80
0000            311   _P1_7           BIT 0x97
0000            312   _P1_6           BIT 0x96
0000            313   _P1_5           BIT 0x95
0000            314   _P1_4           BIT 0x94
0000            315   _P1_3           BIT 0x93
0000            316   _P1_2           BIT 0x92
0000            317   _P1_1           BIT 0x91
0000            318   _P1_0           BIT 0x90
0000            319   _OCC            BIT 0x97
0000            320   _OCB            BIT 0x96
0000            321   _RST            BIT 0x95
0000            322   _INT1           BIT 0x94
0000            323   _INT0           BIT 0x93
0000            324   _SDA            BIT 0x93
0000            325   _T0             BIT 0x92
0000            326   _SCL            BIT 0x92
0000            327   _RXD            BIT 0x91
0000            328   _TXD            BIT 0x90
0000            329   _P2_7           BIT 0xa7
0000            330   _P2_6           BIT 0xa6
0000            331   _P2_5           BIT 0xa5
0000            332   _P2_4           BIT 0xa4
0000            333   _P2_3           BIT 0xa3
0000            334   _P2_2           BIT 0xa2
0000            335   _P2_1           BIT 0xa1
0000            336   _P2_0           BIT 0xa0
0000            337   _ICA            BIT 0xa7
0000            338   _OCA            BIT 0xa6
0000            339   _SPICLK         BIT 0xa5
0000            340   _SS             BIT 0xa4
0000            341   _MISO           BIT 0xa3
0000            342   _MOSI           BIT 0xa2
0000            343   _OCD            BIT 0xa1
0000            344   _ICB            BIT 0xa0
0000            345   _P3_7           BIT 0xb7
0000            346   _P3_6           BIT 0xb6
0000            347   _P3_5           BIT 0xb5
0000            348   _P3_4           BIT 0xb4
0000            349   _P3_3           BIT 0xb3
0000            350   _P3_2           BIT 0xb2
0000            351   _P3_1           BIT 0xb1
0000            352   _P3_0           BIT 0xb0
0000            353   _XTAL1          BIT 0xb1
0000            354   _XTAL2          BIT 0xb0
0000            355   _PSW_7          BIT 0xd7
0000            356   _PSW_6          BIT 0xd6
0000            357   _PSW_5          BIT 0xd5
0000            358   _PSW_4          BIT 0xd4
0000            359   _PSW_3          BIT 0xd3
0000            360   _PSW_2          BIT 0xd2
0000            361   _PSW_1          BIT 0xd1
0000            362   _PSW_0          BIT 0xd0
0000            363   _CY             BIT 0xd7
0000            364   _AC             BIT 0xd6
0000            365   _F0             BIT 0xd5
0000            366   _RS1            BIT 0xd4
0000            367   _RS0            BIT 0xd3
0000            368   _OV             BIT 0xd2
0000            369   _F1             BIT 0xd1
0000            370   _P              BIT 0xd0
0000            371   _SCON_7         BIT 0x9f
0000            372   _SCON_6         BIT 0x9e
0000            373   _SCON_5         BIT 0x9d
0000            374   _SCON_4         BIT 0x9c
0000            375   _SCON_3         BIT 0x9b
0000            376   _SCON_2         BIT 0x9a
0000            377   _SCON_1         BIT 0x99
0000            378   _SCON_0         BIT 0x98
0000            379   _SM0            BIT 0x9f
0000            380   _FE             BIT 0x9f
0000            381   _SM1            BIT 0x9e
0000            382   _SM2            BIT 0x9d
0000            383   _REN            BIT 0x9c
0000            384   _TB8            BIT 0x9b
0000            385   _RB8            BIT 0x9a
0000            386   _TI             BIT 0x99
0000            387   _RI             BIT 0x98
0000            388   _TCON_7         BIT 0x8f
0000            389   _TCON_6         BIT 0x8e
0000            390   _TCON_5         BIT 0x8d
0000            391   _TCON_4         BIT 0x8c
0000            392   _TCON_3         BIT 0x8b
0000            393   _TCON_2         BIT 0x8a
0000            394   _TCON_1         BIT 0x89
0000            395   _TCON_0         BIT 0x88
0000            396   _TF1            BIT 0x8f
0000            397   _TR1            BIT 0x8e
0000            398   _TF0            BIT 0x8d
0000            399   _TR0            BIT 0x8c
0000            400   _IE1            BIT 0x8b
0000            401   _IT1            BIT 0x8a
0000            402   _IE0            BIT 0x89
0000            403   _IT0            BIT 0x88
0000            404   _TCR20_7        BIT 0xcf
0000            405   _TCR20_6        BIT 0xce
0000            406   _TCR20_5        BIT 0xcd
0000            407   _TCR20_4        BIT 0xcc
0000            408   _TCR20_3        BIT 0xcb
0000            409   _TCR20_2        BIT 0xca
0000            410   _TCR20_1        BIT 0xc9
0000            411   _TCR20_0        BIT 0xc8
0000            412   _PLEEN          BIT 0xcf
0000            413   _HLTRN          BIT 0xce
0000            414   _HLTEN          BIT 0xcd
0000            415   _ALTCD          BIT 0xcc
0000            416   _ALTAB          BIT 0xcb
0000            417   _TDIR2          BIT 0xca
0000            418   _TMOD21         BIT 0xc9
0000            419   _TMOD20         BIT 0xc8
0000            420   ;--------------------------------------------------------
0000            421   ; overlayable register banks
0000            422   ;--------------------------------------------------------
0000            423            rbank0 segment data overlay
0000            424   ;--------------------------------------------------------
0000            425   ; internal ram data
0000            426   ;--------------------------------------------------------
0000            427            rseg R_DSEG
0000            428   _msCount:
0000            429            ds 2
0002            430   _secs:
0002            431            ds 1
0003            432   _mins:
0003            433            ds 1
0004            434   _pwmcount:
0004            435            ds 1
0005            436   _pwm_left:
0005            437            ds 1
0006            438   _pwm_right:
0006            439            ds 1
0007            440   _line_timer:
0007            441            ds 2
0009            442   _LCDprint_PARM_2:
0009            443            ds 1
000A            444   _display_LCD_buff_1_94:
000A            445            ds 17
001B            446   _main_cor_1_96:
001B            447            ds 4
001F            448   _main_cur_error_1_96:
001F            449            ds 4
0023            450   _main_pre_error_1_96:
0023            451            ds 4
0027            452   _main_line_counter_1_96:
0027            453            ds 2
0029            454   _main_exec_1_96:
0029            455            ds 2
002B            456   _main_left_1_96:
002B            457            ds 4
002F            458   _main_right_1_96:
002F            459            ds 4
0033            460   _main_line_sensor_1_96:
0033            461            ds 4
0037            462   _main_diff_1_96:
0037            463            ds 4
003B            464   ;--------------------------------------------------------
003B            465   ; overlayable items in internal ram 
003B            466   ;--------------------------------------------------------
0000            467            rseg R_OSEG
0000            468   ;--------------------------------------------------------
0000            469   ; indirectly addressable internal ram data
0000            470   ;--------------------------------------------------------
0000            471            rseg R_ISEG
0000            472   ;--------------------------------------------------------
0000            473   ; absolute internal ram data
0000            474   ;--------------------------------------------------------
0000            475            DSEG
0000            476   ;--------------------------------------------------------
0000            477   ; bit data
0000            478   ;--------------------------------------------------------
0000            479            rseg R_BSEG
0000            480   _time_update_flag:
0000            481            DBIT    1
0001            482   _line_counter_flag:
0001            483            DBIT    1
0002            484   _LCDprint_PARM_3:
0002            485            DBIT    1
0003            486   ;--------------------------------------------------------
0003            487   ; paged external ram data
0003            488   ;--------------------------------------------------------
0000            489            rseg R_PSEG
0000            490   ;--------------------------------------------------------
0000            491   ; external ram data
0000            492   ;--------------------------------------------------------
0000            493            rseg R_XSEG
FFC8            494            XSEG at 0xffc8
FFC8            495   _BODCFG: ds 1
FFC9            496            public _BODCFG
0000            497            rseg R_XSEG
FFDE            498            XSEG at 0xffde
FFDE            499   _CLKCON: ds 1
FFDF            500            public _CLKCON
0000            501            rseg R_XSEG
FFE1            502            XSEG at 0xffe1
FFE1            503   _PGACON1: ds 1
FFE2            504            public _PGACON1
0000            505            rseg R_XSEG
FFE4            506            XSEG at 0xffe4
FFE4            507   _PGACON1B: ds 1
FFE5            508            public _PGACON1B
0000            509            rseg R_XSEG
FFE3            510            XSEG at 0xffe3
FFE3            511   _PGA1TRIM8X16X: ds 1
FFE4            512            public _PGA1TRIM8X16X
0000            513            rseg R_XSEG
FFE2            514            XSEG at 0xffe2
FFE2            515   _PGA1TRIM2X4X: ds 1
FFE3            516            public _PGA1TRIM2X4X
0000            517            rseg R_XSEG
FFCA            518            XSEG at 0xffca
FFCA            519   _PGACON0: ds 1
FFCB            520            public _PGACON0
0000            521            rseg R_XSEG
FFCE            522            XSEG at 0xffce
FFCE            523   _PGACON0B: ds 1
FFCF            524            public _PGACON0B
0000            525            rseg R_XSEG
FFCD            526            XSEG at 0xffcd
FFCD            527   _PGA0TRIM8X16X: ds 1
FFCE            528            public _PGA0TRIM8X16X
0000            529            rseg R_XSEG
FFCC            530            XSEG at 0xffcc
FFCC            531   _PGA0TRIM2X4X: ds 1
FFCD            532            public _PGA0TRIM2X4X
0000            533            rseg R_XSEG
FFBF            534            XSEG at 0xffbf
FFBF            535   _RTCDATH: ds 1
FFC0            536            public _RTCDATH
0000            537            rseg R_XSEG
FFBE            538            XSEG at 0xffbe
FFBE            539   _RTCDATL: ds 1
FFBF            540            public _RTCDATL
0000            541            rseg R_XSEG
0000            542   ;--------------------------------------------------------
0000            543   ; absolute external ram data
0000            544   ;--------------------------------------------------------
FFBF            545            XSEG
FFBF            546   ;--------------------------------------------------------
FFBF            547   ; external initialized ram data
FFBF            548   ;--------------------------------------------------------
0000            549            rseg R_IXSEG
0000            550            rseg R_HOME
0000            551            rseg R_GSINIT
0000            552            rseg R_CSEG
0000            553   ;--------------------------------------------------------
0000            554   ; Reset entry point and interrupt vectors
0000            555   ;--------------------------------------------------------
0000            556            CSEG at 0x0000
0000 020100     557            ljmp    _crt0
000B            558            CSEG at 0x000b
000B 020100     559            ljmp    _Timer0ISR
000E            560   ;--------------------------------------------------------
000E            561   ; global & static initialisations
000E            562   ;--------------------------------------------------------
0000            563            rseg R_HOME
0000            564            rseg R_GSINIT
0000            565            rseg R_GSINIT
0000            566   ;--------------------------------------------------------
0000            567   ; data variables initialization
0000            568   ;--------------------------------------------------------
0000            569            rseg R_DINIT
0000            570   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:33: volatile int msCount=0; // Volatiles can be changed by stuff outside our program, like memory registers
0000 E4         571            clr     a
0001 F5F0       572            mov     _msCount,a
0003 F5F1       573            mov     (_msCount + 1),a
0005            574   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:34: volatile unsigned char secs=0, mins=0; // They are like global variables, kinda 
0005 75B000     575            mov     _secs,#0x00
0008            576   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:34: volatile bit time_update_flag=0;
0008 757000     577            mov     _mins,#0x00
000B            578   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:40: volatile int line_timer = 0;
000B E4         579            clr     a
000C F570       580            mov     _line_timer,a
000E F571       581            mov     (_line_timer + 1),a
0010            582   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:35: volatile bit time_update_flag=0;
0010 C2E0       583            clr     _time_update_flag
0012            584   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:36: volatile bit line_counter_flag=0;
0012 C290       585            clr     _line_counter_flag
0014            586            ; The linker places a 'ret' at the end of segment R_DINIT.
0014            587   ;--------------------------------------------------------
0014            588   ; code
0014            589   ;--------------------------------------------------------
0000            590            rseg R_CSEG
0000            591   ;------------------------------------------------------------
0000            592   ;Allocation info for local variables in function 'InitPorts'
0000            593   ;------------------------------------------------------------
0000            594   ;------------------------------------------------------------
0000            595   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:42: void InitPorts(void)
0000            596   ;        -----------------------------------------
0000            597   ;         function InitPorts
0000            598   ;        -----------------------------------------
0000            599   _InitPorts:
0000            600            using   0
0000            601   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:44: P0M1=0x1E;
0000 75841E     602            mov     _P0M1,#0x1E
0003            603   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:45: P0M2=0x00;
0003 758500     604            mov     _P0M2,#0x00
0006            605   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:46: P1M1=0;
0006 759100     606            mov     _P1M1,#0x00
0009            607   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:47: P1M2=0;
0009 759200     608            mov     _P1M2,#0x00
000C            609   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:48: P2M1=0;
000C 75A400     610            mov     _P2M1,#0x00
000F            611   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:49: P2M2=0;
000F 75A500     612            mov     _P2M2,#0x00
0012            613   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:50: P3M1=0;
0012 75B100     614            mov     _P3M1,#0x00
0015            615   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:51: P3M2=0;
0015 75B200     616            mov     _P3M2,#0x00
0018 22         617            ret
0019            618   ;------------------------------------------------------------
0019            619   ;Allocation info for local variables in function 'Wait50us'
0019            620   ;------------------------------------------------------------
0019            621   ;------------------------------------------------------------
0019            622   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:54: void Wait50us (void)
0019            623   ;        -----------------------------------------
0019            624   ;         function Wait50us
0019            625   ;        -----------------------------------------
0019            626   _Wait50us:
0019            627   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:59: _endasm;
0019            628            
0019 7852       629             mov R0, #82
001B            630             L0:
001B D808       631            djnz R0, L0 ; 2 machine cycles-> 2*0.27126us*92=50us
001D            632             
001D 22         633            ret
001E            634   ;------------------------------------------------------------
001E            635   ;Allocation info for local variables in function 'waitms'
001E            636   ;------------------------------------------------------------
001E            637   ;ms                        Allocated to registers r2 r3 
001E            638   ;j                         Allocated to registers r4 r5 
001E            639   ;k                         Allocated to registers r6 
001E            640   ;------------------------------------------------------------
001E            641   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:62: void waitms (unsigned int ms)
001E            642   ;        -----------------------------------------
001E            643   ;         function waitms
001E            644   ;        -----------------------------------------
001E            645   _waitms:
001E AA82       646            mov     r2,dpl
0020 AB83       647            mov     r3,dph
0022            648   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:68: for(j=0; j<ms; j++)
0022 7C00       649            mov     r4,#0x00
0024 7D00       650            mov     r5,#0x00
0026            651   L004004?:
0026 C3         652            clr     c
0027 EC         653            mov     a,r4
0028 9A         654            subb    a,r2
0029 ED         655            mov     a,r5
002A 9B         656            subb    a,r3
002B 5001       657            jnc     L004008?
002D            658   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:69: for (k=0; k<20; k++) Wait50us();
002D 7E14       659            mov     r6,#0x14
002F            660   L004003?:
002F C002       661            push    ar2
0031 C003       662            push    ar3
0033 C004       663            push    ar4
0035 C005       664            push    ar5
0037 C006       665            push    ar6
0039 120100     666            lcall   _Wait50us
003C D006       667            pop     ar6
003E D005       668            pop     ar5
0040 D004       669            pop     ar4
0042 D003       670            pop     ar3
0044 D002       671            pop     ar2
0046 DE48       672            djnz    r6,L004003?
0048            673   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:68: for(j=0; j<ms; j++)
0048 0C         674            inc     r4
0049 BC00C8     675            cjne    r4,#0x00,L004004?
004C 0D         676            inc     r5
004D 8001       677            sjmp    L004004?
004F            678   L004008?:
004F 22         679            ret
0050            680   ;------------------------------------------------------------
0050            681   ;Allocation info for local variables in function 'LCD_pulse'
0050            682   ;------------------------------------------------------------
0050            683   ;------------------------------------------------------------
0050            684   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:72: void LCD_pulse (void)
0050            685   ;        -----------------------------------------
0050            686   ;         function LCD_pulse
0050            687   ;        -----------------------------------------
0050            688   _LCD_pulse:
0050            689   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:74: LCD_E=1;
0050 D2A5       690            setb    _P2_5
0052            691   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:75: Wait50us();
0052 120100     692            lcall   _Wait50us
0055            693   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:76: LCD_E=0;
0055 C2A5       694            clr     _P2_5
0057 22         695            ret
0058            696   ;------------------------------------------------------------
0058            697   ;Allocation info for local variables in function 'LCD_byte'
0058            698   ;------------------------------------------------------------
0058            699   ;x                         Allocated to registers 
0058            700   ;------------------------------------------------------------
0058            701   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:79: void LCD_byte (unsigned char x)
0058            702   ;        -----------------------------------------
0058            703   ;         function LCD_byte
0058            704   ;        -----------------------------------------
0058            705   _LCD_byte:
0058 8582E0     706            mov     _ACC,dpl
005B            707   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:83: LCD_D7=ACC_7;
005B A2E7       708            mov     c,_ACC_7
005D 9294       709            mov     _P1_4,c
005F            710   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:84: LCD_D6=ACC_6;
005F A2E6       711            mov     c,_ACC_6
0061 9296       712            mov     _P1_6,c
0063            713   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:85: LCD_D5=ACC_5;
0063 A2E5       714            mov     c,_ACC_5
0065 9297       715            mov     _P1_7,c
0067            716   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:86: LCD_D4=ACC_4;
0067 A2E4       717            mov     c,_ACC_4
0069 92A0       718            mov     _P2_0,c
006B            719   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:87: LCD_D3=ACC_3;
006B A2E3       720            mov     c,_ACC_3
006D 92A1       721            mov     _P2_1,c
006F            722   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:88: LCD_D2=ACC_2;
006F A2E2       723            mov     c,_ACC_2
0071 92A2       724            mov     _P2_2,c
0073            725   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:89: LCD_D1=ACC_1;
0073 A2E1       726            mov     c,_ACC_1
0075 92A3       727            mov     _P2_3,c
0077            728   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:90: LCD_D0=ACC_0;
0077 A2E0       729            mov     c,_ACC_0
0079 92A4       730            mov     _P2_4,c
007B            731   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:91: LCD_pulse();
007B 020100     732            ljmp    _LCD_pulse
007E            733   ;------------------------------------------------------------
007E            734   ;Allocation info for local variables in function 'WriteData'
007E            735   ;------------------------------------------------------------
007E            736   ;x                         Allocated to registers r2 
007E            737   ;------------------------------------------------------------
007E            738   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:94: void WriteData (unsigned char x)
007E            739   ;        -----------------------------------------
007E            740   ;         function WriteData
007E            741   ;        -----------------------------------------
007E            742   _WriteData:
007E AA82       743            mov     r2,dpl
0080            744   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:96: LCD_RS=1;
0080 D2A7       745            setb    _P2_7
0082            746   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:97: LCD_byte(x);
0082 8A82       747            mov     dpl,r2
0084 120100     748            lcall   _LCD_byte
0087            749   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:98: waitms(2);
0087 900002     750            mov     dptr,#0x0002
008A 020100     751            ljmp    _waitms
008D            752   ;------------------------------------------------------------
008D            753   ;Allocation info for local variables in function 'WriteCommand'
008D            754   ;------------------------------------------------------------
008D            755   ;x                         Allocated to registers r2 
008D            756   ;------------------------------------------------------------
008D            757   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:101: void WriteCommand (unsigned char x)
008D            758   ;        -----------------------------------------
008D            759   ;         function WriteCommand
008D            760   ;        -----------------------------------------
008D            761   _WriteCommand:
008D AA82       762            mov     r2,dpl
008F            763   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:103: LCD_RS=0;
008F C2A7       764            clr     _P2_7
0091            765   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:104: LCD_byte(x);
0091 8A82       766            mov     dpl,r2
0093 120100     767            lcall   _LCD_byte
0096            768   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:105: waitms(5);
0096 900005     769            mov     dptr,#0x0005
0099 020100     770            ljmp    _waitms
009C            771   ;------------------------------------------------------------
009C            772   ;Allocation info for local variables in function 'LCD_8BIT'
009C            773   ;------------------------------------------------------------
009C            774   ;------------------------------------------------------------
009C            775   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:108: void LCD_8BIT (void)
009C            776   ;        -----------------------------------------
009C            777   ;         function LCD_8BIT
009C            778   ;        -----------------------------------------
009C            779   _LCD_8BIT:
009C            780   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:110: LCD_E=0;  // Resting state of LCD's enable is zero
009C C2A5       781            clr     _P2_5
009E            782   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:111: LCD_RW=0; // We are only writing to the LCD in this program
009E C2A6       783            clr     _P2_6
00A0            784   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:112: waitms(20);
00A0 900014     785            mov     dptr,#0x0014
00A3 120100     786            lcall   _waitms
00A6            787   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:114: WriteCommand(0x33);
00A6 758233     788            mov     dpl,#0x33
00A9 120100     789            lcall   _WriteCommand
00AC            790   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:115: WriteCommand(0x33);
00AC 758233     791            mov     dpl,#0x33
00AF 120100     792            lcall   _WriteCommand
00B2            793   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:116: WriteCommand(0x33); // Stay in 8-bit mode
00B2 758233     794            mov     dpl,#0x33
00B5 120100     795            lcall   _WriteCommand
00B8            796   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:119: WriteCommand(0x38);
00B8 758238     797            mov     dpl,#0x38
00BB 120100     798            lcall   _WriteCommand
00BE            799   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:120: WriteCommand(0x0c);
00BE 75820C     800            mov     dpl,#0x0C
00C1 120100     801            lcall   _WriteCommand
00C4            802   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:121: WriteCommand(0x01); // Clear screen command (takes some time)
00C4 758201     803            mov     dpl,#0x01
00C7 120100     804            lcall   _WriteCommand
00CA            805   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:122: waitms(20); // Wait for clear screen command to finsih.
00CA 900014     806            mov     dptr,#0x0014
00CD 020100     807            ljmp    _waitms
00D0            808   ;------------------------------------------------------------
00D0            809   ;Allocation info for local variables in function 'LCDprint'
00D0            810   ;------------------------------------------------------------
00D0            811   ;line                      Allocated with name '_LCDprint_PARM_2'
00D0            812   ;string                    Allocated to registers r2 r3 r4 
00D0            813   ;j                         Allocated to registers r5 
00D0            814   ;------------------------------------------------------------
00D0            815   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:125: void LCDprint(char * string, unsigned char line, bit clear)
00D0            816   ;        -----------------------------------------
00D0            817   ;         function LCDprint
00D0            818   ;        -----------------------------------------
00D0            819   _LCDprint:
00D0 AA82       820            mov     r2,dpl
00D2 AB83       821            mov     r3,dph
00D4 ACF0       822            mov     r4,b
00D6            823   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:129: WriteCommand(line==2?0xc0:0x80);
00D6 7402       824            mov     a,#0x02
00D8 B530C8     825            cjne    a,_LCDprint_PARM_2,L010013?
00DB 7DC0       826            mov     r5,#0xC0
00DD 8001       827            sjmp    L010014?
00DF            828   L010013?:
00DF 7D80       829            mov     r5,#0x80
00E1            830   L010014?:
00E1 8D82       831            mov     dpl,r5
00E3 C002       832            push    ar2
00E5 C003       833            push    ar3
00E7 C004       834            push    ar4
00E9 120100     835            lcall   _WriteCommand
00EC            836   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:130: waitms(5);
00EC 900005     837            mov     dptr,#0x0005
00EF 120100     838            lcall   _waitms
00F2 D004       839            pop     ar4
00F4 D003       840            pop     ar3
00F6 D002       841            pop     ar2
00F8            842   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:131: for(j=0; string[j]!=0; j++)       WriteData(string[j]);// Write the message
00F8 7D00       843            mov     r5,#0x00
00FA            844   L010003?:
00FA ED         845            mov     a,r5
00FB 2A         846            add     a,r2
00FC FE         847            mov     r6,a
00FD E4         848            clr     a
00FE 3B         849            addc    a,r3
00FF FF         850            mov     r7,a
0100 8C00       851            mov     ar0,r4
0102 8E82       852            mov     dpl,r6
0104 8F83       853            mov     dph,r7
0106 88F0       854            mov     b,r0
0108 120100     855            lcall   __gptrget
010B FE         856            mov     r6,a
010C 6001       857            jz      L010006?
010E 8E82       858            mov     dpl,r6
0110 C002       859            push    ar2
0112 C003       860            push    ar3
0114 C004       861            push    ar4
0116 C005       862            push    ar5
0118 120100     863            lcall   _WriteData
011B D005       864            pop     ar5
011D D004       865            pop     ar4
011F D003       866            pop     ar3
0121 D002       867            pop     ar2
0123 0D         868            inc     r5
0124 8001       869            sjmp    L010003?
0126            870   L010006?:
0126            871   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:132: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0126 304008     872            jnb     _LCDprint_PARM_3,L010011?
0129 8D02       873            mov     ar2,r5
012B            874   L010007?:
012B BA1088     875            cjne    r2,#0x10,L010026?
012E            876   L010026?:
012E 5001       877            jnc     L010011?
0130 758220     878            mov     dpl,#0x20
0133 C002       879            push    ar2
0135 120100     880            lcall   _WriteData
0138 D002       881            pop     ar2
013A 0A         882            inc     r2
013B 8001       883            sjmp    L010007?
013D            884   L010011?:
013D 22         885            ret
013E            886   ;------------------------------------------------------------
013E            887   ;Allocation info for local variables in function 'Wait1S'
013E            888   ;------------------------------------------------------------
013E            889   ;------------------------------------------------------------
013E            890   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:135: void Wait1S (void)
013E            891   ;        -----------------------------------------
013E            892   ;         function Wait1S
013E            893   ;        -----------------------------------------
013E            894   _Wait1S:
013E            895   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:144: _endasm;
013E            896            
013E 7A28       897             mov R2, #40
0140            898             L3:
0140 79FA       899            mov R1, #250
0142            900             L2:
0142 78B8       901            mov R0, #184
0144            902             L1:
0144 D848       903            djnz R0, L1 ; 2 machine cycles-> 2*0.27126us*184=100us
0146 D908       904             djnz R1, L2 ; 100us*250=0.025s
0148 DAC8       905             djnz R2, L3 ; 0.025s*40=1s
014A            906             
014A 22         907            ret
014B            908   ;------------------------------------------------------------
014B            909   ;Allocation info for local variables in function 'InitSerialPort'
014B            910   ;------------------------------------------------------------
014B            911   ;------------------------------------------------------------
014B            912   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:147: void InitSerialPort(void)
014B            913   ;        -----------------------------------------
014B            914   ;         function InitSerialPort
014B            915   ;        -----------------------------------------
014B            916   _InitSerialPort:
014B            917   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:149: BRGCON=0x00; //Make sure the baud rate generator is off
014B 75BD00     918            mov     _BRGCON,#0x00
014E            919   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:150: BRGR1=((XTAL/BAUD)-16)/0x100;
014E 75BF00     920            mov     _BRGR1,#0x00
0151            921   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:151: BRGR0=((XTAL/BAUD)-16)%0x100;
0151 75BE30     922            mov     _BRGR0,#0x30
0154            923   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:152: BRGCON=0x03; //Turn-on the baud rate generator
0154 75BD03     924            mov     _BRGCON,#0x03
0157            925   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:153: SCON=0x52; //Serial port in mode 1, ren, txrdy, rxempty
0157 759852     926            mov     _SCON,#0x52
015A            927   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:154: P1M1=0x00; //Enable pins RxD and Txd
015A 759100     928            mov     _P1M1,#0x00
015D            929   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:155: P1M2=0x00; //Enable pins RxD and Txd
015D 759200     930            mov     _P1M2,#0x00
0160 22         931            ret
0161            932   ;------------------------------------------------------------
0161            933   ;Allocation info for local variables in function 'InitADC'
0161            934   ;------------------------------------------------------------
0161            935   ;------------------------------------------------------------
0161            936   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:158: void InitADC(void)
0161            937   ;        -----------------------------------------
0161            938   ;         function InitADC
0161            939   ;        -----------------------------------------
0161            940   _InitADC:
0161            941   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:162: P0M1 |= (P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0161 43841E     942            orl     _P0M1,#0x1E
0164            943   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:163: P0M2 &= ~(P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0164 5385E1     944            anl     _P0M2,#0xE1
0167            945   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:166: BURST1=1; //Autoscan continuous conversion mode
0167 D2C6       946            setb    _BURST1
0169            947   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:167: ADMODB = CLK0; //ADC1 clock is 7.3728MHz/2
0169 75A120     948            mov     _ADMODB,#0x20
016C            949   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:168: ADINS  = (ADI13|ADI12|ADI11|ADI10); // Select the four channels for conversion
016C 75A3F0     950            mov     _ADINS,#0xF0
016F            951   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:169: ADCON1 = (ENADC1|ADCS10); //Enable the converter and start immediately
016F 759705     952            mov     _ADCON1,#0x05
0172            953   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:170: while((ADCI1&ADCON1)==0); //Wait for first conversion to complete
0172            954   L013001?:
0172 E597       955            mov     a,_ADCON1
0174 30E388     956            jnb     acc.3,L013001?
0177 22         957            ret
0178            958   ;------------------------------------------------------------
0178            959   ;Allocation info for local variables in function 'InitTimer0'
0178            960   ;------------------------------------------------------------
0178            961   ;------------------------------------------------------------
0178            962   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:173: void InitTimer0 (void)
0178            963   ;        -----------------------------------------
0178            964   ;         function InitTimer0
0178            965   ;        -----------------------------------------
0178            966   _InitTimer0:
0178            967   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:177: TR0=0; // Stop timer 0
0178 C28C       968            clr     _TR0
017A            969   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:178: TMOD=(TMOD&0xf0)|0x01; // 16-bit timer
017A 74F0       970            mov     a,#0xF0
017C 5589       971            anl     a,_TMOD
017E 4401       972            orl     a,#0x01
0180 F589       973            mov     _TMOD,a
0182            974   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:179: TH0=TIMER0_RELOAD_VALUE/0x100; // I think the RHS is 0001 0000 0000, are we dividing?
0182 758CFE     975            mov     _TH0,#0xFE
0185            976   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:180: TL0=TIMER0_RELOAD_VALUE%0x100; // % means modulo, apparently? ...are we modulo-ing?
0185 758A90     977            mov     _TL0,#0x90
0188            978   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:181: TR0=1; // Start timer 0 (bit 4 in TCON)
0188 D28C       979            setb    _TR0
018A            980   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:182: ET0=1; // Enable timer 0 interrupt - the interrupt controller IEN0 is bit-adressable, so we change only the bit we need
018A D2A9       981            setb    _ET0
018C            982   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:183: EA=1;  // Enable global interrupts
018C D2AF       983            setb    _EA
018E 22         984            ret
018F            985   ;------------------------------------------------------------
018F            986   ;Allocation info for local variables in function 'Timer0ISR'
018F            987   ;------------------------------------------------------------
018F            988   ;------------------------------------------------------------
018F            989   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:187: void Timer0ISR (void) interrupt 1{
018F            990   ;        -----------------------------------------
018F            991   ;         function Timer0ISR
018F            992   ;        -----------------------------------------
018F            993   _Timer0ISR:
018F C0E0       994            push    acc
0191 C0D0       995            push    psw
0193 75D000     996            mov     psw,#0x00
0196            997   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:189: TR0=0; // Stop timer 0
0196 C28C       998            clr     _TR0
0198            999   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:190: TH0=TIMER0_RELOAD_VALUE/0x100;
0198 758CFE    1000            mov     _TH0,#0xFE
019B           1001   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:191: TL0=TIMER0_RELOAD_VALUE%0x100;
019B 758A90    1002            mov     _TL0,#0x90
019E           1003   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:192: TR0=1; // Start timer 0
019E D28C      1004            setb    _TR0
01A0           1005   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:194: if(++pwmcount>99) pwmcount=0;
01A0 0530      1006            inc     _pwmcount
01A2 E530      1007            mov     a,_pwmcount
01A4 249C      1008            add     a,#0xff - 0x63
01A6 5001      1009            jnc     L015002?
01A8 753000    1010            mov     _pwmcount,#0x00
01AB           1011   L015002?:
01AB           1012   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:195: P0_5=(pwm_left>pwmcount)?1:0;
01AB C3        1013            clr     c
01AC E530      1014            mov     a,_pwmcount
01AE 95F0      1015            subb    a,_pwm_left
01B0 9285      1016            mov     _P0_5,c
01B2           1017   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:196: P0_6=(pwm_right>pwmcount)?1:0;
01B2 C3        1018            clr     c
01B3 E530      1019            mov     a,_pwmcount
01B5 95B0      1020            subb    a,_pwm_right
01B7 9286      1021            mov     _P0_6,c
01B9           1022   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:198: msCount++;
01B9 7401      1023            mov     a,#0x01
01BB 25F0      1024            add     a,_msCount
01BD F5F0      1025            mov     _msCount,a
01BF E4        1026            clr     a
01C0 35F1      1027            addc    a,(_msCount + 1)
01C2 F5F1      1028            mov     (_msCount + 1),a
01C4           1029   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:199: if(msCount==10000)
01C4 7410      1030            mov     a,#0x10
01C6 B5F088    1031            cjne    a,_msCount,L015008?
01C9 7427      1032            mov     a,#0x27
01CB B5F188    1033            cjne    a,(_msCount + 1),L015008?
01CE           1034   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:201: time_update_flag=1;
01CE D2E0      1035            setb    _time_update_flag
01D0           1036   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:202: msCount=0;
01D0 E4        1037            clr     a
01D1 F5F0      1038            mov     _msCount,a
01D3 F5F1      1039            mov     (_msCount + 1),a
01D5           1040   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:203: secs++;
01D5 05B0      1041            inc     _secs
01D7           1042   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:204: if(secs==60)
01D7 743C      1043            mov     a,#0x3C
01D9 B5B088    1044            cjne    a,_secs,L015008?
01DC           1045   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:206: secs=0;
01DC 75B000    1046            mov     _secs,#0x00
01DF           1047   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:207: mins++;
01DF 0570      1048            inc     _mins
01E1           1049   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:208: if(mins==60)
01E1 743C      1050            mov     a,#0x3C
01E3 B57088    1051            cjne    a,_mins,L015008?
01E6           1052   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:210: mins=0;
01E6 757000    1053            mov     _mins,#0x00
01E9           1054   L015008?:
01E9           1055   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:215: if(line_counter_flag==1){
01E9 3090C8    1056            jnb     _line_counter_flag,L015011?
01EC           1057   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:216: line_timer++;
01EC 7401      1058            mov     a,#0x01
01EE 2570      1059            add     a,_line_timer
01F0 F570      1060            mov     _line_timer,a
01F2 E4        1061            clr     a
01F3 3571      1062            addc    a,(_line_timer + 1)
01F5 F571      1063            mov     (_line_timer + 1),a
01F7           1064   L015011?:
01F7 D0D0      1065            pop     psw
01F9 D0E0      1066            pop     acc
01FB 32        1067            reti
01FC           1068   ;        eliminated unneeded push/pop dpl
01FC           1069   ;        eliminated unneeded push/pop dph
01FC           1070   ;        eliminated unneeded push/pop b
01FC           1071   ;------------------------------------------------------------
01FC           1072   ;Allocation info for local variables in function 'display_LCD'
01FC           1073   ;------------------------------------------------------------
01FC           1074   ;buff                      Allocated with name '_display_LCD_buff_1_94'
01FC           1075   ;------------------------------------------------------------
01FC           1076   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:220: void display_LCD(void){
01FC           1077   ;        -----------------------------------------
01FC           1078   ;         function display_LCD
01FC           1079   ;        -----------------------------------------
01FC           1080   _display_LCD:
01FC           1081   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:223: time_update_flag=0;
01FC C2E0      1082            clr     _time_update_flag
01FE           1083   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:224: sprintf(buff, "V=%5.2f L:%5.2f", (AD1DAT0/255.0)*3.3, (AD1DAT1/255.0)*3.3); // Display the voltage at pin P0.1
01FE 85D682    1084            mov     dpl,_AD1DAT1
0201 120100    1085            lcall   ___uchar2fs
0204 AA82      1086            mov     r2,dpl
0206 AB83      1087            mov     r3,dph
0208 ACF0      1088            mov     r4,b
020A FD        1089            mov     r5,a
020B E4        1090            clr     a
020C C0E0      1091            push    acc
020E C0E0      1092            push    acc
0210 747F      1093            mov     a,#0x7F
0212 C0E0      1094            push    acc
0214 7443      1095            mov     a,#0x43
0216 C0E0      1096            push    acc
0218 8A82      1097            mov     dpl,r2
021A 8B83      1098            mov     dph,r3
021C 8CF0      1099            mov     b,r4
021E ED        1100            mov     a,r5
021F 120100    1101            lcall   ___fsdiv
0222 AA82      1102            mov     r2,dpl
0224 AB83      1103            mov     r3,dph
0226 ACF0      1104            mov     r4,b
0228 FD        1105            mov     r5,a
0229 E581      1106            mov     a,sp
022B 24FC      1107            add     a,#0xfc
022D F581      1108            mov     sp,a
022F C002      1109            push    ar2
0231 C003      1110            push    ar3
0233 C004      1111            push    ar4
0235 C005      1112            push    ar5
0237 903333    1113            mov     dptr,#0x3333
023A 75F053    1114            mov     b,#0x53
023D 7440      1115            mov     a,#0x40
023F 120100    1116            lcall   ___fsmul
0242 AA82      1117            mov     r2,dpl
0244 AB83      1118            mov     r3,dph
0246 ACF0      1119            mov     r4,b
0248 FD        1120            mov     r5,a
0249 E581      1121            mov     a,sp
024B 24FC      1122            add     a,#0xfc
024D F581      1123            mov     sp,a
024F 85D582    1124            mov     dpl,_AD1DAT0
0252 C002      1125            push    ar2
0254 C003      1126            push    ar3
0256 C004      1127            push    ar4
0258 C005      1128            push    ar5
025A 120100    1129            lcall   ___uchar2fs
025D AE82      1130            mov     r6,dpl
025F AF83      1131            mov     r7,dph
0261 A8F0      1132            mov     r0,b
0263 F9        1133            mov     r1,a
0264 E4        1134            clr     a
0265 C0E0      1135            push    acc
0267 C0E0      1136            push    acc
0269 747F      1137            mov     a,#0x7F
026B C0E0      1138            push    acc
026D 7443      1139            mov     a,#0x43
026F C0E0      1140            push    acc
0271 8E82      1141            mov     dpl,r6
0273 8F83      1142            mov     dph,r7
0275 88F0      1143            mov     b,r0
0277 E9        1144            mov     a,r1
0278 120100    1145            lcall   ___fsdiv
027B AE82      1146            mov     r6,dpl
027D AF83      1147            mov     r7,dph
027F A8F0      1148            mov     r0,b
0281 F9        1149            mov     r1,a
0282 E581      1150            mov     a,sp
0284 24FC      1151            add     a,#0xfc
0286 F581      1152            mov     sp,a
0288 C006      1153            push    ar6
028A C007      1154            push    ar7
028C C000      1155            push    ar0
028E C001      1156            push    ar1
0290 903333    1157            mov     dptr,#0x3333
0293 75F053    1158            mov     b,#0x53
0296 7440      1159            mov     a,#0x40
0298 120100    1160            lcall   ___fsmul
029B AE82      1161            mov     r6,dpl
029D AF83      1162            mov     r7,dph
029F A8F0      1163            mov     r0,b
02A1 F9        1164            mov     r1,a
02A2 E581      1165            mov     a,sp
02A4 24FC      1166            add     a,#0xfc
02A6 F581      1167            mov     sp,a
02A8 C006      1168            push    ar6
02AA C007      1169            push    ar7
02AC C000      1170            push    ar0
02AE C001      1171            push    ar1
02B0 7408      1172            mov     a,#__str_0
02B2 C0E0      1173            push    acc
02B4 74B1      1174            mov     a,#(__str_0 >> 8)
02B6 C0E0      1175            push    acc
02B8 7480      1176            mov     a,#0x80
02BA C0E0      1177            push    acc
02BC 74F8      1178            mov     a,#_display_LCD_buff_1_94
02BE C0E0      1179            push    acc
02C0 74A3      1180            mov     a,#(_display_LCD_buff_1_94 >> 8)
02C2 C0E0      1181            push    acc
02C4 7440      1182            mov     a,#0x40
02C6 C0E0      1183            push    acc
02C8 120100    1184            lcall   _sprintf
02CB E581      1185            mov     a,sp
02CD 24F2      1186            add     a,#0xf2
02CF F581      1187            mov     sp,a
02D1           1188   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:225: LCDprint(buff, 1, 1);
02D1 753001    1189            mov     _LCDprint_PARM_2,#0x01
02D4 D240      1190            setb    _LCDprint_PARM_3
02D6 90A3F8    1191            mov     dptr,#_display_LCD_buff_1_94
02D9 75F040    1192            mov     b,#0x40
02DC 120100    1193            lcall   _LCDprint
02DF           1194   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:226: sprintf(buff, "%02d:%02d R: %5.2f ", mins, secs, (AD1DAT2/255.0)*3.3); // Display the clock
02DF 85D782    1195            mov     dpl,_AD1DAT2
02E2 120100    1196            lcall   ___uchar2fs
02E5 AA82      1197            mov     r2,dpl
02E7 AB83      1198            mov     r3,dph
02E9 ACF0      1199            mov     r4,b
02EB FD        1200            mov     r5,a
02EC E4        1201            clr     a
02ED C0E0      1202            push    acc
02EF C0E0      1203            push    acc
02F1 747F      1204            mov     a,#0x7F
02F3 C0E0      1205            push    acc
02F5 7443      1206            mov     a,#0x43
02F7 C0E0      1207            push    acc
02F9 8A82      1208            mov     dpl,r2
02FB 8B83      1209            mov     dph,r3
02FD 8CF0      1210            mov     b,r4
02FF ED        1211            mov     a,r5
0300 120100    1212            lcall   ___fsdiv
0303 AA82      1213            mov     r2,dpl
0305 AB83      1214            mov     r3,dph
0307 ACF0      1215            mov     r4,b
0309 FD        1216            mov     r5,a
030A E581      1217            mov     a,sp
030C 24FC      1218            add     a,#0xfc
030E F581      1219            mov     sp,a
0310 C002      1220            push    ar2
0312 C003      1221            push    ar3
0314 C004      1222            push    ar4
0316 C005      1223            push    ar5
0318 903333    1224            mov     dptr,#0x3333
031B 75F053    1225            mov     b,#0x53
031E 7440      1226            mov     a,#0x40
0320 120100    1227            lcall   ___fsmul
0323 AA82      1228            mov     r2,dpl
0325 AB83      1229            mov     r3,dph
0327 ACF0      1230            mov     r4,b
0329 FD        1231            mov     r5,a
032A E581      1232            mov     a,sp
032C 24FC      1233            add     a,#0xfc
032E F581      1234            mov     sp,a
0330 AEB0      1235            mov     r6,_secs
0332 7F00      1236            mov     r7,#0x00
0334 A870      1237            mov     r0,_mins
0336 7900      1238            mov     r1,#0x00
0338 C002      1239            push    ar2
033A C003      1240            push    ar3
033C C004      1241            push    ar4
033E C005      1242            push    ar5
0340 C006      1243            push    ar6
0342 C007      1244            push    ar7
0344 C000      1245            push    ar0
0346 C001      1246            push    ar1
0348 7488      1247            mov     a,#__str_1
034A C0E0      1248            push    acc
034C 74B1      1249            mov     a,#(__str_1 >> 8)
034E C0E0      1250            push    acc
0350 7480      1251            mov     a,#0x80
0352 C0E0      1252            push    acc
0354 74F8      1253            mov     a,#_display_LCD_buff_1_94
0356 C0E0      1254            push    acc
0358 74A3      1255            mov     a,#(_display_LCD_buff_1_94 >> 8)
035A C0E0      1256            push    acc
035C 7440      1257            mov     a,#0x40
035E C0E0      1258            push    acc
0360 120100    1259            lcall   _sprintf
0363 E581      1260            mov     a,sp
0365 24F2      1261            add     a,#0xf2
0367 F581      1262            mov     sp,a
0369           1263   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:227: LCDprint(buff, 2, 1);
0369 753002    1264            mov     _LCDprint_PARM_2,#0x02
036C D240      1265            setb    _LCDprint_PARM_3
036E 90A3F8    1266            mov     dptr,#_display_LCD_buff_1_94
0371 75F040    1267            mov     b,#0x40
0374 020100    1268            ljmp    _LCDprint
0377           1269   ;------------------------------------------------------------
0377           1270   ;Allocation info for local variables in function 'main'
0377           1271   ;------------------------------------------------------------
0377           1272   ;k_p                       Allocated to registers 
0377           1273   ;k_d                       Allocated to registers 
0377           1274   ;cor                       Allocated with name '_main_cor_1_96'
0377           1275   ;cur_error                 Allocated with name '_main_cur_error_1_96'
0377           1276   ;pre_error                 Allocated with name '_main_pre_error_1_96'
0377           1277   ;thresh                    Allocated to registers 
0377           1278   ;line_counter              Allocated with name '_main_line_counter_1_96'
0377           1279   ;exec                      Allocated with name '_main_exec_1_96'
0377           1280   ;start                     Allocated to registers 
0377           1281   ;left                      Allocated with name '_main_left_1_96'
0377           1282   ;right                     Allocated with name '_main_right_1_96'
0377           1283   ;line_sensor               Allocated with name '_main_line_sensor_1_96'
0377           1284   ;diff                      Allocated with name '_main_diff_1_96'
0377           1285   ;------------------------------------------------------------
0377           1286   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:230: void main (void){
0377           1287   ;        -----------------------------------------
0377           1288   ;         function main
0377           1289   ;        -----------------------------------------
0377           1290   _main:
0377           1291   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:235: double cur_error =0;
0377           1292   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:238: int line_counter = 0;
0377           1293   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:239: int exec = 0;
0377 E4        1294            clr     a
0378 F588      1295            mov     _main_cur_error_1_96,a
037A F589      1296            mov     (_main_cur_error_1_96 + 1),a
037C F58A      1297            mov     (_main_cur_error_1_96 + 2),a
037E F58B      1298            mov     (_main_cur_error_1_96 + 3),a
0380 F528      1299            mov     _main_line_counter_1_96,a
0382 F529      1300            mov     (_main_line_counter_1_96 + 1),a
0384 F568      1301            mov     _main_exec_1_96,a
0386 F569      1302            mov     (_main_exec_1_96 + 1),a
0388           1303   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:243: double left = (AD1DAT1/255.0)*3.3;
0388 E5D6      1304            mov     a,_AD1DAT1
038A           1305   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:244: double right = (AD1DAT2/255.0)*3.3;
038A E5D7      1306            mov     a,_AD1DAT2
038C           1307   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:245: double line_sensor = (AD1DAT3/255.0)*3.3;
038C E5F5      1308            mov     a,_AD1DAT3
038E           1309   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:249: InitPorts();
038E 120100    1310            lcall   _InitPorts
0391           1311   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:250: LCD_8BIT();
0391 120100    1312            lcall   _LCD_8BIT
0394           1313   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:251: InitSerialPort();
0394 120100    1314            lcall   _InitSerialPort
0397           1315   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:252: InitADC();
0397 120100    1316            lcall   _InitADC
039A           1317   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:253: InitTimer0();
039A 120100    1318            lcall   _InitTimer0
039D           1319   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:256: P0_7 = 1;
039D D287      1320            setb    _P0_7
039F           1321   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:263: pre_error = 0;
039F 75D800    1322            mov     _main_pre_error_1_96,#0x00
03A2 75D900    1323            mov     (_main_pre_error_1_96 + 1),#0x00
03A5 75DA00    1324            mov     (_main_pre_error_1_96 + 2),#0x00
03A8 75DB00    1325            mov     (_main_pre_error_1_96 + 3),#0x00
03AB           1326   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:264: while(1)
03AB           1327   L017036?:
03AB           1328   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:274: left = (AD1DAT1/255.0)*3.3;
03AB 85D682    1329            mov     dpl,_AD1DAT1
03AE 120100    1330            lcall   ___uchar2fs
03B1 AC82      1331            mov     r4,dpl
03B3 AD83      1332            mov     r5,dph
03B5 AAF0      1333            mov     r2,b
03B7 FB        1334            mov     r3,a
03B8 E4        1335            clr     a
03B9 C0E0      1336            push    acc
03BB C0E0      1337            push    acc
03BD 747F      1338            mov     a,#0x7F
03BF C0E0      1339            push    acc
03C1 7443      1340            mov     a,#0x43
03C3 C0E0      1341            push    acc
03C5 8C82      1342            mov     dpl,r4
03C7 8D83      1343            mov     dph,r5
03C9 8AF0      1344            mov     b,r2
03CB EB        1345            mov     a,r3
03CC 120100    1346            lcall   ___fsdiv
03CF AA82      1347            mov     r2,dpl
03D1 AB83      1348            mov     r3,dph
03D3 ACF0      1349            mov     r4,b
03D5 FD        1350            mov     r5,a
03D6 E581      1351            mov     a,sp
03D8 24FC      1352            add     a,#0xfc
03DA F581      1353            mov     sp,a
03DC C002      1354            push    ar2
03DE C003      1355            push    ar3
03E0 C004      1356            push    ar4
03E2 C005      1357            push    ar5
03E4 903333    1358            mov     dptr,#0x3333
03E7 75F053    1359            mov     b,#0x53
03EA 7440      1360            mov     a,#0x40
03EC 120100    1361            lcall   ___fsmul
03EF 8582A8    1362            mov     _main_left_1_96,dpl
03F2 8583A9    1363            mov     (_main_left_1_96 + 1),dph
03F5 85F0AA    1364            mov     (_main_left_1_96 + 2),b
03F8 F5AB      1365            mov     (_main_left_1_96 + 3),a
03FA E581      1366            mov     a,sp
03FC 24FC      1367            add     a,#0xfc
03FE F581      1368            mov     sp,a
0400           1369   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:275: right = (AD1DAT2/255.0)*3.3;
0400 85D782    1370            mov     dpl,_AD1DAT2
0403 120100    1371            lcall   ___uchar2fs
0406 A882      1372            mov     r0,dpl
0408 A983      1373            mov     r1,dph
040A AAF0      1374            mov     r2,b
040C FB        1375            mov     r3,a
040D E4        1376            clr     a
040E C0E0      1377            push    acc
0410 C0E0      1378            push    acc
0412 747F      1379            mov     a,#0x7F
0414 C0E0      1380            push    acc
0416 7443      1381            mov     a,#0x43
0418 C0E0      1382            push    acc
041A 8882      1383            mov     dpl,r0
041C 8983      1384            mov     dph,r1
041E 8AF0      1385            mov     b,r2
0420 EB        1386            mov     a,r3
0421 120100    1387            lcall   ___fsdiv
0424 AA82      1388            mov     r2,dpl
0426 AB83      1389            mov     r3,dph
0428 ACF0      1390            mov     r4,b
042A FD        1391            mov     r5,a
042B E581      1392            mov     a,sp
042D 24FC      1393            add     a,#0xfc
042F F581      1394            mov     sp,a
0431 C002      1395            push    ar2
0433 C003      1396            push    ar3
0435 C004      1397            push    ar4
0437 C005      1398            push    ar5
0439 903333    1399            mov     dptr,#0x3333
043C 75F053    1400            mov     b,#0x53
043F 7440      1401            mov     a,#0x40
0441 120100    1402            lcall   ___fsmul
0444 8582F8    1403            mov     _main_right_1_96,dpl
0447 8583F9    1404            mov     (_main_right_1_96 + 1),dph
044A 85F0FA    1405            mov     (_main_right_1_96 + 2),b
044D F5FB      1406            mov     (_main_right_1_96 + 3),a
044F E581      1407            mov     a,sp
0451 24FC      1408            add     a,#0xfc
0453 F581      1409            mov     sp,a
0455           1410   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:276: line_sensor = (AD1DAT3/255.0)*3.3;
0455 85F582    1411            mov     dpl,_AD1DAT3
0458 120100    1412            lcall   ___uchar2fs
045B A882      1413            mov     r0,dpl
045D A983      1414            mov     r1,dph
045F AAF0      1415            mov     r2,b
0461 FB        1416            mov     r3,a
0462 E4        1417            clr     a
0463 C0E0      1418            push    acc
0465 C0E0      1419            push    acc
0467 747F      1420            mov     a,#0x7F
0469 C0E0      1421            push    acc
046B 7443      1422            mov     a,#0x43
046D C0E0      1423            push    acc
046F 8882      1424            mov     dpl,r0
0471 8983      1425            mov     dph,r1
0473 8AF0      1426            mov     b,r2
0475 EB        1427            mov     a,r3
0476 120100    1428            lcall   ___fsdiv
0479 AA82      1429            mov     r2,dpl
047B AB83      1430            mov     r3,dph
047D ACF0      1431            mov     r4,b
047F FD        1432            mov     r5,a
0480 E581      1433            mov     a,sp
0482 24FC      1434            add     a,#0xfc
0484 F581      1435            mov     sp,a
0486 C002      1436            push    ar2
0488 C003      1437            push    ar3
048A C004      1438            push    ar4
048C C005      1439            push    ar5
048E 903333    1440            mov     dptr,#0x3333
0491 75F053    1441            mov     b,#0x53
0494 7440      1442            mov     a,#0x40
0496 120100    1443            lcall   ___fsmul
0499 858248    1444            mov     _main_line_sensor_1_96,dpl
049C 858349    1445            mov     (_main_line_sensor_1_96 + 1),dph
049F 85F04A    1446            mov     (_main_line_sensor_1_96 + 2),b
04A2 F54B      1447            mov     (_main_line_sensor_1_96 + 3),a
04A4 E581      1448            mov     a,sp
04A6 24FC      1449            add     a,#0xfc
04A8 F581      1450            mov     sp,a
04AA           1451   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:277: diff = left - right;
04AA C0F8      1452            push    _main_right_1_96
04AC C0F9      1453            push    (_main_right_1_96 + 1)
04AE C0FA      1454            push    (_main_right_1_96 + 2)
04B0 C0FB      1455            push    (_main_right_1_96 + 3)
04B2 85A882    1456            mov     dpl,_main_left_1_96
04B5 85A983    1457            mov     dph,(_main_left_1_96 + 1)
04B8 85AAF0    1458            mov     b,(_main_left_1_96 + 2)
04BB E5AB      1459            mov     a,(_main_left_1_96 + 3)
04BD 120100    1460            lcall   ___fssub
04C0 858288    1461            mov     _main_diff_1_96,dpl
04C3 858389    1462            mov     (_main_diff_1_96 + 1),dph
04C6 85F08A    1463            mov     (_main_diff_1_96 + 2),b
04C9 F58B      1464            mov     (_main_diff_1_96 + 3),a
04CB E581      1465            mov     a,sp
04CD 24FC      1466            add     a,#0xfc
04CF F581      1467            mov     sp,a
04D1           1468   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:280: if(time_update_flag==1) // If the clock has been updated, refresh the display
04D1 30E048    1469            jnb     _time_update_flag,L017002?
04D4           1470   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:282: display_LCD();
04D4 120100    1471            lcall   _display_LCD
04D7           1472   L017002?:
04D7           1473   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:286: cor = k_p * cur_error + k_d*(cur_error - pre_error)/0.001;
04D7 C088      1474            push    _main_cur_error_1_96
04D9 C089      1475            push    (_main_cur_error_1_96 + 1)
04DB C08A      1476            push    (_main_cur_error_1_96 + 2)
04DD C08B      1477            push    (_main_cur_error_1_96 + 3)
04DF 900000    1478            mov     dptr,#0x0000
04E2 75F0A0    1479            mov     b,#0xA0
04E5 7441      1480            mov     a,#0x41
04E7 120100    1481            lcall   ___fsmul
04EA AC82      1482            mov     r4,dpl
04EC AD83      1483            mov     r5,dph
04EE AAF0      1484            mov     r2,b
04F0 FB        1485            mov     r3,a
04F1 E581      1486            mov     a,sp
04F3 24FC      1487            add     a,#0xfc
04F5 F581      1488            mov     sp,a
04F7 C002      1489            push    ar2
04F9 C003      1490            push    ar3
04FB C004      1491            push    ar4
04FD C005      1492            push    ar5
04FF C0D8      1493            push    _main_pre_error_1_96
0501 C0D9      1494            push    (_main_pre_error_1_96 + 1)
0503 C0DA      1495            push    (_main_pre_error_1_96 + 2)
0505 C0DB      1496            push    (_main_pre_error_1_96 + 3)
0507 858882    1497            mov     dpl,_main_cur_error_1_96
050A 858983    1498            mov     dph,(_main_cur_error_1_96 + 1)
050D 858AF0    1499            mov     b,(_main_cur_error_1_96 + 2)
0510 E58B      1500            mov     a,(_main_cur_error_1_96 + 3)
0512 120100    1501            lcall   ___fssub
0515 A882      1502            mov     r0,dpl
0517 A983      1503            mov     r1,dph
0519 AEF0      1504            mov     r6,b
051B FF        1505            mov     r7,a
051C E581      1506            mov     a,sp
051E 24FC      1507            add     a,#0xfc
0520 F581      1508            mov     sp,a
0522 746F      1509            mov     a,#0x6F
0524 C0E0      1510            push    acc
0526 7412      1511            mov     a,#0x12
0528 C0E0      1512            push    acc
052A 7483      1513            mov     a,#0x83
052C C0E0      1514            push    acc
052E 743A      1515            mov     a,#0x3A
0530 C0E0      1516            push    acc
0532 8882      1517            mov     dpl,r0
0534 8983      1518            mov     dph,r1
0536 8EF0      1519            mov     b,r6
0538 EF        1520            mov     a,r7
0539 120100    1521            lcall   ___fsdiv
053C AE82      1522            mov     r6,dpl
053E AF83      1523            mov     r7,dph
0540 A8F0      1524            mov     r0,b
0542 F9        1525            mov     r1,a
0543 E581      1526            mov     a,sp
0545 24FC      1527            add     a,#0xfc
0547 F581      1528            mov     sp,a
0549 D005      1529            pop     ar5
054B D004      1530            pop     ar4
054D D003      1531            pop     ar3
054F D002      1532            pop     ar2
0551 C006      1533            push    ar6
0553 C007      1534            push    ar7
0555 C000      1535            push    ar0
0557 C001      1536            push    ar1
0559 8C82      1537            mov     dpl,r4
055B 8D83      1538            mov     dph,r5
055D 8AF0      1539            mov     b,r2
055F EB        1540            mov     a,r3
0560 120100    1541            lcall   ___fsadd
0563 858238    1542            mov     _main_cor_1_96,dpl
0566 858339    1543            mov     (_main_cor_1_96 + 1),dph
0569 85F03A    1544            mov     (_main_cor_1_96 + 2),b
056C F53B      1545            mov     (_main_cor_1_96 + 3),a
056E E581      1546            mov     a,sp
0570 24FC      1547            add     a,#0xfc
0572 F581      1548            mov     sp,a
0574           1549   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:288: if((left > 0.7) && (left < 1) && (right > 0.7) && (right < 1)){
0574 7433      1550            mov     a,#0x33
0576 C0E0      1551            push    acc
0578 C0E0      1552            push    acc
057A C0E0      1553            push    acc
057C 743F      1554            mov     a,#0x3F
057E C0E0      1555            push    acc
0580 85A882    1556            mov     dpl,_main_left_1_96
0583 85A983    1557            mov     dph,(_main_left_1_96 + 1)
0586 85AAF0    1558            mov     b,(_main_left_1_96 + 2)
0589 E5AB      1559            mov     a,(_main_left_1_96 + 3)
058B 120100    1560            lcall   ___fsgt
058E AE82      1561            mov     r6,dpl
0590 E581      1562            mov     a,sp
0592 24FC      1563            add     a,#0xfc
0594 F581      1564            mov     sp,a
0596 EE        1565            mov     a,r6
0597 7001      1566            jnz     L017061?
0599 020100    1567            ljmp    L017004?
059C           1568   L017061?:
059C E4        1569            clr     a
059D C0E0      1570            push    acc
059F C0E0      1571            push    acc
05A1 7480      1572            mov     a,#0x80
05A3 C0E0      1573            push    acc
05A5 743F      1574            mov     a,#0x3F
05A7 C0E0      1575            push    acc
05A9 85A882    1576            mov     dpl,_main_left_1_96
05AC 85A983    1577            mov     dph,(_main_left_1_96 + 1)
05AF 85AAF0    1578            mov     b,(_main_left_1_96 + 2)
05B2 E5AB      1579            mov     a,(_main_left_1_96 + 3)
05B4 120100    1580            lcall   ___fslt
05B7 AE82      1581            mov     r6,dpl
05B9 E581      1582            mov     a,sp
05BB 24FC      1583            add     a,#0xfc
05BD F581      1584            mov     sp,a
05BF EE        1585            mov     a,r6
05C0 6001      1586            jz      L017004?
05C2 7433      1587            mov     a,#0x33
05C4 C0E0      1588            push    acc
05C6 C0E0      1589            push    acc
05C8 C0E0      1590            push    acc
05CA 743F      1591            mov     a,#0x3F
05CC C0E0      1592            push    acc
05CE 85F882    1593            mov     dpl,_main_right_1_96
05D1 85F983    1594            mov     dph,(_main_right_1_96 + 1)
05D4 85FAF0    1595            mov     b,(_main_right_1_96 + 2)
05D7 E5FB      1596            mov     a,(_main_right_1_96 + 3)
05D9 120100    1597            lcall   ___fsgt
05DC AE82      1598            mov     r6,dpl
05DE E581      1599            mov     a,sp
05E0 24FC      1600            add     a,#0xfc
05E2 F581      1601            mov     sp,a
05E4 EE        1602            mov     a,r6
05E5 6001      1603            jz      L017004?
05E7 E4        1604            clr     a
05E8 C0E0      1605            push    acc
05EA C0E0      1606            push    acc
05EC 7480      1607            mov     a,#0x80
05EE C0E0      1608            push    acc
05F0 743F      1609            mov     a,#0x3F
05F2 C0E0      1610            push    acc
05F4 85F882    1611            mov     dpl,_main_right_1_96
05F7 85F983    1612            mov     dph,(_main_right_1_96 + 1)
05FA 85FAF0    1613            mov     b,(_main_right_1_96 + 2)
05FD E5FB      1614            mov     a,(_main_right_1_96 + 3)
05FF 120100    1615            lcall   ___fslt
0602 AE82      1616            mov     r6,dpl
0604 E581      1617            mov     a,sp
0606 24FC      1618            add     a,#0xfc
0608 F581      1619            mov     sp,a
060A EE        1620            mov     a,r6
060B 6001      1621            jz      L017004?
060D           1622   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:289: cur_error = 0;
060D 758800    1623            mov     _main_cur_error_1_96,#0x00
0610 758900    1624            mov     (_main_cur_error_1_96 + 1),#0x00
0613 758A00    1625            mov     (_main_cur_error_1_96 + 2),#0x00
0616 758B00    1626            mov     (_main_cur_error_1_96 + 3),#0x00
0619           1627   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:290: pwm_left = 100;
0619 75F064    1628            mov     _pwm_left,#0x64
061C           1629   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:291: pwm_right = 100;
061C 75B064    1630            mov     _pwm_right,#0x64
061F           1631   L017004?:
061F           1632   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:293: if(1<diff){       
061F C088      1633            push    _main_diff_1_96
0621 C089      1634            push    (_main_diff_1_96 + 1)
0623 C08A      1635            push    (_main_diff_1_96 + 2)
0625 C08B      1636            push    (_main_diff_1_96 + 3)
0627 900000    1637            mov     dptr,#0x0000
062A 75F080    1638            mov     b,#0x80
062D 743F      1639            mov     a,#0x3F
062F 120100    1640            lcall   ___fslt
0632 AE82      1641            mov     r6,dpl
0634 E581      1642            mov     a,sp
0636 24FC      1643            add     a,#0xfc
0638 F581      1644            mov     sp,a
063A EE        1645            mov     a,r6
063B 6001      1646            jz      L017009?
063D           1647   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:294: cur_error = 1;
063D 758800    1648            mov     _main_cur_error_1_96,#0x00
0640 758900    1649            mov     (_main_cur_error_1_96 + 1),#0x00
0643 758A80    1650            mov     (_main_cur_error_1_96 + 2),#0x80
0646 758B3F    1651            mov     (_main_cur_error_1_96 + 3),#0x3F
0649           1652   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:295: pwm_left = 100 - cor;
0649 C038      1653            push    _main_cor_1_96
064B C039      1654            push    (_main_cor_1_96 + 1)
064D C03A      1655            push    (_main_cor_1_96 + 2)
064F C03B      1656            push    (_main_cor_1_96 + 3)
0651 900000    1657            mov     dptr,#0x0000
0654 75F0C8    1658            mov     b,#0xC8
0657 7442      1659            mov     a,#0x42
0659 120100    1660            lcall   ___fssub
065C AE82      1661            mov     r6,dpl
065E AF83      1662            mov     r7,dph
0660 A8F0      1663            mov     r0,b
0662 F9        1664            mov     r1,a
0663 E581      1665            mov     a,sp
0665 24FC      1666            add     a,#0xfc
0667 F581      1667            mov     sp,a
0669 8E82      1668            mov     dpl,r6
066B 8F83      1669            mov     dph,r7
066D 88F0      1670            mov     b,r0
066F E9        1671            mov     a,r1
0670 120100    1672            lcall   ___fs2uchar
0673 8582F0    1673            mov     _pwm_left,dpl
0676           1674   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:296: pwm_right = 100;
0676 75B064    1675            mov     _pwm_right,#0x64
0679           1676   L017009?:
0679           1677   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:298: if(diff<-1){
0679 E4        1678            clr     a
067A C0E0      1679            push    acc
067C C0E0      1680            push    acc
067E 7480      1681            mov     a,#0x80
0680 C0E0      1682            push    acc
0682 74BF      1683            mov     a,#0xBF
0684 C0E0      1684            push    acc
0686 858882    1685            mov     dpl,_main_diff_1_96
0689 858983    1686            mov     dph,(_main_diff_1_96 + 1)
068C 858AF0    1687            mov     b,(_main_diff_1_96 + 2)
068F E58B      1688            mov     a,(_main_diff_1_96 + 3)
0691 120100    1689            lcall   ___fslt
0694 AE82      1690            mov     r6,dpl
0696 E581      1691            mov     a,sp
0698 24FC      1692            add     a,#0xfc
069A F581      1693            mov     sp,a
069C EE        1694            mov     a,r6
069D 6001      1695            jz      L017011?
069F           1696   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:299: cur_error= -1;
069F 758800    1697            mov     _main_cur_error_1_96,#0x00
06A2 758900    1698            mov     (_main_cur_error_1_96 + 1),#0x00
06A5 758A80    1699            mov     (_main_cur_error_1_96 + 2),#0x80
06A8 758BBF    1700            mov     (_main_cur_error_1_96 + 3),#0xBF
06AB           1701   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:300: pwm_left = 100;
06AB 75F064    1702            mov     _pwm_left,#0x64
06AE           1703   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:301: pwm_right = 100 + cor;
06AE E4        1704            clr     a
06AF C0E0      1705            push    acc
06B1 C0E0      1706            push    acc
06B3 74C8      1707            mov     a,#0xC8
06B5 C0E0      1708            push    acc
06B7 7442      1709            mov     a,#0x42
06B9 C0E0      1710            push    acc
06BB 853882    1711            mov     dpl,_main_cor_1_96
06BE 853983    1712            mov     dph,(_main_cor_1_96 + 1)
06C1 853AF0    1713            mov     b,(_main_cor_1_96 + 2)
06C4 E53B      1714            mov     a,(_main_cor_1_96 + 3)
06C6 120100    1715            lcall   ___fsadd
06C9 AE82      1716            mov     r6,dpl
06CB AF83      1717            mov     r7,dph
06CD A8F0      1718            mov     r0,b
06CF F9        1719            mov     r1,a
06D0 E581      1720            mov     a,sp
06D2 24FC      1721            add     a,#0xfc
06D4 F581      1722            mov     sp,a
06D6 8E82      1723            mov     dpl,r6
06D8 8F83      1724            mov     dph,r7
06DA 88F0      1725            mov     b,r0
06DC E9        1726            mov     a,r1
06DD 120100    1727            lcall   ___fs2uchar
06E0 8582B0    1728            mov     _pwm_right,dpl
06E3           1729   L017011?:
06E3           1730   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:303: if((left < 0.5) && (right < 0.5)){
06E3 E4        1731            clr     a
06E4 C0E0      1732            push    acc
06E6 C0E0      1733            push    acc
06E8 C0E0      1734            push    acc
06EA 743F      1735            mov     a,#0x3F
06EC C0E0      1736            push    acc
06EE 85A882    1737            mov     dpl,_main_left_1_96
06F1 85A983    1738            mov     dph,(_main_left_1_96 + 1)
06F4 85AAF0    1739            mov     b,(_main_left_1_96 + 2)
06F7 E5AB      1740            mov     a,(_main_left_1_96 + 3)
06F9 120100    1741            lcall   ___fslt
06FC AE82      1742            mov     r6,dpl
06FE E581      1743            mov     a,sp
0700 24FC      1744            add     a,#0xfc
0702 F581      1745            mov     sp,a
0704 EE        1746            mov     a,r6
0705 7001      1747            jnz     L017067?
0707 020100    1748            ljmp    L017017?
070A           1749   L017067?:
070A E4        1750            clr     a
070B C0E0      1751            push    acc
070D C0E0      1752            push    acc
070F C0E0      1753            push    acc
0711 743F      1754            mov     a,#0x3F
0713 C0E0      1755            push    acc
0715 85F882    1756            mov     dpl,_main_right_1_96
0718 85F983    1757            mov     dph,(_main_right_1_96 + 1)
071B 85FAF0    1758            mov     b,(_main_right_1_96 + 2)
071E E5FB      1759            mov     a,(_main_right_1_96 + 3)
0720 120100    1760            lcall   ___fslt
0723 AE82      1761            mov     r6,dpl
0725 E581      1762            mov     a,sp
0727 24FC      1763            add     a,#0xfc
0729 F581      1764            mov     sp,a
072B EE        1765            mov     a,r6
072C 7001      1766            jnz     L017068?
072E 020100    1767            ljmp    L017017?
0731           1768   L017068?:
0731           1769   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:304: if(pre_error>0){
0731 E4        1770            clr     a
0732 C0E0      1771            push    acc
0734 C0E0      1772            push    acc
0736 C0E0      1773            push    acc
0738 C0E0      1774            push    acc
073A 85D882    1775            mov     dpl,_main_pre_error_1_96
073D 85D983    1776            mov     dph,(_main_pre_error_1_96 + 1)
0740 85DAF0    1777            mov     b,(_main_pre_error_1_96 + 2)
0743 E5DB      1778            mov     a,(_main_pre_error_1_96 + 3)
0745 120100    1779            lcall   ___fsgt
0748 AE82      1780            mov     r6,dpl
074A E581      1781            mov     a,sp
074C 24FC      1782            add     a,#0xfc
074E F581      1783            mov     sp,a
0750 EE        1784            mov     a,r6
0751 6001      1785            jz      L017013?
0753           1786   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:305: cur_error = 5;
0753 758800    1787            mov     _main_cur_error_1_96,#0x00
0756 758900    1788            mov     (_main_cur_error_1_96 + 1),#0x00
0759 758AA0    1789            mov     (_main_cur_error_1_96 + 2),#0xA0
075C 758B40    1790            mov     (_main_cur_error_1_96 + 3),#0x40
075F           1791   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:307: pwm_left = 100;
075F 75F064    1792            mov     _pwm_left,#0x64
0762           1793   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:308: pwm_right = 100 - cor;
0762 C006      1794            push    ar6
0764 C038      1795            push    _main_cor_1_96
0766 C039      1796            push    (_main_cor_1_96 + 1)
0768 C03A      1797            push    (_main_cor_1_96 + 2)
076A C03B      1798            push    (_main_cor_1_96 + 3)
076C 900000    1799            mov     dptr,#0x0000
076F 75F0C8    1800            mov     b,#0xC8
0772 7442      1801            mov     a,#0x42
0774 120100    1802            lcall   ___fssub
0777 AF82      1803            mov     r7,dpl
0779 A883      1804            mov     r0,dph
077B A9F0      1805            mov     r1,b
077D FA        1806            mov     r2,a
077E E581      1807            mov     a,sp
0780 24FC      1808            add     a,#0xfc
0782 F581      1809            mov     sp,a
0784 8F82      1810            mov     dpl,r7
0786 8883      1811            mov     dph,r0
0788 89F0      1812            mov     b,r1
078A EA        1813            mov     a,r2
078B 120100    1814            lcall   ___fs2uchar
078E 8582B0    1815            mov     _pwm_right,dpl
0791 D006      1816            pop     ar6
0793           1817   L017013?:
0793           1818   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:310: if(pre_error<=0){
0793 EE        1819            mov     a,r6
0794           1820   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:311: cur_error = -5;
0794 7001      1821            jnz     L017017?
0796 F588      1822            mov     _main_cur_error_1_96,a
0798 F589      1823            mov     (_main_cur_error_1_96 + 1),a
079A 758AA0    1824            mov     (_main_cur_error_1_96 + 2),#0xA0
079D 758BC0    1825            mov     (_main_cur_error_1_96 + 3),#0xC0
07A0           1826   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:312: pwm_left = 100;
07A0 75F064    1827            mov     _pwm_left,#0x64
07A3           1828   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:313: pwm_right = 100 + cor;
07A3 E4        1829            clr     a
07A4 C0E0      1830            push    acc
07A6 C0E0      1831            push    acc
07A8 74C8      1832            mov     a,#0xC8
07AA C0E0      1833            push    acc
07AC 7442      1834            mov     a,#0x42
07AE C0E0      1835            push    acc
07B0 853882    1836            mov     dpl,_main_cor_1_96
07B3 853983    1837            mov     dph,(_main_cor_1_96 + 1)
07B6 853AF0    1838            mov     b,(_main_cor_1_96 + 2)
07B9 E53B      1839            mov     a,(_main_cor_1_96 + 3)
07BB 120100    1840            lcall   ___fsadd
07BE AA82      1841            mov     r2,dpl
07C0 AB83      1842            mov     r3,dph
07C2 ACF0      1843            mov     r4,b
07C4 FD        1844            mov     r5,a
07C5 E581      1845            mov     a,sp
07C7 24FC      1846            add     a,#0xfc
07C9 F581      1847            mov     sp,a
07CB 8A82      1848            mov     dpl,r2
07CD 8B83      1849            mov     dph,r3
07CF 8CF0      1850            mov     b,r4
07D1 ED        1851            mov     a,r5
07D2 120100    1852            lcall   ___fs2uchar
07D5 8582B0    1853            mov     _pwm_right,dpl
07D8           1854   L017017?:
07D8           1855   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:316: pre_error = cur_error;
07D8 8588D8    1856            mov     _main_pre_error_1_96,_main_cur_error_1_96
07DB 8589D9    1857            mov     (_main_pre_error_1_96 + 1),(_main_cur_error_1_96 + 1)
07DE 858ADA    1858            mov     (_main_pre_error_1_96 + 2),(_main_cur_error_1_96 + 2)
07E1 858BDB    1859            mov     (_main_pre_error_1_96 + 3),(_main_cur_error_1_96 + 3)
07E4           1860   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:317: printf("Error:%5.2f Left:%5.2f Right:%5.2f Left_Motor:%d Right_Motor:%d                \r", cur_error, left, right, pwm_left, pwm_right);
07E4 AAB0      1861            mov     r2,_pwm_right
07E6 7B00      1862            mov     r3,#0x00
07E8 ACF0      1863            mov     r4,_pwm_left
07EA 7D00      1864            mov     r5,#0x00
07EC C002      1865            push    ar2
07EE C003      1866            push    ar3
07F0 C004      1867            push    ar4
07F2 C005      1868            push    ar5
07F4 C0F8      1869            push    _main_right_1_96
07F6 C0F9      1870            push    (_main_right_1_96 + 1)
07F8 C0FA      1871            push    (_main_right_1_96 + 2)
07FA C0FB      1872            push    (_main_right_1_96 + 3)
07FC C0A8      1873            push    _main_left_1_96
07FE C0A9      1874            push    (_main_left_1_96 + 1)
0800 C0AA      1875            push    (_main_left_1_96 + 2)
0802 C0AB      1876            push    (_main_left_1_96 + 3)
0804 C088      1877            push    _main_cur_error_1_96
0806 C089      1878            push    (_main_cur_error_1_96 + 1)
0808 C08A      1879            push    (_main_cur_error_1_96 + 2)
080A C08B      1880            push    (_main_cur_error_1_96 + 3)
080C 7488      1881            mov     a,#__str_2
080E C0E0      1882            push    acc
0810 74B5      1883            mov     a,#(__str_2 >> 8)
0812 C0E0      1884            push    acc
0814 7480      1885            mov     a,#0x80
0816 C0E0      1886            push    acc
0818 120100    1887            lcall   _printf
081B E581      1888            mov     a,sp
081D 24ED      1889            add     a,#0xed
081F F581      1890            mov     sp,a
0821           1891   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:322: if(line_sensor>thresh){
0821 E4        1892            clr     a
0822 C0E0      1893            push    acc
0824 C0E0      1894            push    acc
0826 C0E0      1895            push    acc
0828 7440      1896            mov     a,#0x40
082A C0E0      1897            push    acc
082C 854882    1898            mov     dpl,_main_line_sensor_1_96
082F 854983    1899            mov     dph,(_main_line_sensor_1_96 + 1)
0832 854AF0    1900            mov     b,(_main_line_sensor_1_96 + 2)
0835 E54B      1901            mov     a,(_main_line_sensor_1_96 + 3)
0837 120100    1902            lcall   ___fsgt
083A AA82      1903            mov     r2,dpl
083C E581      1904            mov     a,sp
083E 24FC      1905            add     a,#0xfc
0840 F581      1906            mov     sp,a
0842 EA        1907            mov     a,r2
0843 7001      1908            jnz     L017071?
0845 020100    1909            ljmp    L017036?
0848           1910   L017071?:
0848           1911   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:324: if(line_counter == 0){
0848 E528      1912            mov     a,_main_line_counter_1_96
084A 4529      1913            orl     a,(_main_line_counter_1_96 + 1)
084C 7001      1914            jnz     L017020?
084E           1915   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:326: line_counter++;
084E 0528      1916            inc     _main_line_counter_1_96
0850 E4        1917            clr     a
0851 B52888    1918            cjne    a,_main_line_counter_1_96,L017073?
0854 0529      1919            inc     (_main_line_counter_1_96 + 1)
0856           1920   L017073?:
0856           1921   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:327: line_counter_flag = 1;
0856 D290      1922            setb    _line_counter_flag
0858 8001      1923            sjmp    L017021?
085A           1924   L017020?:
085A           1925   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:331: line_counter++;                                   
085A 0528      1926            inc     _main_line_counter_1_96
085C E4        1927            clr     a
085D B52808    1928            cjne    a,_main_line_counter_1_96,L017074?
0860 0529      1929            inc     (_main_line_counter_1_96 + 1)
0862           1930   L017074?:
0862           1931   L017021?:
0862           1932   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:334: if(line_timer == 2000){
0862 74D0      1933            mov     a,#0xD0
0864 B57048    1934            cjne    a,_line_timer,L017023?
0867 7407      1935            mov     a,#0x07
0869 B57148    1936            cjne    a,(_line_timer + 1),L017023?
086C           1937   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:335: line_counter_flag = 0;
086C C290      1938            clr     _line_counter_flag
086E           1939   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:336: line_timer = 0;
086E E4        1940            clr     a
086F F570      1941            mov     _line_timer,a
0871 F571      1942            mov     (_line_timer + 1),a
0873           1943   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:337: exec = 1;                                         
0873 756801    1944            mov     _main_exec_1_96,#0x01
0876 E4        1945            clr     a
0877 F569      1946            mov     (_main_exec_1_96 + 1),a
0879           1947   L017023?:
0879           1948   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:341: if(exec == 1){
0879 7401      1949            mov     a,#0x01
087B B56888    1950            cjne    a,_main_exec_1_96,L017077?
087E E4        1951            clr     a
087F B56988    1952            cjne    a,(_main_exec_1_96 + 1),L017077?
0882 8001      1953            sjmp    L017078?
0884           1954   L017077?:
0884 020100    1955            ljmp    L017032?
0887           1956   L017078?:
0887           1957   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:342: switch(line_counter){
0887 7402      1958            mov     a,#0x02
0889 B52848    1959            cjne    a,_main_line_counter_1_96,L017079?
088C E4        1960            clr     a
088D B52948    1961            cjne    a,(_main_line_counter_1_96 + 1),L017079?
0890 8001      1962            sjmp    L017024?
0892           1963   L017079?:
0892 7403      1964            mov     a,#0x03
0894 B528C8    1965            cjne    a,_main_line_counter_1_96,L017080?
0897 E4        1966            clr     a
0898 B529C8    1967            cjne    a,(_main_line_counter_1_96 + 1),L017080?
089B 8001      1968            sjmp    L017025?
089D           1969   L017080?:
089D 7404      1970            mov     a,#0x04
089F B52848    1971            cjne    a,_main_line_counter_1_96,L017081?
08A2 E4        1972            clr     a
08A3 B52948    1973            cjne    a,(_main_line_counter_1_96 + 1),L017081?
08A6 8001      1974            sjmp    L017026?
08A8           1975   L017081?:
08A8           1976   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:343: case 2:
08A8 8001      1977            sjmp    L017030?
08AA           1978   L017024?:
08AA           1979   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:344: printf("TURNING LEFT \r;");
08AA 7408      1980            mov     a,#__str_3
08AC C0E0      1981            push    acc
08AE 74BA      1982            mov     a,#(__str_3 >> 8)
08B0 C0E0      1983            push    acc
08B2 7480      1984            mov     a,#0x80
08B4 C0E0      1985            push    acc
08B6 120100    1986            lcall   _printf
08B9 1581      1987            dec     sp
08BB 1581      1988            dec     sp
08BD 1581      1989            dec     sp
08BF           1990   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:345: pwm_left          = 100;
08BF 75F064    1991            mov     _pwm_left,#0x64
08C2           1992   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:346: pwm_right         =  20; 
08C2 75B014    1993            mov     _pwm_right,#0x14
08C5           1994   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:347: case 3:
08C5           1995   L017025?:
08C5           1996   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:348: printf("TURNING Right \r;");
08C5 7448      1997            mov     a,#__str_4
08C7 C0E0      1998            push    acc
08C9 74BA      1999            mov     a,#(__str_4 >> 8)
08CB C0E0      2000            push    acc
08CD 7480      2001            mov     a,#0x80
08CF C0E0      2002            push    acc
08D1 120100    2003            lcall   _printf
08D4 1581      2004            dec     sp
08D6 1581      2005            dec     sp
08D8 1581      2006            dec     sp
08DA           2007   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:349: pwm_left          = 20;
08DA 75F014    2008            mov     _pwm_left,#0x14
08DD           2009   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:350: pwm_right         =  100;
08DD 75B064    2010            mov     _pwm_right,#0x64
08E0           2011   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:351: case 4:
08E0           2012   L017026?:
08E0           2013   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:352: printf("Starting \r;");
08E0 7488      2014            mov     a,#__str_5
08E2 C0E0      2015            push    acc
08E4 74BA      2016            mov     a,#(__str_5 >> 8)
08E6 C0E0      2017            push    acc
08E8 7480      2018            mov     a,#0x80
08EA C0E0      2019            push    acc
08EC 120100    2020            lcall   _printf
08EF 1581      2021            dec     sp
08F1 1581      2022            dec     sp
08F3 1581      2023            dec     sp
08F5           2024   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:354: pwm_left = 100;
08F5 75F064    2025            mov     _pwm_left,#0x64
08F8           2026   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:355: pwm_right = 100;
08F8 75B064    2027            mov     _pwm_right,#0x64
08FB           2028   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:361: }
08FB           2029   L017030?:
08FB           2030   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:362: exec=0;
08FB           2031   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:363: line_counter = 0;
08FB E4        2032            clr     a
08FC F568      2033            mov     _main_exec_1_96,a
08FE F569      2034            mov     (_main_exec_1_96 + 1),a
0900 F528      2035            mov     _main_line_counter_1_96,a
0902 F529      2036            mov     (_main_line_counter_1_96 + 1),a
0904           2037   L017032?:
0904           2038   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:365: printf("line counter: %d", line_counter);
0904 C028      2039            push    _main_line_counter_1_96
0906 C029      2040            push    (_main_line_counter_1_96 + 1)
0908 74C8      2041            mov     a,#__str_6
090A C0E0      2042            push    acc
090C 74BA      2043            mov     a,#(__str_6 >> 8)
090E C0E0      2044            push    acc
0910 7480      2045            mov     a,#0x80
0912 C0E0      2046            push    acc
0914 120100    2047            lcall   _printf
0917 E581      2048            mov     a,sp
0919 24FB      2049            add     a,#0xfb
091B F581      2050            mov     sp,a
091D 020100    2051            ljmp    L017036?
0920           2052            rseg R_CSEG
0920           2053   
0000           2054            rseg R_XINIT
0000           2055   
0000           2056            rseg R_CONST
0000           2057   __str_0:
0000 563D2535  2058            db 'V=%5.2f L:%5.2f'
     2E326620
     4C3A2535
     2E3266
000F 00        2059            db 0x00
0010           2060   __str_1:
0010 25303264  2061            db '%02d:%02d R: %5.2f '
     3A253032
     6420523A
     2025352E
     326620
0023 00        2062            db 0x00
0024           2063   __str_2:
0024 4572726F  2064            db 'Error:%5.2f Left:%5.2f Right:%5.2f Left_Motor:%d Right_Motor'
     723A2535
     2E326620
     4C656674
     3A25352E
     32662052
     69676874
     3A25352E
     3266204C
     6566745F
     4D6F746F
     723A2564
     20526967
     68745F4D
     6F746F72
0060 3A256420  2065            db ':%d                '
     20202020
     20202020
     20202020
     202020
0073 0D        2066            db 0x0D
0074 00        2067            db 0x00
0075           2068   __str_3:
0075 5455524E  2069            db 'TURNING LEFT '
     494E4720
     4C454654
     20
0082 0D        2070            db 0x0D
0083 3B        2071            db ';'
0084 00        2072            db 0x00
0085           2073   __str_4:
0085 5455524E  2074            db 'TURNING Right '
     494E4720
     52696768
     7420
0093 0D        2075            db 0x0D
0094 3B        2076            db ';'
0095 00        2077            db 0x00
0096           2078   __str_5:
0096 53746172  2079            db 'Starting '
     74696E67
     20
009F 0D        2080            db 0x0D
00A0 3B        2081            db ';'
00A1 00        2082            db 0x00
00A2           2083   __str_6:
00A2 6C696E65  2084            db 'line counter: %d'
     20636F75
     6E746572
     3A202564
00B2 00        2085            db 0x00
00B3           2086   
000E           2087            CSEG
000E           2088   
000E           2089   end
