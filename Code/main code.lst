0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Dec 11 2012) (MSVC)
0000              4   ; This file was generated Sun Mar 22 13:58:01 2015
0000              5   ;--------------------------------------------------------
                  5   $name main_code
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _display_LCD
0000             29            public _Timer0ISR
0000             30            public _InitTimer0
0000             31            public _InitADC
0000             32            public _InitSerialPort
0000             33            public _Wait1S
0000             34            public _LCDprint
0000             35            public _LCD_8BIT
0000             36            public _WriteCommand
0000             37            public _WriteData
0000             38            public _LCD_byte
0000             39            public _LCD_pulse
0000             40            public _waitms
0000             41            public _Wait50us
0000             42            public _InitPorts
0000             43            public _LCDprint_PARM_3
0000             44            public _line_counter_flag
0000             45            public _time_update_flag
0000             46            public _LCDprint_PARM_2
0000             47            public _line_timer
0000             48            public _pwm_right
0000             49            public _pwm_left
0000             50            public _pwmcount
0000             51            public _mins
0000             52            public _secs
0000             53            public _msCount
0000             54   ;--------------------------------------------------------
0000             55   ; Special Function Registers
0000             56   ;--------------------------------------------------------
0000             57   _ACC            DATA 0xe0
0000             58   _ADCON0         DATA 0x8e
0000             59   _ADCON1         DATA 0x97
0000             60   _ADINS          DATA 0xa3
0000             61   _ADMODA         DATA 0xc0
0000             62   _ADMODB         DATA 0xa1
0000             63   _AD0BH          DATA 0xbb
0000             64   _AD0BL          DATA 0xa6
0000             65   _AD0DAT0        DATA 0xc5
0000             66   _AD0DAT1        DATA 0xc6
0000             67   _AD0DAT2        DATA 0xc7
0000             68   _AD0DAT3        DATA 0xf4
0000             69   _AD1BH          DATA 0xc4
0000             70   _AD1BL          DATA 0xbc
0000             71   _AD1DAT0        DATA 0xd5
0000             72   _AD1DAT1        DATA 0xd6
0000             73   _AD1DAT2        DATA 0xd7
0000             74   _AD1DAT3        DATA 0xf5
0000             75   _AUXR1          DATA 0xa2
0000             76   _B              DATA 0xf0
0000             77   _BRGR0          DATA 0xbe
0000             78   _BRGR1          DATA 0xbf
0000             79   _BRGCON         DATA 0xbd
0000             80   _CCCRA          DATA 0xea
0000             81   _CCCRB          DATA 0xeb
0000             82   _CCCRC          DATA 0xec
0000             83   _CCCRD          DATA 0xed
0000             84   _CMP1           DATA 0xac
0000             85   _CMP2           DATA 0xad
0000             86   _DEECON         DATA 0xf1
0000             87   _DEEDAT         DATA 0xf2
0000             88   _DEEADR         DATA 0xf3
0000             89   _DIVM           DATA 0x95
0000             90   _DPH            DATA 0x83
0000             91   _DPL            DATA 0x82
0000             92   _FMADRH         DATA 0xe7
0000             93   _FMADRL         DATA 0xe6
0000             94   _FMCON          DATA 0xe4
0000             95   _FMDATA         DATA 0xe5
0000             96   _I2ADR          DATA 0xdb
0000             97   _I2CON          DATA 0xd8
0000             98   _I2DAT          DATA 0xda
0000             99   _I2SCLH         DATA 0xdd
0000            100   _I2SCLL         DATA 0xdc
0000            101   _I2STAT         DATA 0xd9
0000            102   _ICRAH          DATA 0xab
0000            103   _ICRAL          DATA 0xaa
0000            104   _ICRBH          DATA 0xaf
0000            105   _ICRBL          DATA 0xae
0000            106   _IEN0           DATA 0xa8
0000            107   _IEN1           DATA 0xe8
0000            108   _IP0            DATA 0xb8
0000            109   _IP0H           DATA 0xb7
0000            110   _IP1            DATA 0xf8
0000            111   _IP1H           DATA 0xf7
0000            112   _KBCON          DATA 0x94
0000            113   _KBMASK         DATA 0x86
0000            114   _KBPATN         DATA 0x93
0000            115   _OCRAH          DATA 0xef
0000            116   _OCRAL          DATA 0xee
0000            117   _OCRBH          DATA 0xfb
0000            118   _OCRBL          DATA 0xfa
0000            119   _OCRCH          DATA 0xfd
0000            120   _OCRCL          DATA 0xfc
0000            121   _OCRDH          DATA 0xff
0000            122   _OCRDL          DATA 0xfe
0000            123   _P0             DATA 0x80
0000            124   _P1             DATA 0x90
0000            125   _P2             DATA 0xa0
0000            126   _P3             DATA 0xb0
0000            127   _P0M1           DATA 0x84
0000            128   _P0M2           DATA 0x85
0000            129   _P1M1           DATA 0x91
0000            130   _P1M2           DATA 0x92
0000            131   _P2M1           DATA 0xa4
0000            132   _P2M2           DATA 0xa5
0000            133   _P3M1           DATA 0xb1
0000            134   _P3M2           DATA 0xb2
0000            135   _PCON           DATA 0x87
0000            136   _PCONA          DATA 0xb5
0000            137   _PSW            DATA 0xd0
0000            138   _PT0AD          DATA 0xf6
0000            139   _RSTSRC         DATA 0xdf
0000            140   _RTCCON         DATA 0xd1
0000            141   _RTCH           DATA 0xd2
0000            142   _RTCL           DATA 0xd3
0000            143   _SADDR          DATA 0xa9
0000            144   _SADEN          DATA 0xb9
0000            145   _SBUF           DATA 0x99
0000            146   _SCON           DATA 0x98
0000            147   _SSTAT          DATA 0xba
0000            148   _SP             DATA 0x81
0000            149   _SPCTL          DATA 0xe2
0000            150   _SPSTAT         DATA 0xe1
0000            151   _SPDAT          DATA 0xe3
0000            152   _TAMOD          DATA 0x8f
0000            153   _TCON           DATA 0x88
0000            154   _TCR20          DATA 0xc8
0000            155   _TCR21          DATA 0xf9
0000            156   _TH0            DATA 0x8c
0000            157   _TH1            DATA 0x8d
0000            158   _TH2            DATA 0xcd
0000            159   _TICR2          DATA 0xc9
0000            160   _TIFR2          DATA 0xe9
0000            161   _TISE2          DATA 0xde
0000            162   _TL0            DATA 0x8a
0000            163   _TL1            DATA 0x8b
0000            164   _TL2            DATA 0xcc
0000            165   _TMOD           DATA 0x89
0000            166   _TOR2H          DATA 0xcf
0000            167   _TOR2L          DATA 0xce
0000            168   _TPCR2H         DATA 0xcb
0000            169   _TPCR2L         DATA 0xca
0000            170   _TRIM           DATA 0x96
0000            171   _WDCON          DATA 0xa7
0000            172   _WDL            DATA 0xc1
0000            173   _WFEED1         DATA 0xc2
0000            174   _WFEED2         DATA 0xc3
0000            175   ;--------------------------------------------------------
0000            176   ; special function bits
0000            177   ;--------------------------------------------------------
0000            178   _ACC_7          BIT 0xe7
0000            179   _ACC_6          BIT 0xe6
0000            180   _ACC_5          BIT 0xe5
0000            181   _ACC_4          BIT 0xe4
0000            182   _ACC_3          BIT 0xe3
0000            183   _ACC_2          BIT 0xe2
0000            184   _ACC_1          BIT 0xe1
0000            185   _ACC_0          BIT 0xe0
0000            186   _ADMODA_7       BIT 0xc7
0000            187   _ADMODA_6       BIT 0xc6
0000            188   _ADMODA_5       BIT 0xc5
0000            189   _ADMODA_4       BIT 0xc4
0000            190   _ADMODA_3       BIT 0xc3
0000            191   _ADMODA_2       BIT 0xc2
0000            192   _ADMODA_1       BIT 0xc1
0000            193   _ADMODA_0       BIT 0xc0
0000            194   _BNDI1          BIT 0xc7
0000            195   _BURST1         BIT 0xc6
0000            196   _SCC1           BIT 0xc5
0000            197   _SCAN1          BIT 0xc4
0000            198   _BNDI0          BIT 0xc3
0000            199   _BURST0         BIT 0xc2
0000            200   _SCC0           BIT 0xc1
0000            201   _SCAN0          BIT 0xc0
0000            202   _B_7            BIT 0xf7
0000            203   _B_6            BIT 0xf6
0000            204   _B_5            BIT 0xf5
0000            205   _B_4            BIT 0xf4
0000            206   _B_3            BIT 0xf3
0000            207   _B_2            BIT 0xf2
0000            208   _B_1            BIT 0xf1
0000            209   _B_0            BIT 0xf0
0000            210   _I2CON_7        BIT 0xdf
0000            211   _I2CON_6        BIT 0xde
0000            212   _I2CON_5        BIT 0xdd
0000            213   _I2CON_4        BIT 0xdc
0000            214   _I2CON_3        BIT 0xdb
0000            215   _I2CON_2        BIT 0xda
0000            216   _I2CON_1        BIT 0xd9
0000            217   _I2CON_0        BIT 0xd8
0000            218   _I2EN           BIT 0xde
0000            219   _STA            BIT 0xdd
0000            220   _STO            BIT 0xdc
0000            221   _SI             BIT 0xdb
0000            222   _AA             BIT 0xda
0000            223   _CRSEL          BIT 0xd8
0000            224   _IEN0_7         BIT 0xaf
0000            225   _IEN0_6         BIT 0xae
0000            226   _IEN0_5         BIT 0xad
0000            227   _IEN0_4         BIT 0xac
0000            228   _IEN0_3         BIT 0xab
0000            229   _IEN0_2         BIT 0xaa
0000            230   _IEN0_1         BIT 0xa9
0000            231   _IEN0_0         BIT 0xa8
0000            232   _EA             BIT 0xaf
0000            233   _EWDRT          BIT 0xae
0000            234   _EBO            BIT 0xad
0000            235   _ES             BIT 0xac
0000            236   _ESR            BIT 0xac
0000            237   _ET1            BIT 0xab
0000            238   _EX1            BIT 0xaa
0000            239   _ET0            BIT 0xa9
0000            240   _EX0            BIT 0xa8
0000            241   _IEN1_7         BIT 0xef
0000            242   _IEN1_6         BIT 0xee
0000            243   _IEN1_5         BIT 0xed
0000            244   _IEN1_4         BIT 0xec
0000            245   _IEN1_3         BIT 0xeb
0000            246   _IEN1_2         BIT 0xea
0000            247   _IEN1_1         BIT 0xe9
0000            248   _IEN1_0         BIT 0xe8
0000            249   _EADEE          BIT 0xef
0000            250   _EST            BIT 0xee
0000            251   _ECCU           BIT 0xec
0000            252   _ESPI           BIT 0xeb
0000            253   _EC             BIT 0xea
0000            254   _EKBI           BIT 0xe9
0000            255   _EI2C           BIT 0xe8
0000            256   _IP0_7          BIT 0xbf
0000            257   _IP0_6          BIT 0xbe
0000            258   _IP0_5          BIT 0xbd
0000            259   _IP0_4          BIT 0xbc
0000            260   _IP0_3          BIT 0xbb
0000            261   _IP0_2          BIT 0xba
0000            262   _IP0_1          BIT 0xb9
0000            263   _IP0_0          BIT 0xb8
0000            264   _PWDRT          BIT 0xbe
0000            265   _PBO            BIT 0xbd
0000            266   _PS             BIT 0xbc
0000            267   _PSR            BIT 0xbc
0000            268   _PT1            BIT 0xbb
0000            269   _PX1            BIT 0xba
0000            270   _PT0            BIT 0xb9
0000            271   _PX0            BIT 0xb8
0000            272   _IP1_7          BIT 0xff
0000            273   _IP1_6          BIT 0xfe
0000            274   _IP1_5          BIT 0xfd
0000            275   _IP1_4          BIT 0xfc
0000            276   _IP1_3          BIT 0xfb
0000            277   _IP1_2          BIT 0xfa
0000            278   _IP1_1          BIT 0xf9
0000            279   _IP1_0          BIT 0xf8
0000            280   _PADEE          BIT 0xff
0000            281   _PST            BIT 0xfe
0000            282   _PCCU           BIT 0xfc
0000            283   _PSPI           BIT 0xfb
0000            284   _PC             BIT 0xfa
0000            285   _PKBI           BIT 0xf9
0000            286   _PI2C           BIT 0xf8
0000            287   _P0_7           BIT 0x87
0000            288   _P0_6           BIT 0x86
0000            289   _P0_5           BIT 0x85
0000            290   _P0_4           BIT 0x84
0000            291   _P0_3           BIT 0x83
0000            292   _P0_2           BIT 0x82
0000            293   _P0_1           BIT 0x81
0000            294   _P0_0           BIT 0x80
0000            295   _T1             BIT 0x87
0000            296   _KB7            BIT 0x87
0000            297   _CMP_1          BIT 0x86
0000            298   _KB6            BIT 0x86
0000            299   _CMPREF         BIT 0x85
0000            300   _KB5            BIT 0x85
0000            301   _CIN1A          BIT 0x84
0000            302   _KB4            BIT 0x84
0000            303   _CIN1B          BIT 0x83
0000            304   _KB3            BIT 0x83
0000            305   _CIN2A          BIT 0x82
0000            306   _KB2            BIT 0x82
0000            307   _CIN2B          BIT 0x81
0000            308   _KB1            BIT 0x81
0000            309   _CMP_2          BIT 0x80
0000            310   _KB0            BIT 0x80
0000            311   _P1_7           BIT 0x97
0000            312   _P1_6           BIT 0x96
0000            313   _P1_5           BIT 0x95
0000            314   _P1_4           BIT 0x94
0000            315   _P1_3           BIT 0x93
0000            316   _P1_2           BIT 0x92
0000            317   _P1_1           BIT 0x91
0000            318   _P1_0           BIT 0x90
0000            319   _OCC            BIT 0x97
0000            320   _OCB            BIT 0x96
0000            321   _RST            BIT 0x95
0000            322   _INT1           BIT 0x94
0000            323   _INT0           BIT 0x93
0000            324   _SDA            BIT 0x93
0000            325   _T0             BIT 0x92
0000            326   _SCL            BIT 0x92
0000            327   _RXD            BIT 0x91
0000            328   _TXD            BIT 0x90
0000            329   _P2_7           BIT 0xa7
0000            330   _P2_6           BIT 0xa6
0000            331   _P2_5           BIT 0xa5
0000            332   _P2_4           BIT 0xa4
0000            333   _P2_3           BIT 0xa3
0000            334   _P2_2           BIT 0xa2
0000            335   _P2_1           BIT 0xa1
0000            336   _P2_0           BIT 0xa0
0000            337   _ICA            BIT 0xa7
0000            338   _OCA            BIT 0xa6
0000            339   _SPICLK         BIT 0xa5
0000            340   _SS             BIT 0xa4
0000            341   _MISO           BIT 0xa3
0000            342   _MOSI           BIT 0xa2
0000            343   _OCD            BIT 0xa1
0000            344   _ICB            BIT 0xa0
0000            345   _P3_7           BIT 0xb7
0000            346   _P3_6           BIT 0xb6
0000            347   _P3_5           BIT 0xb5
0000            348   _P3_4           BIT 0xb4
0000            349   _P3_3           BIT 0xb3
0000            350   _P3_2           BIT 0xb2
0000            351   _P3_1           BIT 0xb1
0000            352   _P3_0           BIT 0xb0
0000            353   _XTAL1          BIT 0xb1
0000            354   _XTAL2          BIT 0xb0
0000            355   _PSW_7          BIT 0xd7
0000            356   _PSW_6          BIT 0xd6
0000            357   _PSW_5          BIT 0xd5
0000            358   _PSW_4          BIT 0xd4
0000            359   _PSW_3          BIT 0xd3
0000            360   _PSW_2          BIT 0xd2
0000            361   _PSW_1          BIT 0xd1
0000            362   _PSW_0          BIT 0xd0
0000            363   _CY             BIT 0xd7
0000            364   _AC             BIT 0xd6
0000            365   _F0             BIT 0xd5
0000            366   _RS1            BIT 0xd4
0000            367   _RS0            BIT 0xd3
0000            368   _OV             BIT 0xd2
0000            369   _F1             BIT 0xd1
0000            370   _P              BIT 0xd0
0000            371   _SCON_7         BIT 0x9f
0000            372   _SCON_6         BIT 0x9e
0000            373   _SCON_5         BIT 0x9d
0000            374   _SCON_4         BIT 0x9c
0000            375   _SCON_3         BIT 0x9b
0000            376   _SCON_2         BIT 0x9a
0000            377   _SCON_1         BIT 0x99
0000            378   _SCON_0         BIT 0x98
0000            379   _SM0            BIT 0x9f
0000            380   _FE             BIT 0x9f
0000            381   _SM1            BIT 0x9e
0000            382   _SM2            BIT 0x9d
0000            383   _REN            BIT 0x9c
0000            384   _TB8            BIT 0x9b
0000            385   _RB8            BIT 0x9a
0000            386   _TI             BIT 0x99
0000            387   _RI             BIT 0x98
0000            388   _TCON_7         BIT 0x8f
0000            389   _TCON_6         BIT 0x8e
0000            390   _TCON_5         BIT 0x8d
0000            391   _TCON_4         BIT 0x8c
0000            392   _TCON_3         BIT 0x8b
0000            393   _TCON_2         BIT 0x8a
0000            394   _TCON_1         BIT 0x89
0000            395   _TCON_0         BIT 0x88
0000            396   _TF1            BIT 0x8f
0000            397   _TR1            BIT 0x8e
0000            398   _TF0            BIT 0x8d
0000            399   _TR0            BIT 0x8c
0000            400   _IE1            BIT 0x8b
0000            401   _IT1            BIT 0x8a
0000            402   _IE0            BIT 0x89
0000            403   _IT0            BIT 0x88
0000            404   _TCR20_7        BIT 0xcf
0000            405   _TCR20_6        BIT 0xce
0000            406   _TCR20_5        BIT 0xcd
0000            407   _TCR20_4        BIT 0xcc
0000            408   _TCR20_3        BIT 0xcb
0000            409   _TCR20_2        BIT 0xca
0000            410   _TCR20_1        BIT 0xc9
0000            411   _TCR20_0        BIT 0xc8
0000            412   _PLEEN          BIT 0xcf
0000            413   _HLTRN          BIT 0xce
0000            414   _HLTEN          BIT 0xcd
0000            415   _ALTCD          BIT 0xcc
0000            416   _ALTAB          BIT 0xcb
0000            417   _TDIR2          BIT 0xca
0000            418   _TMOD21         BIT 0xc9
0000            419   _TMOD20         BIT 0xc8
0000            420   ;--------------------------------------------------------
0000            421   ; overlayable register banks
0000            422   ;--------------------------------------------------------
0000            423            rbank0 segment data overlay
0000            424   ;--------------------------------------------------------
0000            425   ; internal ram data
0000            426   ;--------------------------------------------------------
0000            427            rseg R_DSEG
0000            428   _msCount:
0000            429            ds 2
0002            430   _secs:
0002            431            ds 1
0003            432   _mins:
0003            433            ds 1
0004            434   _pwmcount:
0004            435            ds 1
0005            436   _pwm_left:
0005            437            ds 1
0006            438   _pwm_right:
0006            439            ds 1
0007            440   _line_timer:
0007            441            ds 2
0009            442   _LCDprint_PARM_2:
0009            443            ds 1
000A            444   _display_LCD_buff_1_94:
000A            445            ds 17
001B            446   _main_cor_1_96:
001B            447            ds 4
001F            448   _main_cur_error_1_96:
001F            449            ds 4
0023            450   _main_pre_error_1_96:
0023            451            ds 4
0027            452   _main_line_counter_1_96:
0027            453            ds 2
0029            454   _main_exec_1_96:
0029            455            ds 2
002B            456   _main_left_1_96:
002B            457            ds 4
002F            458   _main_right_1_96:
002F            459            ds 4
0033            460   _main_line_sensor_1_96:
0033            461            ds 4
0037            462   _main_diff_1_96:
0037            463            ds 4
003B            464   ;--------------------------------------------------------
003B            465   ; overlayable items in internal ram 
003B            466   ;--------------------------------------------------------
0000            467            rseg R_OSEG
0000            468   ;--------------------------------------------------------
0000            469   ; indirectly addressable internal ram data
0000            470   ;--------------------------------------------------------
0000            471            rseg R_ISEG
0000            472   ;--------------------------------------------------------
0000            473   ; absolute internal ram data
0000            474   ;--------------------------------------------------------
0000            475            DSEG
0000            476   ;--------------------------------------------------------
0000            477   ; bit data
0000            478   ;--------------------------------------------------------
0000            479            rseg R_BSEG
0000            480   _time_update_flag:
0000            481            DBIT    1
0001            482   _line_counter_flag:
0001            483            DBIT    1
0002            484   _LCDprint_PARM_3:
0002            485            DBIT    1
0003            486   ;--------------------------------------------------------
0003            487   ; paged external ram data
0003            488   ;--------------------------------------------------------
0000            489            rseg R_PSEG
0000            490   ;--------------------------------------------------------
0000            491   ; external ram data
0000            492   ;--------------------------------------------------------
0000            493            rseg R_XSEG
FFC8            494            XSEG at 0xffc8
FFC8            495   _BODCFG: ds 1
FFC9            496            public _BODCFG
0000            497            rseg R_XSEG
FFDE            498            XSEG at 0xffde
FFDE            499   _CLKCON: ds 1
FFDF            500            public _CLKCON
0000            501            rseg R_XSEG
FFE1            502            XSEG at 0xffe1
FFE1            503   _PGACON1: ds 1
FFE2            504            public _PGACON1
0000            505            rseg R_XSEG
FFE4            506            XSEG at 0xffe4
FFE4            507   _PGACON1B: ds 1
FFE5            508            public _PGACON1B
0000            509            rseg R_XSEG
FFE3            510            XSEG at 0xffe3
FFE3            511   _PGA1TRIM8X16X: ds 1
FFE4            512            public _PGA1TRIM8X16X
0000            513            rseg R_XSEG
FFE2            514            XSEG at 0xffe2
FFE2            515   _PGA1TRIM2X4X: ds 1
FFE3            516            public _PGA1TRIM2X4X
0000            517            rseg R_XSEG
FFCA            518            XSEG at 0xffca
FFCA            519   _PGACON0: ds 1
FFCB            520            public _PGACON0
0000            521            rseg R_XSEG
FFCE            522            XSEG at 0xffce
FFCE            523   _PGACON0B: ds 1
FFCF            524            public _PGACON0B
0000            525            rseg R_XSEG
FFCD            526            XSEG at 0xffcd
FFCD            527   _PGA0TRIM8X16X: ds 1
FFCE            528            public _PGA0TRIM8X16X
0000            529            rseg R_XSEG
FFCC            530            XSEG at 0xffcc
FFCC            531   _PGA0TRIM2X4X: ds 1
FFCD            532            public _PGA0TRIM2X4X
0000            533            rseg R_XSEG
FFBF            534            XSEG at 0xffbf
FFBF            535   _RTCDATH: ds 1
FFC0            536            public _RTCDATH
0000            537            rseg R_XSEG
FFBE            538            XSEG at 0xffbe
FFBE            539   _RTCDATL: ds 1
FFBF            540            public _RTCDATL
0000            541            rseg R_XSEG
0000            542   ;--------------------------------------------------------
0000            543   ; absolute external ram data
0000            544   ;--------------------------------------------------------
FFBF            545            XSEG
FFBF            546   ;--------------------------------------------------------
FFBF            547   ; external initialized ram data
FFBF            548   ;--------------------------------------------------------
0000            549            rseg R_IXSEG
0000            550            rseg R_HOME
0000            551            rseg R_GSINIT
0000            552            rseg R_CSEG
0000            553   ;--------------------------------------------------------
0000            554   ; Reset entry point and interrupt vectors
0000            555   ;--------------------------------------------------------
0000            556            CSEG at 0x0000
0000 020100     557            ljmp    _crt0
000B            558            CSEG at 0x000b
000B 020100     559            ljmp    _Timer0ISR
000E            560   ;--------------------------------------------------------
000E            561   ; global & static initialisations
000E            562   ;--------------------------------------------------------
0000            563            rseg R_HOME
0000            564            rseg R_GSINIT
0000            565            rseg R_GSINIT
0000            566   ;--------------------------------------------------------
0000            567   ; data variables initialization
0000            568   ;--------------------------------------------------------
0000            569            rseg R_DINIT
0000            570   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:33: volatile int msCount=0; // Volatiles can be changed by stuff outside our program, like memory registers
0000 E4         571            clr     a
0001 F5F0       572            mov     _msCount,a
0003 F5F1       573            mov     (_msCount + 1),a
0005            574   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:34: volatile unsigned char secs=0, mins=0; // They are like global variables, kinda 
0005 75B000     575            mov     _secs,#0x00
0008            576   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:34: volatile bit time_update_flag=0;
0008 757000     577            mov     _mins,#0x00
000B            578   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:40: volatile int line_timer = 0;
000B E4         579            clr     a
000C F570       580            mov     _line_timer,a
000E F571       581            mov     (_line_timer + 1),a
0010            582   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:35: volatile bit time_update_flag=0;
0010 C2E0       583            clr     _time_update_flag
0012            584   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:36: volatile bit line_counter_flag=0;
0012 C290       585            clr     _line_counter_flag
0014            586            ; The linker places a 'ret' at the end of segment R_DINIT.
0014            587   ;--------------------------------------------------------
0014            588   ; code
0014            589   ;--------------------------------------------------------
0000            590            rseg R_CSEG
0000            591   ;------------------------------------------------------------
0000            592   ;Allocation info for local variables in function 'InitPorts'
0000            593   ;------------------------------------------------------------
0000            594   ;------------------------------------------------------------
0000            595   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:42: void InitPorts(void)
0000            596   ;        -----------------------------------------
0000            597   ;         function InitPorts
0000            598   ;        -----------------------------------------
0000            599   _InitPorts:
0000            600            using   0
0000            601   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:44: P0M1=0x1E;
0000 75841E     602            mov     _P0M1,#0x1E
0003            603   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:45: P0M2=0x00;
0003 758500     604            mov     _P0M2,#0x00
0006            605   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:46: P1M1=0;
0006 759100     606            mov     _P1M1,#0x00
0009            607   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:47: P1M2=0;
0009 759200     608            mov     _P1M2,#0x00
000C            609   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:48: P2M1=0;
000C 75A400     610            mov     _P2M1,#0x00
000F            611   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:49: P2M2=0;
000F 75A500     612            mov     _P2M2,#0x00
0012            613   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:50: P3M1=0;
0012 75B100     614            mov     _P3M1,#0x00
0015            615   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:51: P3M2=0;
0015 75B200     616            mov     _P3M2,#0x00
0018 22         617            ret
0019            618   ;------------------------------------------------------------
0019            619   ;Allocation info for local variables in function 'Wait50us'
0019            620   ;------------------------------------------------------------
0019            621   ;------------------------------------------------------------
0019            622   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:54: void Wait50us (void)
0019            623   ;        -----------------------------------------
0019            624   ;         function Wait50us
0019            625   ;        -----------------------------------------
0019            626   _Wait50us:
0019            627   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:59: _endasm;
0019            628            
0019 7852       629             mov R0, #82
001B            630             L0:
001B D808       631            djnz R0, L0 ; 2 machine cycles-> 2*0.27126us*92=50us
001D            632             
001D 22         633            ret
001E            634   ;------------------------------------------------------------
001E            635   ;Allocation info for local variables in function 'waitms'
001E            636   ;------------------------------------------------------------
001E            637   ;ms                        Allocated to registers r2 r3 
001E            638   ;j                         Allocated to registers r4 r5 
001E            639   ;k                         Allocated to registers r6 
001E            640   ;------------------------------------------------------------
001E            641   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:62: void waitms (unsigned int ms)
001E            642   ;        -----------------------------------------
001E            643   ;         function waitms
001E            644   ;        -----------------------------------------
001E            645   _waitms:
001E AA82       646            mov     r2,dpl
0020 AB83       647            mov     r3,dph
0022            648   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:68: for(j=0; j<ms; j++)
0022 7C00       649            mov     r4,#0x00
0024 7D00       650            mov     r5,#0x00
0026            651   L004004?:
0026 C3         652            clr     c
0027 EC         653            mov     a,r4
0028 9A         654            subb    a,r2
0029 ED         655            mov     a,r5
002A 9B         656            subb    a,r3
002B 5001       657            jnc     L004008?
002D            658   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:69: for (k=0; k<20; k++) Wait50us();
002D 7E14       659            mov     r6,#0x14
002F            660   L004003?:
002F C002       661            push    ar2
0031 C003       662            push    ar3
0033 C004       663            push    ar4
0035 C005       664            push    ar5
0037 C006       665            push    ar6
0039 120100     666            lcall   _Wait50us
003C D006       667            pop     ar6
003E D005       668            pop     ar5
0040 D004       669            pop     ar4
0042 D003       670            pop     ar3
0044 D002       671            pop     ar2
0046 DE48       672            djnz    r6,L004003?
0048            673   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:68: for(j=0; j<ms; j++)
0048 0C         674            inc     r4
0049 BC00C8     675            cjne    r4,#0x00,L004004?
004C 0D         676            inc     r5
004D 8001       677            sjmp    L004004?
004F            678   L004008?:
004F 22         679            ret
0050            680   ;------------------------------------------------------------
0050            681   ;Allocation info for local variables in function 'LCD_pulse'
0050            682   ;------------------------------------------------------------
0050            683   ;------------------------------------------------------------
0050            684   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:72: void LCD_pulse (void)
0050            685   ;        -----------------------------------------
0050            686   ;         function LCD_pulse
0050            687   ;        -----------------------------------------
0050            688   _LCD_pulse:
0050            689   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:74: LCD_E=1;
0050 D2A5       690            setb    _P2_5
0052            691   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:75: Wait50us();
0052 120100     692            lcall   _Wait50us
0055            693   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:76: LCD_E=0;
0055 C2A5       694            clr     _P2_5
0057 22         695            ret
0058            696   ;------------------------------------------------------------
0058            697   ;Allocation info for local variables in function 'LCD_byte'
0058            698   ;------------------------------------------------------------
0058            699   ;x                         Allocated to registers 
0058            700   ;------------------------------------------------------------
0058            701   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:79: void LCD_byte (unsigned char x)
0058            702   ;        -----------------------------------------
0058            703   ;         function LCD_byte
0058            704   ;        -----------------------------------------
0058            705   _LCD_byte:
0058 8582E0     706            mov     _ACC,dpl
005B            707   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:83: LCD_D7=ACC_7;
005B A2E7       708            mov     c,_ACC_7
005D 9294       709            mov     _P1_4,c
005F            710   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:84: LCD_D6=ACC_6;
005F A2E6       711            mov     c,_ACC_6
0061 9296       712            mov     _P1_6,c
0063            713   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:85: LCD_D5=ACC_5;
0063 A2E5       714            mov     c,_ACC_5
0065 9297       715            mov     _P1_7,c
0067            716   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:86: LCD_D4=ACC_4;
0067 A2E4       717            mov     c,_ACC_4
0069 92A0       718            mov     _P2_0,c
006B            719   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:87: LCD_D3=ACC_3;
006B A2E3       720            mov     c,_ACC_3
006D 92A1       721            mov     _P2_1,c
006F            722   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:88: LCD_D2=ACC_2;
006F A2E2       723            mov     c,_ACC_2
0071 92A2       724            mov     _P2_2,c
0073            725   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:89: LCD_D1=ACC_1;
0073 A2E1       726            mov     c,_ACC_1
0075 92A3       727            mov     _P2_3,c
0077            728   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:90: LCD_D0=ACC_0;
0077 A2E0       729            mov     c,_ACC_0
0079 92A4       730            mov     _P2_4,c
007B            731   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:91: LCD_pulse();
007B 020100     732            ljmp    _LCD_pulse
007E            733   ;------------------------------------------------------------
007E            734   ;Allocation info for local variables in function 'WriteData'
007E            735   ;------------------------------------------------------------
007E            736   ;x                         Allocated to registers r2 
007E            737   ;------------------------------------------------------------
007E            738   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:94: void WriteData (unsigned char x)
007E            739   ;        -----------------------------------------
007E            740   ;         function WriteData
007E            741   ;        -----------------------------------------
007E            742   _WriteData:
007E AA82       743            mov     r2,dpl
0080            744   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:96: LCD_RS=1;
0080 D2A7       745            setb    _P2_7
0082            746   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:97: LCD_byte(x);
0082 8A82       747            mov     dpl,r2
0084 120100     748            lcall   _LCD_byte
0087            749   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:98: waitms(2);
0087 900002     750            mov     dptr,#0x0002
008A 020100     751            ljmp    _waitms
008D            752   ;------------------------------------------------------------
008D            753   ;Allocation info for local variables in function 'WriteCommand'
008D            754   ;------------------------------------------------------------
008D            755   ;x                         Allocated to registers r2 
008D            756   ;------------------------------------------------------------
008D            757   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:101: void WriteCommand (unsigned char x)
008D            758   ;        -----------------------------------------
008D            759   ;         function WriteCommand
008D            760   ;        -----------------------------------------
008D            761   _WriteCommand:
008D AA82       762            mov     r2,dpl
008F            763   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:103: LCD_RS=0;
008F C2A7       764            clr     _P2_7
0091            765   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:104: LCD_byte(x);
0091 8A82       766            mov     dpl,r2
0093 120100     767            lcall   _LCD_byte
0096            768   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:105: waitms(5);
0096 900005     769            mov     dptr,#0x0005
0099 020100     770            ljmp    _waitms
009C            771   ;------------------------------------------------------------
009C            772   ;Allocation info for local variables in function 'LCD_8BIT'
009C            773   ;------------------------------------------------------------
009C            774   ;------------------------------------------------------------
009C            775   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:108: void LCD_8BIT (void)
009C            776   ;        -----------------------------------------
009C            777   ;         function LCD_8BIT
009C            778   ;        -----------------------------------------
009C            779   _LCD_8BIT:
009C            780   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:110: LCD_E=0;  // Resting state of LCD's enable is zero
009C C2A5       781            clr     _P2_5
009E            782   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:111: LCD_RW=0; // We are only writing to the LCD in this program
009E C2A6       783            clr     _P2_6
00A0            784   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:112: waitms(20);
00A0 900014     785            mov     dptr,#0x0014
00A3 120100     786            lcall   _waitms
00A6            787   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:114: WriteCommand(0x33);
00A6 758233     788            mov     dpl,#0x33
00A9 120100     789            lcall   _WriteCommand
00AC            790   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:115: WriteCommand(0x33);
00AC 758233     791            mov     dpl,#0x33
00AF 120100     792            lcall   _WriteCommand
00B2            793   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:116: WriteCommand(0x33); // Stay in 8-bit mode
00B2 758233     794            mov     dpl,#0x33
00B5 120100     795            lcall   _WriteCommand
00B8            796   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:119: WriteCommand(0x38);
00B8 758238     797            mov     dpl,#0x38
00BB 120100     798            lcall   _WriteCommand
00BE            799   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:120: WriteCommand(0x0c);
00BE 75820C     800            mov     dpl,#0x0C
00C1 120100     801            lcall   _WriteCommand
00C4            802   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:121: WriteCommand(0x01); // Clear screen command (takes some time)
00C4 758201     803            mov     dpl,#0x01
00C7 120100     804            lcall   _WriteCommand
00CA            805   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:122: waitms(20); // Wait for clear screen command to finsih.
00CA 900014     806            mov     dptr,#0x0014
00CD 020100     807            ljmp    _waitms
00D0            808   ;------------------------------------------------------------
00D0            809   ;Allocation info for local variables in function 'LCDprint'
00D0            810   ;------------------------------------------------------------
00D0            811   ;line                      Allocated with name '_LCDprint_PARM_2'
00D0            812   ;string                    Allocated to registers r2 r3 r4 
00D0            813   ;j                         Allocated to registers r5 
00D0            814   ;------------------------------------------------------------
00D0            815   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:125: void LCDprint(char * string, unsigned char line, bit clear)
00D0            816   ;        -----------------------------------------
00D0            817   ;         function LCDprint
00D0            818   ;        -----------------------------------------
00D0            819   _LCDprint:
00D0 AA82       820            mov     r2,dpl
00D2 AB83       821            mov     r3,dph
00D4 ACF0       822            mov     r4,b
00D6            823   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:129: WriteCommand(line==2?0xc0:0x80);
00D6 7402       824            mov     a,#0x02
00D8 B530C8     825            cjne    a,_LCDprint_PARM_2,L010013?
00DB 7DC0       826            mov     r5,#0xC0
00DD 8001       827            sjmp    L010014?
00DF            828   L010013?:
00DF 7D80       829            mov     r5,#0x80
00E1            830   L010014?:
00E1 8D82       831            mov     dpl,r5
00E3 C002       832            push    ar2
00E5 C003       833            push    ar3
00E7 C004       834            push    ar4
00E9 120100     835            lcall   _WriteCommand
00EC            836   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:130: waitms(5);
00EC 900005     837            mov     dptr,#0x0005
00EF 120100     838            lcall   _waitms
00F2 D004       839            pop     ar4
00F4 D003       840            pop     ar3
00F6 D002       841            pop     ar2
00F8            842   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:131: for(j=0; string[j]!=0; j++)       WriteData(string[j]);// Write the message
00F8 7D00       843            mov     r5,#0x00
00FA            844   L010003?:
00FA ED         845            mov     a,r5
00FB 2A         846            add     a,r2
00FC FE         847            mov     r6,a
00FD E4         848            clr     a
00FE 3B         849            addc    a,r3
00FF FF         850            mov     r7,a
0100 8C00       851            mov     ar0,r4
0102 8E82       852            mov     dpl,r6
0104 8F83       853            mov     dph,r7
0106 88F0       854            mov     b,r0
0108 120100     855            lcall   __gptrget
010B FE         856            mov     r6,a
010C 6001       857            jz      L010006?
010E 8E82       858            mov     dpl,r6
0110 C002       859            push    ar2
0112 C003       860            push    ar3
0114 C004       861            push    ar4
0116 C005       862            push    ar5
0118 120100     863            lcall   _WriteData
011B D005       864            pop     ar5
011D D004       865            pop     ar4
011F D003       866            pop     ar3
0121 D002       867            pop     ar2
0123 0D         868            inc     r5
0124 8001       869            sjmp    L010003?
0126            870   L010006?:
0126            871   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:132: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0126 304008     872            jnb     _LCDprint_PARM_3,L010011?
0129 8D02       873            mov     ar2,r5
012B            874   L010007?:
012B BA1088     875            cjne    r2,#0x10,L010026?
012E            876   L010026?:
012E 5001       877            jnc     L010011?
0130 758220     878            mov     dpl,#0x20
0133 C002       879            push    ar2
0135 120100     880            lcall   _WriteData
0138 D002       881            pop     ar2
013A 0A         882            inc     r2
013B 8001       883            sjmp    L010007?
013D            884   L010011?:
013D 22         885            ret
013E            886   ;------------------------------------------------------------
013E            887   ;Allocation info for local variables in function 'Wait1S'
013E            888   ;------------------------------------------------------------
013E            889   ;------------------------------------------------------------
013E            890   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:135: void Wait1S (void)
013E            891   ;        -----------------------------------------
013E            892   ;         function Wait1S
013E            893   ;        -----------------------------------------
013E            894   _Wait1S:
013E            895   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:144: _endasm;
013E            896            
013E 7A28       897             mov R2, #40
0140            898             L3:
0140 79FA       899            mov R1, #250
0142            900             L2:
0142 78B8       901            mov R0, #184
0144            902             L1:
0144 D848       903            djnz R0, L1 ; 2 machine cycles-> 2*0.27126us*184=100us
0146 D908       904             djnz R1, L2 ; 100us*250=0.025s
0148 DAC8       905             djnz R2, L3 ; 0.025s*40=1s
014A            906             
014A 22         907            ret
014B            908   ;------------------------------------------------------------
014B            909   ;Allocation info for local variables in function 'InitSerialPort'
014B            910   ;------------------------------------------------------------
014B            911   ;------------------------------------------------------------
014B            912   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:147: void InitSerialPort(void)
014B            913   ;        -----------------------------------------
014B            914   ;         function InitSerialPort
014B            915   ;        -----------------------------------------
014B            916   _InitSerialPort:
014B            917   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:149: BRGCON=0x00; //Make sure the baud rate generator is off
014B 75BD00     918            mov     _BRGCON,#0x00
014E            919   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:150: BRGR1=((XTAL/BAUD)-16)/0x100;
014E 75BF00     920            mov     _BRGR1,#0x00
0151            921   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:151: BRGR0=((XTAL/BAUD)-16)%0x100;
0151 75BE30     922            mov     _BRGR0,#0x30
0154            923   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:152: BRGCON=0x03; //Turn-on the baud rate generator
0154 75BD03     924            mov     _BRGCON,#0x03
0157            925   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:153: SCON=0x52; //Serial port in mode 1, ren, txrdy, rxempty
0157 759852     926            mov     _SCON,#0x52
015A            927   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:154: P1M1=0x00; //Enable pins RxD and Txd
015A 759100     928            mov     _P1M1,#0x00
015D            929   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:155: P1M2=0x00; //Enable pins RxD and Txd
015D 759200     930            mov     _P1M2,#0x00
0160 22         931            ret
0161            932   ;------------------------------------------------------------
0161            933   ;Allocation info for local variables in function 'InitADC'
0161            934   ;------------------------------------------------------------
0161            935   ;------------------------------------------------------------
0161            936   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:158: void InitADC(void)
0161            937   ;        -----------------------------------------
0161            938   ;         function InitADC
0161            939   ;        -----------------------------------------
0161            940   _InitADC:
0161            941   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:162: P0M1 |= (P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0161 43841E     942            orl     _P0M1,#0x1E
0164            943   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:163: P0M2 &= ~(P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0164 5385E1     944            anl     _P0M2,#0xE1
0167            945   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:166: BURST1=1; //Autoscan continuous conversion mode
0167 D2C6       946            setb    _BURST1
0169            947   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:167: ADMODB = CLK0; //ADC1 clock is 7.3728MHz/2
0169 75A120     948            mov     _ADMODB,#0x20
016C            949   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:168: ADINS  = (ADI13|ADI12|ADI11|ADI10); // Select the four channels for conversion
016C 75A3F0     950            mov     _ADINS,#0xF0
016F            951   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:169: ADCON1 = (ENADC1|ADCS10); //Enable the converter and start immediately
016F 759705     952            mov     _ADCON1,#0x05
0172            953   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:170: while((ADCI1&ADCON1)==0); //Wait for first conversion to complete
0172            954   L013001?:
0172 E597       955            mov     a,_ADCON1
0174 30E388     956            jnb     acc.3,L013001?
0177 22         957            ret
0178            958   ;------------------------------------------------------------
0178            959   ;Allocation info for local variables in function 'InitTimer0'
0178            960   ;------------------------------------------------------------
0178            961   ;------------------------------------------------------------
0178            962   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:173: void InitTimer0 (void)
0178            963   ;        -----------------------------------------
0178            964   ;         function InitTimer0
0178            965   ;        -----------------------------------------
0178            966   _InitTimer0:
0178            967   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:177: TR0=0; // Stop timer 0
0178 C28C       968            clr     _TR0
017A            969   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:178: TMOD=(TMOD&0xf0)|0x01; // 16-bit timer
017A 74F0       970            mov     a,#0xF0
017C 5589       971            anl     a,_TMOD
017E 4401       972            orl     a,#0x01
0180 F589       973            mov     _TMOD,a
0182            974   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:179: TH0=TIMER0_RELOAD_VALUE/0x100; // I think the RHS is 0001 0000 0000, are we dividing?
0182 758CFE     975            mov     _TH0,#0xFE
0185            976   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:180: TL0=TIMER0_RELOAD_VALUE%0x100; // % means modulo, apparently? ...are we modulo-ing?
0185 758A90     977            mov     _TL0,#0x90
0188            978   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:181: TR0=1; // Start timer 0 (bit 4 in TCON)
0188 D28C       979            setb    _TR0
018A            980   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:182: ET0=1; // Enable timer 0 interrupt - the interrupt controller IEN0 is bit-adressable, so we change only the bit we need
018A D2A9       981            setb    _ET0
018C            982   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:183: EA=1;  // Enable global interrupts
018C D2AF       983            setb    _EA
018E 22         984            ret
018F            985   ;------------------------------------------------------------
018F            986   ;Allocation info for local variables in function 'Timer0ISR'
018F            987   ;------------------------------------------------------------
018F            988   ;------------------------------------------------------------
018F            989   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:187: void Timer0ISR (void) interrupt 1{
018F            990   ;        -----------------------------------------
018F            991   ;         function Timer0ISR
018F            992   ;        -----------------------------------------
018F            993   _Timer0ISR:
018F C0E0       994            push    acc
0191 C0D0       995            push    psw
0193 75D000     996            mov     psw,#0x00
0196            997   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:189: TR0=0; // Stop timer 0
0196 C28C       998            clr     _TR0
0198            999   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:190: TH0=TIMER0_RELOAD_VALUE/0x100;
0198 758CFE    1000            mov     _TH0,#0xFE
019B           1001   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:191: TL0=TIMER0_RELOAD_VALUE%0x100;
019B 758A90    1002            mov     _TL0,#0x90
019E           1003   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:192: TR0=1; // Start timer 0
019E D28C      1004            setb    _TR0
01A0           1005   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:194: if(++pwmcount>99) pwmcount=0;
01A0 0530      1006            inc     _pwmcount
01A2 E530      1007            mov     a,_pwmcount
01A4 249C      1008            add     a,#0xff - 0x63
01A6 5001      1009            jnc     L015002?
01A8 753000    1010            mov     _pwmcount,#0x00
01AB           1011   L015002?:
01AB           1012   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:195: P0_5=(pwm_left>pwmcount)?1:0;
01AB C3        1013            clr     c
01AC E530      1014            mov     a,_pwmcount
01AE 95F0      1015            subb    a,_pwm_left
01B0 9285      1016            mov     _P0_5,c
01B2           1017   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:196: P0_6=(pwm_right>pwmcount)?1:0;
01B2 C3        1018            clr     c
01B3 E530      1019            mov     a,_pwmcount
01B5 95B0      1020            subb    a,_pwm_right
01B7 9286      1021            mov     _P0_6,c
01B9           1022   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:198: msCount++;
01B9 7401      1023            mov     a,#0x01
01BB 25F0      1024            add     a,_msCount
01BD F5F0      1025            mov     _msCount,a
01BF E4        1026            clr     a
01C0 35F1      1027            addc    a,(_msCount + 1)
01C2 F5F1      1028            mov     (_msCount + 1),a
01C4           1029   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:199: if(msCount==10000)
01C4 7410      1030            mov     a,#0x10
01C6 B5F088    1031            cjne    a,_msCount,L015008?
01C9 7427      1032            mov     a,#0x27
01CB B5F188    1033            cjne    a,(_msCount + 1),L015008?
01CE           1034   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:201: time_update_flag=1;
01CE D2E0      1035            setb    _time_update_flag
01D0           1036   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:202: msCount=0;
01D0 E4        1037            clr     a
01D1 F5F0      1038            mov     _msCount,a
01D3 F5F1      1039            mov     (_msCount + 1),a
01D5           1040   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:203: secs++;
01D5 05B0      1041            inc     _secs
01D7           1042   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:204: if(secs==60)
01D7 743C      1043            mov     a,#0x3C
01D9 B5B088    1044            cjne    a,_secs,L015008?
01DC           1045   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:206: secs=0;
01DC 75B000    1046            mov     _secs,#0x00
01DF           1047   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:207: mins++;
01DF 0570      1048            inc     _mins
01E1           1049   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:208: if(mins==60)
01E1 743C      1050            mov     a,#0x3C
01E3 B57088    1051            cjne    a,_mins,L015008?
01E6           1052   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:210: mins=0;
01E6 757000    1053            mov     _mins,#0x00
01E9           1054   L015008?:
01E9           1055   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:215: if(line_counter_flag==1){
01E9 3090C8    1056            jnb     _line_counter_flag,L015011?
01EC           1057   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:216: line_timer++;
01EC 7401      1058            mov     a,#0x01
01EE 2570      1059            add     a,_line_timer
01F0 F570      1060            mov     _line_timer,a
01F2 E4        1061            clr     a
01F3 3571      1062            addc    a,(_line_timer + 1)
01F5 F571      1063            mov     (_line_timer + 1),a
01F7           1064   L015011?:
01F7 D0D0      1065            pop     psw
01F9 D0E0      1066            pop     acc
01FB 32        1067            reti
01FC           1068   ;        eliminated unneeded push/pop dpl
01FC           1069   ;        eliminated unneeded push/pop dph
01FC           1070   ;        eliminated unneeded push/pop b
01FC           1071   ;------------------------------------------------------------
01FC           1072   ;Allocation info for local variables in function 'display_LCD'
01FC           1073   ;------------------------------------------------------------
01FC           1074   ;buff                      Allocated with name '_display_LCD_buff_1_94'
01FC           1075   ;------------------------------------------------------------
01FC           1076   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:220: void display_LCD(void){
01FC           1077   ;        -----------------------------------------
01FC           1078   ;         function display_LCD
01FC           1079   ;        -----------------------------------------
01FC           1080   _display_LCD:
01FC           1081   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:223: time_update_flag=0;
01FC C2E0      1082            clr     _time_update_flag
01FE           1083   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:224: sprintf(buff, "V=%5.2f", (AD1DAT0/255.0)*3.3); // Display the voltage at pin P0.1
01FE 85D582    1084            mov     dpl,_AD1DAT0
0201 120100    1085            lcall   ___uchar2fs
0204 AA82      1086            mov     r2,dpl
0206 AB83      1087            mov     r3,dph
0208 ACF0      1088            mov     r4,b
020A FD        1089            mov     r5,a
020B E4        1090            clr     a
020C C0E0      1091            push    acc
020E C0E0      1092            push    acc
0210 747F      1093            mov     a,#0x7F
0212 C0E0      1094            push    acc
0214 7443      1095            mov     a,#0x43
0216 C0E0      1096            push    acc
0218 8A82      1097            mov     dpl,r2
021A 8B83      1098            mov     dph,r3
021C 8CF0      1099            mov     b,r4
021E ED        1100            mov     a,r5
021F 120100    1101            lcall   ___fsdiv
0222 AA82      1102            mov     r2,dpl
0224 AB83      1103            mov     r3,dph
0226 ACF0      1104            mov     r4,b
0228 FD        1105            mov     r5,a
0229 E581      1106            mov     a,sp
022B 24FC      1107            add     a,#0xfc
022D F581      1108            mov     sp,a
022F C002      1109            push    ar2
0231 C003      1110            push    ar3
0233 C004      1111            push    ar4
0235 C005      1112            push    ar5
0237 903333    1113            mov     dptr,#0x3333
023A 75F053    1114            mov     b,#0x53
023D 7440      1115            mov     a,#0x40
023F 120100    1116            lcall   ___fsmul
0242 AA82      1117            mov     r2,dpl
0244 AB83      1118            mov     r3,dph
0246 ACF0      1119            mov     r4,b
0248 FD        1120            mov     r5,a
0249 E581      1121            mov     a,sp
024B 24FC      1122            add     a,#0xfc
024D F581      1123            mov     sp,a
024F C002      1124            push    ar2
0251 C003      1125            push    ar3
0253 C004      1126            push    ar4
0255 C005      1127            push    ar5
0257 7408      1128            mov     a,#__str_0
0259 C0E0      1129            push    acc
025B 74B1      1130            mov     a,#(__str_0 >> 8)
025D C0E0      1131            push    acc
025F 7480      1132            mov     a,#0x80
0261 C0E0      1133            push    acc
0263 74F8      1134            mov     a,#_display_LCD_buff_1_94
0265 C0E0      1135            push    acc
0267 74A3      1136            mov     a,#(_display_LCD_buff_1_94 >> 8)
0269 C0E0      1137            push    acc
026B 7440      1138            mov     a,#0x40
026D C0E0      1139            push    acc
026F 120100    1140            lcall   _sprintf
0272 E581      1141            mov     a,sp
0274 24F6      1142            add     a,#0xf6
0276 F581      1143            mov     sp,a
0278           1144   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:225: LCDprint(buff, 1, 1);
0278 753001    1145            mov     _LCDprint_PARM_2,#0x01
027B D240      1146            setb    _LCDprint_PARM_3
027D 90A3F8    1147            mov     dptr,#_display_LCD_buff_1_94
0280 75F040    1148            mov     b,#0x40
0283 120100    1149            lcall   _LCDprint
0286           1150   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:226: sprintf(buff, "%02d:%02d", mins, secs); // Display the clock
0286 AAB0      1151            mov     r2,_secs
0288 7B00      1152            mov     r3,#0x00
028A AC70      1153            mov     r4,_mins
028C 7D00      1154            mov     r5,#0x00
028E C002      1155            push    ar2
0290 C003      1156            push    ar3
0292 C004      1157            push    ar4
0294 C005      1158            push    ar5
0296 7488      1159            mov     a,#__str_1
0298 C0E0      1160            push    acc
029A 74B1      1161            mov     a,#(__str_1 >> 8)
029C C0E0      1162            push    acc
029E 7480      1163            mov     a,#0x80
02A0 C0E0      1164            push    acc
02A2 74F8      1165            mov     a,#_display_LCD_buff_1_94
02A4 C0E0      1166            push    acc
02A6 74A3      1167            mov     a,#(_display_LCD_buff_1_94 >> 8)
02A8 C0E0      1168            push    acc
02AA 7440      1169            mov     a,#0x40
02AC C0E0      1170            push    acc
02AE 120100    1171            lcall   _sprintf
02B1 E581      1172            mov     a,sp
02B3 24F6      1173            add     a,#0xf6
02B5 F581      1174            mov     sp,a
02B7           1175   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:227: LCDprint(buff, 2, 1);
02B7 753002    1176            mov     _LCDprint_PARM_2,#0x02
02BA D240      1177            setb    _LCDprint_PARM_3
02BC 90A3F8    1178            mov     dptr,#_display_LCD_buff_1_94
02BF 75F040    1179            mov     b,#0x40
02C2 020100    1180            ljmp    _LCDprint
02C5           1181   ;------------------------------------------------------------
02C5           1182   ;Allocation info for local variables in function 'main'
02C5           1183   ;------------------------------------------------------------
02C5           1184   ;k_p                       Allocated to registers 
02C5           1185   ;k_d                       Allocated to registers 
02C5           1186   ;cor                       Allocated with name '_main_cor_1_96'
02C5           1187   ;cur_error                 Allocated with name '_main_cur_error_1_96'
02C5           1188   ;pre_error                 Allocated with name '_main_pre_error_1_96'
02C5           1189   ;thresh                    Allocated to registers 
02C5           1190   ;line_counter              Allocated with name '_main_line_counter_1_96'
02C5           1191   ;exec                      Allocated with name '_main_exec_1_96'
02C5           1192   ;start                     Allocated to registers 
02C5           1193   ;left                      Allocated with name '_main_left_1_96'
02C5           1194   ;right                     Allocated with name '_main_right_1_96'
02C5           1195   ;line_sensor               Allocated with name '_main_line_sensor_1_96'
02C5           1196   ;diff                      Allocated with name '_main_diff_1_96'
02C5           1197   ;------------------------------------------------------------
02C5           1198   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:230: void main (void){
02C5           1199   ;        -----------------------------------------
02C5           1200   ;         function main
02C5           1201   ;        -----------------------------------------
02C5           1202   _main:
02C5           1203   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:235: double cur_error =0;
02C5           1204   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:238: int line_counter = 0;
02C5           1205   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:239: int exec = 0;
02C5 E4        1206            clr     a
02C6 F588      1207            mov     _main_cur_error_1_96,a
02C8 F589      1208            mov     (_main_cur_error_1_96 + 1),a
02CA F58A      1209            mov     (_main_cur_error_1_96 + 2),a
02CC F58B      1210            mov     (_main_cur_error_1_96 + 3),a
02CE F528      1211            mov     _main_line_counter_1_96,a
02D0 F529      1212            mov     (_main_line_counter_1_96 + 1),a
02D2 F568      1213            mov     _main_exec_1_96,a
02D4 F569      1214            mov     (_main_exec_1_96 + 1),a
02D6           1215   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:243: double left = (AD1DAT1/255.0)*3.3;
02D6 E5D6      1216            mov     a,_AD1DAT1
02D8           1217   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:244: double right = (AD1DAT2/255.0)*3.3;
02D8 E5D7      1218            mov     a,_AD1DAT2
02DA           1219   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:245: double line_sensor = (AD1DAT3/255.0)*3.3;
02DA E5F5      1220            mov     a,_AD1DAT3
02DC           1221   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:249: InitPorts();
02DC 120100    1222            lcall   _InitPorts
02DF           1223   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:250: LCD_8BIT();
02DF 120100    1224            lcall   _LCD_8BIT
02E2           1225   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:251: InitSerialPort();
02E2 120100    1226            lcall   _InitSerialPort
02E5           1227   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:252: InitADC();
02E5 120100    1228            lcall   _InitADC
02E8           1229   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:253: InitTimer0();
02E8 120100    1230            lcall   _InitTimer0
02EB           1231   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:261: pre_error = 0;
02EB 75D800    1232            mov     _main_pre_error_1_96,#0x00
02EE 75D900    1233            mov     (_main_pre_error_1_96 + 1),#0x00
02F1 75DA00    1234            mov     (_main_pre_error_1_96 + 2),#0x00
02F4 75DB00    1235            mov     (_main_pre_error_1_96 + 3),#0x00
02F7           1236   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:262: while(1)
02F7           1237   L017038?:
02F7           1238   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:272: left = (AD1DAT1/255.0)*3.3;
02F7 85D682    1239            mov     dpl,_AD1DAT1
02FA 120100    1240            lcall   ___uchar2fs
02FD AC82      1241            mov     r4,dpl
02FF AD83      1242            mov     r5,dph
0301 AAF0      1243            mov     r2,b
0303 FB        1244            mov     r3,a
0304 E4        1245            clr     a
0305 C0E0      1246            push    acc
0307 C0E0      1247            push    acc
0309 747F      1248            mov     a,#0x7F
030B C0E0      1249            push    acc
030D 7443      1250            mov     a,#0x43
030F C0E0      1251            push    acc
0311 8C82      1252            mov     dpl,r4
0313 8D83      1253            mov     dph,r5
0315 8AF0      1254            mov     b,r2
0317 EB        1255            mov     a,r3
0318 120100    1256            lcall   ___fsdiv
031B AA82      1257            mov     r2,dpl
031D AB83      1258            mov     r3,dph
031F ACF0      1259            mov     r4,b
0321 FD        1260            mov     r5,a
0322 E581      1261            mov     a,sp
0324 24FC      1262            add     a,#0xfc
0326 F581      1263            mov     sp,a
0328 C002      1264            push    ar2
032A C003      1265            push    ar3
032C C004      1266            push    ar4
032E C005      1267            push    ar5
0330 903333    1268            mov     dptr,#0x3333
0333 75F053    1269            mov     b,#0x53
0336 7440      1270            mov     a,#0x40
0338 120100    1271            lcall   ___fsmul
033B 8582A8    1272            mov     _main_left_1_96,dpl
033E 8583A9    1273            mov     (_main_left_1_96 + 1),dph
0341 85F0AA    1274            mov     (_main_left_1_96 + 2),b
0344 F5AB      1275            mov     (_main_left_1_96 + 3),a
0346 E581      1276            mov     a,sp
0348 24FC      1277            add     a,#0xfc
034A F581      1278            mov     sp,a
034C           1279   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:273: right = (AD1DAT2/255.0)*3.3;
034C 85D782    1280            mov     dpl,_AD1DAT2
034F 120100    1281            lcall   ___uchar2fs
0352 A882      1282            mov     r0,dpl
0354 A983      1283            mov     r1,dph
0356 AAF0      1284            mov     r2,b
0358 FB        1285            mov     r3,a
0359 E4        1286            clr     a
035A C0E0      1287            push    acc
035C C0E0      1288            push    acc
035E 747F      1289            mov     a,#0x7F
0360 C0E0      1290            push    acc
0362 7443      1291            mov     a,#0x43
0364 C0E0      1292            push    acc
0366 8882      1293            mov     dpl,r0
0368 8983      1294            mov     dph,r1
036A 8AF0      1295            mov     b,r2
036C EB        1296            mov     a,r3
036D 120100    1297            lcall   ___fsdiv
0370 AA82      1298            mov     r2,dpl
0372 AB83      1299            mov     r3,dph
0374 ACF0      1300            mov     r4,b
0376 FD        1301            mov     r5,a
0377 E581      1302            mov     a,sp
0379 24FC      1303            add     a,#0xfc
037B F581      1304            mov     sp,a
037D C002      1305            push    ar2
037F C003      1306            push    ar3
0381 C004      1307            push    ar4
0383 C005      1308            push    ar5
0385 903333    1309            mov     dptr,#0x3333
0388 75F053    1310            mov     b,#0x53
038B 7440      1311            mov     a,#0x40
038D 120100    1312            lcall   ___fsmul
0390 8582F8    1313            mov     _main_right_1_96,dpl
0393 8583F9    1314            mov     (_main_right_1_96 + 1),dph
0396 85F0FA    1315            mov     (_main_right_1_96 + 2),b
0399 F5FB      1316            mov     (_main_right_1_96 + 3),a
039B E581      1317            mov     a,sp
039D 24FC      1318            add     a,#0xfc
039F F581      1319            mov     sp,a
03A1           1320   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:274: line_sensor = (AD1DAT3/255.0)*3.3;
03A1 85F582    1321            mov     dpl,_AD1DAT3
03A4 120100    1322            lcall   ___uchar2fs
03A7 A882      1323            mov     r0,dpl
03A9 A983      1324            mov     r1,dph
03AB AAF0      1325            mov     r2,b
03AD FB        1326            mov     r3,a
03AE E4        1327            clr     a
03AF C0E0      1328            push    acc
03B1 C0E0      1329            push    acc
03B3 747F      1330            mov     a,#0x7F
03B5 C0E0      1331            push    acc
03B7 7443      1332            mov     a,#0x43
03B9 C0E0      1333            push    acc
03BB 8882      1334            mov     dpl,r0
03BD 8983      1335            mov     dph,r1
03BF 8AF0      1336            mov     b,r2
03C1 EB        1337            mov     a,r3
03C2 120100    1338            lcall   ___fsdiv
03C5 AA82      1339            mov     r2,dpl
03C7 AB83      1340            mov     r3,dph
03C9 ACF0      1341            mov     r4,b
03CB FD        1342            mov     r5,a
03CC E581      1343            mov     a,sp
03CE 24FC      1344            add     a,#0xfc
03D0 F581      1345            mov     sp,a
03D2 C002      1346            push    ar2
03D4 C003      1347            push    ar3
03D6 C004      1348            push    ar4
03D8 C005      1349            push    ar5
03DA 903333    1350            mov     dptr,#0x3333
03DD 75F053    1351            mov     b,#0x53
03E0 7440      1352            mov     a,#0x40
03E2 120100    1353            lcall   ___fsmul
03E5 858248    1354            mov     _main_line_sensor_1_96,dpl
03E8 858349    1355            mov     (_main_line_sensor_1_96 + 1),dph
03EB 85F04A    1356            mov     (_main_line_sensor_1_96 + 2),b
03EE F54B      1357            mov     (_main_line_sensor_1_96 + 3),a
03F0 E581      1358            mov     a,sp
03F2 24FC      1359            add     a,#0xfc
03F4 F581      1360            mov     sp,a
03F6           1361   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:275: diff = left - right;
03F6 C0F8      1362            push    _main_right_1_96
03F8 C0F9      1363            push    (_main_right_1_96 + 1)
03FA C0FA      1364            push    (_main_right_1_96 + 2)
03FC C0FB      1365            push    (_main_right_1_96 + 3)
03FE 85A882    1366            mov     dpl,_main_left_1_96
0401 85A983    1367            mov     dph,(_main_left_1_96 + 1)
0404 85AAF0    1368            mov     b,(_main_left_1_96 + 2)
0407 E5AB      1369            mov     a,(_main_left_1_96 + 3)
0409 120100    1370            lcall   ___fssub
040C 858288    1371            mov     _main_diff_1_96,dpl
040F 858389    1372            mov     (_main_diff_1_96 + 1),dph
0412 85F08A    1373            mov     (_main_diff_1_96 + 2),b
0415 F58B      1374            mov     (_main_diff_1_96 + 3),a
0417 E581      1375            mov     a,sp
0419 24FC      1376            add     a,#0xfc
041B F581      1377            mov     sp,a
041D           1378   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:278: if(time_update_flag==1) // If the clock has been updated, refresh the display
041D 30E048    1379            jnb     _time_update_flag,L017002?
0420           1380   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:280: display_LCD();
0420 120100    1381            lcall   _display_LCD
0423           1382   L017002?:
0423           1383   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:284: cor = k_p * cur_error + k_d*(cur_error - pre_error)/0.001;
0423 C088      1384            push    _main_cur_error_1_96
0425 C089      1385            push    (_main_cur_error_1_96 + 1)
0427 C08A      1386            push    (_main_cur_error_1_96 + 2)
0429 C08B      1387            push    (_main_cur_error_1_96 + 3)
042B 900000    1388            mov     dptr,#0x0000
042E 75F0A0    1389            mov     b,#0xA0
0431 7441      1390            mov     a,#0x41
0433 120100    1391            lcall   ___fsmul
0436 AC82      1392            mov     r4,dpl
0438 AD83      1393            mov     r5,dph
043A AAF0      1394            mov     r2,b
043C FB        1395            mov     r3,a
043D E581      1396            mov     a,sp
043F 24FC      1397            add     a,#0xfc
0441 F581      1398            mov     sp,a
0443 C002      1399            push    ar2
0445 C003      1400            push    ar3
0447 C004      1401            push    ar4
0449 C005      1402            push    ar5
044B C0D8      1403            push    _main_pre_error_1_96
044D C0D9      1404            push    (_main_pre_error_1_96 + 1)
044F C0DA      1405            push    (_main_pre_error_1_96 + 2)
0451 C0DB      1406            push    (_main_pre_error_1_96 + 3)
0453 858882    1407            mov     dpl,_main_cur_error_1_96
0456 858983    1408            mov     dph,(_main_cur_error_1_96 + 1)
0459 858AF0    1409            mov     b,(_main_cur_error_1_96 + 2)
045C E58B      1410            mov     a,(_main_cur_error_1_96 + 3)
045E 120100    1411            lcall   ___fssub
0461 A882      1412            mov     r0,dpl
0463 A983      1413            mov     r1,dph
0465 AEF0      1414            mov     r6,b
0467 FF        1415            mov     r7,a
0468 E581      1416            mov     a,sp
046A 24FC      1417            add     a,#0xfc
046C F581      1418            mov     sp,a
046E 746F      1419            mov     a,#0x6F
0470 C0E0      1420            push    acc
0472 7412      1421            mov     a,#0x12
0474 C0E0      1422            push    acc
0476 7483      1423            mov     a,#0x83
0478 C0E0      1424            push    acc
047A 743A      1425            mov     a,#0x3A
047C C0E0      1426            push    acc
047E 8882      1427            mov     dpl,r0
0480 8983      1428            mov     dph,r1
0482 8EF0      1429            mov     b,r6
0484 EF        1430            mov     a,r7
0485 120100    1431            lcall   ___fsdiv
0488 AE82      1432            mov     r6,dpl
048A AF83      1433            mov     r7,dph
048C A8F0      1434            mov     r0,b
048E F9        1435            mov     r1,a
048F E581      1436            mov     a,sp
0491 24FC      1437            add     a,#0xfc
0493 F581      1438            mov     sp,a
0495 D005      1439            pop     ar5
0497 D004      1440            pop     ar4
0499 D003      1441            pop     ar3
049B D002      1442            pop     ar2
049D C006      1443            push    ar6
049F C007      1444            push    ar7
04A1 C000      1445            push    ar0
04A3 C001      1446            push    ar1
04A5 8C82      1447            mov     dpl,r4
04A7 8D83      1448            mov     dph,r5
04A9 8AF0      1449            mov     b,r2
04AB EB        1450            mov     a,r3
04AC 120100    1451            lcall   ___fsadd
04AF 858238    1452            mov     _main_cor_1_96,dpl
04B2 858339    1453            mov     (_main_cor_1_96 + 1),dph
04B5 85F03A    1454            mov     (_main_cor_1_96 + 2),b
04B8 F53B      1455            mov     (_main_cor_1_96 + 3),a
04BA E581      1456            mov     a,sp
04BC 24FC      1457            add     a,#0xfc
04BE F581      1458            mov     sp,a
04C0           1459   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:286: if(-1<diff && diff<1 && (left > 1) && (left < 2) && (right > 1) && (right < 2)){
04C0 C088      1460            push    _main_diff_1_96
04C2 C089      1461            push    (_main_diff_1_96 + 1)
04C4 C08A      1462            push    (_main_diff_1_96 + 2)
04C6 C08B      1463            push    (_main_diff_1_96 + 3)
04C8 900000    1464            mov     dptr,#0x0000
04CB 75F080    1465            mov     b,#0x80
04CE 74BF      1466            mov     a,#0xBF
04D0 120100    1467            lcall   ___fslt
04D3 AE82      1468            mov     r6,dpl
04D5 E581      1469            mov     a,sp
04D7 24FC      1470            add     a,#0xfc
04D9 F581      1471            mov     sp,a
04DB EE        1472            mov     a,r6
04DC 7001      1473            jnz     L017065?
04DE 020100    1474            ljmp    L017004?
04E1           1475   L017065?:
04E1 E4        1476            clr     a
04E2 C0E0      1477            push    acc
04E4 C0E0      1478            push    acc
04E6 7480      1479            mov     a,#0x80
04E8 C0E0      1480            push    acc
04EA 743F      1481            mov     a,#0x3F
04EC C0E0      1482            push    acc
04EE 858882    1483            mov     dpl,_main_diff_1_96
04F1 858983    1484            mov     dph,(_main_diff_1_96 + 1)
04F4 858AF0    1485            mov     b,(_main_diff_1_96 + 2)
04F7 E58B      1486            mov     a,(_main_diff_1_96 + 3)
04F9 120100    1487            lcall   ___fslt
04FC AE82      1488            mov     r6,dpl
04FE E581      1489            mov     a,sp
0500 24FC      1490            add     a,#0xfc
0502 F581      1491            mov     sp,a
0504 EE        1492            mov     a,r6
0505 7001      1493            jnz     L017066?
0507 020100    1494            ljmp    L017004?
050A           1495   L017066?:
050A E4        1496            clr     a
050B C0E0      1497            push    acc
050D C0E0      1498            push    acc
050F 7480      1499            mov     a,#0x80
0511 C0E0      1500            push    acc
0513 743F      1501            mov     a,#0x3F
0515 C0E0      1502            push    acc
0517 85A882    1503            mov     dpl,_main_left_1_96
051A 85A983    1504            mov     dph,(_main_left_1_96 + 1)
051D 85AAF0    1505            mov     b,(_main_left_1_96 + 2)
0520 E5AB      1506            mov     a,(_main_left_1_96 + 3)
0522 120100    1507            lcall   ___fsgt
0525 AE82      1508            mov     r6,dpl
0527 E581      1509            mov     a,sp
0529 24FC      1510            add     a,#0xfc
052B F581      1511            mov     sp,a
052D EE        1512            mov     a,r6
052E 7001      1513            jnz     L017067?
0530 020100    1514            ljmp    L017004?
0533           1515   L017067?:
0533 E4        1516            clr     a
0534 C0E0      1517            push    acc
0536 C0E0      1518            push    acc
0538 C0E0      1519            push    acc
053A 7440      1520            mov     a,#0x40
053C C0E0      1521            push    acc
053E 85A882    1522            mov     dpl,_main_left_1_96
0541 85A983    1523            mov     dph,(_main_left_1_96 + 1)
0544 85AAF0    1524            mov     b,(_main_left_1_96 + 2)
0547 E5AB      1525            mov     a,(_main_left_1_96 + 3)
0549 120100    1526            lcall   ___fslt
054C AE82      1527            mov     r6,dpl
054E E581      1528            mov     a,sp
0550 24FC      1529            add     a,#0xfc
0552 F581      1530            mov     sp,a
0554 EE        1531            mov     a,r6
0555 6001      1532            jz      L017004?
0557 E4        1533            clr     a
0558 C0E0      1534            push    acc
055A C0E0      1535            push    acc
055C 7480      1536            mov     a,#0x80
055E C0E0      1537            push    acc
0560 743F      1538            mov     a,#0x3F
0562 C0E0      1539            push    acc
0564 85F882    1540            mov     dpl,_main_right_1_96
0567 85F983    1541            mov     dph,(_main_right_1_96 + 1)
056A 85FAF0    1542            mov     b,(_main_right_1_96 + 2)
056D E5FB      1543            mov     a,(_main_right_1_96 + 3)
056F 120100    1544            lcall   ___fsgt
0572 AE82      1545            mov     r6,dpl
0574 E581      1546            mov     a,sp
0576 24FC      1547            add     a,#0xfc
0578 F581      1548            mov     sp,a
057A EE        1549            mov     a,r6
057B 6001      1550            jz      L017004?
057D E4        1551            clr     a
057E C0E0      1552            push    acc
0580 C0E0      1553            push    acc
0582 C0E0      1554            push    acc
0584 7440      1555            mov     a,#0x40
0586 C0E0      1556            push    acc
0588 85F882    1557            mov     dpl,_main_right_1_96
058B 85F983    1558            mov     dph,(_main_right_1_96 + 1)
058E 85FAF0    1559            mov     b,(_main_right_1_96 + 2)
0591 E5FB      1560            mov     a,(_main_right_1_96 + 3)
0593 120100    1561            lcall   ___fslt
0596 AE82      1562            mov     r6,dpl
0598 E581      1563            mov     a,sp
059A 24FC      1564            add     a,#0xfc
059C F581      1565            mov     sp,a
059E EE        1566            mov     a,r6
059F 6001      1567            jz      L017004?
05A1           1568   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:287: cur_error = 0;
05A1 758800    1569            mov     _main_cur_error_1_96,#0x00
05A4 758900    1570            mov     (_main_cur_error_1_96 + 1),#0x00
05A7 758A00    1571            mov     (_main_cur_error_1_96 + 2),#0x00
05AA 758B00    1572            mov     (_main_cur_error_1_96 + 3),#0x00
05AD           1573   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:288: pwm_left = 100;
05AD 75F064    1574            mov     _pwm_left,#0x64
05B0           1575   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:289: pwm_right = 100;
05B0 75B064    1576            mov     _pwm_right,#0x64
05B3           1577   L017004?:
05B3           1578   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:291: if(1<diff){       
05B3 C088      1579            push    _main_diff_1_96
05B5 C089      1580            push    (_main_diff_1_96 + 1)
05B7 C08A      1581            push    (_main_diff_1_96 + 2)
05B9 C08B      1582            push    (_main_diff_1_96 + 3)
05BB 900000    1583            mov     dptr,#0x0000
05BE 75F080    1584            mov     b,#0x80
05C1 743F      1585            mov     a,#0x3F
05C3 120100    1586            lcall   ___fslt
05C6 AE82      1587            mov     r6,dpl
05C8 E581      1588            mov     a,sp
05CA 24FC      1589            add     a,#0xfc
05CC F581      1590            mov     sp,a
05CE EE        1591            mov     a,r6
05CF 6001      1592            jz      L017011?
05D1           1593   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:292: cur_error = 1;
05D1 758800    1594            mov     _main_cur_error_1_96,#0x00
05D4 758900    1595            mov     (_main_cur_error_1_96 + 1),#0x00
05D7 758A80    1596            mov     (_main_cur_error_1_96 + 2),#0x80
05DA 758B3F    1597            mov     (_main_cur_error_1_96 + 3),#0x3F
05DD           1598   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:293: pwm_left = 100 - cor;
05DD C038      1599            push    _main_cor_1_96
05DF C039      1600            push    (_main_cor_1_96 + 1)
05E1 C03A      1601            push    (_main_cor_1_96 + 2)
05E3 C03B      1602            push    (_main_cor_1_96 + 3)
05E5 900000    1603            mov     dptr,#0x0000
05E8 75F0C8    1604            mov     b,#0xC8
05EB 7442      1605            mov     a,#0x42
05ED 120100    1606            lcall   ___fssub
05F0 AE82      1607            mov     r6,dpl
05F2 AF83      1608            mov     r7,dph
05F4 A8F0      1609            mov     r0,b
05F6 F9        1610            mov     r1,a
05F7 E581      1611            mov     a,sp
05F9 24FC      1612            add     a,#0xfc
05FB F581      1613            mov     sp,a
05FD 8E82      1614            mov     dpl,r6
05FF 8F83      1615            mov     dph,r7
0601 88F0      1616            mov     b,r0
0603 E9        1617            mov     a,r1
0604 120100    1618            lcall   ___fs2uchar
0607 8582F0    1619            mov     _pwm_left,dpl
060A           1620   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:294: pwm_right = 100;
060A 75B064    1621            mov     _pwm_right,#0x64
060D           1622   L017011?:
060D           1623   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:296: if(diff<-1){
060D E4        1624            clr     a
060E C0E0      1625            push    acc
0610 C0E0      1626            push    acc
0612 7480      1627            mov     a,#0x80
0614 C0E0      1628            push    acc
0616 74BF      1629            mov     a,#0xBF
0618 C0E0      1630            push    acc
061A 858882    1631            mov     dpl,_main_diff_1_96
061D 858983    1632            mov     dph,(_main_diff_1_96 + 1)
0620 858AF0    1633            mov     b,(_main_diff_1_96 + 2)
0623 E58B      1634            mov     a,(_main_diff_1_96 + 3)
0625 120100    1635            lcall   ___fslt
0628 AE82      1636            mov     r6,dpl
062A E581      1637            mov     a,sp
062C 24FC      1638            add     a,#0xfc
062E F581      1639            mov     sp,a
0630 EE        1640            mov     a,r6
0631 6001      1641            jz      L017013?
0633           1642   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:297: cur_error= -1;
0633 758800    1643            mov     _main_cur_error_1_96,#0x00
0636 758900    1644            mov     (_main_cur_error_1_96 + 1),#0x00
0639 758A80    1645            mov     (_main_cur_error_1_96 + 2),#0x80
063C 758BBF    1646            mov     (_main_cur_error_1_96 + 3),#0xBF
063F           1647   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:298: pwm_left = 100;
063F 75F064    1648            mov     _pwm_left,#0x64
0642           1649   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:299: pwm_right = 100 + cor;
0642 E4        1650            clr     a
0643 C0E0      1651            push    acc
0645 C0E0      1652            push    acc
0647 74C8      1653            mov     a,#0xC8
0649 C0E0      1654            push    acc
064B 7442      1655            mov     a,#0x42
064D C0E0      1656            push    acc
064F 853882    1657            mov     dpl,_main_cor_1_96
0652 853983    1658            mov     dph,(_main_cor_1_96 + 1)
0655 853AF0    1659            mov     b,(_main_cor_1_96 + 2)
0658 E53B      1660            mov     a,(_main_cor_1_96 + 3)
065A 120100    1661            lcall   ___fsadd
065D AE82      1662            mov     r6,dpl
065F AF83      1663            mov     r7,dph
0661 A8F0      1664            mov     r0,b
0663 F9        1665            mov     r1,a
0664 E581      1666            mov     a,sp
0666 24FC      1667            add     a,#0xfc
0668 F581      1668            mov     sp,a
066A 8E82      1669            mov     dpl,r6
066C 8F83      1670            mov     dph,r7
066E 88F0      1671            mov     b,r0
0670 E9        1672            mov     a,r1
0671 120100    1673            lcall   ___fs2uchar
0674 8582B0    1674            mov     _pwm_right,dpl
0677           1675   L017013?:
0677           1676   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:301: if((left < 0.5) && (right < 0.5)){
0677 E4        1677            clr     a
0678 C0E0      1678            push    acc
067A C0E0      1679            push    acc
067C C0E0      1680            push    acc
067E 743F      1681            mov     a,#0x3F
0680 C0E0      1682            push    acc
0682 85A882    1683            mov     dpl,_main_left_1_96
0685 85A983    1684            mov     dph,(_main_left_1_96 + 1)
0688 85AAF0    1685            mov     b,(_main_left_1_96 + 2)
068B E5AB      1686            mov     a,(_main_left_1_96 + 3)
068D 120100    1687            lcall   ___fslt
0690 AE82      1688            mov     r6,dpl
0692 E581      1689            mov     a,sp
0694 24FC      1690            add     a,#0xfc
0696 F581      1691            mov     sp,a
0698 EE        1692            mov     a,r6
0699 7001      1693            jnz     L017073?
069B 020100    1694            ljmp    L017019?
069E           1695   L017073?:
069E E4        1696            clr     a
069F C0E0      1697            push    acc
06A1 C0E0      1698            push    acc
06A3 C0E0      1699            push    acc
06A5 743F      1700            mov     a,#0x3F
06A7 C0E0      1701            push    acc
06A9 85F882    1702            mov     dpl,_main_right_1_96
06AC 85F983    1703            mov     dph,(_main_right_1_96 + 1)
06AF 85FAF0    1704            mov     b,(_main_right_1_96 + 2)
06B2 E5FB      1705            mov     a,(_main_right_1_96 + 3)
06B4 120100    1706            lcall   ___fslt
06B7 AE82      1707            mov     r6,dpl
06B9 E581      1708            mov     a,sp
06BB 24FC      1709            add     a,#0xfc
06BD F581      1710            mov     sp,a
06BF EE        1711            mov     a,r6
06C0 7001      1712            jnz     L017074?
06C2 020100    1713            ljmp    L017019?
06C5           1714   L017074?:
06C5           1715   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:302: if(pre_error>0){
06C5 E4        1716            clr     a
06C6 C0E0      1717            push    acc
06C8 C0E0      1718            push    acc
06CA C0E0      1719            push    acc
06CC C0E0      1720            push    acc
06CE 85D882    1721            mov     dpl,_main_pre_error_1_96
06D1 85D983    1722            mov     dph,(_main_pre_error_1_96 + 1)
06D4 85DAF0    1723            mov     b,(_main_pre_error_1_96 + 2)
06D7 E5DB      1724            mov     a,(_main_pre_error_1_96 + 3)
06D9 120100    1725            lcall   ___fsgt
06DC AE82      1726            mov     r6,dpl
06DE E581      1727            mov     a,sp
06E0 24FC      1728            add     a,#0xfc
06E2 F581      1729            mov     sp,a
06E4 EE        1730            mov     a,r6
06E5 6001      1731            jz      L017015?
06E7           1732   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:303: cur_error = 5;
06E7 758800    1733            mov     _main_cur_error_1_96,#0x00
06EA 758900    1734            mov     (_main_cur_error_1_96 + 1),#0x00
06ED 758AA0    1735            mov     (_main_cur_error_1_96 + 2),#0xA0
06F0 758B40    1736            mov     (_main_cur_error_1_96 + 3),#0x40
06F3           1737   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:305: pwm_left = 100;
06F3 75F064    1738            mov     _pwm_left,#0x64
06F6           1739   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:306: pwm_right = 100 - cor;
06F6 C006      1740            push    ar6
06F8 C038      1741            push    _main_cor_1_96
06FA C039      1742            push    (_main_cor_1_96 + 1)
06FC C03A      1743            push    (_main_cor_1_96 + 2)
06FE C03B      1744            push    (_main_cor_1_96 + 3)
0700 900000    1745            mov     dptr,#0x0000
0703 75F0C8    1746            mov     b,#0xC8
0706 7442      1747            mov     a,#0x42
0708 120100    1748            lcall   ___fssub
070B AF82      1749            mov     r7,dpl
070D A883      1750            mov     r0,dph
070F A9F0      1751            mov     r1,b
0711 FA        1752            mov     r2,a
0712 E581      1753            mov     a,sp
0714 24FC      1754            add     a,#0xfc
0716 F581      1755            mov     sp,a
0718 8F82      1756            mov     dpl,r7
071A 8883      1757            mov     dph,r0
071C 89F0      1758            mov     b,r1
071E EA        1759            mov     a,r2
071F 120100    1760            lcall   ___fs2uchar
0722 8582B0    1761            mov     _pwm_right,dpl
0725 D006      1762            pop     ar6
0727           1763   L017015?:
0727           1764   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:308: if(pre_error<=0){
0727 EE        1765            mov     a,r6
0728           1766   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:309: cur_error = -5;
0728 7001      1767            jnz     L017019?
072A F588      1768            mov     _main_cur_error_1_96,a
072C F589      1769            mov     (_main_cur_error_1_96 + 1),a
072E 758AA0    1770            mov     (_main_cur_error_1_96 + 2),#0xA0
0731 758BC0    1771            mov     (_main_cur_error_1_96 + 3),#0xC0
0734           1772   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:310: pwm_left = 100;
0734 75F064    1773            mov     _pwm_left,#0x64
0737           1774   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:311: pwm_right = 100 + cor;
0737 E4        1775            clr     a
0738 C0E0      1776            push    acc
073A C0E0      1777            push    acc
073C 74C8      1778            mov     a,#0xC8
073E C0E0      1779            push    acc
0740 7442      1780            mov     a,#0x42
0742 C0E0      1781            push    acc
0744 853882    1782            mov     dpl,_main_cor_1_96
0747 853983    1783            mov     dph,(_main_cor_1_96 + 1)
074A 853AF0    1784            mov     b,(_main_cor_1_96 + 2)
074D E53B      1785            mov     a,(_main_cor_1_96 + 3)
074F 120100    1786            lcall   ___fsadd
0752 AA82      1787            mov     r2,dpl
0754 AB83      1788            mov     r3,dph
0756 ACF0      1789            mov     r4,b
0758 FD        1790            mov     r5,a
0759 E581      1791            mov     a,sp
075B 24FC      1792            add     a,#0xfc
075D F581      1793            mov     sp,a
075F 8A82      1794            mov     dpl,r2
0761 8B83      1795            mov     dph,r3
0763 8CF0      1796            mov     b,r4
0765 ED        1797            mov     a,r5
0766 120100    1798            lcall   ___fs2uchar
0769 8582B0    1799            mov     _pwm_right,dpl
076C           1800   L017019?:
076C           1801   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:314: pre_error = cur_error;
076C 8588D8    1802            mov     _main_pre_error_1_96,_main_cur_error_1_96
076F 8589D9    1803            mov     (_main_pre_error_1_96 + 1),(_main_cur_error_1_96 + 1)
0772 858ADA    1804            mov     (_main_pre_error_1_96 + 2),(_main_cur_error_1_96 + 2)
0775 858BDB    1805            mov     (_main_pre_error_1_96 + 3),(_main_cur_error_1_96 + 3)
0778           1806   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:315: printf("Error:%5.2f Left:%5.2f Right:%5.2f Left_Motor:%d Right_Motor:%d                \r", cur_error, left, right, pwm_left, pwm_right);
0778 AAB0      1807            mov     r2,_pwm_right
077A 7B00      1808            mov     r3,#0x00
077C ACF0      1809            mov     r4,_pwm_left
077E 7D00      1810            mov     r5,#0x00
0780 C002      1811            push    ar2
0782 C003      1812            push    ar3
0784 C004      1813            push    ar4
0786 C005      1814            push    ar5
0788 C0F8      1815            push    _main_right_1_96
078A C0F9      1816            push    (_main_right_1_96 + 1)
078C C0FA      1817            push    (_main_right_1_96 + 2)
078E C0FB      1818            push    (_main_right_1_96 + 3)
0790 C0A8      1819            push    _main_left_1_96
0792 C0A9      1820            push    (_main_left_1_96 + 1)
0794 C0AA      1821            push    (_main_left_1_96 + 2)
0796 C0AB      1822            push    (_main_left_1_96 + 3)
0798 C088      1823            push    _main_cur_error_1_96
079A C089      1824            push    (_main_cur_error_1_96 + 1)
079C C08A      1825            push    (_main_cur_error_1_96 + 2)
079E C08B      1826            push    (_main_cur_error_1_96 + 3)
07A0 7408      1827            mov     a,#__str_2
07A2 C0E0      1828            push    acc
07A4 74B6      1829            mov     a,#(__str_2 >> 8)
07A6 C0E0      1830            push    acc
07A8 7480      1831            mov     a,#0x80
07AA C0E0      1832            push    acc
07AC 120100    1833            lcall   _printf
07AF E581      1834            mov     a,sp
07B1 24ED      1835            add     a,#0xed
07B3 F581      1836            mov     sp,a
07B5           1837   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:320: if(line_sensor>thresh){
07B5 E4        1838            clr     a
07B6 C0E0      1839            push    acc
07B8 C0E0      1840            push    acc
07BA C0E0      1841            push    acc
07BC 7440      1842            mov     a,#0x40
07BE C0E0      1843            push    acc
07C0 854882    1844            mov     dpl,_main_line_sensor_1_96
07C3 854983    1845            mov     dph,(_main_line_sensor_1_96 + 1)
07C6 854AF0    1846            mov     b,(_main_line_sensor_1_96 + 2)
07C9 E54B      1847            mov     a,(_main_line_sensor_1_96 + 3)
07CB 120100    1848            lcall   ___fsgt
07CE AA82      1849            mov     r2,dpl
07D0 E581      1850            mov     a,sp
07D2 24FC      1851            add     a,#0xfc
07D4 F581      1852            mov     sp,a
07D6 EA        1853            mov     a,r2
07D7 7001      1854            jnz     L017077?
07D9 020100    1855            ljmp    L017038?
07DC           1856   L017077?:
07DC           1857   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:322: if(line_counter == 0){
07DC E528      1858            mov     a,_main_line_counter_1_96
07DE 4529      1859            orl     a,(_main_line_counter_1_96 + 1)
07E0 7001      1860            jnz     L017022?
07E2           1861   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:324: line_counter++;
07E2 0528      1862            inc     _main_line_counter_1_96
07E4 E4        1863            clr     a
07E5 B52808    1864            cjne    a,_main_line_counter_1_96,L017079?
07E8 0529      1865            inc     (_main_line_counter_1_96 + 1)
07EA           1866   L017079?:
07EA           1867   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:325: line_counter_flag = 1;
07EA D290      1868            setb    _line_counter_flag
07EC 8001      1869            sjmp    L017023?
07EE           1870   L017022?:
07EE           1871   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:329: line_counter++;                                   
07EE 0528      1872            inc     _main_line_counter_1_96
07F0 E4        1873            clr     a
07F1 B52888    1874            cjne    a,_main_line_counter_1_96,L017080?
07F4 0529      1875            inc     (_main_line_counter_1_96 + 1)
07F6           1876   L017080?:
07F6           1877   L017023?:
07F6           1878   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:332: if(line_timer == 2000){
07F6 74D0      1879            mov     a,#0xD0
07F8 B570C8    1880            cjne    a,_line_timer,L017025?
07FB 7407      1881            mov     a,#0x07
07FD B571C8    1882            cjne    a,(_line_timer + 1),L017025?
0800           1883   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:333: line_counter_flag = 0;
0800 C290      1884            clr     _line_counter_flag
0802           1885   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:334: line_timer = 0;
0802 E4        1886            clr     a
0803 F570      1887            mov     _line_timer,a
0805 F571      1888            mov     (_line_timer + 1),a
0807           1889   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:335: exec = 1;                                         
0807 756801    1890            mov     _main_exec_1_96,#0x01
080A E4        1891            clr     a
080B F569      1892            mov     (_main_exec_1_96 + 1),a
080D           1893   L017025?:
080D           1894   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:339: if(exec == 1){
080D 7401      1895            mov     a,#0x01
080F B56808    1896            cjne    a,_main_exec_1_96,L017083?
0812 E4        1897            clr     a
0813 B56908    1898            cjne    a,(_main_exec_1_96 + 1),L017083?
0816 8001      1899            sjmp    L017084?
0818           1900   L017083?:
0818 020100    1901            ljmp    L017034?
081B           1902   L017084?:
081B           1903   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:340: switch(line_counter){
081B 7402      1904            mov     a,#0x02
081D B528C8    1905            cjne    a,_main_line_counter_1_96,L017085?
0820 E4        1906            clr     a
0821 B529C8    1907            cjne    a,(_main_line_counter_1_96 + 1),L017085?
0824 8001      1908            sjmp    L017026?
0826           1909   L017085?:
0826 7403      1910            mov     a,#0x03
0828 B52848    1911            cjne    a,_main_line_counter_1_96,L017086?
082B E4        1912            clr     a
082C B52948    1913            cjne    a,(_main_line_counter_1_96 + 1),L017086?
082F 8001      1914            sjmp    L017027?
0831           1915   L017086?:
0831 7404      1916            mov     a,#0x04
0833 B528C8    1917            cjne    a,_main_line_counter_1_96,L017087?
0836 E4        1918            clr     a
0837 B529C8    1919            cjne    a,(_main_line_counter_1_96 + 1),L017087?
083A 8001      1920            sjmp    L017028?
083C           1921   L017087?:
083C           1922   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:341: case 2:
083C 8001      1923            sjmp    L017032?
083E           1924   L017026?:
083E           1925   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:342: printf("TURNING LEFT \r;");
083E 7488      1926            mov     a,#__str_3
0840 C0E0      1927            push    acc
0842 74BA      1928            mov     a,#(__str_3 >> 8)
0844 C0E0      1929            push    acc
0846 7480      1930            mov     a,#0x80
0848 C0E0      1931            push    acc
084A 120100    1932            lcall   _printf
084D 1581      1933            dec     sp
084F 1581      1934            dec     sp
0851 1581      1935            dec     sp
0853           1936   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:343: pwm_left          = 100;
0853 75F064    1937            mov     _pwm_left,#0x64
0856           1938   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:344: pwm_right         =  20; 
0856 75B014    1939            mov     _pwm_right,#0x14
0859           1940   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:345: case 3:
0859           1941   L017027?:
0859           1942   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:346: printf("TURNING Right \r;");
0859 74C8      1943            mov     a,#__str_4
085B C0E0      1944            push    acc
085D 74BA      1945            mov     a,#(__str_4 >> 8)
085F C0E0      1946            push    acc
0861 7480      1947            mov     a,#0x80
0863 C0E0      1948            push    acc
0865 120100    1949            lcall   _printf
0868 1581      1950            dec     sp
086A 1581      1951            dec     sp
086C 1581      1952            dec     sp
086E           1953   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:347: pwm_left          = 20;
086E 75F014    1954            mov     _pwm_left,#0x14
0871           1955   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:348: pwm_right         =  100;
0871 75B064    1956            mov     _pwm_right,#0x64
0874           1957   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:349: case 4:
0874           1958   L017028?:
0874           1959   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:350: printf("Starting \r;");
0874 7408      1960            mov     a,#__str_5
0876 C0E0      1961            push    acc
0878 74BB      1962            mov     a,#(__str_5 >> 8)
087A C0E0      1963            push    acc
087C 7480      1964            mov     a,#0x80
087E C0E0      1965            push    acc
0880 120100    1966            lcall   _printf
0883 1581      1967            dec     sp
0885 1581      1968            dec     sp
0887 1581      1969            dec     sp
0889           1970   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:352: pwm_left = 100;
0889 75F064    1971            mov     _pwm_left,#0x64
088C           1972   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:353: pwm_right = 100;
088C 75B064    1973            mov     _pwm_right,#0x64
088F           1974   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:359: }
088F           1975   L017032?:
088F           1976   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:360: exec=0;
088F           1977   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:361: line_counter = 0;
088F E4        1978            clr     a
0890 F568      1979            mov     _main_exec_1_96,a
0892 F569      1980            mov     (_main_exec_1_96 + 1),a
0894 F528      1981            mov     _main_line_counter_1_96,a
0896 F529      1982            mov     (_main_line_counter_1_96 + 1),a
0898           1983   L017034?:
0898           1984   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:363: printf("line counter: %d", line_counter);
0898 C028      1985            push    _main_line_counter_1_96
089A C029      1986            push    (_main_line_counter_1_96 + 1)
089C 7448      1987            mov     a,#__str_6
089E C0E0      1988            push    acc
08A0 74BB      1989            mov     a,#(__str_6 >> 8)
08A2 C0E0      1990            push    acc
08A4 7480      1991            mov     a,#0x80
08A6 C0E0      1992            push    acc
08A8 120100    1993            lcall   _printf
08AB E581      1994            mov     a,sp
08AD 24FB      1995            add     a,#0xfb
08AF F581      1996            mov     sp,a
08B1 020100    1997            ljmp    L017038?
08B4           1998            rseg R_CSEG
08B4           1999   
0000           2000            rseg R_XINIT
0000           2001   
0000           2002            rseg R_CONST
0000           2003   __str_0:
0000 563D2535  2004            db 'V=%5.2f'
     2E3266
0007 00        2005            db 0x00
0008           2006   __str_1:
0008 25303264  2007            db '%02d:%02d'
     3A253032
     64
0011 00        2008            db 0x00
0012           2009   __str_2:
0012 4572726F  2010            db 'Error:%5.2f Left:%5.2f Right:%5.2f Left_Motor:%d Right_Motor'
     723A2535
     2E326620
     4C656674
     3A25352E
     32662052
     69676874
     3A25352E
     3266204C
     6566745F
     4D6F746F
     723A2564
     20526967
     68745F4D
     6F746F72
004E 3A256420  2011            db ':%d                '
     20202020
     20202020
     20202020
     202020
0061 0D        2012            db 0x0D
0062 00        2013            db 0x00
0063           2014   __str_3:
0063 5455524E  2015            db 'TURNING LEFT '
     494E4720
     4C454654
     20
0070 0D        2016            db 0x0D
0071 3B        2017            db ';'
0072 00        2018            db 0x00
0073           2019   __str_4:
0073 5455524E  2020            db 'TURNING Right '
     494E4720
     52696768
     7420
0081 0D        2021            db 0x0D
0082 3B        2022            db ';'
0083 00        2023            db 0x00
0084           2024   __str_5:
0084 53746172  2025            db 'Starting '
     74696E67
     20
008D 0D        2026            db 0x0D
008E 3B        2027            db ';'
008F 00        2028            db 0x00
0090           2029   __str_6:
0090 6C696E65  2030            db 'line counter: %d'
     20636F75
     6E746572
     3A202564
00A0 00        2031            db 0x00
00A1           2032   
000E           2033            CSEG
000E           2034   
000E           2035   end
