0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Dec 11 2012) (MSVC)
0000              4   ; This file was generated Sun Mar 29 09:06:04 2015
0000              5   ;--------------------------------------------------------
                  5   $name main_code
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _execute
0000             29            public _stop
0000             30            public _turn_right
0000             31            public _turn_left
0000             32            public _display_LCD
0000             33            public _Timer0ISR
0000             34            public _InitTimer0
0000             35            public _InitADC
0000             36            public _InitSerialPort
0000             37            public _Wait1S
0000             38            public _LCDprint
0000             39            public _LCD_8BIT
0000             40            public _WriteCommand
0000             41            public _WriteData
0000             42            public _LCD_byte
0000             43            public _LCD_pulse
0000             44            public _waitms
0000             45            public _Wait50us
0000             46            public _InitPorts
0000             47            public _LCDprint_PARM_3
0000             48            public _start_timer
0000             49            public _start
0000             50            public _turn_time_update
0000             51            public _time_update_flag
0000             52            public _LCDprint_PARM_2
0000             53            public _line_counter
0000             54            public _action_timer
0000             55            public _turn_timer
0000             56            public _pwm_right
0000             57            public _pwm_left
0000             58            public _pwmcount
0000             59            public _mins
0000             60            public _secs
0000             61            public _msCount
0000             62   ;--------------------------------------------------------
0000             63   ; Special Function Registers
0000             64   ;--------------------------------------------------------
0000             65   _ACC            DATA 0xe0
0000             66   _ADCON0         DATA 0x8e
0000             67   _ADCON1         DATA 0x97
0000             68   _ADINS          DATA 0xa3
0000             69   _ADMODA         DATA 0xc0
0000             70   _ADMODB         DATA 0xa1
0000             71   _AD0BH          DATA 0xbb
0000             72   _AD0BL          DATA 0xa6
0000             73   _AD0DAT0        DATA 0xc5
0000             74   _AD0DAT1        DATA 0xc6
0000             75   _AD0DAT2        DATA 0xc7
0000             76   _AD0DAT3        DATA 0xf4
0000             77   _AD1BH          DATA 0xc4
0000             78   _AD1BL          DATA 0xbc
0000             79   _AD1DAT0        DATA 0xd5
0000             80   _AD1DAT1        DATA 0xd6
0000             81   _AD1DAT2        DATA 0xd7
0000             82   _AD1DAT3        DATA 0xf5
0000             83   _AUXR1          DATA 0xa2
0000             84   _B              DATA 0xf0
0000             85   _BRGR0          DATA 0xbe
0000             86   _BRGR1          DATA 0xbf
0000             87   _BRGCON         DATA 0xbd
0000             88   _CCCRA          DATA 0xea
0000             89   _CCCRB          DATA 0xeb
0000             90   _CCCRC          DATA 0xec
0000             91   _CCCRD          DATA 0xed
0000             92   _CMP1           DATA 0xac
0000             93   _CMP2           DATA 0xad
0000             94   _DEECON         DATA 0xf1
0000             95   _DEEDAT         DATA 0xf2
0000             96   _DEEADR         DATA 0xf3
0000             97   _DIVM           DATA 0x95
0000             98   _DPH            DATA 0x83
0000             99   _DPL            DATA 0x82
0000            100   _FMADRH         DATA 0xe7
0000            101   _FMADRL         DATA 0xe6
0000            102   _FMCON          DATA 0xe4
0000            103   _FMDATA         DATA 0xe5
0000            104   _I2ADR          DATA 0xdb
0000            105   _I2CON          DATA 0xd8
0000            106   _I2DAT          DATA 0xda
0000            107   _I2SCLH         DATA 0xdd
0000            108   _I2SCLL         DATA 0xdc
0000            109   _I2STAT         DATA 0xd9
0000            110   _ICRAH          DATA 0xab
0000            111   _ICRAL          DATA 0xaa
0000            112   _ICRBH          DATA 0xaf
0000            113   _ICRBL          DATA 0xae
0000            114   _IEN0           DATA 0xa8
0000            115   _IEN1           DATA 0xe8
0000            116   _IP0            DATA 0xb8
0000            117   _IP0H           DATA 0xb7
0000            118   _IP1            DATA 0xf8
0000            119   _IP1H           DATA 0xf7
0000            120   _KBCON          DATA 0x94
0000            121   _KBMASK         DATA 0x86
0000            122   _KBPATN         DATA 0x93
0000            123   _OCRAH          DATA 0xef
0000            124   _OCRAL          DATA 0xee
0000            125   _OCRBH          DATA 0xfb
0000            126   _OCRBL          DATA 0xfa
0000            127   _OCRCH          DATA 0xfd
0000            128   _OCRCL          DATA 0xfc
0000            129   _OCRDH          DATA 0xff
0000            130   _OCRDL          DATA 0xfe
0000            131   _P0             DATA 0x80
0000            132   _P1             DATA 0x90
0000            133   _P2             DATA 0xa0
0000            134   _P3             DATA 0xb0
0000            135   _P0M1           DATA 0x84
0000            136   _P0M2           DATA 0x85
0000            137   _P1M1           DATA 0x91
0000            138   _P1M2           DATA 0x92
0000            139   _P2M1           DATA 0xa4
0000            140   _P2M2           DATA 0xa5
0000            141   _P3M1           DATA 0xb1
0000            142   _P3M2           DATA 0xb2
0000            143   _PCON           DATA 0x87
0000            144   _PCONA          DATA 0xb5
0000            145   _PSW            DATA 0xd0
0000            146   _PT0AD          DATA 0xf6
0000            147   _RSTSRC         DATA 0xdf
0000            148   _RTCCON         DATA 0xd1
0000            149   _RTCH           DATA 0xd2
0000            150   _RTCL           DATA 0xd3
0000            151   _SADDR          DATA 0xa9
0000            152   _SADEN          DATA 0xb9
0000            153   _SBUF           DATA 0x99
0000            154   _SCON           DATA 0x98
0000            155   _SSTAT          DATA 0xba
0000            156   _SP             DATA 0x81
0000            157   _SPCTL          DATA 0xe2
0000            158   _SPSTAT         DATA 0xe1
0000            159   _SPDAT          DATA 0xe3
0000            160   _TAMOD          DATA 0x8f
0000            161   _TCON           DATA 0x88
0000            162   _TCR20          DATA 0xc8
0000            163   _TCR21          DATA 0xf9
0000            164   _TH0            DATA 0x8c
0000            165   _TH1            DATA 0x8d
0000            166   _TH2            DATA 0xcd
0000            167   _TICR2          DATA 0xc9
0000            168   _TIFR2          DATA 0xe9
0000            169   _TISE2          DATA 0xde
0000            170   _TL0            DATA 0x8a
0000            171   _TL1            DATA 0x8b
0000            172   _TL2            DATA 0xcc
0000            173   _TMOD           DATA 0x89
0000            174   _TOR2H          DATA 0xcf
0000            175   _TOR2L          DATA 0xce
0000            176   _TPCR2H         DATA 0xcb
0000            177   _TPCR2L         DATA 0xca
0000            178   _TRIM           DATA 0x96
0000            179   _WDCON          DATA 0xa7
0000            180   _WDL            DATA 0xc1
0000            181   _WFEED1         DATA 0xc2
0000            182   _WFEED2         DATA 0xc3
0000            183   ;--------------------------------------------------------
0000            184   ; special function bits
0000            185   ;--------------------------------------------------------
0000            186   _ACC_7          BIT 0xe7
0000            187   _ACC_6          BIT 0xe6
0000            188   _ACC_5          BIT 0xe5
0000            189   _ACC_4          BIT 0xe4
0000            190   _ACC_3          BIT 0xe3
0000            191   _ACC_2          BIT 0xe2
0000            192   _ACC_1          BIT 0xe1
0000            193   _ACC_0          BIT 0xe0
0000            194   _ADMODA_7       BIT 0xc7
0000            195   _ADMODA_6       BIT 0xc6
0000            196   _ADMODA_5       BIT 0xc5
0000            197   _ADMODA_4       BIT 0xc4
0000            198   _ADMODA_3       BIT 0xc3
0000            199   _ADMODA_2       BIT 0xc2
0000            200   _ADMODA_1       BIT 0xc1
0000            201   _ADMODA_0       BIT 0xc0
0000            202   _BNDI1          BIT 0xc7
0000            203   _BURST1         BIT 0xc6
0000            204   _SCC1           BIT 0xc5
0000            205   _SCAN1          BIT 0xc4
0000            206   _BNDI0          BIT 0xc3
0000            207   _BURST0         BIT 0xc2
0000            208   _SCC0           BIT 0xc1
0000            209   _SCAN0          BIT 0xc0
0000            210   _B_7            BIT 0xf7
0000            211   _B_6            BIT 0xf6
0000            212   _B_5            BIT 0xf5
0000            213   _B_4            BIT 0xf4
0000            214   _B_3            BIT 0xf3
0000            215   _B_2            BIT 0xf2
0000            216   _B_1            BIT 0xf1
0000            217   _B_0            BIT 0xf0
0000            218   _I2CON_7        BIT 0xdf
0000            219   _I2CON_6        BIT 0xde
0000            220   _I2CON_5        BIT 0xdd
0000            221   _I2CON_4        BIT 0xdc
0000            222   _I2CON_3        BIT 0xdb
0000            223   _I2CON_2        BIT 0xda
0000            224   _I2CON_1        BIT 0xd9
0000            225   _I2CON_0        BIT 0xd8
0000            226   _I2EN           BIT 0xde
0000            227   _STA            BIT 0xdd
0000            228   _STO            BIT 0xdc
0000            229   _SI             BIT 0xdb
0000            230   _AA             BIT 0xda
0000            231   _CRSEL          BIT 0xd8
0000            232   _IEN0_7         BIT 0xaf
0000            233   _IEN0_6         BIT 0xae
0000            234   _IEN0_5         BIT 0xad
0000            235   _IEN0_4         BIT 0xac
0000            236   _IEN0_3         BIT 0xab
0000            237   _IEN0_2         BIT 0xaa
0000            238   _IEN0_1         BIT 0xa9
0000            239   _IEN0_0         BIT 0xa8
0000            240   _EA             BIT 0xaf
0000            241   _EWDRT          BIT 0xae
0000            242   _EBO            BIT 0xad
0000            243   _ES             BIT 0xac
0000            244   _ESR            BIT 0xac
0000            245   _ET1            BIT 0xab
0000            246   _EX1            BIT 0xaa
0000            247   _ET0            BIT 0xa9
0000            248   _EX0            BIT 0xa8
0000            249   _IEN1_7         BIT 0xef
0000            250   _IEN1_6         BIT 0xee
0000            251   _IEN1_5         BIT 0xed
0000            252   _IEN1_4         BIT 0xec
0000            253   _IEN1_3         BIT 0xeb
0000            254   _IEN1_2         BIT 0xea
0000            255   _IEN1_1         BIT 0xe9
0000            256   _IEN1_0         BIT 0xe8
0000            257   _EADEE          BIT 0xef
0000            258   _EST            BIT 0xee
0000            259   _ECCU           BIT 0xec
0000            260   _ESPI           BIT 0xeb
0000            261   _EC             BIT 0xea
0000            262   _EKBI           BIT 0xe9
0000            263   _EI2C           BIT 0xe8
0000            264   _IP0_7          BIT 0xbf
0000            265   _IP0_6          BIT 0xbe
0000            266   _IP0_5          BIT 0xbd
0000            267   _IP0_4          BIT 0xbc
0000            268   _IP0_3          BIT 0xbb
0000            269   _IP0_2          BIT 0xba
0000            270   _IP0_1          BIT 0xb9
0000            271   _IP0_0          BIT 0xb8
0000            272   _PWDRT          BIT 0xbe
0000            273   _PBO            BIT 0xbd
0000            274   _PS             BIT 0xbc
0000            275   _PSR            BIT 0xbc
0000            276   _PT1            BIT 0xbb
0000            277   _PX1            BIT 0xba
0000            278   _PT0            BIT 0xb9
0000            279   _PX0            BIT 0xb8
0000            280   _IP1_7          BIT 0xff
0000            281   _IP1_6          BIT 0xfe
0000            282   _IP1_5          BIT 0xfd
0000            283   _IP1_4          BIT 0xfc
0000            284   _IP1_3          BIT 0xfb
0000            285   _IP1_2          BIT 0xfa
0000            286   _IP1_1          BIT 0xf9
0000            287   _IP1_0          BIT 0xf8
0000            288   _PADEE          BIT 0xff
0000            289   _PST            BIT 0xfe
0000            290   _PCCU           BIT 0xfc
0000            291   _PSPI           BIT 0xfb
0000            292   _PC             BIT 0xfa
0000            293   _PKBI           BIT 0xf9
0000            294   _PI2C           BIT 0xf8
0000            295   _P0_7           BIT 0x87
0000            296   _P0_6           BIT 0x86
0000            297   _P0_5           BIT 0x85
0000            298   _P0_4           BIT 0x84
0000            299   _P0_3           BIT 0x83
0000            300   _P0_2           BIT 0x82
0000            301   _P0_1           BIT 0x81
0000            302   _P0_0           BIT 0x80
0000            303   _T1             BIT 0x87
0000            304   _KB7            BIT 0x87
0000            305   _CMP_1          BIT 0x86
0000            306   _KB6            BIT 0x86
0000            307   _CMPREF         BIT 0x85
0000            308   _KB5            BIT 0x85
0000            309   _CIN1A          BIT 0x84
0000            310   _KB4            BIT 0x84
0000            311   _CIN1B          BIT 0x83
0000            312   _KB3            BIT 0x83
0000            313   _CIN2A          BIT 0x82
0000            314   _KB2            BIT 0x82
0000            315   _CIN2B          BIT 0x81
0000            316   _KB1            BIT 0x81
0000            317   _CMP_2          BIT 0x80
0000            318   _KB0            BIT 0x80
0000            319   _P1_7           BIT 0x97
0000            320   _P1_6           BIT 0x96
0000            321   _P1_5           BIT 0x95
0000            322   _P1_4           BIT 0x94
0000            323   _P1_3           BIT 0x93
0000            324   _P1_2           BIT 0x92
0000            325   _P1_1           BIT 0x91
0000            326   _P1_0           BIT 0x90
0000            327   _OCC            BIT 0x97
0000            328   _OCB            BIT 0x96
0000            329   _RST            BIT 0x95
0000            330   _INT1           BIT 0x94
0000            331   _INT0           BIT 0x93
0000            332   _SDA            BIT 0x93
0000            333   _T0             BIT 0x92
0000            334   _SCL            BIT 0x92
0000            335   _RXD            BIT 0x91
0000            336   _TXD            BIT 0x90
0000            337   _P2_7           BIT 0xa7
0000            338   _P2_6           BIT 0xa6
0000            339   _P2_5           BIT 0xa5
0000            340   _P2_4           BIT 0xa4
0000            341   _P2_3           BIT 0xa3
0000            342   _P2_2           BIT 0xa2
0000            343   _P2_1           BIT 0xa1
0000            344   _P2_0           BIT 0xa0
0000            345   _ICA            BIT 0xa7
0000            346   _OCA            BIT 0xa6
0000            347   _SPICLK         BIT 0xa5
0000            348   _SS             BIT 0xa4
0000            349   _MISO           BIT 0xa3
0000            350   _MOSI           BIT 0xa2
0000            351   _OCD            BIT 0xa1
0000            352   _ICB            BIT 0xa0
0000            353   _P3_7           BIT 0xb7
0000            354   _P3_6           BIT 0xb6
0000            355   _P3_5           BIT 0xb5
0000            356   _P3_4           BIT 0xb4
0000            357   _P3_3           BIT 0xb3
0000            358   _P3_2           BIT 0xb2
0000            359   _P3_1           BIT 0xb1
0000            360   _P3_0           BIT 0xb0
0000            361   _XTAL1          BIT 0xb1
0000            362   _XTAL2          BIT 0xb0
0000            363   _PSW_7          BIT 0xd7
0000            364   _PSW_6          BIT 0xd6
0000            365   _PSW_5          BIT 0xd5
0000            366   _PSW_4          BIT 0xd4
0000            367   _PSW_3          BIT 0xd3
0000            368   _PSW_2          BIT 0xd2
0000            369   _PSW_1          BIT 0xd1
0000            370   _PSW_0          BIT 0xd0
0000            371   _CY             BIT 0xd7
0000            372   _AC             BIT 0xd6
0000            373   _F0             BIT 0xd5
0000            374   _RS1            BIT 0xd4
0000            375   _RS0            BIT 0xd3
0000            376   _OV             BIT 0xd2
0000            377   _F1             BIT 0xd1
0000            378   _P              BIT 0xd0
0000            379   _SCON_7         BIT 0x9f
0000            380   _SCON_6         BIT 0x9e
0000            381   _SCON_5         BIT 0x9d
0000            382   _SCON_4         BIT 0x9c
0000            383   _SCON_3         BIT 0x9b
0000            384   _SCON_2         BIT 0x9a
0000            385   _SCON_1         BIT 0x99
0000            386   _SCON_0         BIT 0x98
0000            387   _SM0            BIT 0x9f
0000            388   _FE             BIT 0x9f
0000            389   _SM1            BIT 0x9e
0000            390   _SM2            BIT 0x9d
0000            391   _REN            BIT 0x9c
0000            392   _TB8            BIT 0x9b
0000            393   _RB8            BIT 0x9a
0000            394   _TI             BIT 0x99
0000            395   _RI             BIT 0x98
0000            396   _TCON_7         BIT 0x8f
0000            397   _TCON_6         BIT 0x8e
0000            398   _TCON_5         BIT 0x8d
0000            399   _TCON_4         BIT 0x8c
0000            400   _TCON_3         BIT 0x8b
0000            401   _TCON_2         BIT 0x8a
0000            402   _TCON_1         BIT 0x89
0000            403   _TCON_0         BIT 0x88
0000            404   _TF1            BIT 0x8f
0000            405   _TR1            BIT 0x8e
0000            406   _TF0            BIT 0x8d
0000            407   _TR0            BIT 0x8c
0000            408   _IE1            BIT 0x8b
0000            409   _IT1            BIT 0x8a
0000            410   _IE0            BIT 0x89
0000            411   _IT0            BIT 0x88
0000            412   _TCR20_7        BIT 0xcf
0000            413   _TCR20_6        BIT 0xce
0000            414   _TCR20_5        BIT 0xcd
0000            415   _TCR20_4        BIT 0xcc
0000            416   _TCR20_3        BIT 0xcb
0000            417   _TCR20_2        BIT 0xca
0000            418   _TCR20_1        BIT 0xc9
0000            419   _TCR20_0        BIT 0xc8
0000            420   _PLEEN          BIT 0xcf
0000            421   _HLTRN          BIT 0xce
0000            422   _HLTEN          BIT 0xcd
0000            423   _ALTCD          BIT 0xcc
0000            424   _ALTAB          BIT 0xcb
0000            425   _TDIR2          BIT 0xca
0000            426   _TMOD21         BIT 0xc9
0000            427   _TMOD20         BIT 0xc8
0000            428   ;--------------------------------------------------------
0000            429   ; overlayable register banks
0000            430   ;--------------------------------------------------------
0000            431            rbank0 segment data overlay
0000            432   ;--------------------------------------------------------
0000            433   ; internal ram data
0000            434   ;--------------------------------------------------------
0000            435            rseg R_DSEG
0000            436   _msCount:
0000            437            ds 2
0002            438   _secs:
0002            439            ds 1
0003            440   _mins:
0003            441            ds 1
0004            442   _pwmcount:
0004            443            ds 1
0005            444   _pwm_left:
0005            445            ds 1
0006            446   _pwm_right:
0006            447            ds 1
0007            448   _turn_timer:
0007            449            ds 2
0009            450   _action_timer:
0009            451            ds 2
000B            452   _line_counter:
000B            453            ds 2
000D            454   _LCDprint_PARM_2:
000D            455            ds 1
000E            456   _display_LCD_buff_1_96:
000E            457            ds 17
001F            458   _main_cor_1_114:
001F            459            ds 4
0023            460   _main_cur_error_1_114:
0023            461            ds 4
0027            462   _main_pre_error_1_114:
0027            463            ds 4
002B            464   _main_right_1_114:
002B            465            ds 4
002F            466   _main_line_sensor_1_114:
002F            467            ds 4
0033            468   _main_diff_1_114:
0033            469            ds 4
0037            470   _main_line_counter_1_114:
0037            471            ds 2
0039            472   _main_command_1_114:
0039            473            ds 2
003B            474   _main_state_1_114:
003B            475            ds 2
003D            476   ;--------------------------------------------------------
003D            477   ; overlayable items in internal ram 
003D            478   ;--------------------------------------------------------
0000            479            rseg R_OSEG
0000            480   ;--------------------------------------------------------
0000            481   ; indirectly addressable internal ram data
0000            482   ;--------------------------------------------------------
0000            483            rseg R_ISEG
0000            484   ;--------------------------------------------------------
0000            485   ; absolute internal ram data
0000            486   ;--------------------------------------------------------
0000            487            DSEG
0000            488   ;--------------------------------------------------------
0000            489   ; bit data
0000            490   ;--------------------------------------------------------
0000            491            rseg R_BSEG
0000            492   _time_update_flag:
0000            493            DBIT    1
0001            494   _turn_time_update:
0001            495            DBIT    1
0002            496   _start:
0002            497            DBIT    1
0003            498   _start_timer:
0003            499            DBIT    1
0004            500   _LCDprint_PARM_3:
0004            501            DBIT    1
0005            502   ;--------------------------------------------------------
0005            503   ; paged external ram data
0005            504   ;--------------------------------------------------------
0000            505            rseg R_PSEG
0000            506   ;--------------------------------------------------------
0000            507   ; external ram data
0000            508   ;--------------------------------------------------------
0000            509            rseg R_XSEG
FFC8            510            XSEG at 0xffc8
FFC8            511   _BODCFG: ds 1
FFC9            512            public _BODCFG
0000            513            rseg R_XSEG
FFDE            514            XSEG at 0xffde
FFDE            515   _CLKCON: ds 1
FFDF            516            public _CLKCON
0000            517            rseg R_XSEG
FFE1            518            XSEG at 0xffe1
FFE1            519   _PGACON1: ds 1
FFE2            520            public _PGACON1
0000            521            rseg R_XSEG
FFE4            522            XSEG at 0xffe4
FFE4            523   _PGACON1B: ds 1
FFE5            524            public _PGACON1B
0000            525            rseg R_XSEG
FFE3            526            XSEG at 0xffe3
FFE3            527   _PGA1TRIM8X16X: ds 1
FFE4            528            public _PGA1TRIM8X16X
0000            529            rseg R_XSEG
FFE2            530            XSEG at 0xffe2
FFE2            531   _PGA1TRIM2X4X: ds 1
FFE3            532            public _PGA1TRIM2X4X
0000            533            rseg R_XSEG
FFCA            534            XSEG at 0xffca
FFCA            535   _PGACON0: ds 1
FFCB            536            public _PGACON0
0000            537            rseg R_XSEG
FFCE            538            XSEG at 0xffce
FFCE            539   _PGACON0B: ds 1
FFCF            540            public _PGACON0B
0000            541            rseg R_XSEG
FFCD            542            XSEG at 0xffcd
FFCD            543   _PGA0TRIM8X16X: ds 1
FFCE            544            public _PGA0TRIM8X16X
0000            545            rseg R_XSEG
FFCC            546            XSEG at 0xffcc
FFCC            547   _PGA0TRIM2X4X: ds 1
FFCD            548            public _PGA0TRIM2X4X
0000            549            rseg R_XSEG
FFBF            550            XSEG at 0xffbf
FFBF            551   _RTCDATH: ds 1
FFC0            552            public _RTCDATH
0000            553            rseg R_XSEG
FFBE            554            XSEG at 0xffbe
FFBE            555   _RTCDATL: ds 1
FFBF            556            public _RTCDATL
0000            557            rseg R_XSEG
0000            558   ;--------------------------------------------------------
0000            559   ; absolute external ram data
0000            560   ;--------------------------------------------------------
FFBF            561            XSEG
FFBF            562   ;--------------------------------------------------------
FFBF            563   ; external initialized ram data
FFBF            564   ;--------------------------------------------------------
0000            565            rseg R_IXSEG
0000            566            rseg R_HOME
0000            567            rseg R_GSINIT
0000            568            rseg R_CSEG
0000            569   ;--------------------------------------------------------
0000            570   ; Reset entry point and interrupt vectors
0000            571   ;--------------------------------------------------------
0000            572            CSEG at 0x0000
0000 020100     573            ljmp    _crt0
000B            574            CSEG at 0x000b
000B 020100     575            ljmp    _Timer0ISR
000E            576   ;--------------------------------------------------------
000E            577   ; global & static initialisations
000E            578   ;--------------------------------------------------------
0000            579            rseg R_HOME
0000            580            rseg R_GSINIT
0000            581            rseg R_GSINIT
0000            582   ;--------------------------------------------------------
0000            583   ; data variables initialization
0000            584   ;--------------------------------------------------------
0000            585            rseg R_DINIT
0000            586   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:43: volatile int msCount=0; // Volatiles can be changed by stuff outside our program, like memory registers
0000 E4         587            clr     a
0001 F508       588            mov     _msCount,a
0003 F509       589            mov     (_msCount + 1),a
0005            590   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:44: volatile unsigned char secs=0, mins=0; // They are like global variables, kinda 
0005 75C800     591            mov     _secs,#0x00
0008            592   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:44: volatile bit time_update_flag=0;
0008 758800     593            mov     _mins,#0x00
000B            594   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:49: volatile int turn_timer = 0;
000B E4         595            clr     a
000C F588       596            mov     _turn_timer,a
000E F589       597            mov     (_turn_timer + 1),a
0010            598   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:53: volatile int action_timer = 0;
0010 E4         599            clr     a
0011 F548       600            mov     _action_timer,a
0013 F549       601            mov     (_action_timer + 1),a
0015            602   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:54: volatile int line_counter = 0;
0015 E4         603            clr     a
0016 F508       604            mov     _line_counter,a
0018 F509       605            mov     (_line_counter + 1),a
001A            606   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:45: volatile bit time_update_flag=0;
001A C278       607            clr     _time_update_flag
001C            608   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:50: volatile bit turn_time_update=0;
001C C228       609            clr     _turn_time_update
001E            610   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:51: volatile bit start = 1;
001E D2D8       611            setb    _start
0020            612   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:52: volatile bit start_timer = 0;
0020 C298       613            clr     _start_timer
0022            614            ; The linker places a 'ret' at the end of segment R_DINIT.
0022            615   ;--------------------------------------------------------
0022            616   ; code
0022            617   ;--------------------------------------------------------
0000            618            rseg R_CSEG
0000            619   ;------------------------------------------------------------
0000            620   ;Allocation info for local variables in function 'InitPorts'
0000            621   ;------------------------------------------------------------
0000            622   ;------------------------------------------------------------
0000            623   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:56: void InitPorts(void)
0000            624   ;        -----------------------------------------
0000            625   ;         function InitPorts
0000            626   ;        -----------------------------------------
0000            627   _InitPorts:
0000            628            using   0
0000            629   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:58: P0M1=0x1E;
0000 75841E     630            mov     _P0M1,#0x1E
0003            631   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:59: P0M2=0x00;
0003 758500     632            mov     _P0M2,#0x00
0006            633   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:60: P1M1=0;
0006 759100     634            mov     _P1M1,#0x00
0009            635   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:61: P1M2=0;
0009 759200     636            mov     _P1M2,#0x00
000C            637   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:62: P2M1=0;
000C 75A400     638            mov     _P2M1,#0x00
000F            639   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:63: P2M2=0;
000F 75A500     640            mov     _P2M2,#0x00
0012            641   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:64: P3M1=0;
0012 75B100     642            mov     _P3M1,#0x00
0015            643   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:65: P3M2=0;
0015 75B200     644            mov     _P3M2,#0x00
0018 22         645            ret
0019            646   ;------------------------------------------------------------
0019            647   ;Allocation info for local variables in function 'Wait50us'
0019            648   ;------------------------------------------------------------
0019            649   ;------------------------------------------------------------
0019            650   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:68: void Wait50us (void)
0019            651   ;        -----------------------------------------
0019            652   ;         function Wait50us
0019            653   ;        -----------------------------------------
0019            654   _Wait50us:
0019            655   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:73: _endasm;
0019            656            
0019 7852       657             mov R0, #82
001B            658             L0:
001B D8D8       659            djnz R0, L0 ; 2 machine cycles-> 2*0.27126us*92=50us
001D            660             
001D 22         661            ret
001E            662   ;------------------------------------------------------------
001E            663   ;Allocation info for local variables in function 'waitms'
001E            664   ;------------------------------------------------------------
001E            665   ;ms                        Allocated to registers r2 r3 
001E            666   ;j                         Allocated to registers r4 r5 
001E            667   ;k                         Allocated to registers r6 
001E            668   ;------------------------------------------------------------
001E            669   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:76: void waitms (unsigned int ms)
001E            670   ;        -----------------------------------------
001E            671   ;         function waitms
001E            672   ;        -----------------------------------------
001E            673   _waitms:
001E AA82       674            mov     r2,dpl
0020 AB83       675            mov     r3,dph
0022            676   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:82: for(j=0; j<ms; j++)
0022 7C00       677            mov     r4,#0x00
0024 7D00       678            mov     r5,#0x00
0026            679   L004004?:
0026 C3         680            clr     c
0027 EC         681            mov     a,r4
0028 9A         682            subb    a,r2
0029 ED         683            mov     a,r5
002A 9B         684            subb    a,r3
002B 5001       685            jnc     L004008?
002D            686   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:83: for (k=0; k<20; k++) Wait50us();
002D 7E14       687            mov     r6,#0x14
002F            688   L004003?:
002F C002       689            push    ar2
0031 C003       690            push    ar3
0033 C004       691            push    ar4
0035 C005       692            push    ar5
0037 C006       693            push    ar6
0039 120100     694            lcall   _Wait50us
003C D006       695            pop     ar6
003E D005       696            pop     ar5
0040 D004       697            pop     ar4
0042 D003       698            pop     ar3
0044 D002       699            pop     ar2
0046 DE18       700            djnz    r6,L004003?
0048            701   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:82: for(j=0; j<ms; j++)
0048 0C         702            inc     r4
0049 BC0098     703            cjne    r4,#0x00,L004004?
004C 0D         704            inc     r5
004D 8001       705            sjmp    L004004?
004F            706   L004008?:
004F 22         707            ret
0050            708   ;------------------------------------------------------------
0050            709   ;Allocation info for local variables in function 'LCD_pulse'
0050            710   ;------------------------------------------------------------
0050            711   ;------------------------------------------------------------
0050            712   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:86: void LCD_pulse (void)
0050            713   ;        -----------------------------------------
0050            714   ;         function LCD_pulse
0050            715   ;        -----------------------------------------
0050            716   _LCD_pulse:
0050            717   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:88: LCD_E=1;
0050 D2A5       718            setb    _P2_5
0052            719   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:89: Wait50us();
0052 120100     720            lcall   _Wait50us
0055            721   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:90: LCD_E=0;
0055 C2A5       722            clr     _P2_5
0057 22         723            ret
0058            724   ;------------------------------------------------------------
0058            725   ;Allocation info for local variables in function 'LCD_byte'
0058            726   ;------------------------------------------------------------
0058            727   ;x                         Allocated to registers 
0058            728   ;------------------------------------------------------------
0058            729   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:93: void LCD_byte (unsigned char x)
0058            730   ;        -----------------------------------------
0058            731   ;         function LCD_byte
0058            732   ;        -----------------------------------------
0058            733   _LCD_byte:
0058 8582E0     734            mov     _ACC,dpl
005B            735   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:97: LCD_D7=ACC_7;
005B A2E7       736            mov     c,_ACC_7
005D 9294       737            mov     _P1_4,c
005F            738   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:98: LCD_D6=ACC_6;
005F A2E6       739            mov     c,_ACC_6
0061 9296       740            mov     _P1_6,c
0063            741   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:99: LCD_D5=ACC_5;
0063 A2E5       742            mov     c,_ACC_5
0065 9297       743            mov     _P1_7,c
0067            744   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:100: LCD_D4=ACC_4;
0067 A2E4       745            mov     c,_ACC_4
0069 92A0       746            mov     _P2_0,c
006B            747   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:101: LCD_D3=ACC_3;
006B A2E3       748            mov     c,_ACC_3
006D 92A1       749            mov     _P2_1,c
006F            750   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:102: LCD_D2=ACC_2;
006F A2E2       751            mov     c,_ACC_2
0071 92A2       752            mov     _P2_2,c
0073            753   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:103: LCD_D1=ACC_1;
0073 A2E1       754            mov     c,_ACC_1
0075 92A3       755            mov     _P2_3,c
0077            756   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:104: LCD_D0=ACC_0;
0077 A2E0       757            mov     c,_ACC_0
0079 92A4       758            mov     _P2_4,c
007B            759   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:105: LCD_pulse();
007B 020100     760            ljmp    _LCD_pulse
007E            761   ;------------------------------------------------------------
007E            762   ;Allocation info for local variables in function 'WriteData'
007E            763   ;------------------------------------------------------------
007E            764   ;x                         Allocated to registers r2 
007E            765   ;------------------------------------------------------------
007E            766   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:108: void WriteData (unsigned char x)
007E            767   ;        -----------------------------------------
007E            768   ;         function WriteData
007E            769   ;        -----------------------------------------
007E            770   _WriteData:
007E AA82       771            mov     r2,dpl
0080            772   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:110: LCD_RS=1;
0080 D2A7       773            setb    _P2_7
0082            774   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:111: LCD_byte(x);
0082 8A82       775            mov     dpl,r2
0084 120100     776            lcall   _LCD_byte
0087            777   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:112: waitms(2);
0087 900002     778            mov     dptr,#0x0002
008A 020100     779            ljmp    _waitms
008D            780   ;------------------------------------------------------------
008D            781   ;Allocation info for local variables in function 'WriteCommand'
008D            782   ;------------------------------------------------------------
008D            783   ;x                         Allocated to registers r2 
008D            784   ;------------------------------------------------------------
008D            785   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:115: void WriteCommand (unsigned char x)
008D            786   ;        -----------------------------------------
008D            787   ;         function WriteCommand
008D            788   ;        -----------------------------------------
008D            789   _WriteCommand:
008D AA82       790            mov     r2,dpl
008F            791   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:117: LCD_RS=0;
008F C2A7       792            clr     _P2_7
0091            793   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:118: LCD_byte(x);
0091 8A82       794            mov     dpl,r2
0093 120100     795            lcall   _LCD_byte
0096            796   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:119: waitms(5);
0096 900005     797            mov     dptr,#0x0005
0099 020100     798            ljmp    _waitms
009C            799   ;------------------------------------------------------------
009C            800   ;Allocation info for local variables in function 'LCD_8BIT'
009C            801   ;------------------------------------------------------------
009C            802   ;------------------------------------------------------------
009C            803   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:122: void LCD_8BIT (void)
009C            804   ;        -----------------------------------------
009C            805   ;         function LCD_8BIT
009C            806   ;        -----------------------------------------
009C            807   _LCD_8BIT:
009C            808   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:124: LCD_E=0;  // Resting state of LCD's enable is zero
009C C2A5       809            clr     _P2_5
009E            810   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:125: LCD_RW=0; // We are only writing to the LCD in this program
009E C2A6       811            clr     _P2_6
00A0            812   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:126: waitms(20);
00A0 900014     813            mov     dptr,#0x0014
00A3 120100     814            lcall   _waitms
00A6            815   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:128: WriteCommand(0x33);
00A6 758233     816            mov     dpl,#0x33
00A9 120100     817            lcall   _WriteCommand
00AC            818   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:129: WriteCommand(0x33);
00AC 758233     819            mov     dpl,#0x33
00AF 120100     820            lcall   _WriteCommand
00B2            821   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:130: WriteCommand(0x33); // Stay in 8-bit mode
00B2 758233     822            mov     dpl,#0x33
00B5 120100     823            lcall   _WriteCommand
00B8            824   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:133: WriteCommand(0x38);
00B8 758238     825            mov     dpl,#0x38
00BB 120100     826            lcall   _WriteCommand
00BE            827   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:134: WriteCommand(0x0c);
00BE 75820C     828            mov     dpl,#0x0C
00C1 120100     829            lcall   _WriteCommand
00C4            830   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:135: WriteCommand(0x01); // Clear screen command (takes some time)
00C4 758201     831            mov     dpl,#0x01
00C7 120100     832            lcall   _WriteCommand
00CA            833   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:136: waitms(20); // Wait for clear screen command to finsih.
00CA 900014     834            mov     dptr,#0x0014
00CD 020100     835            ljmp    _waitms
00D0            836   ;------------------------------------------------------------
00D0            837   ;Allocation info for local variables in function 'LCDprint'
00D0            838   ;------------------------------------------------------------
00D0            839   ;line                      Allocated with name '_LCDprint_PARM_2'
00D0            840   ;string                    Allocated to registers r2 r3 r4 
00D0            841   ;j                         Allocated to registers r5 
00D0            842   ;------------------------------------------------------------
00D0            843   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:139: void LCDprint(char * string, unsigned char line, bit clear)
00D0            844   ;        -----------------------------------------
00D0            845   ;         function LCDprint
00D0            846   ;        -----------------------------------------
00D0            847   _LCDprint:
00D0 AA82       848            mov     r2,dpl
00D2 AB83       849            mov     r3,dph
00D4 ACF0       850            mov     r4,b
00D6            851   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:143: WriteCommand(line==2?0xc0:0x80);
00D6 7402       852            mov     a,#0x02
00D8 B5C898     853            cjne    a,_LCDprint_PARM_2,L010013?
00DB 7DC0       854            mov     r5,#0xC0
00DD 8001       855            sjmp    L010014?
00DF            856   L010013?:
00DF 7D80       857            mov     r5,#0x80
00E1            858   L010014?:
00E1 8D82       859            mov     dpl,r5
00E3 C002       860            push    ar2
00E5 C003       861            push    ar3
00E7 C004       862            push    ar4
00E9 120100     863            lcall   _WriteCommand
00EC            864   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:144: waitms(5);
00EC 900005     865            mov     dptr,#0x0005
00EF 120100     866            lcall   _waitms
00F2 D004       867            pop     ar4
00F4 D003       868            pop     ar3
00F6 D002       869            pop     ar2
00F8            870   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:145: for(j=0; string[j]!=0; j++)     WriteData(string[j]);// Write the message
00F8 7D00       871            mov     r5,#0x00
00FA            872   L010003?:
00FA ED         873            mov     a,r5
00FB 2A         874            add     a,r2
00FC FE         875            mov     r6,a
00FD E4         876            clr     a
00FE 3B         877            addc    a,r3
00FF FF         878            mov     r7,a
0100 8C00       879            mov     ar0,r4
0102 8E82       880            mov     dpl,r6
0104 8F83       881            mov     dph,r7
0106 88F0       882            mov     b,r0
0108 120100     883            lcall   __gptrget
010B FE         884            mov     r6,a
010C 6001       885            jz      L010006?
010E 8E82       886            mov     dpl,r6
0110 C002       887            push    ar2
0112 C003       888            push    ar3
0114 C004       889            push    ar4
0116 C005       890            push    ar5
0118 120100     891            lcall   _WriteData
011B D005       892            pop     ar5
011D D004       893            pop     ar4
011F D003       894            pop     ar3
0121 D002       895            pop     ar2
0123 0D         896            inc     r5
0124 8001       897            sjmp    L010003?
0126            898   L010006?:
0126            899   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:146: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0126 3058D8     900            jnb     _LCDprint_PARM_3,L010011?
0129 8D02       901            mov     ar2,r5
012B            902   L010007?:
012B BA1058     903            cjne    r2,#0x10,L010026?
012E            904   L010026?:
012E 5001       905            jnc     L010011?
0130 758220     906            mov     dpl,#0x20
0133 C002       907            push    ar2
0135 120100     908            lcall   _WriteData
0138 D002       909            pop     ar2
013A 0A         910            inc     r2
013B 8001       911            sjmp    L010007?
013D            912   L010011?:
013D 22         913            ret
013E            914   ;------------------------------------------------------------
013E            915   ;Allocation info for local variables in function 'Wait1S'
013E            916   ;------------------------------------------------------------
013E            917   ;------------------------------------------------------------
013E            918   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:149: void Wait1S (void)
013E            919   ;        -----------------------------------------
013E            920   ;         function Wait1S
013E            921   ;        -----------------------------------------
013E            922   _Wait1S:
013E            923   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:158: _endasm;
013E            924            
013E 7A28       925             mov R2, #40
0140            926             L3:
0140 79FA       927            mov R1, #250
0142            928             L2:
0142 78B8       929            mov R0, #184
0144            930             L1:
0144 D818       931            djnz R0, L1 ; 2 machine cycles-> 2*0.27126us*184=100us
0146 D9D8       932             djnz R1, L2 ; 100us*250=0.025s
0148 DA98       933             djnz R2, L3 ; 0.025s*40=1s
014A            934             
014A 22         935            ret
014B            936   ;------------------------------------------------------------
014B            937   ;Allocation info for local variables in function 'InitSerialPort'
014B            938   ;------------------------------------------------------------
014B            939   ;------------------------------------------------------------
014B            940   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:161: void InitSerialPort(void)
014B            941   ;        -----------------------------------------
014B            942   ;         function InitSerialPort
014B            943   ;        -----------------------------------------
014B            944   _InitSerialPort:
014B            945   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:163: BRGCON=0x00; //Make sure the baud rate generator is off
014B 75BD00     946            mov     _BRGCON,#0x00
014E            947   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:164: BRGR1=((XTAL/BAUD)-16)/0x100;
014E 75BF00     948            mov     _BRGR1,#0x00
0151            949   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:165: BRGR0=((XTAL/BAUD)-16)%0x100;
0151 75BE30     950            mov     _BRGR0,#0x30
0154            951   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:166: BRGCON=0x03; //Turn-on the baud rate generator
0154 75BD03     952            mov     _BRGCON,#0x03
0157            953   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:167: SCON=0x52; //Serial port in mode 1, ren, txrdy, rxempty
0157 759852     954            mov     _SCON,#0x52
015A            955   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:168: P1M1=0x00; //Enable pins RxD and Txd
015A 759100     956            mov     _P1M1,#0x00
015D            957   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:169: P1M2=0x00; //Enable pins RxD and Txd
015D 759200     958            mov     _P1M2,#0x00
0160 22         959            ret
0161            960   ;------------------------------------------------------------
0161            961   ;Allocation info for local variables in function 'InitADC'
0161            962   ;------------------------------------------------------------
0161            963   ;------------------------------------------------------------
0161            964   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:172: void InitADC(void)
0161            965   ;        -----------------------------------------
0161            966   ;         function InitADC
0161            967   ;        -----------------------------------------
0161            968   _InitADC:
0161            969   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:176: P0M1 |= (P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0161 43841E     970            orl     _P0M1,#0x1E
0164            971   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:177: P0M2 &= ~(P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0164 5385E1     972            anl     _P0M2,#0xE1
0167            973   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:180: BURST1=1; //Autoscan continuous conversion mode
0167 D2C6       974            setb    _BURST1
0169            975   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:181: ADMODB = CLK0; //ADC1 clock is 7.3728MHz/2
0169 75A120     976            mov     _ADMODB,#0x20
016C            977   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:182: ADINS  = (ADI13|ADI12|ADI11|ADI10); // Select the four channels for conversion
016C 75A3F0     978            mov     _ADINS,#0xF0
016F            979   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:183: ADCON1 = (ENADC1|ADCS10); //Enable the converter and start immediately
016F 759705     980            mov     _ADCON1,#0x05
0172            981   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:184: while((ADCI1&ADCON1)==0); //Wait for first conversion to complete
0172            982   L013001?:
0172 E597       983            mov     a,_ADCON1
0174 30E358     984            jnb     acc.3,L013001?
0177 22         985            ret
0178            986   ;------------------------------------------------------------
0178            987   ;Allocation info for local variables in function 'InitTimer0'
0178            988   ;------------------------------------------------------------
0178            989   ;------------------------------------------------------------
0178            990   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:187: void InitTimer0 (void)
0178            991   ;        -----------------------------------------
0178            992   ;         function InitTimer0
0178            993   ;        -----------------------------------------
0178            994   _InitTimer0:
0178            995   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:191: TR0=0; // Stop timer 0
0178 C28C       996            clr     _TR0
017A            997   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:192: TMOD=(TMOD&0xf0)|0x01; // 16-bit timer
017A 74F0       998            mov     a,#0xF0
017C 5589       999            anl     a,_TMOD
017E 4401      1000            orl     a,#0x01
0180 F589      1001            mov     _TMOD,a
0182           1002   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:193: TH0=TIMER0_RELOAD_VALUE/0x100; // I think the RHS is 0001 0000 0000, are we dividing?
0182 758CFE    1003            mov     _TH0,#0xFE
0185           1004   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:194: TL0=TIMER0_RELOAD_VALUE%0x100; // % means modulo, apparently? ...are we modulo-ing?
0185 758A90    1005            mov     _TL0,#0x90
0188           1006   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:195: TR0=1; // Start timer 0 (bit 4 in TCON)
0188 D28C      1007            setb    _TR0
018A           1008   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:196: ET0=1; // Enable timer 0 interrupt - the interrupt controller IEN0 is bit-adressable, so we change only the bit we need
018A D2A9      1009            setb    _ET0
018C           1010   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:197: EA=1;  // Enable global interrupts
018C D2AF      1011            setb    _EA
018E 22        1012            ret
018F           1013   ;------------------------------------------------------------
018F           1014   ;Allocation info for local variables in function 'Timer0ISR'
018F           1015   ;------------------------------------------------------------
018F           1016   ;------------------------------------------------------------
018F           1017   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:201: void Timer0ISR (void) interrupt 1{
018F           1018   ;        -----------------------------------------
018F           1019   ;         function Timer0ISR
018F           1020   ;        -----------------------------------------
018F           1021   _Timer0ISR:
018F C0E0      1022            push    acc
0191 C0D0      1023            push    psw
0193 75D000    1024            mov     psw,#0x00
0196           1025   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:203: TR0=0; // Stop timer 0
0196 C28C      1026            clr     _TR0
0198           1027   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:204: TH0=TIMER0_RELOAD_VALUE/0x100;
0198 758CFE    1028            mov     _TH0,#0xFE
019B           1029   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:205: TL0=TIMER0_RELOAD_VALUE%0x100;
019B 758A90    1030            mov     _TL0,#0x90
019E           1031   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:206: TR0=1; // Start timer 0
019E D28C      1032            setb    _TR0
01A0           1033   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:208: if(++pwmcount>99) pwmcount=0;
01A0 0548      1034            inc     _pwmcount
01A2 E548      1035            mov     a,_pwmcount
01A4 249C      1036            add     a,#0xff - 0x63
01A6 5001      1037            jnc     L015002?
01A8 754800    1038            mov     _pwmcount,#0x00
01AB           1039   L015002?:
01AB           1040   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:209: P0_5=(pwm_left>pwmcount)?1:0;
01AB C3        1041            clr     c
01AC E548      1042            mov     a,_pwmcount
01AE 9508      1043            subb    a,_pwm_left
01B0 9285      1044            mov     _P0_5,c
01B2           1045   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:210: P0_6=(pwm_right>pwmcount)?1:0;
01B2 C3        1046            clr     c
01B3 E548      1047            mov     a,_pwmcount
01B5 95C8      1048            subb    a,_pwm_right
01B7 9286      1049            mov     _P0_6,c
01B9           1050   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:212: msCount++;
01B9 7401      1051            mov     a,#0x01
01BB 2508      1052            add     a,_msCount
01BD F508      1053            mov     _msCount,a
01BF E4        1054            clr     a
01C0 3509      1055            addc    a,(_msCount + 1)
01C2 F509      1056            mov     (_msCount + 1),a
01C4           1057   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:213: if(msCount==10000)
01C4 7410      1058            mov     a,#0x10
01C6 B50858    1059            cjne    a,_msCount,L015008?
01C9 7427      1060            mov     a,#0x27
01CB B50958    1061            cjne    a,(_msCount + 1),L015008?
01CE           1062   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:215: time_update_flag=1;
01CE D278      1063            setb    _time_update_flag
01D0           1064   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:216: msCount=0;
01D0 E4        1065            clr     a
01D1 F508      1066            mov     _msCount,a
01D3 F509      1067            mov     (_msCount + 1),a
01D5           1068   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:217: secs++;
01D5 05C8      1069            inc     _secs
01D7           1070   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:218: if(secs==60)
01D7 743C      1071            mov     a,#0x3C
01D9 B5C858    1072            cjne    a,_secs,L015008?
01DC           1073   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:220: secs=0;
01DC 75C800    1074            mov     _secs,#0x00
01DF           1075   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:221: mins++;
01DF 0588      1076            inc     _mins
01E1           1077   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:222: if(mins==60)
01E1 743C      1078            mov     a,#0x3C
01E3 B58858    1079            cjne    a,_mins,L015008?
01E6           1080   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:224: mins=0;
01E6 758800    1081            mov     _mins,#0x00
01E9           1082   L015008?:
01E9           1083   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:229: if(turn_time_update == 1){
01E9 302898    1084            jnb     _turn_time_update,L015010?
01EC           1085   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:230: turn_timer++;
01EC 7401      1086            mov     a,#0x01
01EE 2588      1087            add     a,_turn_timer
01F0 F588      1088            mov     _turn_timer,a
01F2 E4        1089            clr     a
01F3 3589      1090            addc    a,(_turn_timer + 1)
01F5 F589      1091            mov     (_turn_timer + 1),a
01F7           1092   L015010?:
01F7           1093   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:233: if(start_timer == 1){
01F7 3098D8    1094            jnb     _start_timer,L015015?
01FA           1095   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:234: action_timer++;
01FA 7401      1096            mov     a,#0x01
01FC 2548      1097            add     a,_action_timer
01FE F548      1098            mov     _action_timer,a
0200 E4        1099            clr     a
0201 3549      1100            addc    a,(_action_timer + 1)
0203 F549      1101            mov     (_action_timer + 1),a
0205           1102   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:235: if(action_timer == 20000){
0205 7420      1103            mov     a,#0x20
0207 B548D8    1104            cjne    a,_action_timer,L015015?
020A 744E      1105            mov     a,#0x4E
020C B549D8    1106            cjne    a,(_action_timer + 1),L015015?
020F           1107   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:236: action_timer = 0;
020F E4        1108            clr     a
0210 F548      1109            mov     _action_timer,a
0212 F549      1110            mov     (_action_timer + 1),a
0214           1111   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:237: start_timer = 0;
0214 C298      1112            clr     _start_timer
0216           1113   L015015?:
0216 D0D0      1114            pop     psw
0218 D0E0      1115            pop     acc
021A 32        1116            reti
021B           1117   ;        eliminated unneeded push/pop dpl
021B           1118   ;        eliminated unneeded push/pop dph
021B           1119   ;        eliminated unneeded push/pop b
021B           1120   ;------------------------------------------------------------
021B           1121   ;Allocation info for local variables in function 'display_LCD'
021B           1122   ;------------------------------------------------------------
021B           1123   ;buff                      Allocated with name '_display_LCD_buff_1_96'
021B           1124   ;------------------------------------------------------------
021B           1125   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:243: void display_LCD(void){
021B           1126   ;        -----------------------------------------
021B           1127   ;         function display_LCD
021B           1128   ;        -----------------------------------------
021B           1129   _display_LCD:
021B           1130   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:246: time_update_flag=0;
021B C278      1131            clr     _time_update_flag
021D           1132   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:259: sprintf(buff, "LS=%5.2f", (AD1DAT3/255.0)*3.3); //Display Line Sensor
021D 85F582    1133            mov     dpl,_AD1DAT3
0220 120100    1134            lcall   ___uchar2fs
0223 AA82      1135            mov     r2,dpl
0225 AB83      1136            mov     r3,dph
0227 ACF0      1137            mov     r4,b
0229 FD        1138            mov     r5,a
022A E4        1139            clr     a
022B C0E0      1140            push    acc
022D C0E0      1141            push    acc
022F 747F      1142            mov     a,#0x7F
0231 C0E0      1143            push    acc
0233 7443      1144            mov     a,#0x43
0235 C0E0      1145            push    acc
0237 8A82      1146            mov     dpl,r2
0239 8B83      1147            mov     dph,r3
023B 8CF0      1148            mov     b,r4
023D ED        1149            mov     a,r5
023E 120100    1150            lcall   ___fsdiv
0241 AA82      1151            mov     r2,dpl
0243 AB83      1152            mov     r3,dph
0245 ACF0      1153            mov     r4,b
0247 FD        1154            mov     r5,a
0248 E581      1155            mov     a,sp
024A 24FC      1156            add     a,#0xfc
024C F581      1157            mov     sp,a
024E C002      1158            push    ar2
0250 C003      1159            push    ar3
0252 C004      1160            push    ar4
0254 C005      1161            push    ar5
0256 903333    1162            mov     dptr,#0x3333
0259 75F053    1163            mov     b,#0x53
025C 7440      1164            mov     a,#0x40
025E 120100    1165            lcall   ___fsmul
0261 AA82      1166            mov     r2,dpl
0263 AB83      1167            mov     r3,dph
0265 ACF0      1168            mov     r4,b
0267 FD        1169            mov     r5,a
0268 E581      1170            mov     a,sp
026A 24FC      1171            add     a,#0xfc
026C F581      1172            mov     sp,a
026E C002      1173            push    ar2
0270 C003      1174            push    ar3
0272 C004      1175            push    ar4
0274 C005      1176            push    ar5
0276 7418      1177            mov     a,#__str_0
0278 C0E0      1178            push    acc
027A 74B1      1179            mov     a,#(__str_0 >> 8)
027C C0E0      1180            push    acc
027E 7480      1181            mov     a,#0x80
0280 C0E0      1182            push    acc
0282 7498      1183            mov     a,#_display_LCD_buff_1_96
0284 C0E0      1184            push    acc
0286 74A3      1185            mov     a,#(_display_LCD_buff_1_96 >> 8)
0288 C0E0      1186            push    acc
028A 7440      1187            mov     a,#0x40
028C C0E0      1188            push    acc
028E 120100    1189            lcall   _sprintf
0291 E581      1190            mov     a,sp
0293 24F6      1191            add     a,#0xf6
0295 F581      1192            mov     sp,a
0297           1193   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:260: LCDprint(buff, 1, 1);
0297 75C801    1194            mov     _LCDprint_PARM_2,#0x01
029A D258      1195            setb    _LCDprint_PARM_3
029C 90A398    1196            mov     dptr,#_display_LCD_buff_1_96
029F 75F040    1197            mov     b,#0x40
02A2 120100    1198            lcall   _LCDprint
02A5           1199   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:261: sprintf(buff, "LC=%d ST=%d", line_counter, start_timer); // Display line counter, start_timer
02A5 A298      1200            mov     c,_start_timer
02A7 E4        1201            clr     a
02A8 33        1202            rlc     a
02A9 FA        1203            mov     r2,a
02AA 7B00      1204            mov     r3,#0x00
02AC C002      1205            push    ar2
02AE C003      1206            push    ar3
02B0 C008      1207            push    _line_counter
02B2 C009      1208            push    (_line_counter + 1)
02B4 7498      1209            mov     a,#__str_1
02B6 C0E0      1210            push    acc
02B8 74B1      1211            mov     a,#(__str_1 >> 8)
02BA C0E0      1212            push    acc
02BC 7480      1213            mov     a,#0x80
02BE C0E0      1214            push    acc
02C0 7498      1215            mov     a,#_display_LCD_buff_1_96
02C2 C0E0      1216            push    acc
02C4 74A3      1217            mov     a,#(_display_LCD_buff_1_96 >> 8)
02C6 C0E0      1218            push    acc
02C8 7440      1219            mov     a,#0x40
02CA C0E0      1220            push    acc
02CC 120100    1221            lcall   _sprintf
02CF E581      1222            mov     a,sp
02D1 24F6      1223            add     a,#0xf6
02D3 F581      1224            mov     sp,a
02D5           1225   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:262: LCDprint(buff, 2, 1);
02D5 75C802    1226            mov     _LCDprint_PARM_2,#0x02
02D8 D258      1227            setb    _LCDprint_PARM_3
02DA 90A398    1228            mov     dptr,#_display_LCD_buff_1_96
02DD 75F040    1229            mov     b,#0x40
02E0 020100    1230            ljmp    _LCDprint
02E3           1231   ;------------------------------------------------------------
02E3           1232   ;Allocation info for local variables in function 'turn_left'
02E3           1233   ;------------------------------------------------------------
02E3           1234   ;------------------------------------------------------------
02E3           1235   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:266: void turn_left(void){
02E3           1236   ;        -----------------------------------------
02E3           1237   ;         function turn_left
02E3           1238   ;        -----------------------------------------
02E3           1239   _turn_left:
02E3           1240   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:267: turn_timer = 0;
02E3 E4        1241            clr     a
02E4 F588      1242            mov     _turn_timer,a
02E6 F589      1243            mov     (_turn_timer + 1),a
02E8           1244   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:268: turn_time_update = 1;
02E8 D228      1245            setb    _turn_time_update
02EA           1246   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:269: while(1){
02EA           1247   L017004?:
02EA           1248   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:270: pwm_left = 20;
02EA 750814    1249            mov     _pwm_left,#0x14
02ED           1250   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:271: pwm_right = 100;
02ED 75C864    1251            mov     _pwm_right,#0x64
02F0           1252   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:272: if(turn_timer == 2000){
02F0 74D0      1253            mov     a,#0xD0
02F2 B588D8    1254            cjne    a,_turn_timer,L017004?
02F5 7407      1255            mov     a,#0x07
02F7 B589D8    1256            cjne    a,(_turn_timer + 1),L017004?
02FA           1257   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:273: turn_time_update = 0;
02FA C228      1258            clr     _turn_time_update
02FC           1259   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:274: turn_timer = 0;
02FC E4        1260            clr     a
02FD F588      1261            mov     _turn_timer,a
02FF F589      1262            mov     (_turn_timer + 1),a
0301           1263   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:275: break;
0301 22        1264            ret
0302           1265   ;------------------------------------------------------------
0302           1266   ;Allocation info for local variables in function 'turn_right'
0302           1267   ;------------------------------------------------------------
0302           1268   ;------------------------------------------------------------
0302           1269   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:279: void turn_right(void){
0302           1270   ;        -----------------------------------------
0302           1271   ;         function turn_right
0302           1272   ;        -----------------------------------------
0302           1273   _turn_right:
0302           1274   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:280: turn_timer = 0;
0302 E4        1275            clr     a
0303 F588      1276            mov     _turn_timer,a
0305 F589      1277            mov     (_turn_timer + 1),a
0307           1278   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:281: turn_time_update = 1;
0307 D228      1279            setb    _turn_time_update
0309           1280   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:282: while(1){
0309           1281   L018004?:
0309           1282   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:283: pwm_left = 100;
0309 750864    1283            mov     _pwm_left,#0x64
030C           1284   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:284: pwm_right = 20;
030C 75C814    1285            mov     _pwm_right,#0x14
030F           1286   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:285: if(turn_timer == 2000){
030F 74D0      1287            mov     a,#0xD0
0311 B58818    1288            cjne    a,_turn_timer,L018004?
0314 7407      1289            mov     a,#0x07
0316 B58918    1290            cjne    a,(_turn_timer + 1),L018004?
0319           1291   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:286: turn_time_update = 0;
0319 C228      1292            clr     _turn_time_update
031B           1293   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:287: turn_timer = 0;
031B E4        1294            clr     a
031C F588      1295            mov     _turn_timer,a
031E F589      1296            mov     (_turn_timer + 1),a
0320           1297   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:288: break;
0320 22        1298            ret
0321           1299   ;------------------------------------------------------------
0321           1300   ;Allocation info for local variables in function 'stop'
0321           1301   ;------------------------------------------------------------
0321           1302   ;------------------------------------------------------------
0321           1303   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:293: void stop(void){
0321           1304   ;        -----------------------------------------
0321           1305   ;         function stop
0321           1306   ;        -----------------------------------------
0321           1307   _stop:
0321           1308   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:294: while(1){
0321           1309   L019002?:
0321           1310   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:295: pwm_left = 0;
0321 750800    1311            mov     _pwm_left,#0x00
0324           1312   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:296: pwm_right = 0;
0324 75C800    1313            mov     _pwm_right,#0x00
0327 8001      1314            sjmp    L019002?
0329           1315   ;------------------------------------------------------------
0329           1316   ;Allocation info for local variables in function 'execute'
0329           1317   ;------------------------------------------------------------
0329           1318   ;command                   Allocated to registers r2 r3 
0329           1319   ;------------------------------------------------------------
0329           1320   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:300: void execute(int command){
0329           1321   ;        -----------------------------------------
0329           1322   ;         function execute
0329           1323   ;        -----------------------------------------
0329           1324   _execute:
0329 AA82      1325            mov     r2,dpl
032B AB83      1326            mov     r3,dph
032D           1327   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:301: switch(command){
032D BA0298    1328            cjne    r2,#0x02,L020014?
0330 BB0098    1329            cjne    r3,#0x00,L020014?
0333 8001      1330            sjmp    L020001?
0335           1331   L020014?:
0335 BA0318    1332            cjne    r2,#0x03,L020015?
0338 BB0018    1333            cjne    r3,#0x00,L020015?
033B 8001      1334            sjmp    L020002?
033D           1335   L020015?:
033D           1336   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:302: case 2:
033D BA0498    1337            cjne    r2,#0x04,L020008?
0340 BB0098    1338            cjne    r3,#0x00,L020008?
0343 8001      1339            sjmp    L020003?
0345           1340   L020001?:
0345           1341   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:303: turn_left();
0345 120100    1342            lcall   _turn_left
0348           1343   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:304: case 3:
0348           1344   L020002?:
0348           1345   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:305: turn_right();
0348 120100    1346            lcall   _turn_right
034B           1347   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:306: case 4:
034B           1348   L020003?:
034B           1349   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:307: if(start == 1){
034B           1350   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:308: start = 0;
034B 10D818    1351            jbc     _start,L020017?
034E 8001      1352            sjmp    L020005?
0350           1353   L020017?:
0350 22        1354            ret
0351           1355   L020005?:
0351           1356   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:311: stop();
0351           1357   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:313: }
0351 020100    1358            ljmp    _stop
0354           1359   L020008?:
0354 22        1360            ret
0355           1361   ;------------------------------------------------------------
0355           1362   ;Allocation info for local variables in function 'main'
0355           1363   ;------------------------------------------------------------
0355           1364   ;cor                       Allocated with name '_main_cor_1_114'
0355           1365   ;cur_error                 Allocated with name '_main_cur_error_1_114'
0355           1366   ;pre_error                 Allocated with name '_main_pre_error_1_114'
0355           1367   ;thresh                    Allocated to registers 
0355           1368   ;left                      Allocated to registers r2 r3 r4 r5 
0355           1369   ;right                     Allocated with name '_main_right_1_114'
0355           1370   ;line_sensor               Allocated with name '_main_line_sensor_1_114'
0355           1371   ;diff                      Allocated with name '_main_diff_1_114'
0355           1372   ;line_counter              Allocated with name '_main_line_counter_1_114'
0355           1373   ;command                   Allocated with name '_main_command_1_114'
0355           1374   ;state                     Allocated with name '_main_state_1_114'
0355           1375   ;------------------------------------------------------------
0355           1376   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:316: void main (void){
0355           1377   ;        -----------------------------------------
0355           1378   ;         function main
0355           1379   ;        -----------------------------------------
0355           1380   _main:
0355           1381   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:319: double cur_error =0;
0355           1382   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:324: double left = (AD1DAT1/255.0)*3.3;
0355 E4        1383            clr     a
0356 F528      1384            mov     _main_cur_error_1_114,a
0358 F529      1385            mov     (_main_cur_error_1_114 + 1),a
035A F52A      1386            mov     (_main_cur_error_1_114 + 2),a
035C F52B      1387            mov     (_main_cur_error_1_114 + 3),a
035E E5D6      1388            mov     a,_AD1DAT1
0360           1389   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:325: double right = (AD1DAT2/255.0)*3.3;
0360 E5D7      1390            mov     a,_AD1DAT2
0362           1391   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:326: double line_sensor = (AD1DAT3/255.0)*3.3;
0362 E5F5      1392            mov     a,_AD1DAT3
0364           1393   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:330: int line_counter = 0;
0364           1394   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:331: int command = 0;
0364 E4        1395            clr     a
0365 F5B8      1396            mov     _main_line_counter_1_114,a
0367 F5B9      1397            mov     (_main_line_counter_1_114 + 1),a
0369 F508      1398            mov     _main_command_1_114,a
036B F509      1399            mov     (_main_command_1_114 + 1),a
036D           1400   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:332: int state = 1;  
036D 755801    1401            mov     _main_state_1_114,#0x01
0370 E4        1402            clr     a
0371 F559      1403            mov     (_main_state_1_114 + 1),a
0373           1404   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:335: InitPorts();
0373 120100    1405            lcall   _InitPorts
0376           1406   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:336: LCD_8BIT();
0376 120100    1407            lcall   _LCD_8BIT
0379           1408   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:337: InitSerialPort();
0379 120100    1409            lcall   _InitSerialPort
037C           1410   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:338: InitADC();
037C 120100    1411            lcall   _InitADC
037F           1412   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:339: InitTimer0();
037F 120100    1413            lcall   _InitTimer0
0382           1414   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:342: pre_error = 0;
0382 757800    1415            mov     _main_pre_error_1_114,#0x00
0385 757900    1416            mov     (_main_pre_error_1_114 + 1),#0x00
0388 757A00    1417            mov     (_main_pre_error_1_114 + 2),#0x00
038B 757B00    1418            mov     (_main_pre_error_1_114 + 3),#0x00
038E           1419   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:343: while(1)
038E           1420   L021041?:
038E           1421   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:353: left = (AD1DAT1/255.0)*3.3;
038E 85D682    1422            mov     dpl,_AD1DAT1
0391 120100    1423            lcall   ___uchar2fs
0394 AA82      1424            mov     r2,dpl
0396 AB83      1425            mov     r3,dph
0398 ACF0      1426            mov     r4,b
039A FD        1427            mov     r5,a
039B E4        1428            clr     a
039C C0E0      1429            push    acc
039E C0E0      1430            push    acc
03A0 747F      1431            mov     a,#0x7F
03A2 C0E0      1432            push    acc
03A4 7443      1433            mov     a,#0x43
03A6 C0E0      1434            push    acc
03A8 8A82      1435            mov     dpl,r2
03AA 8B83      1436            mov     dph,r3
03AC 8CF0      1437            mov     b,r4
03AE ED        1438            mov     a,r5
03AF 120100    1439            lcall   ___fsdiv
03B2 AA82      1440            mov     r2,dpl
03B4 AB83      1441            mov     r3,dph
03B6 ACF0      1442            mov     r4,b
03B8 FD        1443            mov     r5,a
03B9 E581      1444            mov     a,sp
03BB 24FC      1445            add     a,#0xfc
03BD F581      1446            mov     sp,a
03BF C002      1447            push    ar2
03C1 C003      1448            push    ar3
03C3 C004      1449            push    ar4
03C5 C005      1450            push    ar5
03C7 903333    1451            mov     dptr,#0x3333
03CA 75F053    1452            mov     b,#0x53
03CD 7440      1453            mov     a,#0x40
03CF 120100    1454            lcall   ___fsmul
03D2 AA82      1455            mov     r2,dpl
03D4 AB83      1456            mov     r3,dph
03D6 ACF0      1457            mov     r4,b
03D8 FD        1458            mov     r5,a
03D9 E581      1459            mov     a,sp
03DB 24FC      1460            add     a,#0xfc
03DD F581      1461            mov     sp,a
03DF           1462   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:354: right = (AD1DAT2/255.0)*3.3;
03DF 85D782    1463            mov     dpl,_AD1DAT2
03E2 C002      1464            push    ar2
03E4 C003      1465            push    ar3
03E6 C004      1466            push    ar4
03E8 C005      1467            push    ar5
03EA 120100    1468            lcall   ___uchar2fs
03ED A882      1469            mov     r0,dpl
03EF A983      1470            mov     r1,dph
03F1 AEF0      1471            mov     r6,b
03F3 FF        1472            mov     r7,a
03F4 E4        1473            clr     a
03F5 C0E0      1474            push    acc
03F7 C0E0      1475            push    acc
03F9 747F      1476            mov     a,#0x7F
03FB C0E0      1477            push    acc
03FD 7443      1478            mov     a,#0x43
03FF C0E0      1479            push    acc
0401 8882      1480            mov     dpl,r0
0403 8983      1481            mov     dph,r1
0405 8EF0      1482            mov     b,r6
0407 EF        1483            mov     a,r7
0408 120100    1484            lcall   ___fsdiv
040B AE82      1485            mov     r6,dpl
040D AF83      1486            mov     r7,dph
040F A8F0      1487            mov     r0,b
0411 F9        1488            mov     r1,a
0412 E581      1489            mov     a,sp
0414 24FC      1490            add     a,#0xfc
0416 F581      1491            mov     sp,a
0418 C006      1492            push    ar6
041A C007      1493            push    ar7
041C C000      1494            push    ar0
041E C001      1495            push    ar1
0420 903333    1496            mov     dptr,#0x3333
0423 75F053    1497            mov     b,#0x53
0426 7440      1498            mov     a,#0x40
0428 120100    1499            lcall   ___fsmul
042B 8582C8    1500            mov     _main_right_1_114,dpl
042E 8583C9    1501            mov     (_main_right_1_114 + 1),dph
0431 85F0CA    1502            mov     (_main_right_1_114 + 2),b
0434 F5CB      1503            mov     (_main_right_1_114 + 3),a
0436 E581      1504            mov     a,sp
0438 24FC      1505            add     a,#0xfc
043A F581      1506            mov     sp,a
043C           1507   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:355: line_sensor = (AD1DAT3/255.0)*3.3;
043C 85F582    1508            mov     dpl,_AD1DAT3
043F 120100    1509            lcall   ___uchar2fs
0442 AE82      1510            mov     r6,dpl
0444 AF83      1511            mov     r7,dph
0446 A8F0      1512            mov     r0,b
0448 F9        1513            mov     r1,a
0449 E4        1514            clr     a
044A C0E0      1515            push    acc
044C C0E0      1516            push    acc
044E 747F      1517            mov     a,#0x7F
0450 C0E0      1518            push    acc
0452 7443      1519            mov     a,#0x43
0454 C0E0      1520            push    acc
0456 8E82      1521            mov     dpl,r6
0458 8F83      1522            mov     dph,r7
045A 88F0      1523            mov     b,r0
045C E9        1524            mov     a,r1
045D 120100    1525            lcall   ___fsdiv
0460 AE82      1526            mov     r6,dpl
0462 AF83      1527            mov     r7,dph
0464 A8F0      1528            mov     r0,b
0466 F9        1529            mov     r1,a
0467 E581      1530            mov     a,sp
0469 24FC      1531            add     a,#0xfc
046B F581      1532            mov     sp,a
046D C006      1533            push    ar6
046F C007      1534            push    ar7
0471 C000      1535            push    ar0
0473 C001      1536            push    ar1
0475 903333    1537            mov     dptr,#0x3333
0478 75F053    1538            mov     b,#0x53
047B 7440      1539            mov     a,#0x40
047D 120100    1540            lcall   ___fsmul
0480 858218    1541            mov     _main_line_sensor_1_114,dpl
0483 858319    1542            mov     (_main_line_sensor_1_114 + 1),dph
0486 85F01A    1543            mov     (_main_line_sensor_1_114 + 2),b
0489 F51B      1544            mov     (_main_line_sensor_1_114 + 3),a
048B E581      1545            mov     a,sp
048D 24FC      1546            add     a,#0xfc
048F F581      1547            mov     sp,a
0491 D005      1548            pop     ar5
0493 D004      1549            pop     ar4
0495 D003      1550            pop     ar3
0497 D002      1551            pop     ar2
0499           1552   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:356: diff = left - right;
0499 C002      1553            push    ar2
049B C003      1554            push    ar3
049D C004      1555            push    ar4
049F C005      1556            push    ar5
04A1 C0C8      1557            push    _main_right_1_114
04A3 C0C9      1558            push    (_main_right_1_114 + 1)
04A5 C0CA      1559            push    (_main_right_1_114 + 2)
04A7 C0CB      1560            push    (_main_right_1_114 + 3)
04A9 8A82      1561            mov     dpl,r2
04AB 8B83      1562            mov     dph,r3
04AD 8CF0      1563            mov     b,r4
04AF ED        1564            mov     a,r5
04B0 120100    1565            lcall   ___fssub
04B3 858268    1566            mov     _main_diff_1_114,dpl
04B6 858369    1567            mov     (_main_diff_1_114 + 1),dph
04B9 85F06A    1568            mov     (_main_diff_1_114 + 2),b
04BC F56B      1569            mov     (_main_diff_1_114 + 3),a
04BE E581      1570            mov     a,sp
04C0 24FC      1571            add     a,#0xfc
04C2 F581      1572            mov     sp,a
04C4 D005      1573            pop     ar5
04C6 D004      1574            pop     ar4
04C8 D003      1575            pop     ar3
04CA D002      1576            pop     ar2
04CC           1577   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:359: if(time_update_flag==1) // If the clock has been updated, refresh the display
04CC 307818    1578            jnb     _time_update_flag,L021002?
04CF           1579   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:361: display_LCD();
04CF C002      1580            push    ar2
04D1 C003      1581            push    ar3
04D3 C004      1582            push    ar4
04D5 C005      1583            push    ar5
04D7 120100    1584            lcall   _display_LCD
04DA D005      1585            pop     ar5
04DC D004      1586            pop     ar4
04DE D003      1587            pop     ar3
04E0 D002      1588            pop     ar2
04E2           1589   L021002?:
04E2           1590   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:365: cor = KP * cur_error + KD*(cur_error - pre_error);
04E2 C002      1591            push    ar2
04E4 C003      1592            push    ar3
04E6 C004      1593            push    ar4
04E8 C005      1594            push    ar5
04EA C028      1595            push    _main_cur_error_1_114
04EC C029      1596            push    (_main_cur_error_1_114 + 1)
04EE C02A      1597            push    (_main_cur_error_1_114 + 2)
04F0 C02B      1598            push    (_main_cur_error_1_114 + 3)
04F2 900000    1599            mov     dptr,#0x0000
04F5 75F0C8    1600            mov     b,#0xC8
04F8 7441      1601            mov     a,#0x41
04FA 120100    1602            lcall   ___fsmul
04FD 8582D8    1603            mov     _main_cor_1_114,dpl
0500 8583D9    1604            mov     (_main_cor_1_114 + 1),dph
0503 85F0DA    1605            mov     (_main_cor_1_114 + 2),b
0506 F5DB      1606            mov     (_main_cor_1_114 + 3),a
0508 E581      1607            mov     a,sp
050A 24FC      1608            add     a,#0xfc
050C F581      1609            mov     sp,a
050E D005      1610            pop     ar5
0510 D004      1611            pop     ar4
0512 D003      1612            pop     ar3
0514 D002      1613            pop     ar2
0516           1614   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:367: if((0.4 < left) && (left < 0.7) && (0.4 < right) && (right < 0.7)){
0516 C002      1615            push    ar2
0518 C003      1616            push    ar3
051A C004      1617            push    ar4
051C C005      1618            push    ar5
051E C002      1619            push    ar2
0520 C003      1620            push    ar3
0522 C004      1621            push    ar4
0524 C005      1622            push    ar5
0526 90CCCD    1623            mov     dptr,#0xCCCD
0529 75F0CC    1624            mov     b,#0xCC
052C 743E      1625            mov     a,#0x3E
052E 120100    1626            lcall   ___fslt
0531 AE82      1627            mov     r6,dpl
0533 E581      1628            mov     a,sp
0535 24FC      1629            add     a,#0xfc
0537 F581      1630            mov     sp,a
0539 D005      1631            pop     ar5
053B D004      1632            pop     ar4
053D D003      1633            pop     ar3
053F D002      1634            pop     ar2
0541 EE        1635            mov     a,r6
0542 7001      1636            jnz     L021070?
0544 020100    1637            ljmp    L021004?
0547           1638   L021070?:
0547 C002      1639            push    ar2
0549 C003      1640            push    ar3
054B C004      1641            push    ar4
054D C005      1642            push    ar5
054F 7433      1643            mov     a,#0x33
0551 C0E0      1644            push    acc
0553 C0E0      1645            push    acc
0555 C0E0      1646            push    acc
0557 743F      1647            mov     a,#0x3F
0559 C0E0      1648            push    acc
055B 8A82      1649            mov     dpl,r2
055D 8B83      1650            mov     dph,r3
055F 8CF0      1651            mov     b,r4
0561 ED        1652            mov     a,r5
0562 120100    1653            lcall   ___fslt
0565 AE82      1654            mov     r6,dpl
0567 E581      1655            mov     a,sp
0569 24FC      1656            add     a,#0xfc
056B F581      1657            mov     sp,a
056D D005      1658            pop     ar5
056F D004      1659            pop     ar4
0571 D003      1660            pop     ar3
0573 D002      1661            pop     ar2
0575 EE        1662            mov     a,r6
0576 6001      1663            jz      L021004?
0578 C002      1664            push    ar2
057A C003      1665            push    ar3
057C C004      1666            push    ar4
057E C005      1667            push    ar5
0580 C0C8      1668            push    _main_right_1_114
0582 C0C9      1669            push    (_main_right_1_114 + 1)
0584 C0CA      1670            push    (_main_right_1_114 + 2)
0586 C0CB      1671            push    (_main_right_1_114 + 3)
0588 90CCCD    1672            mov     dptr,#0xCCCD
058B 75F0CC    1673            mov     b,#0xCC
058E 743E      1674            mov     a,#0x3E
0590 120100    1675            lcall   ___fslt
0593 AE82      1676            mov     r6,dpl
0595 E581      1677            mov     a,sp
0597 24FC      1678            add     a,#0xfc
0599 F581      1679            mov     sp,a
059B D005      1680            pop     ar5
059D D004      1681            pop     ar4
059F D003      1682            pop     ar3
05A1 D002      1683            pop     ar2
05A3 EE        1684            mov     a,r6
05A4 6001      1685            jz      L021004?
05A6 C002      1686            push    ar2
05A8 C003      1687            push    ar3
05AA C004      1688            push    ar4
05AC C005      1689            push    ar5
05AE 7433      1690            mov     a,#0x33
05B0 C0E0      1691            push    acc
05B2 C0E0      1692            push    acc
05B4 C0E0      1693            push    acc
05B6 743F      1694            mov     a,#0x3F
05B8 C0E0      1695            push    acc
05BA 85C882    1696            mov     dpl,_main_right_1_114
05BD 85C983    1697            mov     dph,(_main_right_1_114 + 1)
05C0 85CAF0    1698            mov     b,(_main_right_1_114 + 2)
05C3 E5CB      1699            mov     a,(_main_right_1_114 + 3)
05C5 120100    1700            lcall   ___fslt
05C8 AE82      1701            mov     r6,dpl
05CA E581      1702            mov     a,sp
05CC 24FC      1703            add     a,#0xfc
05CE F581      1704            mov     sp,a
05D0 D005      1705            pop     ar5
05D2 D004      1706            pop     ar4
05D4 D003      1707            pop     ar3
05D6 D002      1708            pop     ar2
05D8 EE        1709            mov     a,r6
05D9 6001      1710            jz      L021004?
05DB           1711   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:368: cur_error = 0;
05DB 752800    1712            mov     _main_cur_error_1_114,#0x00
05DE 752900    1713            mov     (_main_cur_error_1_114 + 1),#0x00
05E1 752A00    1714            mov     (_main_cur_error_1_114 + 2),#0x00
05E4 752B00    1715            mov     (_main_cur_error_1_114 + 3),#0x00
05E7           1716   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:369: pwm_left = 100;
05E7 750864    1717            mov     _pwm_left,#0x64
05EA           1718   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:370: pwm_right = 100;
05EA 75C864    1719            mov     _pwm_right,#0x64
05ED           1720   L021004?:
05ED           1721   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:372: if(0.5<diff){   
05ED C002      1722            push    ar2
05EF C003      1723            push    ar3
05F1 C004      1724            push    ar4
05F3 C005      1725            push    ar5
05F5 C068      1726            push    _main_diff_1_114
05F7 C069      1727            push    (_main_diff_1_114 + 1)
05F9 C06A      1728            push    (_main_diff_1_114 + 2)
05FB C06B      1729            push    (_main_diff_1_114 + 3)
05FD 900000    1730            mov     dptr,#(0x00&0x00ff)
0600 E4        1731            clr     a
0601 F5F0      1732            mov     b,a
0603 743F      1733            mov     a,#0x3F
0605 120100    1734            lcall   ___fslt
0608 AE82      1735            mov     r6,dpl
060A E581      1736            mov     a,sp
060C 24FC      1737            add     a,#0xfc
060E F581      1738            mov     sp,a
0610 D005      1739            pop     ar5
0612 D004      1740            pop     ar4
0614 D003      1741            pop     ar3
0616 D002      1742            pop     ar2
0618 EE        1743            mov     a,r6
0619 6001      1744            jz      L021009?
061B           1745   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:373: cur_error = 3;
061B 752800    1746            mov     _main_cur_error_1_114,#0x00
061E 752900    1747            mov     (_main_cur_error_1_114 + 1),#0x00
0621 752A40    1748            mov     (_main_cur_error_1_114 + 2),#0x40
0624 752B40    1749            mov     (_main_cur_error_1_114 + 3),#0x40
0627           1750   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:374: pwm_left = 100 - cor;
0627 C002      1751            push    ar2
0629 C003      1752            push    ar3
062B C004      1753            push    ar4
062D C005      1754            push    ar5
062F C0D8      1755            push    _main_cor_1_114
0631 C0D9      1756            push    (_main_cor_1_114 + 1)
0633 C0DA      1757            push    (_main_cor_1_114 + 2)
0635 C0DB      1758            push    (_main_cor_1_114 + 3)
0637 900000    1759            mov     dptr,#0x0000
063A 75F0C8    1760            mov     b,#0xC8
063D 7442      1761            mov     a,#0x42
063F 120100    1762            lcall   ___fssub
0642 AE82      1763            mov     r6,dpl
0644 AF83      1764            mov     r7,dph
0646 A8F0      1765            mov     r0,b
0648 F9        1766            mov     r1,a
0649 E581      1767            mov     a,sp
064B 24FC      1768            add     a,#0xfc
064D F581      1769            mov     sp,a
064F 8E82      1770            mov     dpl,r6
0651 8F83      1771            mov     dph,r7
0653 88F0      1772            mov     b,r0
0655 E9        1773            mov     a,r1
0656 120100    1774            lcall   ___fs2uchar
0659 858208    1775            mov     _pwm_left,dpl
065C D005      1776            pop     ar5
065E D004      1777            pop     ar4
0660 D003      1778            pop     ar3
0662 D002      1779            pop     ar2
0664           1780   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:375: pwm_right = 100;
0664 75C864    1781            mov     _pwm_right,#0x64
0667           1782   L021009?:
0667           1783   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:377: if(diff<-0.5){
0667 C002      1784            push    ar2
0669 C003      1785            push    ar3
066B C004      1786            push    ar4
066D C005      1787            push    ar5
066F E4        1788            clr     a
0670 C0E0      1789            push    acc
0672 C0E0      1790            push    acc
0674 C0E0      1791            push    acc
0676 74BF      1792            mov     a,#0xBF
0678 C0E0      1793            push    acc
067A 856882    1794            mov     dpl,_main_diff_1_114
067D 856983    1795            mov     dph,(_main_diff_1_114 + 1)
0680 856AF0    1796            mov     b,(_main_diff_1_114 + 2)
0683 E56B      1797            mov     a,(_main_diff_1_114 + 3)
0685 120100    1798            lcall   ___fslt
0688 AE82      1799            mov     r6,dpl
068A E581      1800            mov     a,sp
068C 24FC      1801            add     a,#0xfc
068E F581      1802            mov     sp,a
0690 D005      1803            pop     ar5
0692 D004      1804            pop     ar4
0694 D003      1805            pop     ar3
0696 D002      1806            pop     ar2
0698 EE        1807            mov     a,r6
0699 6001      1808            jz      L021011?
069B           1809   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:378: cur_error= -3;
069B 752800    1810            mov     _main_cur_error_1_114,#0x00
069E 752900    1811            mov     (_main_cur_error_1_114 + 1),#0x00
06A1 752A40    1812            mov     (_main_cur_error_1_114 + 2),#0x40
06A4 752BC0    1813            mov     (_main_cur_error_1_114 + 3),#0xC0
06A7           1814   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:379: pwm_left = 100;
06A7 750864    1815            mov     _pwm_left,#0x64
06AA           1816   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:380: pwm_right = 100 + cor;
06AA C002      1817            push    ar2
06AC C003      1818            push    ar3
06AE C004      1819            push    ar4
06B0 C005      1820            push    ar5
06B2 E4        1821            clr     a
06B3 C0E0      1822            push    acc
06B5 C0E0      1823            push    acc
06B7 74C8      1824            mov     a,#0xC8
06B9 C0E0      1825            push    acc
06BB 7442      1826            mov     a,#0x42
06BD C0E0      1827            push    acc
06BF 85D882    1828            mov     dpl,_main_cor_1_114
06C2 85D983    1829            mov     dph,(_main_cor_1_114 + 1)
06C5 85DAF0    1830            mov     b,(_main_cor_1_114 + 2)
06C8 E5DB      1831            mov     a,(_main_cor_1_114 + 3)
06CA 120100    1832            lcall   ___fsadd
06CD AE82      1833            mov     r6,dpl
06CF AF83      1834            mov     r7,dph
06D1 A8F0      1835            mov     r0,b
06D3 F9        1836            mov     r1,a
06D4 E581      1837            mov     a,sp
06D6 24FC      1838            add     a,#0xfc
06D8 F581      1839            mov     sp,a
06DA 8E82      1840            mov     dpl,r6
06DC 8F83      1841            mov     dph,r7
06DE 88F0      1842            mov     b,r0
06E0 E9        1843            mov     a,r1
06E1 120100    1844            lcall   ___fs2uchar
06E4 8582C8    1845            mov     _pwm_right,dpl
06E7 D005      1846            pop     ar5
06E9 D004      1847            pop     ar4
06EB D003      1848            pop     ar3
06ED D002      1849            pop     ar2
06EF           1850   L021011?:
06EF           1851   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:383: if((left < 0.4) && (right < 0.4)){
06EF C002      1852            push    ar2
06F1 C003      1853            push    ar3
06F3 C004      1854            push    ar4
06F5 C005      1855            push    ar5
06F7 74CD      1856            mov     a,#0xCD
06F9 C0E0      1857            push    acc
06FB 74CC      1858            mov     a,#0xCC
06FD C0E0      1859            push    acc
06FF C0E0      1860            push    acc
0701 743E      1861            mov     a,#0x3E
0703 C0E0      1862            push    acc
0705 8A82      1863            mov     dpl,r2
0707 8B83      1864            mov     dph,r3
0709 8CF0      1865            mov     b,r4
070B ED        1866            mov     a,r5
070C 120100    1867            lcall   ___fslt
070F AE82      1868            mov     r6,dpl
0711 E581      1869            mov     a,sp
0713 24FC      1870            add     a,#0xfc
0715 F581      1871            mov     sp,a
0717 D005      1872            pop     ar5
0719 D004      1873            pop     ar4
071B D003      1874            pop     ar3
071D D002      1875            pop     ar2
071F EE        1876            mov     a,r6
0720 7001      1877            jnz     L021076?
0722 020100    1878            ljmp    L021017?
0725           1879   L021076?:
0725 C002      1880            push    ar2
0727 C003      1881            push    ar3
0729 C004      1882            push    ar4
072B C005      1883            push    ar5
072D 74CD      1884            mov     a,#0xCD
072F C0E0      1885            push    acc
0731 74CC      1886            mov     a,#0xCC
0733 C0E0      1887            push    acc
0735 C0E0      1888            push    acc
0737 743E      1889            mov     a,#0x3E
0739 C0E0      1890            push    acc
073B 85C882    1891            mov     dpl,_main_right_1_114
073E 85C983    1892            mov     dph,(_main_right_1_114 + 1)
0741 85CAF0    1893            mov     b,(_main_right_1_114 + 2)
0744 E5CB      1894            mov     a,(_main_right_1_114 + 3)
0746 120100    1895            lcall   ___fslt
0749 AE82      1896            mov     r6,dpl
074B E581      1897            mov     a,sp
074D 24FC      1898            add     a,#0xfc
074F F581      1899            mov     sp,a
0751 D005      1900            pop     ar5
0753 D004      1901            pop     ar4
0755 D003      1902            pop     ar3
0757 D002      1903            pop     ar2
0759 EE        1904            mov     a,r6
075A 7001      1905            jnz     L021077?
075C 020100    1906            ljmp    L021017?
075F           1907   L021077?:
075F           1908   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:384: if(pre_error>0){
075F C002      1909            push    ar2
0761 C003      1910            push    ar3
0763 C004      1911            push    ar4
0765 C005      1912            push    ar5
0767 E4        1913            clr     a
0768 C0E0      1914            push    acc
076A C0E0      1915            push    acc
076C C0E0      1916            push    acc
076E C0E0      1917            push    acc
0770 857882    1918            mov     dpl,_main_pre_error_1_114
0773 857983    1919            mov     dph,(_main_pre_error_1_114 + 1)
0776 857AF0    1920            mov     b,(_main_pre_error_1_114 + 2)
0779 E57B      1921            mov     a,(_main_pre_error_1_114 + 3)
077B 120100    1922            lcall   ___fsgt
077E AE82      1923            mov     r6,dpl
0780 E581      1924            mov     a,sp
0782 24FC      1925            add     a,#0xfc
0784 F581      1926            mov     sp,a
0786 D005      1927            pop     ar5
0788 D004      1928            pop     ar4
078A D003      1929            pop     ar3
078C D002      1930            pop     ar2
078E EE        1931            mov     a,r6
078F 6001      1932            jz      L021013?
0791           1933   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:385: cur_error = 5;
0791 752800    1934            mov     _main_cur_error_1_114,#0x00
0794 752900    1935            mov     (_main_cur_error_1_114 + 1),#0x00
0797 752AA0    1936            mov     (_main_cur_error_1_114 + 2),#0xA0
079A 752B40    1937            mov     (_main_cur_error_1_114 + 3),#0x40
079D           1938   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:386: pwm_left = 100 - cor;
079D C002      1939            push    ar2
079F C003      1940            push    ar3
07A1 C004      1941            push    ar4
07A3 C005      1942            push    ar5
07A5 C0D8      1943            push    _main_cor_1_114
07A7 C0D9      1944            push    (_main_cor_1_114 + 1)
07A9 C0DA      1945            push    (_main_cor_1_114 + 2)
07AB C0DB      1946            push    (_main_cor_1_114 + 3)
07AD 900000    1947            mov     dptr,#0x0000
07B0 75F0C8    1948            mov     b,#0xC8
07B3 7442      1949            mov     a,#0x42
07B5 120100    1950            lcall   ___fssub
07B8 AE82      1951            mov     r6,dpl
07BA AF83      1952            mov     r7,dph
07BC A8F0      1953            mov     r0,b
07BE F9        1954            mov     r1,a
07BF E581      1955            mov     a,sp
07C1 24FC      1956            add     a,#0xfc
07C3 F581      1957            mov     sp,a
07C5 8E82      1958            mov     dpl,r6
07C7 8F83      1959            mov     dph,r7
07C9 88F0      1960            mov     b,r0
07CB E9        1961            mov     a,r1
07CC 120100    1962            lcall   ___fs2uchar
07CF 858208    1963            mov     _pwm_left,dpl
07D2 D005      1964            pop     ar5
07D4 D004      1965            pop     ar4
07D6 D003      1966            pop     ar3
07D8 D002      1967            pop     ar2
07DA           1968   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:387: pwm_right = 100;
07DA 75C864    1969            mov     _pwm_right,#0x64
07DD           1970   L021013?:
07DD           1971   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:389: if(pre_error<0){
07DD C002      1972            push    ar2
07DF C003      1973            push    ar3
07E1 C004      1974            push    ar4
07E3 C005      1975            push    ar5
07E5 E4        1976            clr     a
07E6 C0E0      1977            push    acc
07E8 C0E0      1978            push    acc
07EA C0E0      1979            push    acc
07EC C0E0      1980            push    acc
07EE 857882    1981            mov     dpl,_main_pre_error_1_114
07F1 857983    1982            mov     dph,(_main_pre_error_1_114 + 1)
07F4 857AF0    1983            mov     b,(_main_pre_error_1_114 + 2)
07F7 E57B      1984            mov     a,(_main_pre_error_1_114 + 3)
07F9 120100    1985            lcall   ___fslt
07FC AE82      1986            mov     r6,dpl
07FE E581      1987            mov     a,sp
0800 24FC      1988            add     a,#0xfc
0802 F581      1989            mov     sp,a
0804 D005      1990            pop     ar5
0806 D004      1991            pop     ar4
0808 D003      1992            pop     ar3
080A D002      1993            pop     ar2
080C EE        1994            mov     a,r6
080D 6001      1995            jz      L021017?
080F           1996   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:390: cur_error = -5;
080F 752800    1997            mov     _main_cur_error_1_114,#0x00
0812 752900    1998            mov     (_main_cur_error_1_114 + 1),#0x00
0815 752AA0    1999            mov     (_main_cur_error_1_114 + 2),#0xA0
0818 752BC0    2000            mov     (_main_cur_error_1_114 + 3),#0xC0
081B           2001   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:391: pwm_left = 100;
081B 750864    2002            mov     _pwm_left,#0x64
081E           2003   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:392: pwm_right = 100 + cor;
081E C002      2004            push    ar2
0820 C003      2005            push    ar3
0822 C004      2006            push    ar4
0824 C005      2007            push    ar5
0826 E4        2008            clr     a
0827 C0E0      2009            push    acc
0829 C0E0      2010            push    acc
082B 74C8      2011            mov     a,#0xC8
082D C0E0      2012            push    acc
082F 7442      2013            mov     a,#0x42
0831 C0E0      2014            push    acc
0833 85D882    2015            mov     dpl,_main_cor_1_114
0836 85D983    2016            mov     dph,(_main_cor_1_114 + 1)
0839 85DAF0    2017            mov     b,(_main_cor_1_114 + 2)
083C E5DB      2018            mov     a,(_main_cor_1_114 + 3)
083E 120100    2019            lcall   ___fsadd
0841 AE82      2020            mov     r6,dpl
0843 AF83      2021            mov     r7,dph
0845 A8F0      2022            mov     r0,b
0847 F9        2023            mov     r1,a
0848 E581      2024            mov     a,sp
084A 24FC      2025            add     a,#0xfc
084C F581      2026            mov     sp,a
084E 8E82      2027            mov     dpl,r6
0850 8F83      2028            mov     dph,r7
0852 88F0      2029            mov     b,r0
0854 E9        2030            mov     a,r1
0855 120100    2031            lcall   ___fs2uchar
0858 8582C8    2032            mov     _pwm_right,dpl
085B D005      2033            pop     ar5
085D D004      2034            pop     ar4
085F D003      2035            pop     ar3
0861 D002      2036            pop     ar2
0863           2037   L021017?:
0863           2038   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:395: pre_error = cur_error;
0863 852878    2039            mov     _main_pre_error_1_114,_main_cur_error_1_114
0866 852979    2040            mov     (_main_pre_error_1_114 + 1),(_main_cur_error_1_114 + 1)
0869 852A7A    2041            mov     (_main_pre_error_1_114 + 2),(_main_cur_error_1_114 + 2)
086C 852B7B    2042            mov     (_main_pre_error_1_114 + 3),(_main_cur_error_1_114 + 3)
086F           2043   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:396: printf("Error:%5.2f Left:%5.2f Right:%5.2f Left_Motor:%d Right_Motor:%d                \r", cur_error, left, right, pwm_left, pwm_right);
086F AEC8      2044            mov     r6,_pwm_right
0871 7F00      2045            mov     r7,#0x00
0873 A808      2046            mov     r0,_pwm_left
0875 7900      2047            mov     r1,#0x00
0877 C006      2048            push    ar6
0879 C007      2049            push    ar7
087B C000      2050            push    ar0
087D C001      2051            push    ar1
087F C0C8      2052            push    _main_right_1_114
0881 C0C9      2053            push    (_main_right_1_114 + 1)
0883 C0CA      2054            push    (_main_right_1_114 + 2)
0885 C0CB      2055            push    (_main_right_1_114 + 3)
0887 C002      2056            push    ar2
0889 C003      2057            push    ar3
088B C004      2058            push    ar4
088D C005      2059            push    ar5
088F C028      2060            push    _main_cur_error_1_114
0891 C029      2061            push    (_main_cur_error_1_114 + 1)
0893 C02A      2062            push    (_main_cur_error_1_114 + 2)
0895 C02B      2063            push    (_main_cur_error_1_114 + 3)
0897 7458      2064            mov     a,#__str_2
0899 C0E0      2065            push    acc
089B 74B8      2066            mov     a,#(__str_2 >> 8)
089D C0E0      2067            push    acc
089F 7480      2068            mov     a,#0x80
08A1 C0E0      2069            push    acc
08A3 120100    2070            lcall   _printf
08A6 E581      2071            mov     a,sp
08A8 24ED      2072            add     a,#0xed
08AA F581      2073            mov     sp,a
08AC           2074   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:399: switch(state){
08AC E4        2075            clr     a
08AD B558D8    2076            cjne    a,_main_state_1_114,L021080?
08B0 E4        2077            clr     a
08B1 B559D8    2078            cjne    a,(_main_state_1_114 + 1),L021080?
08B4 8001      2079            sjmp    L021019?
08B6           2080   L021080?:
08B6 7401      2081            mov     a,#0x01
08B8 B55858    2082            cjne    a,_main_state_1_114,L021081?
08BB E4        2083            clr     a
08BC B55958    2084            cjne    a,(_main_state_1_114 + 1),L021081?
08BF 8001      2085            sjmp    L021022?
08C1           2086   L021081?:
08C1 7402      2087            mov     a,#0x02
08C3 B558D8    2088            cjne    a,_main_state_1_114,L021082?
08C6 E4        2089            clr     a
08C7 B559D8    2090            cjne    a,(_main_state_1_114 + 1),L021082?
08CA 020100    2091            ljmp    L021027?
08CD           2092   L021082?:
08CD 7403      2093            mov     a,#0x03
08CF B55858    2094            cjne    a,_main_state_1_114,L021083?
08D2 E4        2095            clr     a
08D3 B55958    2096            cjne    a,(_main_state_1_114 + 1),L021083?
08D6 020100    2097            ljmp    L021032?
08D9           2098   L021083?:
08D9 7404      2099            mov     a,#0x04
08DB B558D8    2100            cjne    a,_main_state_1_114,L021084?
08DE E4        2101            clr     a
08DF B559D8    2102            cjne    a,(_main_state_1_114 + 1),L021084?
08E2 020100    2103            ljmp    L021036?
08E5           2104   L021084?:
08E5 020100    2105            ljmp    L021041?
08E8           2106   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:400: case 0:
08E8           2107   L021019?:
08E8           2108   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:401: if(line_sensor > HI_THRESH){
08E8 74CD      2109            mov     a,#0xCD
08EA C0E0      2110            push    acc
08EC 74CC      2111            mov     a,#0xCC
08EE C0E0      2112            push    acc
08F0 744C      2113            mov     a,#0x4C
08F2 C0E0      2114            push    acc
08F4 743F      2115            mov     a,#0x3F
08F6 C0E0      2116            push    acc
08F8 851882    2117            mov     dpl,_main_line_sensor_1_114
08FB 851983    2118            mov     dph,(_main_line_sensor_1_114 + 1)
08FE 851AF0    2119            mov     b,(_main_line_sensor_1_114 + 2)
0901 E51B      2120            mov     a,(_main_line_sensor_1_114 + 3)
0903 120100    2121            lcall   ___fsgt
0906 AA82      2122            mov     r2,dpl
0908 E581      2123            mov     a,sp
090A 24FC      2124            add     a,#0xfc
090C F581      2125            mov     sp,a
090E EA        2126            mov     a,r2
090F 6001      2127            jz      L021022?
0911           2128   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:402: start_timer = 1;
0911 D298      2129            setb    _start_timer
0913           2130   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:403: state = 2;
0913 755802    2131            mov     _main_state_1_114,#0x02
0916 E4        2132            clr     a
0917 F559      2133            mov     (_main_state_1_114 + 1),a
0919           2134   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:405: case 1:
0919           2135   L021022?:
0919           2136   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:406: if(line_sensor > HI_THRESH){
0919 74CD      2137            mov     a,#0xCD
091B C0E0      2138            push    acc
091D 74CC      2139            mov     a,#0xCC
091F C0E0      2140            push    acc
0921 744C      2141            mov     a,#0x4C
0923 C0E0      2142            push    acc
0925 743F      2143            mov     a,#0x3F
0927 C0E0      2144            push    acc
0929 851882    2145            mov     dpl,_main_line_sensor_1_114
092C 851983    2146            mov     dph,(_main_line_sensor_1_114 + 1)
092F 851AF0    2147            mov     b,(_main_line_sensor_1_114 + 2)
0932 E51B      2148            mov     a,(_main_line_sensor_1_114 + 3)
0934 120100    2149            lcall   ___fsgt
0937 AA82      2150            mov     r2,dpl
0939 E581      2151            mov     a,sp
093B 24FC      2152            add     a,#0xfc
093D F581      2153            mov     sp,a
093F EA        2154            mov     a,r2
0940 6001      2155            jz      L021024?
0942           2156   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:407: state = 2;
0942 755802    2157            mov     _main_state_1_114,#0x02
0945 E4        2158            clr     a
0946 F559      2159            mov     (_main_state_1_114 + 1),a
0948           2160   L021024?:
0948           2161   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:409: if(start_timer == 0){
0948 309898    2162            jnb     _start_timer,L021087?
094B 020100    2163            ljmp    L021041?
094E           2164   L021087?:
094E           2165   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:410: command = line_counter;
094E 85B808    2166            mov     _main_command_1_114,_main_line_counter_1_114
0951 85B909    2167            mov     (_main_command_1_114 + 1),(_main_line_counter_1_114 + 1)
0954           2168   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:411: line_counter = 0;
0954 E4        2169            clr     a
0955 F5B8      2170            mov     _main_line_counter_1_114,a
0957 F5B9      2171            mov     (_main_line_counter_1_114 + 1),a
0959           2172   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:412: state = 4;
0959 755804    2173            mov     _main_state_1_114,#0x04
095C E4        2174            clr     a
095D F559      2175            mov     (_main_state_1_114 + 1),a
095F           2176   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:414: break;                          
095F 020100    2177            ljmp    L021041?
0962           2178   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:415: case 2:
0962           2179   L021027?:
0962           2180   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:416: if(line_sensor < LO_THRESH){
0962 7429      2181            mov     a,#0x29
0964 C0E0      2182            push    acc
0966 745C      2183            mov     a,#0x5C
0968 C0E0      2184            push    acc
096A 748F      2185            mov     a,#0x8F
096C C0E0      2186            push    acc
096E 743D      2187            mov     a,#0x3D
0970 C0E0      2188            push    acc
0972 851882    2189            mov     dpl,_main_line_sensor_1_114
0975 851983    2190            mov     dph,(_main_line_sensor_1_114 + 1)
0978 851AF0    2191            mov     b,(_main_line_sensor_1_114 + 2)
097B E51B      2192            mov     a,(_main_line_sensor_1_114 + 3)
097D 120100    2193            lcall   ___fslt
0980 AA82      2194            mov     r2,dpl
0982 E581      2195            mov     a,sp
0984 24FC      2196            add     a,#0xfc
0986 F581      2197            mov     sp,a
0988 EA        2198            mov     a,r2
0989 6001      2199            jz      L021029?
098B           2200   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:417: line_counter++;
098B 05B8      2201            inc     _main_line_counter_1_114
098D E4        2202            clr     a
098E B5B818    2203            cjne    a,_main_line_counter_1_114,L021089?
0991 05B9      2204            inc     (_main_line_counter_1_114 + 1)
0993           2205   L021089?:
0993           2206   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:418: state = 3;
0993 755803    2207            mov     _main_state_1_114,#0x03
0996 E4        2208            clr     a
0997 F559      2209            mov     (_main_state_1_114 + 1),a
0999           2210   L021029?:
0999           2211   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:420: if(start_timer == 0){
0999 309858    2212            jnb     _start_timer,L021090?
099C 020100    2213            ljmp    L021041?
099F           2214   L021090?:
099F           2215   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:421: command = line_counter;
099F 85B808    2216            mov     _main_command_1_114,_main_line_counter_1_114
09A2 85B909    2217            mov     (_main_command_1_114 + 1),(_main_line_counter_1_114 + 1)
09A5           2218   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:422: line_counter = 0;
09A5 E4        2219            clr     a
09A6 F5B8      2220            mov     _main_line_counter_1_114,a
09A8 F5B9      2221            mov     (_main_line_counter_1_114 + 1),a
09AA           2222   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:423: state = 4;
09AA 755804    2223            mov     _main_state_1_114,#0x04
09AD E4        2224            clr     a
09AE F559      2225            mov     (_main_state_1_114 + 1),a
09B0           2226   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:425: break;
09B0 020100    2227            ljmp    L021041?
09B3           2228   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:426: case 3:
09B3           2229   L021032?:
09B3           2230   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:427: if(start_timer == 0){
09B3 209898    2231            jb      _start_timer,L021034?
09B6           2232   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:428: command = line_counter;
09B6 85B808    2233            mov     _main_command_1_114,_main_line_counter_1_114
09B9 85B909    2234            mov     (_main_command_1_114 + 1),(_main_line_counter_1_114 + 1)
09BC           2235   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:429: line_counter = 0;
09BC E4        2236            clr     a
09BD F5B8      2237            mov     _main_line_counter_1_114,a
09BF F5B9      2238            mov     (_main_line_counter_1_114 + 1),a
09C1           2239   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:430: state = 4;
09C1 755804    2240            mov     _main_state_1_114,#0x04
09C4 E4        2241            clr     a
09C5 F559      2242            mov     (_main_state_1_114 + 1),a
09C7 020100    2243            ljmp    L021041?
09CA           2244   L021034?:
09CA           2245   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:433: state = 1;
09CA 755801    2246            mov     _main_state_1_114,#0x01
09CD E4        2247            clr     a
09CE F559      2248            mov     (_main_state_1_114 + 1),a
09D0           2249   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:435: break;
09D0 020100    2250            ljmp    L021041?
09D3           2251   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:436: case 4:
09D3           2252   L021036?:
09D3           2253   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:437: if(line_counter > HI_THRESH){
09D3 85B882    2254            mov     dpl,_main_line_counter_1_114
09D6 85B983    2255            mov     dph,(_main_line_counter_1_114 + 1)
09D9 120100    2256            lcall   ___sint2fs
09DC AA82      2257            mov     r2,dpl
09DE AB83      2258            mov     r3,dph
09E0 ACF0      2259            mov     r4,b
09E2 FD        2260            mov     r5,a
09E3 74CD      2261            mov     a,#0xCD
09E5 C0E0      2262            push    acc
09E7 74CC      2263            mov     a,#0xCC
09E9 C0E0      2264            push    acc
09EB 744C      2265            mov     a,#0x4C
09ED C0E0      2266            push    acc
09EF 743F      2267            mov     a,#0x3F
09F1 C0E0      2268            push    acc
09F3 8A82      2269            mov     dpl,r2
09F5 8B83      2270            mov     dph,r3
09F7 8CF0      2271            mov     b,r4
09F9 ED        2272            mov     a,r5
09FA 120100    2273            lcall   ___fsgt
09FD AA82      2274            mov     r2,dpl
09FF E581      2275            mov     a,sp
0A01 24FC      2276            add     a,#0xfc
0A03 F581      2277            mov     sp,a
0A05 EA        2278            mov     a,r2
0A06 7001      2279            jnz     L021092?
0A08 020100    2280            ljmp    L021041?
0A0B           2281   L021092?:
0A0B           2282   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:438: stop();
0A0B 120100    2283            lcall   _stop
0A0E           2284   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:439: execute(command);
0A0E 850882    2285            mov     dpl,_main_command_1_114
0A11 850983    2286            mov     dph,(_main_command_1_114 + 1)
0A14 120100    2287            lcall   _execute
0A17           2288   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:440: state = 0;
0A17 E4        2289            clr     a
0A18 F558      2290            mov     _main_state_1_114,a
0A1A F559      2291            mov     (_main_state_1_114 + 1),a
0A1C           2292   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:443: }
0A1C 020100    2293            ljmp    L021041?
0A1F           2294            rseg R_CSEG
0A1F           2295   
0000           2296            rseg R_XINIT
0000           2297   
0000           2298            rseg R_CONST
0000           2299   __str_0:
0000 4C533D25  2300            db 'LS=%5.2f'
     352E3266
0008 00        2301            db 0x00
0009           2302   __str_1:
0009 4C433D25  2303            db 'LC=%d ST=%d'
     64205354
     3D2564
0014 00        2304            db 0x00
0015           2305   __str_2:
0015 4572726F  2306            db 'Error:%5.2f Left:%5.2f Right:%5.2f Left_Motor:%d Right_Motor'
     723A2535
     2E326620
     4C656674
     3A25352E
     32662052
     69676874
     3A25352E
     3266204C
     6566745F
     4D6F746F
     723A2564
     20526967
     68745F4D
     6F746F72
0051 3A256420  2307            db ':%d                '
     20202020
     20202020
     20202020
     202020
0064 0D        2308            db 0x0D
0065 00        2309            db 0x00
0066           2310   
000E           2311            CSEG
000E           2312   
000E           2313   end
