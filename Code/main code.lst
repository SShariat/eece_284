0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Dec 11 2012) (MSVC)
0000              4   ; This file was generated Thu Mar 26 15:00:17 2015
0000              5   ;--------------------------------------------------------
                  5   $name main_code
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _stop
0000             29            public _turn_right
0000             30            public _turn_left
0000             31            public _display_LCD
0000             32            public _Timer0ISR
0000             33            public _InitTimer0
0000             34            public _InitADC
0000             35            public _InitSerialPort
0000             36            public _Wait1S
0000             37            public _LCDprint
0000             38            public _LCD_8BIT
0000             39            public _WriteCommand
0000             40            public _WriteData
0000             41            public _LCD_byte
0000             42            public _LCD_pulse
0000             43            public _waitms
0000             44            public _Wait50us
0000             45            public _InitPorts
0000             46            public _LCDprint_PARM_3
0000             47            public _line_counter_flag
0000             48            public _time_update_flag
0000             49            public _LCDprint_PARM_2
0000             50            public _line_timer
0000             51            public _pwm_right
0000             52            public _pwm_left
0000             53            public _pwmcount
0000             54            public _mins
0000             55            public _secs
0000             56            public _msCount
0000             57            public _msLine_Count
0000             58   ;--------------------------------------------------------
0000             59   ; Special Function Registers
0000             60   ;--------------------------------------------------------
0000             61   _ACC            DATA 0xe0
0000             62   _ADCON0         DATA 0x8e
0000             63   _ADCON1         DATA 0x97
0000             64   _ADINS          DATA 0xa3
0000             65   _ADMODA         DATA 0xc0
0000             66   _ADMODB         DATA 0xa1
0000             67   _AD0BH          DATA 0xbb
0000             68   _AD0BL          DATA 0xa6
0000             69   _AD0DAT0        DATA 0xc5
0000             70   _AD0DAT1        DATA 0xc6
0000             71   _AD0DAT2        DATA 0xc7
0000             72   _AD0DAT3        DATA 0xf4
0000             73   _AD1BH          DATA 0xc4
0000             74   _AD1BL          DATA 0xbc
0000             75   _AD1DAT0        DATA 0xd5
0000             76   _AD1DAT1        DATA 0xd6
0000             77   _AD1DAT2        DATA 0xd7
0000             78   _AD1DAT3        DATA 0xf5
0000             79   _AUXR1          DATA 0xa2
0000             80   _B              DATA 0xf0
0000             81   _BRGR0          DATA 0xbe
0000             82   _BRGR1          DATA 0xbf
0000             83   _BRGCON         DATA 0xbd
0000             84   _CCCRA          DATA 0xea
0000             85   _CCCRB          DATA 0xeb
0000             86   _CCCRC          DATA 0xec
0000             87   _CCCRD          DATA 0xed
0000             88   _CMP1           DATA 0xac
0000             89   _CMP2           DATA 0xad
0000             90   _DEECON         DATA 0xf1
0000             91   _DEEDAT         DATA 0xf2
0000             92   _DEEADR         DATA 0xf3
0000             93   _DIVM           DATA 0x95
0000             94   _DPH            DATA 0x83
0000             95   _DPL            DATA 0x82
0000             96   _FMADRH         DATA 0xe7
0000             97   _FMADRL         DATA 0xe6
0000             98   _FMCON          DATA 0xe4
0000             99   _FMDATA         DATA 0xe5
0000            100   _I2ADR          DATA 0xdb
0000            101   _I2CON          DATA 0xd8
0000            102   _I2DAT          DATA 0xda
0000            103   _I2SCLH         DATA 0xdd
0000            104   _I2SCLL         DATA 0xdc
0000            105   _I2STAT         DATA 0xd9
0000            106   _ICRAH          DATA 0xab
0000            107   _ICRAL          DATA 0xaa
0000            108   _ICRBH          DATA 0xaf
0000            109   _ICRBL          DATA 0xae
0000            110   _IEN0           DATA 0xa8
0000            111   _IEN1           DATA 0xe8
0000            112   _IP0            DATA 0xb8
0000            113   _IP0H           DATA 0xb7
0000            114   _IP1            DATA 0xf8
0000            115   _IP1H           DATA 0xf7
0000            116   _KBCON          DATA 0x94
0000            117   _KBMASK         DATA 0x86
0000            118   _KBPATN         DATA 0x93
0000            119   _OCRAH          DATA 0xef
0000            120   _OCRAL          DATA 0xee
0000            121   _OCRBH          DATA 0xfb
0000            122   _OCRBL          DATA 0xfa
0000            123   _OCRCH          DATA 0xfd
0000            124   _OCRCL          DATA 0xfc
0000            125   _OCRDH          DATA 0xff
0000            126   _OCRDL          DATA 0xfe
0000            127   _P0             DATA 0x80
0000            128   _P1             DATA 0x90
0000            129   _P2             DATA 0xa0
0000            130   _P3             DATA 0xb0
0000            131   _P0M1           DATA 0x84
0000            132   _P0M2           DATA 0x85
0000            133   _P1M1           DATA 0x91
0000            134   _P1M2           DATA 0x92
0000            135   _P2M1           DATA 0xa4
0000            136   _P2M2           DATA 0xa5
0000            137   _P3M1           DATA 0xb1
0000            138   _P3M2           DATA 0xb2
0000            139   _PCON           DATA 0x87
0000            140   _PCONA          DATA 0xb5
0000            141   _PSW            DATA 0xd0
0000            142   _PT0AD          DATA 0xf6
0000            143   _RSTSRC         DATA 0xdf
0000            144   _RTCCON         DATA 0xd1
0000            145   _RTCH           DATA 0xd2
0000            146   _RTCL           DATA 0xd3
0000            147   _SADDR          DATA 0xa9
0000            148   _SADEN          DATA 0xb9
0000            149   _SBUF           DATA 0x99
0000            150   _SCON           DATA 0x98
0000            151   _SSTAT          DATA 0xba
0000            152   _SP             DATA 0x81
0000            153   _SPCTL          DATA 0xe2
0000            154   _SPSTAT         DATA 0xe1
0000            155   _SPDAT          DATA 0xe3
0000            156   _TAMOD          DATA 0x8f
0000            157   _TCON           DATA 0x88
0000            158   _TCR20          DATA 0xc8
0000            159   _TCR21          DATA 0xf9
0000            160   _TH0            DATA 0x8c
0000            161   _TH1            DATA 0x8d
0000            162   _TH2            DATA 0xcd
0000            163   _TICR2          DATA 0xc9
0000            164   _TIFR2          DATA 0xe9
0000            165   _TISE2          DATA 0xde
0000            166   _TL0            DATA 0x8a
0000            167   _TL1            DATA 0x8b
0000            168   _TL2            DATA 0xcc
0000            169   _TMOD           DATA 0x89
0000            170   _TOR2H          DATA 0xcf
0000            171   _TOR2L          DATA 0xce
0000            172   _TPCR2H         DATA 0xcb
0000            173   _TPCR2L         DATA 0xca
0000            174   _TRIM           DATA 0x96
0000            175   _WDCON          DATA 0xa7
0000            176   _WDL            DATA 0xc1
0000            177   _WFEED1         DATA 0xc2
0000            178   _WFEED2         DATA 0xc3
0000            179   ;--------------------------------------------------------
0000            180   ; special function bits
0000            181   ;--------------------------------------------------------
0000            182   _ACC_7          BIT 0xe7
0000            183   _ACC_6          BIT 0xe6
0000            184   _ACC_5          BIT 0xe5
0000            185   _ACC_4          BIT 0xe4
0000            186   _ACC_3          BIT 0xe3
0000            187   _ACC_2          BIT 0xe2
0000            188   _ACC_1          BIT 0xe1
0000            189   _ACC_0          BIT 0xe0
0000            190   _ADMODA_7       BIT 0xc7
0000            191   _ADMODA_6       BIT 0xc6
0000            192   _ADMODA_5       BIT 0xc5
0000            193   _ADMODA_4       BIT 0xc4
0000            194   _ADMODA_3       BIT 0xc3
0000            195   _ADMODA_2       BIT 0xc2
0000            196   _ADMODA_1       BIT 0xc1
0000            197   _ADMODA_0       BIT 0xc0
0000            198   _BNDI1          BIT 0xc7
0000            199   _BURST1         BIT 0xc6
0000            200   _SCC1           BIT 0xc5
0000            201   _SCAN1          BIT 0xc4
0000            202   _BNDI0          BIT 0xc3
0000            203   _BURST0         BIT 0xc2
0000            204   _SCC0           BIT 0xc1
0000            205   _SCAN0          BIT 0xc0
0000            206   _B_7            BIT 0xf7
0000            207   _B_6            BIT 0xf6
0000            208   _B_5            BIT 0xf5
0000            209   _B_4            BIT 0xf4
0000            210   _B_3            BIT 0xf3
0000            211   _B_2            BIT 0xf2
0000            212   _B_1            BIT 0xf1
0000            213   _B_0            BIT 0xf0
0000            214   _I2CON_7        BIT 0xdf
0000            215   _I2CON_6        BIT 0xde
0000            216   _I2CON_5        BIT 0xdd
0000            217   _I2CON_4        BIT 0xdc
0000            218   _I2CON_3        BIT 0xdb
0000            219   _I2CON_2        BIT 0xda
0000            220   _I2CON_1        BIT 0xd9
0000            221   _I2CON_0        BIT 0xd8
0000            222   _I2EN           BIT 0xde
0000            223   _STA            BIT 0xdd
0000            224   _STO            BIT 0xdc
0000            225   _SI             BIT 0xdb
0000            226   _AA             BIT 0xda
0000            227   _CRSEL          BIT 0xd8
0000            228   _IEN0_7         BIT 0xaf
0000            229   _IEN0_6         BIT 0xae
0000            230   _IEN0_5         BIT 0xad
0000            231   _IEN0_4         BIT 0xac
0000            232   _IEN0_3         BIT 0xab
0000            233   _IEN0_2         BIT 0xaa
0000            234   _IEN0_1         BIT 0xa9
0000            235   _IEN0_0         BIT 0xa8
0000            236   _EA             BIT 0xaf
0000            237   _EWDRT          BIT 0xae
0000            238   _EBO            BIT 0xad
0000            239   _ES             BIT 0xac
0000            240   _ESR            BIT 0xac
0000            241   _ET1            BIT 0xab
0000            242   _EX1            BIT 0xaa
0000            243   _ET0            BIT 0xa9
0000            244   _EX0            BIT 0xa8
0000            245   _IEN1_7         BIT 0xef
0000            246   _IEN1_6         BIT 0xee
0000            247   _IEN1_5         BIT 0xed
0000            248   _IEN1_4         BIT 0xec
0000            249   _IEN1_3         BIT 0xeb
0000            250   _IEN1_2         BIT 0xea
0000            251   _IEN1_1         BIT 0xe9
0000            252   _IEN1_0         BIT 0xe8
0000            253   _EADEE          BIT 0xef
0000            254   _EST            BIT 0xee
0000            255   _ECCU           BIT 0xec
0000            256   _ESPI           BIT 0xeb
0000            257   _EC             BIT 0xea
0000            258   _EKBI           BIT 0xe9
0000            259   _EI2C           BIT 0xe8
0000            260   _IP0_7          BIT 0xbf
0000            261   _IP0_6          BIT 0xbe
0000            262   _IP0_5          BIT 0xbd
0000            263   _IP0_4          BIT 0xbc
0000            264   _IP0_3          BIT 0xbb
0000            265   _IP0_2          BIT 0xba
0000            266   _IP0_1          BIT 0xb9
0000            267   _IP0_0          BIT 0xb8
0000            268   _PWDRT          BIT 0xbe
0000            269   _PBO            BIT 0xbd
0000            270   _PS             BIT 0xbc
0000            271   _PSR            BIT 0xbc
0000            272   _PT1            BIT 0xbb
0000            273   _PX1            BIT 0xba
0000            274   _PT0            BIT 0xb9
0000            275   _PX0            BIT 0xb8
0000            276   _IP1_7          BIT 0xff
0000            277   _IP1_6          BIT 0xfe
0000            278   _IP1_5          BIT 0xfd
0000            279   _IP1_4          BIT 0xfc
0000            280   _IP1_3          BIT 0xfb
0000            281   _IP1_2          BIT 0xfa
0000            282   _IP1_1          BIT 0xf9
0000            283   _IP1_0          BIT 0xf8
0000            284   _PADEE          BIT 0xff
0000            285   _PST            BIT 0xfe
0000            286   _PCCU           BIT 0xfc
0000            287   _PSPI           BIT 0xfb
0000            288   _PC             BIT 0xfa
0000            289   _PKBI           BIT 0xf9
0000            290   _PI2C           BIT 0xf8
0000            291   _P0_7           BIT 0x87
0000            292   _P0_6           BIT 0x86
0000            293   _P0_5           BIT 0x85
0000            294   _P0_4           BIT 0x84
0000            295   _P0_3           BIT 0x83
0000            296   _P0_2           BIT 0x82
0000            297   _P0_1           BIT 0x81
0000            298   _P0_0           BIT 0x80
0000            299   _T1             BIT 0x87
0000            300   _KB7            BIT 0x87
0000            301   _CMP_1          BIT 0x86
0000            302   _KB6            BIT 0x86
0000            303   _CMPREF         BIT 0x85
0000            304   _KB5            BIT 0x85
0000            305   _CIN1A          BIT 0x84
0000            306   _KB4            BIT 0x84
0000            307   _CIN1B          BIT 0x83
0000            308   _KB3            BIT 0x83
0000            309   _CIN2A          BIT 0x82
0000            310   _KB2            BIT 0x82
0000            311   _CIN2B          BIT 0x81
0000            312   _KB1            BIT 0x81
0000            313   _CMP_2          BIT 0x80
0000            314   _KB0            BIT 0x80
0000            315   _P1_7           BIT 0x97
0000            316   _P1_6           BIT 0x96
0000            317   _P1_5           BIT 0x95
0000            318   _P1_4           BIT 0x94
0000            319   _P1_3           BIT 0x93
0000            320   _P1_2           BIT 0x92
0000            321   _P1_1           BIT 0x91
0000            322   _P1_0           BIT 0x90
0000            323   _OCC            BIT 0x97
0000            324   _OCB            BIT 0x96
0000            325   _RST            BIT 0x95
0000            326   _INT1           BIT 0x94
0000            327   _INT0           BIT 0x93
0000            328   _SDA            BIT 0x93
0000            329   _T0             BIT 0x92
0000            330   _SCL            BIT 0x92
0000            331   _RXD            BIT 0x91
0000            332   _TXD            BIT 0x90
0000            333   _P2_7           BIT 0xa7
0000            334   _P2_6           BIT 0xa6
0000            335   _P2_5           BIT 0xa5
0000            336   _P2_4           BIT 0xa4
0000            337   _P2_3           BIT 0xa3
0000            338   _P2_2           BIT 0xa2
0000            339   _P2_1           BIT 0xa1
0000            340   _P2_0           BIT 0xa0
0000            341   _ICA            BIT 0xa7
0000            342   _OCA            BIT 0xa6
0000            343   _SPICLK         BIT 0xa5
0000            344   _SS             BIT 0xa4
0000            345   _MISO           BIT 0xa3
0000            346   _MOSI           BIT 0xa2
0000            347   _OCD            BIT 0xa1
0000            348   _ICB            BIT 0xa0
0000            349   _P3_7           BIT 0xb7
0000            350   _P3_6           BIT 0xb6
0000            351   _P3_5           BIT 0xb5
0000            352   _P3_4           BIT 0xb4
0000            353   _P3_3           BIT 0xb3
0000            354   _P3_2           BIT 0xb2
0000            355   _P3_1           BIT 0xb1
0000            356   _P3_0           BIT 0xb0
0000            357   _XTAL1          BIT 0xb1
0000            358   _XTAL2          BIT 0xb0
0000            359   _PSW_7          BIT 0xd7
0000            360   _PSW_6          BIT 0xd6
0000            361   _PSW_5          BIT 0xd5
0000            362   _PSW_4          BIT 0xd4
0000            363   _PSW_3          BIT 0xd3
0000            364   _PSW_2          BIT 0xd2
0000            365   _PSW_1          BIT 0xd1
0000            366   _PSW_0          BIT 0xd0
0000            367   _CY             BIT 0xd7
0000            368   _AC             BIT 0xd6
0000            369   _F0             BIT 0xd5
0000            370   _RS1            BIT 0xd4
0000            371   _RS0            BIT 0xd3
0000            372   _OV             BIT 0xd2
0000            373   _F1             BIT 0xd1
0000            374   _P              BIT 0xd0
0000            375   _SCON_7         BIT 0x9f
0000            376   _SCON_6         BIT 0x9e
0000            377   _SCON_5         BIT 0x9d
0000            378   _SCON_4         BIT 0x9c
0000            379   _SCON_3         BIT 0x9b
0000            380   _SCON_2         BIT 0x9a
0000            381   _SCON_1         BIT 0x99
0000            382   _SCON_0         BIT 0x98
0000            383   _SM0            BIT 0x9f
0000            384   _FE             BIT 0x9f
0000            385   _SM1            BIT 0x9e
0000            386   _SM2            BIT 0x9d
0000            387   _REN            BIT 0x9c
0000            388   _TB8            BIT 0x9b
0000            389   _RB8            BIT 0x9a
0000            390   _TI             BIT 0x99
0000            391   _RI             BIT 0x98
0000            392   _TCON_7         BIT 0x8f
0000            393   _TCON_6         BIT 0x8e
0000            394   _TCON_5         BIT 0x8d
0000            395   _TCON_4         BIT 0x8c
0000            396   _TCON_3         BIT 0x8b
0000            397   _TCON_2         BIT 0x8a
0000            398   _TCON_1         BIT 0x89
0000            399   _TCON_0         BIT 0x88
0000            400   _TF1            BIT 0x8f
0000            401   _TR1            BIT 0x8e
0000            402   _TF0            BIT 0x8d
0000            403   _TR0            BIT 0x8c
0000            404   _IE1            BIT 0x8b
0000            405   _IT1            BIT 0x8a
0000            406   _IE0            BIT 0x89
0000            407   _IT0            BIT 0x88
0000            408   _TCR20_7        BIT 0xcf
0000            409   _TCR20_6        BIT 0xce
0000            410   _TCR20_5        BIT 0xcd
0000            411   _TCR20_4        BIT 0xcc
0000            412   _TCR20_3        BIT 0xcb
0000            413   _TCR20_2        BIT 0xca
0000            414   _TCR20_1        BIT 0xc9
0000            415   _TCR20_0        BIT 0xc8
0000            416   _PLEEN          BIT 0xcf
0000            417   _HLTRN          BIT 0xce
0000            418   _HLTEN          BIT 0xcd
0000            419   _ALTCD          BIT 0xcc
0000            420   _ALTAB          BIT 0xcb
0000            421   _TDIR2          BIT 0xca
0000            422   _TMOD21         BIT 0xc9
0000            423   _TMOD20         BIT 0xc8
0000            424   ;--------------------------------------------------------
0000            425   ; overlayable register banks
0000            426   ;--------------------------------------------------------
0000            427            rbank0 segment data overlay
0000            428   ;--------------------------------------------------------
0000            429   ; internal ram data
0000            430   ;--------------------------------------------------------
0000            431            rseg R_DSEG
0000            432   _msLine_Count:
0000            433            ds 2
0002            434   _msCount:
0002            435            ds 2
0004            436   _secs:
0004            437            ds 1
0005            438   _mins:
0005            439            ds 1
0006            440   _pwmcount:
0006            441            ds 1
0007            442   _pwm_left:
0007            443            ds 1
0008            444   _pwm_right:
0008            445            ds 1
0009            446   _line_timer:
0009            447            ds 2
000B            448   _LCDprint_PARM_2:
000B            449            ds 1
000C            450   _display_LCD_buff_1_93:
000C            451            ds 17
001D            452   _main_cor_1_104:
001D            453            ds 4
0021            454   _main_cur_error_1_104:
0021            455            ds 4
0025            456   _main_pre_error_1_104:
0025            457            ds 4
0029            458   _main_left_1_104:
0029            459            ds 4
002D            460   _main_right_1_104:
002D            461            ds 4
0031            462   _main_line_sensor_1_104:
0031            463            ds 4
0035            464   _main_diff_1_104:
0035            465            ds 4
0039            466   _main_line_counter_1_104:
0039            467            ds 2
003B            468   _main_state_1_104:
003B            469            ds 2
003D            470   ;--------------------------------------------------------
003D            471   ; overlayable items in internal ram 
003D            472   ;--------------------------------------------------------
0000            473            rseg R_OSEG
0000            474   ;--------------------------------------------------------
0000            475   ; indirectly addressable internal ram data
0000            476   ;--------------------------------------------------------
0000            477            rseg R_ISEG
0000            478   ;--------------------------------------------------------
0000            479   ; absolute internal ram data
0000            480   ;--------------------------------------------------------
0000            481            DSEG
0000            482   ;--------------------------------------------------------
0000            483   ; bit data
0000            484   ;--------------------------------------------------------
0000            485            rseg R_BSEG
0000            486   _time_update_flag:
0000            487            DBIT    1
0001            488   _line_counter_flag:
0001            489            DBIT    1
0002            490   _LCDprint_PARM_3:
0002            491            DBIT    1
0003            492   ;--------------------------------------------------------
0003            493   ; paged external ram data
0003            494   ;--------------------------------------------------------
0000            495            rseg R_PSEG
0000            496   ;--------------------------------------------------------
0000            497   ; external ram data
0000            498   ;--------------------------------------------------------
0000            499            rseg R_XSEG
FFC8            500            XSEG at 0xffc8
FFC8            501   _BODCFG: ds 1
FFC9            502            public _BODCFG
0000            503            rseg R_XSEG
FFDE            504            XSEG at 0xffde
FFDE            505   _CLKCON: ds 1
FFDF            506            public _CLKCON
0000            507            rseg R_XSEG
FFE1            508            XSEG at 0xffe1
FFE1            509   _PGACON1: ds 1
FFE2            510            public _PGACON1
0000            511            rseg R_XSEG
FFE4            512            XSEG at 0xffe4
FFE4            513   _PGACON1B: ds 1
FFE5            514            public _PGACON1B
0000            515            rseg R_XSEG
FFE3            516            XSEG at 0xffe3
FFE3            517   _PGA1TRIM8X16X: ds 1
FFE4            518            public _PGA1TRIM8X16X
0000            519            rseg R_XSEG
FFE2            520            XSEG at 0xffe2
FFE2            521   _PGA1TRIM2X4X: ds 1
FFE3            522            public _PGA1TRIM2X4X
0000            523            rseg R_XSEG
FFCA            524            XSEG at 0xffca
FFCA            525   _PGACON0: ds 1
FFCB            526            public _PGACON0
0000            527            rseg R_XSEG
FFCE            528            XSEG at 0xffce
FFCE            529   _PGACON0B: ds 1
FFCF            530            public _PGACON0B
0000            531            rseg R_XSEG
FFCD            532            XSEG at 0xffcd
FFCD            533   _PGA0TRIM8X16X: ds 1
FFCE            534            public _PGA0TRIM8X16X
0000            535            rseg R_XSEG
FFCC            536            XSEG at 0xffcc
FFCC            537   _PGA0TRIM2X4X: ds 1
FFCD            538            public _PGA0TRIM2X4X
0000            539            rseg R_XSEG
FFBF            540            XSEG at 0xffbf
FFBF            541   _RTCDATH: ds 1
FFC0            542            public _RTCDATH
0000            543            rseg R_XSEG
FFBE            544            XSEG at 0xffbe
FFBE            545   _RTCDATL: ds 1
FFBF            546            public _RTCDATL
0000            547            rseg R_XSEG
0000            548   ;--------------------------------------------------------
0000            549   ; absolute external ram data
0000            550   ;--------------------------------------------------------
FFBF            551            XSEG
FFBF            552   ;--------------------------------------------------------
FFBF            553   ; external initialized ram data
FFBF            554   ;--------------------------------------------------------
0000            555            rseg R_IXSEG
0000            556            rseg R_HOME
0000            557            rseg R_GSINIT
0000            558            rseg R_CSEG
0000            559   ;--------------------------------------------------------
0000            560   ; Reset entry point and interrupt vectors
0000            561   ;--------------------------------------------------------
0000            562            CSEG at 0x0000
0000 020100     563            ljmp    _crt0
000B            564            CSEG at 0x000b
000B 020100     565            ljmp    _Timer0ISR
000E            566   ;--------------------------------------------------------
000E            567   ; global & static initialisations
000E            568   ;--------------------------------------------------------
0000            569            rseg R_HOME
0000            570            rseg R_GSINIT
0000            571            rseg R_GSINIT
0000            572   ;--------------------------------------------------------
0000            573   ; data variables initialization
0000            574   ;--------------------------------------------------------
0000            575            rseg R_DINIT
0000            576   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:39: volatile int msLine_Count=0;
0000 E4         577            clr     a
0001 F508       578            mov     _msLine_Count,a
0003 F509       579            mov     (_msLine_Count + 1),a
0005            580   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:40: volatile int msCount=0; // Volatiles can be changed by stuff outside our program, like memory registers
0005 E4         581            clr     a
0006 F5C8       582            mov     _msCount,a
0008 F5C9       583            mov     (_msCount + 1),a
000A            584   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:41: volatile unsigned char secs=0, mins=0; // They are like global variables, kinda 
000A 758800     585            mov     _secs,#0x00
000D            586   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:41: volatile bit time_update_flag=0;
000D 754800     587            mov     _mins,#0x00
0010            588   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:47: volatile int line_timer = 0;
0010 E4         589            clr     a
0011 F548       590            mov     _line_timer,a
0013 F549       591            mov     (_line_timer + 1),a
0015            592   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:42: volatile bit time_update_flag=0;
0015 C2B8       593            clr     _time_update_flag
0017            594   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:43: volatile bit line_counter_flag=0;
0017 C268       595            clr     _line_counter_flag
0019            596            ; The linker places a 'ret' at the end of segment R_DINIT.
0019            597   ;--------------------------------------------------------
0019            598   ; code
0019            599   ;--------------------------------------------------------
0000            600            rseg R_CSEG
0000            601   ;------------------------------------------------------------
0000            602   ;Allocation info for local variables in function 'InitPorts'
0000            603   ;------------------------------------------------------------
0000            604   ;------------------------------------------------------------
0000            605   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:49: void InitPorts(void)
0000            606   ;        -----------------------------------------
0000            607   ;         function InitPorts
0000            608   ;        -----------------------------------------
0000            609   _InitPorts:
0000            610            using   0
0000            611   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:51: P0M1=0x1E;
0000 75841E     612            mov     _P0M1,#0x1E
0003            613   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:52: P0M2=0x00;
0003 758500     614            mov     _P0M2,#0x00
0006            615   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:53: P1M1=0;
0006 759100     616            mov     _P1M1,#0x00
0009            617   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:54: P1M2=0;
0009 759200     618            mov     _P1M2,#0x00
000C            619   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:55: P2M1=0;
000C 75A400     620            mov     _P2M1,#0x00
000F            621   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:56: P2M2=0;
000F 75A500     622            mov     _P2M2,#0x00
0012            623   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:57: P3M1=0;
0012 75B100     624            mov     _P3M1,#0x00
0015            625   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:58: P3M2=0;
0015 75B200     626            mov     _P3M2,#0x00
0018 22         627            ret
0019            628   ;------------------------------------------------------------
0019            629   ;Allocation info for local variables in function 'Wait50us'
0019            630   ;------------------------------------------------------------
0019            631   ;------------------------------------------------------------
0019            632   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:61: void Wait50us (void)
0019            633   ;        -----------------------------------------
0019            634   ;         function Wait50us
0019            635   ;        -----------------------------------------
0019            636   _Wait50us:
0019            637   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:66: _endasm;
0019            638            
0019 7852       639             mov R0, #82
001B            640             L0:
001B D8D8       641            djnz R0, L0 ; 2 machine cycles-> 2*0.27126us*92=50us
001D            642             
001D 22         643            ret
001E            644   ;------------------------------------------------------------
001E            645   ;Allocation info for local variables in function 'waitms'
001E            646   ;------------------------------------------------------------
001E            647   ;ms                        Allocated to registers r2 r3 
001E            648   ;j                         Allocated to registers r4 r5 
001E            649   ;k                         Allocated to registers r6 
001E            650   ;------------------------------------------------------------
001E            651   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:69: void waitms (unsigned int ms)
001E            652   ;        -----------------------------------------
001E            653   ;         function waitms
001E            654   ;        -----------------------------------------
001E            655   _waitms:
001E AA82       656            mov     r2,dpl
0020 AB83       657            mov     r3,dph
0022            658   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:75: for(j=0; j<ms; j++)
0022 7C00       659            mov     r4,#0x00
0024 7D00       660            mov     r5,#0x00
0026            661   L004004?:
0026 C3         662            clr     c
0027 EC         663            mov     a,r4
0028 9A         664            subb    a,r2
0029 ED         665            mov     a,r5
002A 9B         666            subb    a,r3
002B 5001       667            jnc     L004008?
002D            668   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:76: for (k=0; k<20; k++) Wait50us();
002D 7E14       669            mov     r6,#0x14
002F            670   L004003?:
002F C002       671            push    ar2
0031 C003       672            push    ar3
0033 C004       673            push    ar4
0035 C005       674            push    ar5
0037 C006       675            push    ar6
0039 120100     676            lcall   _Wait50us
003C D006       677            pop     ar6
003E D005       678            pop     ar5
0040 D004       679            pop     ar4
0042 D003       680            pop     ar3
0044 D002       681            pop     ar2
0046 DE18       682            djnz    r6,L004003?
0048            683   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:75: for(j=0; j<ms; j++)
0048 0C         684            inc     r4
0049 BC0098     685            cjne    r4,#0x00,L004004?
004C 0D         686            inc     r5
004D 8001       687            sjmp    L004004?
004F            688   L004008?:
004F 22         689            ret
0050            690   ;------------------------------------------------------------
0050            691   ;Allocation info for local variables in function 'LCD_pulse'
0050            692   ;------------------------------------------------------------
0050            693   ;------------------------------------------------------------
0050            694   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:79: void LCD_pulse (void)
0050            695   ;        -----------------------------------------
0050            696   ;         function LCD_pulse
0050            697   ;        -----------------------------------------
0050            698   _LCD_pulse:
0050            699   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:81: LCD_E=1;
0050 D2A5       700            setb    _P2_5
0052            701   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:82: Wait50us();
0052 120100     702            lcall   _Wait50us
0055            703   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:83: LCD_E=0;
0055 C2A5       704            clr     _P2_5
0057 22         705            ret
0058            706   ;------------------------------------------------------------
0058            707   ;Allocation info for local variables in function 'LCD_byte'
0058            708   ;------------------------------------------------------------
0058            709   ;x                         Allocated to registers 
0058            710   ;------------------------------------------------------------
0058            711   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:86: void LCD_byte (unsigned char x)
0058            712   ;        -----------------------------------------
0058            713   ;         function LCD_byte
0058            714   ;        -----------------------------------------
0058            715   _LCD_byte:
0058 8582E0     716            mov     _ACC,dpl
005B            717   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:90: LCD_D7=ACC_7;
005B A2E7       718            mov     c,_ACC_7
005D 9294       719            mov     _P1_4,c
005F            720   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:91: LCD_D6=ACC_6;
005F A2E6       721            mov     c,_ACC_6
0061 9296       722            mov     _P1_6,c
0063            723   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:92: LCD_D5=ACC_5;
0063 A2E5       724            mov     c,_ACC_5
0065 9297       725            mov     _P1_7,c
0067            726   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:93: LCD_D4=ACC_4;
0067 A2E4       727            mov     c,_ACC_4
0069 92A0       728            mov     _P2_0,c
006B            729   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:94: LCD_D3=ACC_3;
006B A2E3       730            mov     c,_ACC_3
006D 92A1       731            mov     _P2_1,c
006F            732   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:95: LCD_D2=ACC_2;
006F A2E2       733            mov     c,_ACC_2
0071 92A2       734            mov     _P2_2,c
0073            735   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:96: LCD_D1=ACC_1;
0073 A2E1       736            mov     c,_ACC_1
0075 92A3       737            mov     _P2_3,c
0077            738   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:97: LCD_D0=ACC_0;
0077 A2E0       739            mov     c,_ACC_0
0079 92A4       740            mov     _P2_4,c
007B            741   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:98: LCD_pulse();
007B 020100     742            ljmp    _LCD_pulse
007E            743   ;------------------------------------------------------------
007E            744   ;Allocation info for local variables in function 'WriteData'
007E            745   ;------------------------------------------------------------
007E            746   ;x                         Allocated to registers r2 
007E            747   ;------------------------------------------------------------
007E            748   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:101: void WriteData (unsigned char x)
007E            749   ;        -----------------------------------------
007E            750   ;         function WriteData
007E            751   ;        -----------------------------------------
007E            752   _WriteData:
007E AA82       753            mov     r2,dpl
0080            754   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:103: LCD_RS=1;
0080 D2A7       755            setb    _P2_7
0082            756   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:104: LCD_byte(x);
0082 8A82       757            mov     dpl,r2
0084 120100     758            lcall   _LCD_byte
0087            759   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:105: waitms(2);
0087 900002     760            mov     dptr,#0x0002
008A 020100     761            ljmp    _waitms
008D            762   ;------------------------------------------------------------
008D            763   ;Allocation info for local variables in function 'WriteCommand'
008D            764   ;------------------------------------------------------------
008D            765   ;x                         Allocated to registers r2 
008D            766   ;------------------------------------------------------------
008D            767   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:108: void WriteCommand (unsigned char x)
008D            768   ;        -----------------------------------------
008D            769   ;         function WriteCommand
008D            770   ;        -----------------------------------------
008D            771   _WriteCommand:
008D AA82       772            mov     r2,dpl
008F            773   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:110: LCD_RS=0;
008F C2A7       774            clr     _P2_7
0091            775   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:111: LCD_byte(x);
0091 8A82       776            mov     dpl,r2
0093 120100     777            lcall   _LCD_byte
0096            778   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:112: waitms(5);
0096 900005     779            mov     dptr,#0x0005
0099 020100     780            ljmp    _waitms
009C            781   ;------------------------------------------------------------
009C            782   ;Allocation info for local variables in function 'LCD_8BIT'
009C            783   ;------------------------------------------------------------
009C            784   ;------------------------------------------------------------
009C            785   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:115: void LCD_8BIT (void)
009C            786   ;        -----------------------------------------
009C            787   ;         function LCD_8BIT
009C            788   ;        -----------------------------------------
009C            789   _LCD_8BIT:
009C            790   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:117: LCD_E=0;  // Resting state of LCD's enable is zero
009C C2A5       791            clr     _P2_5
009E            792   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:118: LCD_RW=0; // We are only writing to the LCD in this program
009E C2A6       793            clr     _P2_6
00A0            794   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:119: waitms(20);
00A0 900014     795            mov     dptr,#0x0014
00A3 120100     796            lcall   _waitms
00A6            797   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:121: WriteCommand(0x33);
00A6 758233     798            mov     dpl,#0x33
00A9 120100     799            lcall   _WriteCommand
00AC            800   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:122: WriteCommand(0x33);
00AC 758233     801            mov     dpl,#0x33
00AF 120100     802            lcall   _WriteCommand
00B2            803   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:123: WriteCommand(0x33); // Stay in 8-bit mode
00B2 758233     804            mov     dpl,#0x33
00B5 120100     805            lcall   _WriteCommand
00B8            806   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:126: WriteCommand(0x38);
00B8 758238     807            mov     dpl,#0x38
00BB 120100     808            lcall   _WriteCommand
00BE            809   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:127: WriteCommand(0x0c);
00BE 75820C     810            mov     dpl,#0x0C
00C1 120100     811            lcall   _WriteCommand
00C4            812   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:128: WriteCommand(0x01); // Clear screen command (takes some time)
00C4 758201     813            mov     dpl,#0x01
00C7 120100     814            lcall   _WriteCommand
00CA            815   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:129: waitms(20); // Wait for clear screen command to finsih.
00CA 900014     816            mov     dptr,#0x0014
00CD 020100     817            ljmp    _waitms
00D0            818   ;------------------------------------------------------------
00D0            819   ;Allocation info for local variables in function 'LCDprint'
00D0            820   ;------------------------------------------------------------
00D0            821   ;line                      Allocated with name '_LCDprint_PARM_2'
00D0            822   ;string                    Allocated to registers r2 r3 r4 
00D0            823   ;j                         Allocated to registers r5 
00D0            824   ;------------------------------------------------------------
00D0            825   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:132: void LCDprint(char * string, unsigned char line, bit clear)
00D0            826   ;        -----------------------------------------
00D0            827   ;         function LCDprint
00D0            828   ;        -----------------------------------------
00D0            829   _LCDprint:
00D0 AA82       830            mov     r2,dpl
00D2 AB83       831            mov     r3,dph
00D4 ACF0       832            mov     r4,b
00D6            833   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:136: WriteCommand(line==2?0xc0:0x80);
00D6 7402       834            mov     a,#0x02
00D8 B50898     835            cjne    a,_LCDprint_PARM_2,L010013?
00DB 7DC0       836            mov     r5,#0xC0
00DD 8001       837            sjmp    L010014?
00DF            838   L010013?:
00DF 7D80       839            mov     r5,#0x80
00E1            840   L010014?:
00E1 8D82       841            mov     dpl,r5
00E3 C002       842            push    ar2
00E5 C003       843            push    ar3
00E7 C004       844            push    ar4
00E9 120100     845            lcall   _WriteCommand
00EC            846   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:137: waitms(5);
00EC 900005     847            mov     dptr,#0x0005
00EF 120100     848            lcall   _waitms
00F2 D004       849            pop     ar4
00F4 D003       850            pop     ar3
00F6 D002       851            pop     ar2
00F8            852   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:138: for(j=0; string[j]!=0; j++)     WriteData(string[j]);// Write the message
00F8 7D00       853            mov     r5,#0x00
00FA            854   L010003?:
00FA ED         855            mov     a,r5
00FB 2A         856            add     a,r2
00FC FE         857            mov     r6,a
00FD E4         858            clr     a
00FE 3B         859            addc    a,r3
00FF FF         860            mov     r7,a
0100 8C00       861            mov     ar0,r4
0102 8E82       862            mov     dpl,r6
0104 8F83       863            mov     dph,r7
0106 88F0       864            mov     b,r0
0108 120100     865            lcall   __gptrget
010B FE         866            mov     r6,a
010C 6001       867            jz      L010006?
010E 8E82       868            mov     dpl,r6
0110 C002       869            push    ar2
0112 C003       870            push    ar3
0114 C004       871            push    ar4
0116 C005       872            push    ar5
0118 120100     873            lcall   _WriteData
011B D005       874            pop     ar5
011D D004       875            pop     ar4
011F D003       876            pop     ar3
0121 D002       877            pop     ar2
0123 0D         878            inc     r5
0124 8001       879            sjmp    L010003?
0126            880   L010006?:
0126            881   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:139: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0126 3018D8     882            jnb     _LCDprint_PARM_3,L010011?
0129 8D02       883            mov     ar2,r5
012B            884   L010007?:
012B BA1058     885            cjne    r2,#0x10,L010026?
012E            886   L010026?:
012E 5001       887            jnc     L010011?
0130 758220     888            mov     dpl,#0x20
0133 C002       889            push    ar2
0135 120100     890            lcall   _WriteData
0138 D002       891            pop     ar2
013A 0A         892            inc     r2
013B 8001       893            sjmp    L010007?
013D            894   L010011?:
013D 22         895            ret
013E            896   ;------------------------------------------------------------
013E            897   ;Allocation info for local variables in function 'Wait1S'
013E            898   ;------------------------------------------------------------
013E            899   ;------------------------------------------------------------
013E            900   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:142: void Wait1S (void)
013E            901   ;        -----------------------------------------
013E            902   ;         function Wait1S
013E            903   ;        -----------------------------------------
013E            904   _Wait1S:
013E            905   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:151: _endasm;
013E            906            
013E 7A28       907             mov R2, #40
0140            908             L3:
0140 79FA       909            mov R1, #250
0142            910             L2:
0142 78B8       911            mov R0, #184
0144            912             L1:
0144 D818       913            djnz R0, L1 ; 2 machine cycles-> 2*0.27126us*184=100us
0146 D9D8       914             djnz R1, L2 ; 100us*250=0.025s
0148 DA98       915             djnz R2, L3 ; 0.025s*40=1s
014A            916             
014A 22         917            ret
014B            918   ;------------------------------------------------------------
014B            919   ;Allocation info for local variables in function 'InitSerialPort'
014B            920   ;------------------------------------------------------------
014B            921   ;------------------------------------------------------------
014B            922   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:154: void InitSerialPort(void)
014B            923   ;        -----------------------------------------
014B            924   ;         function InitSerialPort
014B            925   ;        -----------------------------------------
014B            926   _InitSerialPort:
014B            927   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:156: BRGCON=0x00; //Make sure the baud rate generator is off
014B 75BD00     928            mov     _BRGCON,#0x00
014E            929   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:157: BRGR1=((XTAL/BAUD)-16)/0x100;
014E 75BF00     930            mov     _BRGR1,#0x00
0151            931   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:158: BRGR0=((XTAL/BAUD)-16)%0x100;
0151 75BE30     932            mov     _BRGR0,#0x30
0154            933   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:159: BRGCON=0x03; //Turn-on the baud rate generator
0154 75BD03     934            mov     _BRGCON,#0x03
0157            935   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:160: SCON=0x52; //Serial port in mode 1, ren, txrdy, rxempty
0157 759852     936            mov     _SCON,#0x52
015A            937   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:161: P1M1=0x00; //Enable pins RxD and Txd
015A 759100     938            mov     _P1M1,#0x00
015D            939   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:162: P1M2=0x00; //Enable pins RxD and Txd
015D 759200     940            mov     _P1M2,#0x00
0160 22         941            ret
0161            942   ;------------------------------------------------------------
0161            943   ;Allocation info for local variables in function 'InitADC'
0161            944   ;------------------------------------------------------------
0161            945   ;------------------------------------------------------------
0161            946   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:165: void InitADC(void)
0161            947   ;        -----------------------------------------
0161            948   ;         function InitADC
0161            949   ;        -----------------------------------------
0161            950   _InitADC:
0161            951   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:169: P0M1 |= (P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0161 43841E     952            orl     _P0M1,#0x1E
0164            953   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:170: P0M2 &= ~(P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0164 5385E1     954            anl     _P0M2,#0xE1
0167            955   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:173: BURST1=1; //Autoscan continuous conversion mode
0167 D2C6       956            setb    _BURST1
0169            957   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:174: ADMODB = CLK0; //ADC1 clock is 7.3728MHz/2
0169 75A120     958            mov     _ADMODB,#0x20
016C            959   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:175: ADINS  = (ADI13|ADI12|ADI11|ADI10); // Select the four channels for conversion
016C 75A3F0     960            mov     _ADINS,#0xF0
016F            961   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:176: ADCON1 = (ENADC1|ADCS10); //Enable the converter and start immediately
016F 759705     962            mov     _ADCON1,#0x05
0172            963   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:177: while((ADCI1&ADCON1)==0); //Wait for first conversion to complete
0172            964   L013001?:
0172 E597       965            mov     a,_ADCON1
0174 30E358     966            jnb     acc.3,L013001?
0177 22         967            ret
0178            968   ;------------------------------------------------------------
0178            969   ;Allocation info for local variables in function 'InitTimer0'
0178            970   ;------------------------------------------------------------
0178            971   ;------------------------------------------------------------
0178            972   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:180: void InitTimer0 (void)
0178            973   ;        -----------------------------------------
0178            974   ;         function InitTimer0
0178            975   ;        -----------------------------------------
0178            976   _InitTimer0:
0178            977   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:184: TR0=0; // Stop timer 0
0178 C28C       978            clr     _TR0
017A            979   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:185: TMOD=(TMOD&0xf0)|0x01; // 16-bit timer
017A 74F0       980            mov     a,#0xF0
017C 5589       981            anl     a,_TMOD
017E 4401       982            orl     a,#0x01
0180 F589       983            mov     _TMOD,a
0182            984   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:186: TH0=TIMER0_RELOAD_VALUE/0x100; // I think the RHS is 0001 0000 0000, are we dividing?
0182 758CFE     985            mov     _TH0,#0xFE
0185            986   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:187: TL0=TIMER0_RELOAD_VALUE%0x100; // % means modulo, apparently? ...are we modulo-ing?
0185 758A90     987            mov     _TL0,#0x90
0188            988   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:188: TR0=1; // Start timer 0 (bit 4 in TCON)
0188 D28C       989            setb    _TR0
018A            990   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:189: ET0=1; // Enable timer 0 interrupt - the interrupt controller IEN0 is bit-adressable, so we change only the bit we need
018A D2A9       991            setb    _ET0
018C            992   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:190: EA=1;  // Enable global interrupts
018C D2AF       993            setb    _EA
018E 22         994            ret
018F            995   ;------------------------------------------------------------
018F            996   ;Allocation info for local variables in function 'Timer0ISR'
018F            997   ;------------------------------------------------------------
018F            998   ;------------------------------------------------------------
018F            999   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:194: void Timer0ISR (void) interrupt 1{
018F           1000   ;        -----------------------------------------
018F           1001   ;         function Timer0ISR
018F           1002   ;        -----------------------------------------
018F           1003   _Timer0ISR:
018F C0E0      1004            push    acc
0191 C0D0      1005            push    psw
0193 75D000    1006            mov     psw,#0x00
0196           1007   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:196: TR0=0; // Stop timer 0
0196 C28C      1008            clr     _TR0
0198           1009   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:197: TH0=TIMER0_RELOAD_VALUE/0x100;
0198 758CFE    1010            mov     _TH0,#0xFE
019B           1011   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:198: TL0=TIMER0_RELOAD_VALUE%0x100;
019B 758A90    1012            mov     _TL0,#0x90
019E           1013   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:199: TR0=1; // Start timer 0
019E D28C      1014            setb    _TR0
01A0           1015   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:201: if(++pwmcount>99) pwmcount=0;
01A0 0508      1016            inc     _pwmcount
01A2 E508      1017            mov     a,_pwmcount
01A4 249C      1018            add     a,#0xff - 0x63
01A6 5001      1019            jnc     L015002?
01A8 750800    1020            mov     _pwmcount,#0x00
01AB           1021   L015002?:
01AB           1022   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:202: P0_5=(pwm_left>pwmcount)?1:0;
01AB C3        1023            clr     c
01AC E508      1024            mov     a,_pwmcount
01AE 95C8      1025            subb    a,_pwm_left
01B0 9285      1026            mov     _P0_5,c
01B2           1027   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:203: P0_6=(pwm_right>pwmcount)?1:0;
01B2 C3        1028            clr     c
01B3 E508      1029            mov     a,_pwmcount
01B5 9588      1030            subb    a,_pwm_right
01B7 9286      1031            mov     _P0_6,c
01B9           1032   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:205: msCount++;
01B9 7401      1033            mov     a,#0x01
01BB 25C8      1034            add     a,_msCount
01BD F5C8      1035            mov     _msCount,a
01BF E4        1036            clr     a
01C0 35C9      1037            addc    a,(_msCount + 1)
01C2 F5C9      1038            mov     (_msCount + 1),a
01C4           1039   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:206: if(msCount==10000)
01C4 7410      1040            mov     a,#0x10
01C6 B5C858    1041            cjne    a,_msCount,L015009?
01C9 7427      1042            mov     a,#0x27
01CB B5C958    1043            cjne    a,(_msCount + 1),L015009?
01CE           1044   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:208: time_update_flag=1;
01CE D2B8      1045            setb    _time_update_flag
01D0           1046   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:209: msCount=0;
01D0 E4        1047            clr     a
01D1 F5C8      1048            mov     _msCount,a
01D3 F5C9      1049            mov     (_msCount + 1),a
01D5           1050   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:210: secs++;
01D5 0588      1051            inc     _secs
01D7           1052   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:211: if(secs==60)
01D7 743C      1053            mov     a,#0x3C
01D9 B58858    1054            cjne    a,_secs,L015009?
01DC           1055   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:213: secs=0;
01DC 758800    1056            mov     _secs,#0x00
01DF           1057   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:214: mins++;
01DF 0548      1058            inc     _mins
01E1           1059   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:215: if(mins==60)
01E1 743C      1060            mov     a,#0x3C
01E3 B54858    1061            cjne    a,_mins,L015009?
01E6           1062   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:217: mins=0;
01E6 754800    1063            mov     _mins,#0x00
01E9           1064   L015009?:
01E9 D0D0      1065            pop     psw
01EB D0E0      1066            pop     acc
01ED 32        1067            reti
01EE           1068   ;        eliminated unneeded push/pop dpl
01EE           1069   ;        eliminated unneeded push/pop dph
01EE           1070   ;        eliminated unneeded push/pop b
01EE           1071   ;------------------------------------------------------------
01EE           1072   ;Allocation info for local variables in function 'display_LCD'
01EE           1073   ;------------------------------------------------------------
01EE           1074   ;buff                      Allocated with name '_display_LCD_buff_1_93'
01EE           1075   ;------------------------------------------------------------
01EE           1076   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:223: void display_LCD(void){
01EE           1077   ;        -----------------------------------------
01EE           1078   ;         function display_LCD
01EE           1079   ;        -----------------------------------------
01EE           1080   _display_LCD:
01EE           1081   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:226: time_update_flag=0;
01EE C2B8      1082            clr     _time_update_flag
01F0           1083   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:233: sprintf(buff, "L=%5.2f R:%5.2f", (AD1DAT1/255.0)*3.3, (AD1DAT2/255.0)*3.3); //Display Left and Right Sensor
01F0 85D782    1084            mov     dpl,_AD1DAT2
01F3 120100    1085            lcall   ___uchar2fs
01F6 AA82      1086            mov     r2,dpl
01F8 AB83      1087            mov     r3,dph
01FA ACF0      1088            mov     r4,b
01FC FD        1089            mov     r5,a
01FD E4        1090            clr     a
01FE C0E0      1091            push    acc
0200 C0E0      1092            push    acc
0202 747F      1093            mov     a,#0x7F
0204 C0E0      1094            push    acc
0206 7443      1095            mov     a,#0x43
0208 C0E0      1096            push    acc
020A 8A82      1097            mov     dpl,r2
020C 8B83      1098            mov     dph,r3
020E 8CF0      1099            mov     b,r4
0210 ED        1100            mov     a,r5
0211 120100    1101            lcall   ___fsdiv
0214 AA82      1102            mov     r2,dpl
0216 AB83      1103            mov     r3,dph
0218 ACF0      1104            mov     r4,b
021A FD        1105            mov     r5,a
021B E581      1106            mov     a,sp
021D 24FC      1107            add     a,#0xfc
021F F581      1108            mov     sp,a
0221 C002      1109            push    ar2
0223 C003      1110            push    ar3
0225 C004      1111            push    ar4
0227 C005      1112            push    ar5
0229 903333    1113            mov     dptr,#0x3333
022C 75F053    1114            mov     b,#0x53
022F 7440      1115            mov     a,#0x40
0231 120100    1116            lcall   ___fsmul
0234 AA82      1117            mov     r2,dpl
0236 AB83      1118            mov     r3,dph
0238 ACF0      1119            mov     r4,b
023A FD        1120            mov     r5,a
023B E581      1121            mov     a,sp
023D 24FC      1122            add     a,#0xfc
023F F581      1123            mov     sp,a
0241 85D682    1124            mov     dpl,_AD1DAT1
0244 C002      1125            push    ar2
0246 C003      1126            push    ar3
0248 C004      1127            push    ar4
024A C005      1128            push    ar5
024C 120100    1129            lcall   ___uchar2fs
024F AE82      1130            mov     r6,dpl
0251 AF83      1131            mov     r7,dph
0253 A8F0      1132            mov     r0,b
0255 F9        1133            mov     r1,a
0256 E4        1134            clr     a
0257 C0E0      1135            push    acc
0259 C0E0      1136            push    acc
025B 747F      1137            mov     a,#0x7F
025D C0E0      1138            push    acc
025F 7443      1139            mov     a,#0x43
0261 C0E0      1140            push    acc
0263 8E82      1141            mov     dpl,r6
0265 8F83      1142            mov     dph,r7
0267 88F0      1143            mov     b,r0
0269 E9        1144            mov     a,r1
026A 120100    1145            lcall   ___fsdiv
026D AE82      1146            mov     r6,dpl
026F AF83      1147            mov     r7,dph
0271 A8F0      1148            mov     r0,b
0273 F9        1149            mov     r1,a
0274 E581      1150            mov     a,sp
0276 24FC      1151            add     a,#0xfc
0278 F581      1152            mov     sp,a
027A C006      1153            push    ar6
027C C007      1154            push    ar7
027E C000      1155            push    ar0
0280 C001      1156            push    ar1
0282 903333    1157            mov     dptr,#0x3333
0285 75F053    1158            mov     b,#0x53
0288 7440      1159            mov     a,#0x40
028A 120100    1160            lcall   ___fsmul
028D AE82      1161            mov     r6,dpl
028F AF83      1162            mov     r7,dph
0291 A8F0      1163            mov     r0,b
0293 F9        1164            mov     r1,a
0294 E581      1165            mov     a,sp
0296 24FC      1166            add     a,#0xfc
0298 F581      1167            mov     sp,a
029A C006      1168            push    ar6
029C C007      1169            push    ar7
029E C000      1170            push    ar0
02A0 C001      1171            push    ar1
02A2 7498      1172            mov     a,#__str_0
02A4 C0E0      1173            push    acc
02A6 74AF      1174            mov     a,#(__str_0 >> 8)
02A8 C0E0      1175            push    acc
02AA 7480      1176            mov     a,#0x80
02AC C0E0      1177            push    acc
02AE 7498      1178            mov     a,#_display_LCD_buff_1_93
02B0 C0E0      1179            push    acc
02B2 74A2      1180            mov     a,#(_display_LCD_buff_1_93 >> 8)
02B4 C0E0      1181            push    acc
02B6 7440      1182            mov     a,#0x40
02B8 C0E0      1183            push    acc
02BA 120100    1184            lcall   _sprintf
02BD E581      1185            mov     a,sp
02BF 24F2      1186            add     a,#0xf2
02C1 F581      1187            mov     sp,a
02C3           1188   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:234: LCDprint(buff, 1, 1);
02C3 750801    1189            mov     _LCDprint_PARM_2,#0x01
02C6 D218      1190            setb    _LCDprint_PARM_3
02C8 90A298    1191            mov     dptr,#_display_LCD_buff_1_93
02CB 75F040    1192            mov     b,#0x40
02CE 120100    1193            lcall   _LCDprint
02D1           1194   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:235: sprintf(buff, "LM=%d RM=%d", pwm_left, pwm_right); // Display Motor Values
02D1 AA88      1195            mov     r2,_pwm_right
02D3 7B00      1196            mov     r3,#0x00
02D5 ACC8      1197            mov     r4,_pwm_left
02D7 7D00      1198            mov     r5,#0x00
02D9 C002      1199            push    ar2
02DB C003      1200            push    ar3
02DD C004      1201            push    ar4
02DF C005      1202            push    ar5
02E1 7418      1203            mov     a,#__str_1
02E3 C0E0      1204            push    acc
02E5 74B0      1205            mov     a,#(__str_1 >> 8)
02E7 C0E0      1206            push    acc
02E9 7480      1207            mov     a,#0x80
02EB C0E0      1208            push    acc
02ED 7498      1209            mov     a,#_display_LCD_buff_1_93
02EF C0E0      1210            push    acc
02F1 74A2      1211            mov     a,#(_display_LCD_buff_1_93 >> 8)
02F3 C0E0      1212            push    acc
02F5 7440      1213            mov     a,#0x40
02F7 C0E0      1214            push    acc
02F9 120100    1215            lcall   _sprintf
02FC E581      1216            mov     a,sp
02FE 24F6      1217            add     a,#0xf6
0300 F581      1218            mov     sp,a
0302           1219   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:236: LCDprint(buff, 2, 1);
0302 750802    1220            mov     _LCDprint_PARM_2,#0x02
0305 D218      1221            setb    _LCDprint_PARM_3
0307 90A298    1222            mov     dptr,#_display_LCD_buff_1_93
030A 75F040    1223            mov     b,#0x40
030D 020100    1224            ljmp    _LCDprint
0310           1225   ;------------------------------------------------------------
0310           1226   ;Allocation info for local variables in function 'turn_left'
0310           1227   ;------------------------------------------------------------
0310           1228   ;------------------------------------------------------------
0310           1229   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:240: void turn_left(void){
0310           1230   ;        -----------------------------------------
0310           1231   ;         function turn_left
0310           1232   ;        -----------------------------------------
0310           1233   _turn_left:
0310           1234   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:241: while(1){
0310           1235   L017002?:
0310           1236   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:242: pwm_left = 20;
0310 75C814    1237            mov     _pwm_left,#0x14
0313           1238   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:243: pwm_right = 100;
0313 758864    1239            mov     _pwm_right,#0x64
0316 8001      1240            sjmp    L017002?
0318           1241   ;------------------------------------------------------------
0318           1242   ;Allocation info for local variables in function 'turn_right'
0318           1243   ;------------------------------------------------------------
0318           1244   ;------------------------------------------------------------
0318           1245   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:246: void turn_right(void){
0318           1246   ;        -----------------------------------------
0318           1247   ;         function turn_right
0318           1248   ;        -----------------------------------------
0318           1249   _turn_right:
0318           1250   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:247: while(1){
0318           1251   L018002?:
0318           1252   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:248: pwm_left = 100;
0318 75C864    1253            mov     _pwm_left,#0x64
031B           1254   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:249: pwm_right = 20;
031B 758814    1255            mov     _pwm_right,#0x14
031E 8001      1256            sjmp    L018002?
0320           1257   ;------------------------------------------------------------
0320           1258   ;Allocation info for local variables in function 'stop'
0320           1259   ;------------------------------------------------------------
0320           1260   ;------------------------------------------------------------
0320           1261   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:253: void stop(void){
0320           1262   ;        -----------------------------------------
0320           1263   ;         function stop
0320           1264   ;        -----------------------------------------
0320           1265   _stop:
0320           1266   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:254: while(1){
0320           1267   L019002?:
0320           1268   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:255: pwm_left = 0;
0320 75C800    1269            mov     _pwm_left,#0x00
0323           1270   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:256: pwm_right = 0;
0323 758800    1271            mov     _pwm_right,#0x00
0326 8001      1272            sjmp    L019002?
0328           1273   ;------------------------------------------------------------
0328           1274   ;Allocation info for local variables in function 'main'
0328           1275   ;------------------------------------------------------------
0328           1276   ;k_p                       Allocated to registers 
0328           1277   ;k_d                       Allocated to registers 
0328           1278   ;cor                       Allocated with name '_main_cor_1_104'
0328           1279   ;cur_error                 Allocated with name '_main_cur_error_1_104'
0328           1280   ;pre_error                 Allocated with name '_main_pre_error_1_104'
0328           1281   ;thresh                    Allocated to registers 
0328           1282   ;exec                      Allocated to registers 
0328           1283   ;start                     Allocated to registers 
0328           1284   ;left                      Allocated with name '_main_left_1_104'
0328           1285   ;right                     Allocated with name '_main_right_1_104'
0328           1286   ;line_sensor               Allocated with name '_main_line_sensor_1_104'
0328           1287   ;diff                      Allocated with name '_main_diff_1_104'
0328           1288   ;line_counter              Allocated with name '_main_line_counter_1_104'
0328           1289   ;command                   Allocated to registers 
0328           1290   ;state                     Allocated with name '_main_state_1_104'
0328           1291   ;------------------------------------------------------------
0328           1292   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:260: void main (void){
0328           1293   ;        -----------------------------------------
0328           1294   ;         function main
0328           1295   ;        -----------------------------------------
0328           1296   _main:
0328           1297   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:265: double cur_error =0;
0328           1298   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:272: double left = (AD1DAT1/255.0)*3.3;
0328 E4        1299            clr     a
0329 F528      1300            mov     _main_cur_error_1_104,a
032B F529      1301            mov     (_main_cur_error_1_104 + 1),a
032D F52A      1302            mov     (_main_cur_error_1_104 + 2),a
032F F52B      1303            mov     (_main_cur_error_1_104 + 3),a
0331 E5D6      1304            mov     a,_AD1DAT1
0333           1305   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:273: double right = (AD1DAT2/255.0)*3.3;
0333 E5D7      1306            mov     a,_AD1DAT2
0335           1307   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:274: double line_sensor = (AD1DAT3/255.0)*3.3;
0335 E5F5      1308            mov     a,_AD1DAT3
0337           1309   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:278: int line_counter = 0;
0337 E4        1310            clr     a
0338 F508      1311            mov     _main_line_counter_1_104,a
033A F509      1312            mov     (_main_line_counter_1_104 + 1),a
033C           1313   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:280: int state = 1;  
033C 755801    1314            mov     _main_state_1_104,#0x01
033F E4        1315            clr     a
0340 F559      1316            mov     (_main_state_1_104 + 1),a
0342           1317   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:283: InitPorts();
0342 120100    1318            lcall   _InitPorts
0345           1319   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:284: LCD_8BIT();
0345 120100    1320            lcall   _LCD_8BIT
0348           1321   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:285: InitSerialPort();
0348 120100    1322            lcall   _InitSerialPort
034B           1323   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:286: InitADC();
034B 120100    1324            lcall   _InitADC
034E           1325   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:287: InitTimer0();
034E 120100    1326            lcall   _InitTimer0
0351           1327   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:290: pre_error = 0;
0351 757800    1328            mov     _main_pre_error_1_104,#0x00
0354 757900    1329            mov     (_main_pre_error_1_104 + 1),#0x00
0357 757A00    1330            mov     (_main_pre_error_1_104 + 2),#0x00
035A 757B00    1331            mov     (_main_pre_error_1_104 + 3),#0x00
035D           1332   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:291: while(1)
035D           1333   L020035?:
035D           1334   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:301: left = (AD1DAT1/255.0)*3.3;
035D 85D682    1335            mov     dpl,_AD1DAT1
0360 120100    1336            lcall   ___uchar2fs
0363 AE82      1337            mov     r6,dpl
0365 AF83      1338            mov     r7,dph
0367 A8F0      1339            mov     r0,b
0369 F9        1340            mov     r1,a
036A E4        1341            clr     a
036B C0E0      1342            push    acc
036D C0E0      1343            push    acc
036F 747F      1344            mov     a,#0x7F
0371 C0E0      1345            push    acc
0373 7443      1346            mov     a,#0x43
0375 C0E0      1347            push    acc
0377 8E82      1348            mov     dpl,r6
0379 8F83      1349            mov     dph,r7
037B 88F0      1350            mov     b,r0
037D E9        1351            mov     a,r1
037E 120100    1352            lcall   ___fsdiv
0381 AE82      1353            mov     r6,dpl
0383 AF83      1354            mov     r7,dph
0385 A8F0      1355            mov     r0,b
0387 F9        1356            mov     r1,a
0388 E581      1357            mov     a,sp
038A 24FC      1358            add     a,#0xfc
038C F581      1359            mov     sp,a
038E C006      1360            push    ar6
0390 C007      1361            push    ar7
0392 C000      1362            push    ar0
0394 C001      1363            push    ar1
0396 903333    1364            mov     dptr,#0x3333
0399 75F053    1365            mov     b,#0x53
039C 7440      1366            mov     a,#0x40
039E 120100    1367            lcall   ___fsmul
03A1 8582C8    1368            mov     _main_left_1_104,dpl
03A4 8583C9    1369            mov     (_main_left_1_104 + 1),dph
03A7 85F0CA    1370            mov     (_main_left_1_104 + 2),b
03AA F5CB      1371            mov     (_main_left_1_104 + 3),a
03AC E581      1372            mov     a,sp
03AE 24FC      1373            add     a,#0xfc
03B0 F581      1374            mov     sp,a
03B2           1375   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:302: right = (AD1DAT2/255.0)*3.3;
03B2 85D782    1376            mov     dpl,_AD1DAT2
03B5 120100    1377            lcall   ___uchar2fs
03B8 AA82      1378            mov     r2,dpl
03BA AB83      1379            mov     r3,dph
03BC ACF0      1380            mov     r4,b
03BE FD        1381            mov     r5,a
03BF E4        1382            clr     a
03C0 C0E0      1383            push    acc
03C2 C0E0      1384            push    acc
03C4 747F      1385            mov     a,#0x7F
03C6 C0E0      1386            push    acc
03C8 7443      1387            mov     a,#0x43
03CA C0E0      1388            push    acc
03CC 8A82      1389            mov     dpl,r2
03CE 8B83      1390            mov     dph,r3
03D0 8CF0      1391            mov     b,r4
03D2 ED        1392            mov     a,r5
03D3 120100    1393            lcall   ___fsdiv
03D6 AA82      1394            mov     r2,dpl
03D8 AB83      1395            mov     r3,dph
03DA ACF0      1396            mov     r4,b
03DC FD        1397            mov     r5,a
03DD E581      1398            mov     a,sp
03DF 24FC      1399            add     a,#0xfc
03E1 F581      1400            mov     sp,a
03E3 C002      1401            push    ar2
03E5 C003      1402            push    ar3
03E7 C004      1403            push    ar4
03E9 C005      1404            push    ar5
03EB 903333    1405            mov     dptr,#0x3333
03EE 75F053    1406            mov     b,#0x53
03F1 7440      1407            mov     a,#0x40
03F3 120100    1408            lcall   ___fsmul
03F6 858218    1409            mov     _main_right_1_104,dpl
03F9 858319    1410            mov     (_main_right_1_104 + 1),dph
03FC 85F01A    1411            mov     (_main_right_1_104 + 2),b
03FF F51B      1412            mov     (_main_right_1_104 + 3),a
0401 E581      1413            mov     a,sp
0403 24FC      1414            add     a,#0xfc
0405 F581      1415            mov     sp,a
0407           1416   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:303: line_sensor = (AD1DAT3/255.0)*3.3;
0407 85F582    1417            mov     dpl,_AD1DAT3
040A 120100    1418            lcall   ___uchar2fs
040D AA82      1419            mov     r2,dpl
040F AB83      1420            mov     r3,dph
0411 ACF0      1421            mov     r4,b
0413 FD        1422            mov     r5,a
0414 E4        1423            clr     a
0415 C0E0      1424            push    acc
0417 C0E0      1425            push    acc
0419 747F      1426            mov     a,#0x7F
041B C0E0      1427            push    acc
041D 7443      1428            mov     a,#0x43
041F C0E0      1429            push    acc
0421 8A82      1430            mov     dpl,r2
0423 8B83      1431            mov     dph,r3
0425 8CF0      1432            mov     b,r4
0427 ED        1433            mov     a,r5
0428 120100    1434            lcall   ___fsdiv
042B AA82      1435            mov     r2,dpl
042D AB83      1436            mov     r3,dph
042F ACF0      1437            mov     r4,b
0431 FD        1438            mov     r5,a
0432 E581      1439            mov     a,sp
0434 24FC      1440            add     a,#0xfc
0436 F581      1441            mov     sp,a
0438 C002      1442            push    ar2
043A C003      1443            push    ar3
043C C004      1444            push    ar4
043E C005      1445            push    ar5
0440 903333    1446            mov     dptr,#0x3333
0443 75F053    1447            mov     b,#0x53
0446 7440      1448            mov     a,#0x40
0448 120100    1449            lcall   ___fsmul
044B 858268    1450            mov     _main_line_sensor_1_104,dpl
044E 858369    1451            mov     (_main_line_sensor_1_104 + 1),dph
0451 85F06A    1452            mov     (_main_line_sensor_1_104 + 2),b
0454 F56B      1453            mov     (_main_line_sensor_1_104 + 3),a
0456 E581      1454            mov     a,sp
0458 24FC      1455            add     a,#0xfc
045A F581      1456            mov     sp,a
045C           1457   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:304: diff = left - right;
045C C018      1458            push    _main_right_1_104
045E C019      1459            push    (_main_right_1_104 + 1)
0460 C01A      1460            push    (_main_right_1_104 + 2)
0462 C01B      1461            push    (_main_right_1_104 + 3)
0464 85C882    1462            mov     dpl,_main_left_1_104
0467 85C983    1463            mov     dph,(_main_left_1_104 + 1)
046A 85CAF0    1464            mov     b,(_main_left_1_104 + 2)
046D E5CB      1465            mov     a,(_main_left_1_104 + 3)
046F 120100    1466            lcall   ___fssub
0472 8582B8    1467            mov     _main_diff_1_104,dpl
0475 8583B9    1468            mov     (_main_diff_1_104 + 1),dph
0478 85F0BA    1469            mov     (_main_diff_1_104 + 2),b
047B F5BB      1470            mov     (_main_diff_1_104 + 3),a
047D E581      1471            mov     a,sp
047F 24FC      1472            add     a,#0xfc
0481 F581      1473            mov     sp,a
0483           1474   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:307: if(time_update_flag==1) // If the clock has been updated, refresh the display
0483 30B898    1475            jnb     _time_update_flag,L020002?
0486           1476   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:309: display_LCD();
0486 120100    1477            lcall   _display_LCD
0489           1478   L020002?:
0489           1479   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:313: cor = k_p * cur_error + k_d*abs(cur_error - pre_error)/0.001;
0489 C028      1480            push    _main_cur_error_1_104
048B C029      1481            push    (_main_cur_error_1_104 + 1)
048D C02A      1482            push    (_main_cur_error_1_104 + 2)
048F C02B      1483            push    (_main_cur_error_1_104 + 3)
0491 900000    1484            mov     dptr,#0x0000
0494 75F0A0    1485            mov     b,#0xA0
0497 7441      1486            mov     a,#0x41
0499 120100    1487            lcall   ___fsmul
049C AA82      1488            mov     r2,dpl
049E AB83      1489            mov     r3,dph
04A0 ACF0      1490            mov     r4,b
04A2 FD        1491            mov     r5,a
04A3 E581      1492            mov     a,sp
04A5 24FC      1493            add     a,#0xfc
04A7 F581      1494            mov     sp,a
04A9 C002      1495            push    ar2
04AB C003      1496            push    ar3
04AD C004      1497            push    ar4
04AF C005      1498            push    ar5
04B1 C078      1499            push    _main_pre_error_1_104
04B3 C079      1500            push    (_main_pre_error_1_104 + 1)
04B5 C07A      1501            push    (_main_pre_error_1_104 + 2)
04B7 C07B      1502            push    (_main_pre_error_1_104 + 3)
04B9 852882    1503            mov     dpl,_main_cur_error_1_104
04BC 852983    1504            mov     dph,(_main_cur_error_1_104 + 1)
04BF 852AF0    1505            mov     b,(_main_cur_error_1_104 + 2)
04C2 E52B      1506            mov     a,(_main_cur_error_1_104 + 3)
04C4 120100    1507            lcall   ___fssub
04C7 AE82      1508            mov     r6,dpl
04C9 AF83      1509            mov     r7,dph
04CB A8F0      1510            mov     r0,b
04CD F9        1511            mov     r1,a
04CE E581      1512            mov     a,sp
04D0 24FC      1513            add     a,#0xfc
04D2 F581      1514            mov     sp,a
04D4 8E82      1515            mov     dpl,r6
04D6 8F83      1516            mov     dph,r7
04D8 88F0      1517            mov     b,r0
04DA E9        1518            mov     a,r1
04DB 120100    1519            lcall   ___fs2sint
04DE 120100    1520            lcall   _abs
04E1 120100    1521            lcall   ___sint2fs
04E4 AE82      1522            mov     r6,dpl
04E6 AF83      1523            mov     r7,dph
04E8 A8F0      1524            mov     r0,b
04EA F9        1525            mov     r1,a
04EB 746F      1526            mov     a,#0x6F
04ED C0E0      1527            push    acc
04EF 7412      1528            mov     a,#0x12
04F1 C0E0      1529            push    acc
04F3 7483      1530            mov     a,#0x83
04F5 C0E0      1531            push    acc
04F7 743A      1532            mov     a,#0x3A
04F9 C0E0      1533            push    acc
04FB 8E82      1534            mov     dpl,r6
04FD 8F83      1535            mov     dph,r7
04FF 88F0      1536            mov     b,r0
0501 E9        1537            mov     a,r1
0502 120100    1538            lcall   ___fsdiv
0505 AE82      1539            mov     r6,dpl
0507 AF83      1540            mov     r7,dph
0509 A8F0      1541            mov     r0,b
050B F9        1542            mov     r1,a
050C E581      1543            mov     a,sp
050E 24FC      1544            add     a,#0xfc
0510 F581      1545            mov     sp,a
0512 D005      1546            pop     ar5
0514 D004      1547            pop     ar4
0516 D003      1548            pop     ar3
0518 D002      1549            pop     ar2
051A C006      1550            push    ar6
051C C007      1551            push    ar7
051E C000      1552            push    ar0
0520 C001      1553            push    ar1
0522 8A82      1554            mov     dpl,r2
0524 8B83      1555            mov     dph,r3
0526 8CF0      1556            mov     b,r4
0528 ED        1557            mov     a,r5
0529 120100    1558            lcall   ___fsadd
052C 8582D8    1559            mov     _main_cor_1_104,dpl
052F 8583D9    1560            mov     (_main_cor_1_104 + 1),dph
0532 85F0DA    1561            mov     (_main_cor_1_104 + 2),b
0535 F5DB      1562            mov     (_main_cor_1_104 + 3),a
0537 E581      1563            mov     a,sp
0539 24FC      1564            add     a,#0xfc
053B F581      1565            mov     sp,a
053D           1566   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:315: if((left > 0.4) && (left < 0.7) && (right > 0.4) && (right < 0.7)){
053D 74CD      1567            mov     a,#0xCD
053F C0E0      1568            push    acc
0541 74CC      1569            mov     a,#0xCC
0543 C0E0      1570            push    acc
0545 C0E0      1571            push    acc
0547 743E      1572            mov     a,#0x3E
0549 C0E0      1573            push    acc
054B 85C882    1574            mov     dpl,_main_left_1_104
054E 85C983    1575            mov     dph,(_main_left_1_104 + 1)
0551 85CAF0    1576            mov     b,(_main_left_1_104 + 2)
0554 E5CB      1577            mov     a,(_main_left_1_104 + 3)
0556 120100    1578            lcall   ___fsgt
0559 AE82      1579            mov     r6,dpl
055B E581      1580            mov     a,sp
055D 24FC      1581            add     a,#0xfc
055F F581      1582            mov     sp,a
0561 EE        1583            mov     a,r6
0562 7001      1584            jnz     L020061?
0564 020100    1585            ljmp    L020004?
0567           1586   L020061?:
0567 7433      1587            mov     a,#0x33
0569 C0E0      1588            push    acc
056B C0E0      1589            push    acc
056D C0E0      1590            push    acc
056F 743F      1591            mov     a,#0x3F
0571 C0E0      1592            push    acc
0573 85C882    1593            mov     dpl,_main_left_1_104
0576 85C983    1594            mov     dph,(_main_left_1_104 + 1)
0579 85CAF0    1595            mov     b,(_main_left_1_104 + 2)
057C E5CB      1596            mov     a,(_main_left_1_104 + 3)
057E 120100    1597            lcall   ___fslt
0581 AE82      1598            mov     r6,dpl
0583 E581      1599            mov     a,sp
0585 24FC      1600            add     a,#0xfc
0587 F581      1601            mov     sp,a
0589 EE        1602            mov     a,r6
058A 6001      1603            jz      L020004?
058C 74CD      1604            mov     a,#0xCD
058E C0E0      1605            push    acc
0590 74CC      1606            mov     a,#0xCC
0592 C0E0      1607            push    acc
0594 C0E0      1608            push    acc
0596 743E      1609            mov     a,#0x3E
0598 C0E0      1610            push    acc
059A 851882    1611            mov     dpl,_main_right_1_104
059D 851983    1612            mov     dph,(_main_right_1_104 + 1)
05A0 851AF0    1613            mov     b,(_main_right_1_104 + 2)
05A3 E51B      1614            mov     a,(_main_right_1_104 + 3)
05A5 120100    1615            lcall   ___fsgt
05A8 AE82      1616            mov     r6,dpl
05AA E581      1617            mov     a,sp
05AC 24FC      1618            add     a,#0xfc
05AE F581      1619            mov     sp,a
05B0 EE        1620            mov     a,r6
05B1 6001      1621            jz      L020004?
05B3 7433      1622            mov     a,#0x33
05B5 C0E0      1623            push    acc
05B7 C0E0      1624            push    acc
05B9 C0E0      1625            push    acc
05BB 743F      1626            mov     a,#0x3F
05BD C0E0      1627            push    acc
05BF 851882    1628            mov     dpl,_main_right_1_104
05C2 851983    1629            mov     dph,(_main_right_1_104 + 1)
05C5 851AF0    1630            mov     b,(_main_right_1_104 + 2)
05C8 E51B      1631            mov     a,(_main_right_1_104 + 3)
05CA 120100    1632            lcall   ___fslt
05CD AE82      1633            mov     r6,dpl
05CF E581      1634            mov     a,sp
05D1 24FC      1635            add     a,#0xfc
05D3 F581      1636            mov     sp,a
05D5 EE        1637            mov     a,r6
05D6 6001      1638            jz      L020004?
05D8           1639   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:316: cur_error = 0;
05D8 752800    1640            mov     _main_cur_error_1_104,#0x00
05DB 752900    1641            mov     (_main_cur_error_1_104 + 1),#0x00
05DE 752A00    1642            mov     (_main_cur_error_1_104 + 2),#0x00
05E1 752B00    1643            mov     (_main_cur_error_1_104 + 3),#0x00
05E4           1644   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:317: pwm_left = 100;
05E4 75C864    1645            mov     _pwm_left,#0x64
05E7           1646   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:318: pwm_right = 100;
05E7 758864    1647            mov     _pwm_right,#0x64
05EA           1648   L020004?:
05EA           1649   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:320: if(1<diff){     
05EA C0B8      1650            push    _main_diff_1_104
05EC C0B9      1651            push    (_main_diff_1_104 + 1)
05EE C0BA      1652            push    (_main_diff_1_104 + 2)
05F0 C0BB      1653            push    (_main_diff_1_104 + 3)
05F2 900000    1654            mov     dptr,#0x0000
05F5 75F080    1655            mov     b,#0x80
05F8 743F      1656            mov     a,#0x3F
05FA 120100    1657            lcall   ___fslt
05FD AE82      1658            mov     r6,dpl
05FF E581      1659            mov     a,sp
0601 24FC      1660            add     a,#0xfc
0603 F581      1661            mov     sp,a
0605 EE        1662            mov     a,r6
0606 6001      1663            jz      L020009?
0608           1664   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:321: cur_error = 1;
0608 752800    1665            mov     _main_cur_error_1_104,#0x00
060B 752900    1666            mov     (_main_cur_error_1_104 + 1),#0x00
060E 752A80    1667            mov     (_main_cur_error_1_104 + 2),#0x80
0611 752B3F    1668            mov     (_main_cur_error_1_104 + 3),#0x3F
0614           1669   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:322: pwm_left = 100 - cor;
0614 C0D8      1670            push    _main_cor_1_104
0616 C0D9      1671            push    (_main_cor_1_104 + 1)
0618 C0DA      1672            push    (_main_cor_1_104 + 2)
061A C0DB      1673            push    (_main_cor_1_104 + 3)
061C 900000    1674            mov     dptr,#0x0000
061F 75F0C8    1675            mov     b,#0xC8
0622 7442      1676            mov     a,#0x42
0624 120100    1677            lcall   ___fssub
0627 AE82      1678            mov     r6,dpl
0629 AF83      1679            mov     r7,dph
062B A8F0      1680            mov     r0,b
062D F9        1681            mov     r1,a
062E E581      1682            mov     a,sp
0630 24FC      1683            add     a,#0xfc
0632 F581      1684            mov     sp,a
0634 8E82      1685            mov     dpl,r6
0636 8F83      1686            mov     dph,r7
0638 88F0      1687            mov     b,r0
063A E9        1688            mov     a,r1
063B 120100    1689            lcall   ___fs2uchar
063E 8582C8    1690            mov     _pwm_left,dpl
0641           1691   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:323: pwm_right = 100;
0641 758864    1692            mov     _pwm_right,#0x64
0644           1693   L020009?:
0644           1694   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:325: if(diff<-1){
0644 E4        1695            clr     a
0645 C0E0      1696            push    acc
0647 C0E0      1697            push    acc
0649 7480      1698            mov     a,#0x80
064B C0E0      1699            push    acc
064D 74BF      1700            mov     a,#0xBF
064F C0E0      1701            push    acc
0651 85B882    1702            mov     dpl,_main_diff_1_104
0654 85B983    1703            mov     dph,(_main_diff_1_104 + 1)
0657 85BAF0    1704            mov     b,(_main_diff_1_104 + 2)
065A E5BB      1705            mov     a,(_main_diff_1_104 + 3)
065C 120100    1706            lcall   ___fslt
065F AE82      1707            mov     r6,dpl
0661 E581      1708            mov     a,sp
0663 24FC      1709            add     a,#0xfc
0665 F581      1710            mov     sp,a
0667 EE        1711            mov     a,r6
0668 6001      1712            jz      L020011?
066A           1713   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:326: cur_error= -1;
066A 752800    1714            mov     _main_cur_error_1_104,#0x00
066D 752900    1715            mov     (_main_cur_error_1_104 + 1),#0x00
0670 752A80    1716            mov     (_main_cur_error_1_104 + 2),#0x80
0673 752BBF    1717            mov     (_main_cur_error_1_104 + 3),#0xBF
0676           1718   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:327: pwm_left = 100;
0676 75C864    1719            mov     _pwm_left,#0x64
0679           1720   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:328: pwm_right = 100 + cor;
0679 E4        1721            clr     a
067A C0E0      1722            push    acc
067C C0E0      1723            push    acc
067E 74C8      1724            mov     a,#0xC8
0680 C0E0      1725            push    acc
0682 7442      1726            mov     a,#0x42
0684 C0E0      1727            push    acc
0686 85D882    1728            mov     dpl,_main_cor_1_104
0689 85D983    1729            mov     dph,(_main_cor_1_104 + 1)
068C 85DAF0    1730            mov     b,(_main_cor_1_104 + 2)
068F E5DB      1731            mov     a,(_main_cor_1_104 + 3)
0691 120100    1732            lcall   ___fsadd
0694 AE82      1733            mov     r6,dpl
0696 AF83      1734            mov     r7,dph
0698 A8F0      1735            mov     r0,b
069A F9        1736            mov     r1,a
069B E581      1737            mov     a,sp
069D 24FC      1738            add     a,#0xfc
069F F581      1739            mov     sp,a
06A1 8E82      1740            mov     dpl,r6
06A3 8F83      1741            mov     dph,r7
06A5 88F0      1742            mov     b,r0
06A7 E9        1743            mov     a,r1
06A8 120100    1744            lcall   ___fs2uchar
06AB 858288    1745            mov     _pwm_right,dpl
06AE           1746   L020011?:
06AE           1747   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:330: if((left < 0.3) && (right < 0.3)){
06AE 749A      1748            mov     a,#0x9A
06B0 C0E0      1749            push    acc
06B2 7499      1750            mov     a,#0x99
06B4 C0E0      1751            push    acc
06B6 C0E0      1752            push    acc
06B8 743E      1753            mov     a,#0x3E
06BA C0E0      1754            push    acc
06BC 85C882    1755            mov     dpl,_main_left_1_104
06BF 85C983    1756            mov     dph,(_main_left_1_104 + 1)
06C2 85CAF0    1757            mov     b,(_main_left_1_104 + 2)
06C5 E5CB      1758            mov     a,(_main_left_1_104 + 3)
06C7 120100    1759            lcall   ___fslt
06CA AE82      1760            mov     r6,dpl
06CC E581      1761            mov     a,sp
06CE 24FC      1762            add     a,#0xfc
06D0 F581      1763            mov     sp,a
06D2 EE        1764            mov     a,r6
06D3 7001      1765            jnz     L020067?
06D5 020100    1766            ljmp    L020017?
06D8           1767   L020067?:
06D8 749A      1768            mov     a,#0x9A
06DA C0E0      1769            push    acc
06DC 7499      1770            mov     a,#0x99
06DE C0E0      1771            push    acc
06E0 C0E0      1772            push    acc
06E2 743E      1773            mov     a,#0x3E
06E4 C0E0      1774            push    acc
06E6 851882    1775            mov     dpl,_main_right_1_104
06E9 851983    1776            mov     dph,(_main_right_1_104 + 1)
06EC 851AF0    1777            mov     b,(_main_right_1_104 + 2)
06EF E51B      1778            mov     a,(_main_right_1_104 + 3)
06F1 120100    1779            lcall   ___fslt
06F4 AE82      1780            mov     r6,dpl
06F6 E581      1781            mov     a,sp
06F8 24FC      1782            add     a,#0xfc
06FA F581      1783            mov     sp,a
06FC EE        1784            mov     a,r6
06FD 7001      1785            jnz     L020068?
06FF 020100    1786            ljmp    L020017?
0702           1787   L020068?:
0702           1788   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:331: if(pre_error>0){
0702 E4        1789            clr     a
0703 C0E0      1790            push    acc
0705 C0E0      1791            push    acc
0707 C0E0      1792            push    acc
0709 C0E0      1793            push    acc
070B 857882    1794            mov     dpl,_main_pre_error_1_104
070E 857983    1795            mov     dph,(_main_pre_error_1_104 + 1)
0711 857AF0    1796            mov     b,(_main_pre_error_1_104 + 2)
0714 E57B      1797            mov     a,(_main_pre_error_1_104 + 3)
0716 120100    1798            lcall   ___fsgt
0719 AE82      1799            mov     r6,dpl
071B E581      1800            mov     a,sp
071D 24FC      1801            add     a,#0xfc
071F F581      1802            mov     sp,a
0721 EE        1803            mov     a,r6
0722 6001      1804            jz      L020013?
0724           1805   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:332: cur_error = 5;
0724 752800    1806            mov     _main_cur_error_1_104,#0x00
0727 752900    1807            mov     (_main_cur_error_1_104 + 1),#0x00
072A 752AA0    1808            mov     (_main_cur_error_1_104 + 2),#0xA0
072D 752B40    1809            mov     (_main_cur_error_1_104 + 3),#0x40
0730           1810   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:333: pwm_left = 100 - cor;
0730 C006      1811            push    ar6
0732 C0D8      1812            push    _main_cor_1_104
0734 C0D9      1813            push    (_main_cor_1_104 + 1)
0736 C0DA      1814            push    (_main_cor_1_104 + 2)
0738 C0DB      1815            push    (_main_cor_1_104 + 3)
073A 900000    1816            mov     dptr,#0x0000
073D 75F0C8    1817            mov     b,#0xC8
0740 7442      1818            mov     a,#0x42
0742 120100    1819            lcall   ___fssub
0745 AF82      1820            mov     r7,dpl
0747 A883      1821            mov     r0,dph
0749 A9F0      1822            mov     r1,b
074B FA        1823            mov     r2,a
074C E581      1824            mov     a,sp
074E 24FC      1825            add     a,#0xfc
0750 F581      1826            mov     sp,a
0752 8F82      1827            mov     dpl,r7
0754 8883      1828            mov     dph,r0
0756 89F0      1829            mov     b,r1
0758 EA        1830            mov     a,r2
0759 120100    1831            lcall   ___fs2uchar
075C 8582C8    1832            mov     _pwm_left,dpl
075F D006      1833            pop     ar6
0761           1834   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:334: pwm_right = 100;
0761 758864    1835            mov     _pwm_right,#0x64
0764           1836   L020013?:
0764           1837   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:336: if(pre_error<=0){
0764 EE        1838            mov     a,r6
0765           1839   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:337: cur_error = -5;
0765 7001      1840            jnz     L020017?
0767 F528      1841            mov     _main_cur_error_1_104,a
0769 F529      1842            mov     (_main_cur_error_1_104 + 1),a
076B 752AA0    1843            mov     (_main_cur_error_1_104 + 2),#0xA0
076E 752BC0    1844            mov     (_main_cur_error_1_104 + 3),#0xC0
0771           1845   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:338: pwm_left = 100;
0771 75C864    1846            mov     _pwm_left,#0x64
0774           1847   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:339: pwm_right = 100 + cor;
0774 E4        1848            clr     a
0775 C0E0      1849            push    acc
0777 C0E0      1850            push    acc
0779 74C8      1851            mov     a,#0xC8
077B C0E0      1852            push    acc
077D 7442      1853            mov     a,#0x42
077F C0E0      1854            push    acc
0781 85D882    1855            mov     dpl,_main_cor_1_104
0784 85D983    1856            mov     dph,(_main_cor_1_104 + 1)
0787 85DAF0    1857            mov     b,(_main_cor_1_104 + 2)
078A E5DB      1858            mov     a,(_main_cor_1_104 + 3)
078C 120100    1859            lcall   ___fsadd
078F AA82      1860            mov     r2,dpl
0791 AB83      1861            mov     r3,dph
0793 ACF0      1862            mov     r4,b
0795 FD        1863            mov     r5,a
0796 E581      1864            mov     a,sp
0798 24FC      1865            add     a,#0xfc
079A F581      1866            mov     sp,a
079C 8A82      1867            mov     dpl,r2
079E 8B83      1868            mov     dph,r3
07A0 8CF0      1869            mov     b,r4
07A2 ED        1870            mov     a,r5
07A3 120100    1871            lcall   ___fs2uchar
07A6 858288    1872            mov     _pwm_right,dpl
07A9           1873   L020017?:
07A9           1874   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:342: pre_error = cur_error;
07A9 852878    1875            mov     _main_pre_error_1_104,_main_cur_error_1_104
07AC 852979    1876            mov     (_main_pre_error_1_104 + 1),(_main_cur_error_1_104 + 1)
07AF 852A7A    1877            mov     (_main_pre_error_1_104 + 2),(_main_cur_error_1_104 + 2)
07B2 852B7B    1878            mov     (_main_pre_error_1_104 + 3),(_main_cur_error_1_104 + 3)
07B5           1879   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:343: printf("Error:%5.2f Left:%5.2f Right:%5.2f Left_Motor:%d Right_Motor:%d                \r", cur_error, left, right, pwm_left, pwm_right);
07B5 AA88      1880            mov     r2,_pwm_right
07B7 7B00      1881            mov     r3,#0x00
07B9 ACC8      1882            mov     r4,_pwm_left
07BB 7D00      1883            mov     r5,#0x00
07BD C002      1884            push    ar2
07BF C003      1885            push    ar3
07C1 C004      1886            push    ar4
07C3 C005      1887            push    ar5
07C5 C018      1888            push    _main_right_1_104
07C7 C019      1889            push    (_main_right_1_104 + 1)
07C9 C01A      1890            push    (_main_right_1_104 + 2)
07CB C01B      1891            push    (_main_right_1_104 + 3)
07CD C0C8      1892            push    _main_left_1_104
07CF C0C9      1893            push    (_main_left_1_104 + 1)
07D1 C0CA      1894            push    (_main_left_1_104 + 2)
07D3 C0CB      1895            push    (_main_left_1_104 + 3)
07D5 C028      1896            push    _main_cur_error_1_104
07D7 C029      1897            push    (_main_cur_error_1_104 + 1)
07D9 C02A      1898            push    (_main_cur_error_1_104 + 2)
07DB C02B      1899            push    (_main_cur_error_1_104 + 3)
07DD 7498      1900            mov     a,#__str_2
07DF C0E0      1901            push    acc
07E1 74B5      1902            mov     a,#(__str_2 >> 8)
07E3 C0E0      1903            push    acc
07E5 7480      1904            mov     a,#0x80
07E7 C0E0      1905            push    acc
07E9 120100    1906            lcall   _printf
07EC E581      1907            mov     a,sp
07EE 24ED      1908            add     a,#0xed
07F0 F581      1909            mov     sp,a
07F2           1910   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:346: switch(state){
07F2 7401      1911            mov     a,#0x01
07F4 B55818    1912            cjne    a,_main_state_1_104,L020071?
07F7 E4        1913            clr     a
07F8 B55918    1914            cjne    a,(_main_state_1_104 + 1),L020071?
07FB 8001      1915            sjmp    L020019?
07FD           1916   L020071?:
07FD 7402      1917            mov     a,#0x02
07FF B55898    1918            cjne    a,_main_state_1_104,L020072?
0802 E4        1919            clr     a
0803 B55998    1920            cjne    a,(_main_state_1_104 + 1),L020072?
0806 8001      1921            sjmp    L020022?
0808           1922   L020072?:
0808 7403      1923            mov     a,#0x03
080A B55818    1924            cjne    a,_main_state_1_104,L020073?
080D E4        1925            clr     a
080E B55918    1926            cjne    a,(_main_state_1_104 + 1),L020073?
0811 020100    1927            ljmp    L020026?
0814           1928   L020073?:
0814 7404      1929            mov     a,#0x04
0816 B55898    1930            cjne    a,_main_state_1_104,L020074?
0819 E4        1931            clr     a
081A B55998    1932            cjne    a,(_main_state_1_104 + 1),L020074?
081D 020100    1933            ljmp    L020032?
0820           1934   L020074?:
0820 020100    1935            ljmp    L020035?
0823           1936   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:347: case 1:
0823           1937   L020019?:
0823           1938   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:348: if(line_sensor >= HI_THRESH){
0823 E4        1939            clr     a
0824 C0E0      1940            push    acc
0826 C0E0      1941            push    acc
0828 7420      1942            mov     a,#0x20
082A C0E0      1943            push    acc
082C 7441      1944            mov     a,#0x41
082E C0E0      1945            push    acc
0830 856882    1946            mov     dpl,_main_line_sensor_1_104
0833 856983    1947            mov     dph,(_main_line_sensor_1_104 + 1)
0836 856AF0    1948            mov     b,(_main_line_sensor_1_104 + 2)
0839 E56B      1949            mov     a,(_main_line_sensor_1_104 + 3)
083B 120100    1950            lcall   ___fslt
083E AA82      1951            mov     r2,dpl
0840 E581      1952            mov     a,sp
0842 24FC      1953            add     a,#0xfc
0844 F581      1954            mov     sp,a
0846 EA        1955            mov     a,r2
0847 6001      1956            jz      L020075?
0849 020100    1957            ljmp    L020035?
084C           1958   L020075?:
084C           1959   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:349: state = 2;
084C 755802    1960            mov     _main_state_1_104,#0x02
084F E4        1961            clr     a
0850 F559      1962            mov     (_main_state_1_104 + 1),a
0852           1963   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:351: break;                          
0852 020100    1964            ljmp    L020035?
0855           1965   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:352: case 2:
0855           1966   L020022?:
0855           1967   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:353: if((LO_THRESH<line_sensor)&&(line_sensor<MID_THRESH)){
0855 C068      1968            push    _main_line_sensor_1_104
0857 C069      1969            push    (_main_line_sensor_1_104 + 1)
0859 C06A      1970            push    (_main_line_sensor_1_104 + 2)
085B C06B      1971            push    (_main_line_sensor_1_104 + 3)
085D 900000    1972            mov     dptr,#(0x00&0x00ff)
0860 E4        1973            clr     a
0861 F5F0      1974            mov     b,a
0863 120100    1975            lcall   ___fslt
0866 AA82      1976            mov     r2,dpl
0868 E581      1977            mov     a,sp
086A 24FC      1978            add     a,#0xfc
086C F581      1979            mov     sp,a
086E EA        1980            mov     a,r2
086F 7001      1981            jnz     L020076?
0871 020100    1982            ljmp    L020035?
0874           1983   L020076?:
0874 E4        1984            clr     a
0875 C0E0      1985            push    acc
0877 C0E0      1986            push    acc
0879 74A0      1987            mov     a,#0xA0
087B C0E0      1988            push    acc
087D 7440      1989            mov     a,#0x40
087F C0E0      1990            push    acc
0881 856882    1991            mov     dpl,_main_line_sensor_1_104
0884 856983    1992            mov     dph,(_main_line_sensor_1_104 + 1)
0887 856AF0    1993            mov     b,(_main_line_sensor_1_104 + 2)
088A E56B      1994            mov     a,(_main_line_sensor_1_104 + 3)
088C 120100    1995            lcall   ___fslt
088F AA82      1996            mov     r2,dpl
0891 E581      1997            mov     a,sp
0893 24FC      1998            add     a,#0xfc
0895 F581      1999            mov     sp,a
0897 EA        2000            mov     a,r2
0898 7001      2001            jnz     L020077?
089A 020100    2002            ljmp    L020035?
089D           2003   L020077?:
089D           2004   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:354: line_counter ++;
089D 0508      2005            inc     _main_line_counter_1_104
089F E4        2006            clr     a
08A0 B508D8    2007            cjne    a,_main_line_counter_1_104,L020078?
08A3 0509      2008            inc     (_main_line_counter_1_104 + 1)
08A5           2009   L020078?:
08A5           2010   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:355: state = 3;
08A5 755803    2011            mov     _main_state_1_104,#0x03
08A8 E4        2012            clr     a
08A9 F559      2013            mov     (_main_state_1_104 + 1),a
08AB           2014   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:357: break;
08AB 020100    2015            ljmp    L020035?
08AE           2016   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:358: case 3:
08AE           2017   L020026?:
08AE           2018   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:359: if(line_sensor<=LO_THRESH){
08AE E4        2019            clr     a
08AF C0E0      2020            push    acc
08B1 C0E0      2021            push    acc
08B3 C0E0      2022            push    acc
08B5 C0E0      2023            push    acc
08B7 856882    2024            mov     dpl,_main_line_sensor_1_104
08BA 856983    2025            mov     dph,(_main_line_sensor_1_104 + 1)
08BD 856AF0    2026            mov     b,(_main_line_sensor_1_104 + 2)
08C0 E56B      2027            mov     a,(_main_line_sensor_1_104 + 3)
08C2 120100    2028            lcall   ___fsgt
08C5 AA82      2029            mov     r2,dpl
08C7 E581      2030            mov     a,sp
08C9 24FC      2031            add     a,#0xfc
08CB F581      2032            mov     sp,a
08CD EA        2033            mov     a,r2
08CE 6001      2034            jz      L020079?
08D0 020100    2035            ljmp    L020035?
08D3           2036   L020079?:
08D3           2037   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:360: if(line_counter > 1){
08D3 C3        2038            clr     c
08D4 7401      2039            mov     a,#0x01
08D6 9508      2040            subb    a,_main_line_counter_1_104
08D8 E4        2041            clr     a
08D9 6480      2042            xrl     a,#0x80
08DB 8509F0    2043            mov     b,(_main_line_counter_1_104 + 1)
08DE 63F080    2044            xrl     b,#0x80
08E1 95F0      2045            subb    a,b
08E3 5001      2046            jnc     L020028?
08E5           2047   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:362: state = 1;
08E5 755801    2048            mov     _main_state_1_104,#0x01
08E8 E4        2049            clr     a
08E9 F559      2050            mov     (_main_state_1_104 + 1),a
08EB 8001      2051            sjmp    L020029?
08ED           2052   L020028?:
08ED           2053   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:365: state = 4;
08ED 755804    2054            mov     _main_state_1_104,#0x04
08F0 E4        2055            clr     a
08F1 F559      2056            mov     (_main_state_1_104 + 1),a
08F3           2057   L020029?:
08F3           2058   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:367: line_counter = 0;
08F3 E4        2059            clr     a
08F4 F508      2060            mov     _main_line_counter_1_104,a
08F6 F509      2061            mov     (_main_line_counter_1_104 + 1),a
08F8           2062   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:369: break;
08F8 020100    2063            ljmp    L020035?
08FB           2064   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:370: case 4:
08FB           2065   L020032?:
08FB           2066   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:372: state = 1;
08FB 755801    2067            mov     _main_state_1_104,#0x01
08FE E4        2068            clr     a
08FF F559      2069            mov     (_main_state_1_104 + 1),a
0901           2070   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:374: }
0901 020100    2071            ljmp    L020035?
0904           2072            rseg R_CSEG
0904           2073   
0000           2074            rseg R_XINIT
0000           2075   
0000           2076            rseg R_CONST
0000           2077   __str_0:
0000 4C3D2535  2078            db 'L=%5.2f R:%5.2f'
     2E326620
     523A2535
     2E3266
000F 00        2079            db 0x00
0010           2080   __str_1:
0010 4C4D3D25  2081            db 'LM=%d RM=%d'
     6420524D
     3D2564
001B 00        2082            db 0x00
001C           2083   __str_2:
001C 4572726F  2084            db 'Error:%5.2f Left:%5.2f Right:%5.2f Left_Motor:%d Right_Motor'
     723A2535
     2E326620
     4C656674
     3A25352E
     32662052
     69676874
     3A25352E
     3266204C
     6566745F
     4D6F746F
     723A2564
     20526967
     68745F4D
     6F746F72
0058 3A256420  2085            db ':%d                '
     20202020
     20202020
     20202020
     202020
006B 0D        2086            db 0x0D
006C 00        2087            db 0x00
006D           2088   
000E           2089            CSEG
000E           2090   
000E           2091   end
