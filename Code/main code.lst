0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Dec 11 2012) (MSVC)
0000              4   ; This file was generated Fri Mar 27 09:51:13 2015
0000              5   ;--------------------------------------------------------
                  5   $name main_code
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _execute
0000             29            public _stop
0000             30            public _turn_right
0000             31            public _turn_left
0000             32            public _display_LCD
0000             33            public _Timer0ISR
0000             34            public _InitTimer0
0000             35            public _InitADC
0000             36            public _InitSerialPort
0000             37            public _Wait1S
0000             38            public _LCDprint
0000             39            public _LCD_8BIT
0000             40            public _WriteCommand
0000             41            public _WriteData
0000             42            public _LCD_byte
0000             43            public _LCD_pulse
0000             44            public _waitms
0000             45            public _Wait50us
0000             46            public _InitPorts
0000             47            public _LCDprint_PARM_3
0000             48            public _start
0000             49            public _turn_time_update
0000             50            public _time_update_flag
0000             51            public _LCDprint_PARM_2
0000             52            public _turn_timer
0000             53            public _pwm_right
0000             54            public _pwm_left
0000             55            public _pwmcount
0000             56            public _mins
0000             57            public _secs
0000             58            public _msCount
0000             59   ;--------------------------------------------------------
0000             60   ; Special Function Registers
0000             61   ;--------------------------------------------------------
0000             62   _ACC            DATA 0xe0
0000             63   _ADCON0         DATA 0x8e
0000             64   _ADCON1         DATA 0x97
0000             65   _ADINS          DATA 0xa3
0000             66   _ADMODA         DATA 0xc0
0000             67   _ADMODB         DATA 0xa1
0000             68   _AD0BH          DATA 0xbb
0000             69   _AD0BL          DATA 0xa6
0000             70   _AD0DAT0        DATA 0xc5
0000             71   _AD0DAT1        DATA 0xc6
0000             72   _AD0DAT2        DATA 0xc7
0000             73   _AD0DAT3        DATA 0xf4
0000             74   _AD1BH          DATA 0xc4
0000             75   _AD1BL          DATA 0xbc
0000             76   _AD1DAT0        DATA 0xd5
0000             77   _AD1DAT1        DATA 0xd6
0000             78   _AD1DAT2        DATA 0xd7
0000             79   _AD1DAT3        DATA 0xf5
0000             80   _AUXR1          DATA 0xa2
0000             81   _B              DATA 0xf0
0000             82   _BRGR0          DATA 0xbe
0000             83   _BRGR1          DATA 0xbf
0000             84   _BRGCON         DATA 0xbd
0000             85   _CCCRA          DATA 0xea
0000             86   _CCCRB          DATA 0xeb
0000             87   _CCCRC          DATA 0xec
0000             88   _CCCRD          DATA 0xed
0000             89   _CMP1           DATA 0xac
0000             90   _CMP2           DATA 0xad
0000             91   _DEECON         DATA 0xf1
0000             92   _DEEDAT         DATA 0xf2
0000             93   _DEEADR         DATA 0xf3
0000             94   _DIVM           DATA 0x95
0000             95   _DPH            DATA 0x83
0000             96   _DPL            DATA 0x82
0000             97   _FMADRH         DATA 0xe7
0000             98   _FMADRL         DATA 0xe6
0000             99   _FMCON          DATA 0xe4
0000            100   _FMDATA         DATA 0xe5
0000            101   _I2ADR          DATA 0xdb
0000            102   _I2CON          DATA 0xd8
0000            103   _I2DAT          DATA 0xda
0000            104   _I2SCLH         DATA 0xdd
0000            105   _I2SCLL         DATA 0xdc
0000            106   _I2STAT         DATA 0xd9
0000            107   _ICRAH          DATA 0xab
0000            108   _ICRAL          DATA 0xaa
0000            109   _ICRBH          DATA 0xaf
0000            110   _ICRBL          DATA 0xae
0000            111   _IEN0           DATA 0xa8
0000            112   _IEN1           DATA 0xe8
0000            113   _IP0            DATA 0xb8
0000            114   _IP0H           DATA 0xb7
0000            115   _IP1            DATA 0xf8
0000            116   _IP1H           DATA 0xf7
0000            117   _KBCON          DATA 0x94
0000            118   _KBMASK         DATA 0x86
0000            119   _KBPATN         DATA 0x93
0000            120   _OCRAH          DATA 0xef
0000            121   _OCRAL          DATA 0xee
0000            122   _OCRBH          DATA 0xfb
0000            123   _OCRBL          DATA 0xfa
0000            124   _OCRCH          DATA 0xfd
0000            125   _OCRCL          DATA 0xfc
0000            126   _OCRDH          DATA 0xff
0000            127   _OCRDL          DATA 0xfe
0000            128   _P0             DATA 0x80
0000            129   _P1             DATA 0x90
0000            130   _P2             DATA 0xa0
0000            131   _P3             DATA 0xb0
0000            132   _P0M1           DATA 0x84
0000            133   _P0M2           DATA 0x85
0000            134   _P1M1           DATA 0x91
0000            135   _P1M2           DATA 0x92
0000            136   _P2M1           DATA 0xa4
0000            137   _P2M2           DATA 0xa5
0000            138   _P3M1           DATA 0xb1
0000            139   _P3M2           DATA 0xb2
0000            140   _PCON           DATA 0x87
0000            141   _PCONA          DATA 0xb5
0000            142   _PSW            DATA 0xd0
0000            143   _PT0AD          DATA 0xf6
0000            144   _RSTSRC         DATA 0xdf
0000            145   _RTCCON         DATA 0xd1
0000            146   _RTCH           DATA 0xd2
0000            147   _RTCL           DATA 0xd3
0000            148   _SADDR          DATA 0xa9
0000            149   _SADEN          DATA 0xb9
0000            150   _SBUF           DATA 0x99
0000            151   _SCON           DATA 0x98
0000            152   _SSTAT          DATA 0xba
0000            153   _SP             DATA 0x81
0000            154   _SPCTL          DATA 0xe2
0000            155   _SPSTAT         DATA 0xe1
0000            156   _SPDAT          DATA 0xe3
0000            157   _TAMOD          DATA 0x8f
0000            158   _TCON           DATA 0x88
0000            159   _TCR20          DATA 0xc8
0000            160   _TCR21          DATA 0xf9
0000            161   _TH0            DATA 0x8c
0000            162   _TH1            DATA 0x8d
0000            163   _TH2            DATA 0xcd
0000            164   _TICR2          DATA 0xc9
0000            165   _TIFR2          DATA 0xe9
0000            166   _TISE2          DATA 0xde
0000            167   _TL0            DATA 0x8a
0000            168   _TL1            DATA 0x8b
0000            169   _TL2            DATA 0xcc
0000            170   _TMOD           DATA 0x89
0000            171   _TOR2H          DATA 0xcf
0000            172   _TOR2L          DATA 0xce
0000            173   _TPCR2H         DATA 0xcb
0000            174   _TPCR2L         DATA 0xca
0000            175   _TRIM           DATA 0x96
0000            176   _WDCON          DATA 0xa7
0000            177   _WDL            DATA 0xc1
0000            178   _WFEED1         DATA 0xc2
0000            179   _WFEED2         DATA 0xc3
0000            180   ;--------------------------------------------------------
0000            181   ; special function bits
0000            182   ;--------------------------------------------------------
0000            183   _ACC_7          BIT 0xe7
0000            184   _ACC_6          BIT 0xe6
0000            185   _ACC_5          BIT 0xe5
0000            186   _ACC_4          BIT 0xe4
0000            187   _ACC_3          BIT 0xe3
0000            188   _ACC_2          BIT 0xe2
0000            189   _ACC_1          BIT 0xe1
0000            190   _ACC_0          BIT 0xe0
0000            191   _ADMODA_7       BIT 0xc7
0000            192   _ADMODA_6       BIT 0xc6
0000            193   _ADMODA_5       BIT 0xc5
0000            194   _ADMODA_4       BIT 0xc4
0000            195   _ADMODA_3       BIT 0xc3
0000            196   _ADMODA_2       BIT 0xc2
0000            197   _ADMODA_1       BIT 0xc1
0000            198   _ADMODA_0       BIT 0xc0
0000            199   _BNDI1          BIT 0xc7
0000            200   _BURST1         BIT 0xc6
0000            201   _SCC1           BIT 0xc5
0000            202   _SCAN1          BIT 0xc4
0000            203   _BNDI0          BIT 0xc3
0000            204   _BURST0         BIT 0xc2
0000            205   _SCC0           BIT 0xc1
0000            206   _SCAN0          BIT 0xc0
0000            207   _B_7            BIT 0xf7
0000            208   _B_6            BIT 0xf6
0000            209   _B_5            BIT 0xf5
0000            210   _B_4            BIT 0xf4
0000            211   _B_3            BIT 0xf3
0000            212   _B_2            BIT 0xf2
0000            213   _B_1            BIT 0xf1
0000            214   _B_0            BIT 0xf0
0000            215   _I2CON_7        BIT 0xdf
0000            216   _I2CON_6        BIT 0xde
0000            217   _I2CON_5        BIT 0xdd
0000            218   _I2CON_4        BIT 0xdc
0000            219   _I2CON_3        BIT 0xdb
0000            220   _I2CON_2        BIT 0xda
0000            221   _I2CON_1        BIT 0xd9
0000            222   _I2CON_0        BIT 0xd8
0000            223   _I2EN           BIT 0xde
0000            224   _STA            BIT 0xdd
0000            225   _STO            BIT 0xdc
0000            226   _SI             BIT 0xdb
0000            227   _AA             BIT 0xda
0000            228   _CRSEL          BIT 0xd8
0000            229   _IEN0_7         BIT 0xaf
0000            230   _IEN0_6         BIT 0xae
0000            231   _IEN0_5         BIT 0xad
0000            232   _IEN0_4         BIT 0xac
0000            233   _IEN0_3         BIT 0xab
0000            234   _IEN0_2         BIT 0xaa
0000            235   _IEN0_1         BIT 0xa9
0000            236   _IEN0_0         BIT 0xa8
0000            237   _EA             BIT 0xaf
0000            238   _EWDRT          BIT 0xae
0000            239   _EBO            BIT 0xad
0000            240   _ES             BIT 0xac
0000            241   _ESR            BIT 0xac
0000            242   _ET1            BIT 0xab
0000            243   _EX1            BIT 0xaa
0000            244   _ET0            BIT 0xa9
0000            245   _EX0            BIT 0xa8
0000            246   _IEN1_7         BIT 0xef
0000            247   _IEN1_6         BIT 0xee
0000            248   _IEN1_5         BIT 0xed
0000            249   _IEN1_4         BIT 0xec
0000            250   _IEN1_3         BIT 0xeb
0000            251   _IEN1_2         BIT 0xea
0000            252   _IEN1_1         BIT 0xe9
0000            253   _IEN1_0         BIT 0xe8
0000            254   _EADEE          BIT 0xef
0000            255   _EST            BIT 0xee
0000            256   _ECCU           BIT 0xec
0000            257   _ESPI           BIT 0xeb
0000            258   _EC             BIT 0xea
0000            259   _EKBI           BIT 0xe9
0000            260   _EI2C           BIT 0xe8
0000            261   _IP0_7          BIT 0xbf
0000            262   _IP0_6          BIT 0xbe
0000            263   _IP0_5          BIT 0xbd
0000            264   _IP0_4          BIT 0xbc
0000            265   _IP0_3          BIT 0xbb
0000            266   _IP0_2          BIT 0xba
0000            267   _IP0_1          BIT 0xb9
0000            268   _IP0_0          BIT 0xb8
0000            269   _PWDRT          BIT 0xbe
0000            270   _PBO            BIT 0xbd
0000            271   _PS             BIT 0xbc
0000            272   _PSR            BIT 0xbc
0000            273   _PT1            BIT 0xbb
0000            274   _PX1            BIT 0xba
0000            275   _PT0            BIT 0xb9
0000            276   _PX0            BIT 0xb8
0000            277   _IP1_7          BIT 0xff
0000            278   _IP1_6          BIT 0xfe
0000            279   _IP1_5          BIT 0xfd
0000            280   _IP1_4          BIT 0xfc
0000            281   _IP1_3          BIT 0xfb
0000            282   _IP1_2          BIT 0xfa
0000            283   _IP1_1          BIT 0xf9
0000            284   _IP1_0          BIT 0xf8
0000            285   _PADEE          BIT 0xff
0000            286   _PST            BIT 0xfe
0000            287   _PCCU           BIT 0xfc
0000            288   _PSPI           BIT 0xfb
0000            289   _PC             BIT 0xfa
0000            290   _PKBI           BIT 0xf9
0000            291   _PI2C           BIT 0xf8
0000            292   _P0_7           BIT 0x87
0000            293   _P0_6           BIT 0x86
0000            294   _P0_5           BIT 0x85
0000            295   _P0_4           BIT 0x84
0000            296   _P0_3           BIT 0x83
0000            297   _P0_2           BIT 0x82
0000            298   _P0_1           BIT 0x81
0000            299   _P0_0           BIT 0x80
0000            300   _T1             BIT 0x87
0000            301   _KB7            BIT 0x87
0000            302   _CMP_1          BIT 0x86
0000            303   _KB6            BIT 0x86
0000            304   _CMPREF         BIT 0x85
0000            305   _KB5            BIT 0x85
0000            306   _CIN1A          BIT 0x84
0000            307   _KB4            BIT 0x84
0000            308   _CIN1B          BIT 0x83
0000            309   _KB3            BIT 0x83
0000            310   _CIN2A          BIT 0x82
0000            311   _KB2            BIT 0x82
0000            312   _CIN2B          BIT 0x81
0000            313   _KB1            BIT 0x81
0000            314   _CMP_2          BIT 0x80
0000            315   _KB0            BIT 0x80
0000            316   _P1_7           BIT 0x97
0000            317   _P1_6           BIT 0x96
0000            318   _P1_5           BIT 0x95
0000            319   _P1_4           BIT 0x94
0000            320   _P1_3           BIT 0x93
0000            321   _P1_2           BIT 0x92
0000            322   _P1_1           BIT 0x91
0000            323   _P1_0           BIT 0x90
0000            324   _OCC            BIT 0x97
0000            325   _OCB            BIT 0x96
0000            326   _RST            BIT 0x95
0000            327   _INT1           BIT 0x94
0000            328   _INT0           BIT 0x93
0000            329   _SDA            BIT 0x93
0000            330   _T0             BIT 0x92
0000            331   _SCL            BIT 0x92
0000            332   _RXD            BIT 0x91
0000            333   _TXD            BIT 0x90
0000            334   _P2_7           BIT 0xa7
0000            335   _P2_6           BIT 0xa6
0000            336   _P2_5           BIT 0xa5
0000            337   _P2_4           BIT 0xa4
0000            338   _P2_3           BIT 0xa3
0000            339   _P2_2           BIT 0xa2
0000            340   _P2_1           BIT 0xa1
0000            341   _P2_0           BIT 0xa0
0000            342   _ICA            BIT 0xa7
0000            343   _OCA            BIT 0xa6
0000            344   _SPICLK         BIT 0xa5
0000            345   _SS             BIT 0xa4
0000            346   _MISO           BIT 0xa3
0000            347   _MOSI           BIT 0xa2
0000            348   _OCD            BIT 0xa1
0000            349   _ICB            BIT 0xa0
0000            350   _P3_7           BIT 0xb7
0000            351   _P3_6           BIT 0xb6
0000            352   _P3_5           BIT 0xb5
0000            353   _P3_4           BIT 0xb4
0000            354   _P3_3           BIT 0xb3
0000            355   _P3_2           BIT 0xb2
0000            356   _P3_1           BIT 0xb1
0000            357   _P3_0           BIT 0xb0
0000            358   _XTAL1          BIT 0xb1
0000            359   _XTAL2          BIT 0xb0
0000            360   _PSW_7          BIT 0xd7
0000            361   _PSW_6          BIT 0xd6
0000            362   _PSW_5          BIT 0xd5
0000            363   _PSW_4          BIT 0xd4
0000            364   _PSW_3          BIT 0xd3
0000            365   _PSW_2          BIT 0xd2
0000            366   _PSW_1          BIT 0xd1
0000            367   _PSW_0          BIT 0xd0
0000            368   _CY             BIT 0xd7
0000            369   _AC             BIT 0xd6
0000            370   _F0             BIT 0xd5
0000            371   _RS1            BIT 0xd4
0000            372   _RS0            BIT 0xd3
0000            373   _OV             BIT 0xd2
0000            374   _F1             BIT 0xd1
0000            375   _P              BIT 0xd0
0000            376   _SCON_7         BIT 0x9f
0000            377   _SCON_6         BIT 0x9e
0000            378   _SCON_5         BIT 0x9d
0000            379   _SCON_4         BIT 0x9c
0000            380   _SCON_3         BIT 0x9b
0000            381   _SCON_2         BIT 0x9a
0000            382   _SCON_1         BIT 0x99
0000            383   _SCON_0         BIT 0x98
0000            384   _SM0            BIT 0x9f
0000            385   _FE             BIT 0x9f
0000            386   _SM1            BIT 0x9e
0000            387   _SM2            BIT 0x9d
0000            388   _REN            BIT 0x9c
0000            389   _TB8            BIT 0x9b
0000            390   _RB8            BIT 0x9a
0000            391   _TI             BIT 0x99
0000            392   _RI             BIT 0x98
0000            393   _TCON_7         BIT 0x8f
0000            394   _TCON_6         BIT 0x8e
0000            395   _TCON_5         BIT 0x8d
0000            396   _TCON_4         BIT 0x8c
0000            397   _TCON_3         BIT 0x8b
0000            398   _TCON_2         BIT 0x8a
0000            399   _TCON_1         BIT 0x89
0000            400   _TCON_0         BIT 0x88
0000            401   _TF1            BIT 0x8f
0000            402   _TR1            BIT 0x8e
0000            403   _TF0            BIT 0x8d
0000            404   _TR0            BIT 0x8c
0000            405   _IE1            BIT 0x8b
0000            406   _IT1            BIT 0x8a
0000            407   _IE0            BIT 0x89
0000            408   _IT0            BIT 0x88
0000            409   _TCR20_7        BIT 0xcf
0000            410   _TCR20_6        BIT 0xce
0000            411   _TCR20_5        BIT 0xcd
0000            412   _TCR20_4        BIT 0xcc
0000            413   _TCR20_3        BIT 0xcb
0000            414   _TCR20_2        BIT 0xca
0000            415   _TCR20_1        BIT 0xc9
0000            416   _TCR20_0        BIT 0xc8
0000            417   _PLEEN          BIT 0xcf
0000            418   _HLTRN          BIT 0xce
0000            419   _HLTEN          BIT 0xcd
0000            420   _ALTCD          BIT 0xcc
0000            421   _ALTAB          BIT 0xcb
0000            422   _TDIR2          BIT 0xca
0000            423   _TMOD21         BIT 0xc9
0000            424   _TMOD20         BIT 0xc8
0000            425   ;--------------------------------------------------------
0000            426   ; overlayable register banks
0000            427   ;--------------------------------------------------------
0000            428            rbank0 segment data overlay
0000            429   ;--------------------------------------------------------
0000            430   ; internal ram data
0000            431   ;--------------------------------------------------------
0000            432            rseg R_DSEG
0000            433   _msCount:
0000            434            ds 2
0002            435   _secs:
0002            436            ds 1
0003            437   _mins:
0003            438            ds 1
0004            439   _pwmcount:
0004            440            ds 1
0005            441   _pwm_left:
0005            442            ds 1
0006            443   _pwm_right:
0006            444            ds 1
0007            445   _turn_timer:
0007            446            ds 2
0009            447   _LCDprint_PARM_2:
0009            448            ds 1
000A            449   _display_LCD_buff_1_94:
000A            450            ds 17
001B            451   _main_cor_1_112:
001B            452            ds 4
001F            453   _main_cur_error_1_112:
001F            454            ds 4
0023            455   _main_pre_error_1_112:
0023            456            ds 4
0027            457   _main_right_1_112:
0027            458            ds 4
002B            459   _main_line_sensor_1_112:
002B            460            ds 4
002F            461   _main_diff_1_112:
002F            462            ds 4
0033            463   _main_line_counter_1_112:
0033            464            ds 2
0035            465   _main_command_1_112:
0035            466            ds 2
0037            467   _main_state_1_112:
0037            468            ds 2
0039            469   ;--------------------------------------------------------
0039            470   ; overlayable items in internal ram 
0039            471   ;--------------------------------------------------------
0000            472            rseg R_OSEG
0000            473   ;--------------------------------------------------------
0000            474   ; indirectly addressable internal ram data
0000            475   ;--------------------------------------------------------
0000            476            rseg R_ISEG
0000            477   ;--------------------------------------------------------
0000            478   ; absolute internal ram data
0000            479   ;--------------------------------------------------------
0000            480            DSEG
0000            481   ;--------------------------------------------------------
0000            482   ; bit data
0000            483   ;--------------------------------------------------------
0000            484            rseg R_BSEG
0000            485   _time_update_flag:
0000            486            DBIT    1
0001            487   _turn_time_update:
0001            488            DBIT    1
0002            489   _start:
0002            490            DBIT    1
0003            491   _LCDprint_PARM_3:
0003            492            DBIT    1
0004            493   ;--------------------------------------------------------
0004            494   ; paged external ram data
0004            495   ;--------------------------------------------------------
0000            496            rseg R_PSEG
0000            497   ;--------------------------------------------------------
0000            498   ; external ram data
0000            499   ;--------------------------------------------------------
0000            500            rseg R_XSEG
FFC8            501            XSEG at 0xffc8
FFC8            502   _BODCFG: ds 1
FFC9            503            public _BODCFG
0000            504            rseg R_XSEG
FFDE            505            XSEG at 0xffde
FFDE            506   _CLKCON: ds 1
FFDF            507            public _CLKCON
0000            508            rseg R_XSEG
FFE1            509            XSEG at 0xffe1
FFE1            510   _PGACON1: ds 1
FFE2            511            public _PGACON1
0000            512            rseg R_XSEG
FFE4            513            XSEG at 0xffe4
FFE4            514   _PGACON1B: ds 1
FFE5            515            public _PGACON1B
0000            516            rseg R_XSEG
FFE3            517            XSEG at 0xffe3
FFE3            518   _PGA1TRIM8X16X: ds 1
FFE4            519            public _PGA1TRIM8X16X
0000            520            rseg R_XSEG
FFE2            521            XSEG at 0xffe2
FFE2            522   _PGA1TRIM2X4X: ds 1
FFE3            523            public _PGA1TRIM2X4X
0000            524            rseg R_XSEG
FFCA            525            XSEG at 0xffca
FFCA            526   _PGACON0: ds 1
FFCB            527            public _PGACON0
0000            528            rseg R_XSEG
FFCE            529            XSEG at 0xffce
FFCE            530   _PGACON0B: ds 1
FFCF            531            public _PGACON0B
0000            532            rseg R_XSEG
FFCD            533            XSEG at 0xffcd
FFCD            534   _PGA0TRIM8X16X: ds 1
FFCE            535            public _PGA0TRIM8X16X
0000            536            rseg R_XSEG
FFCC            537            XSEG at 0xffcc
FFCC            538   _PGA0TRIM2X4X: ds 1
FFCD            539            public _PGA0TRIM2X4X
0000            540            rseg R_XSEG
FFBF            541            XSEG at 0xffbf
FFBF            542   _RTCDATH: ds 1
FFC0            543            public _RTCDATH
0000            544            rseg R_XSEG
FFBE            545            XSEG at 0xffbe
FFBE            546   _RTCDATL: ds 1
FFBF            547            public _RTCDATL
0000            548            rseg R_XSEG
0000            549   ;--------------------------------------------------------
0000            550   ; absolute external ram data
0000            551   ;--------------------------------------------------------
FFBF            552            XSEG
FFBF            553   ;--------------------------------------------------------
FFBF            554   ; external initialized ram data
FFBF            555   ;--------------------------------------------------------
0000            556            rseg R_IXSEG
0000            557            rseg R_HOME
0000            558            rseg R_GSINIT
0000            559            rseg R_CSEG
0000            560   ;--------------------------------------------------------
0000            561   ; Reset entry point and interrupt vectors
0000            562   ;--------------------------------------------------------
0000            563            CSEG at 0x0000
0000 020100     564            ljmp    _crt0
000B            565            CSEG at 0x000b
000B 020100     566            ljmp    _Timer0ISR
000E            567   ;--------------------------------------------------------
000E            568   ; global & static initialisations
000E            569   ;--------------------------------------------------------
0000            570            rseg R_HOME
0000            571            rseg R_GSINIT
0000            572            rseg R_GSINIT
0000            573   ;--------------------------------------------------------
0000            574   ; data variables initialization
0000            575   ;--------------------------------------------------------
0000            576            rseg R_DINIT
0000            577   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:44: volatile int msCount=0; // Volatiles can be changed by stuff outside our program, like memory registers
0000 E4         578            clr     a
0001 F588       579            mov     _msCount,a
0003 F589       580            mov     (_msCount + 1),a
0005            581   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:45: volatile unsigned char secs=0, mins=0; // They are like global variables, kinda 
0005 754800     582            mov     _secs,#0x00
0008            583   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:45: volatile bit time_update_flag=0;
0008 750800     584            mov     _mins,#0x00
000B            585   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:50: volatile int turn_timer = 0;
000B E4         586            clr     a
000C F508       587            mov     _turn_timer,a
000E F509       588            mov     (_turn_timer + 1),a
0010            589   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:46: volatile bit time_update_flag=0;
0010 C278       590            clr     _time_update_flag
0012            591   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:51: volatile bit turn_time_update=0;
0012 C228       592            clr     _turn_time_update
0014            593   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:52: volatile bit start = 1;
0014 D2D8       594            setb    _start
0016            595            ; The linker places a 'ret' at the end of segment R_DINIT.
0016            596   ;--------------------------------------------------------
0016            597   ; code
0016            598   ;--------------------------------------------------------
0000            599            rseg R_CSEG
0000            600   ;------------------------------------------------------------
0000            601   ;Allocation info for local variables in function 'InitPorts'
0000            602   ;------------------------------------------------------------
0000            603   ;------------------------------------------------------------
0000            604   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:54: void InitPorts(void)
0000            605   ;        -----------------------------------------
0000            606   ;         function InitPorts
0000            607   ;        -----------------------------------------
0000            608   _InitPorts:
0000            609            using   0
0000            610   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:56: P0M1=0x1E;
0000 75841E     611            mov     _P0M1,#0x1E
0003            612   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:57: P0M2=0x00;
0003 758500     613            mov     _P0M2,#0x00
0006            614   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:58: P1M1=0;
0006 759100     615            mov     _P1M1,#0x00
0009            616   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:59: P1M2=0;
0009 759200     617            mov     _P1M2,#0x00
000C            618   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:60: P2M1=0;
000C 75A400     619            mov     _P2M1,#0x00
000F            620   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:61: P2M2=0;
000F 75A500     621            mov     _P2M2,#0x00
0012            622   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:62: P3M1=0;
0012 75B100     623            mov     _P3M1,#0x00
0015            624   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:63: P3M2=0;
0015 75B200     625            mov     _P3M2,#0x00
0018 22         626            ret
0019            627   ;------------------------------------------------------------
0019            628   ;Allocation info for local variables in function 'Wait50us'
0019            629   ;------------------------------------------------------------
0019            630   ;------------------------------------------------------------
0019            631   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:66: void Wait50us (void)
0019            632   ;        -----------------------------------------
0019            633   ;         function Wait50us
0019            634   ;        -----------------------------------------
0019            635   _Wait50us:
0019            636   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:71: _endasm;
0019            637            
0019 7852       638             mov R0, #82
001B            639             L0:
001B D858       640            djnz R0, L0 ; 2 machine cycles-> 2*0.27126us*92=50us
001D            641             
001D 22         642            ret
001E            643   ;------------------------------------------------------------
001E            644   ;Allocation info for local variables in function 'waitms'
001E            645   ;------------------------------------------------------------
001E            646   ;ms                        Allocated to registers r2 r3 
001E            647   ;j                         Allocated to registers r4 r5 
001E            648   ;k                         Allocated to registers r6 
001E            649   ;------------------------------------------------------------
001E            650   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:74: void waitms (unsigned int ms)
001E            651   ;        -----------------------------------------
001E            652   ;         function waitms
001E            653   ;        -----------------------------------------
001E            654   _waitms:
001E AA82       655            mov     r2,dpl
0020 AB83       656            mov     r3,dph
0022            657   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:80: for(j=0; j<ms; j++)
0022 7C00       658            mov     r4,#0x00
0024 7D00       659            mov     r5,#0x00
0026            660   L004004?:
0026 C3         661            clr     c
0027 EC         662            mov     a,r4
0028 9A         663            subb    a,r2
0029 ED         664            mov     a,r5
002A 9B         665            subb    a,r3
002B 5001       666            jnc     L004008?
002D            667   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:81: for (k=0; k<20; k++) Wait50us();
002D 7E14       668            mov     r6,#0x14
002F            669   L004003?:
002F C002       670            push    ar2
0031 C003       671            push    ar3
0033 C004       672            push    ar4
0035 C005       673            push    ar5
0037 C006       674            push    ar6
0039 120100     675            lcall   _Wait50us
003C D006       676            pop     ar6
003E D005       677            pop     ar5
0040 D004       678            pop     ar4
0042 D003       679            pop     ar3
0044 D002       680            pop     ar2
0046 DE98       681            djnz    r6,L004003?
0048            682   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:80: for(j=0; j<ms; j++)
0048 0C         683            inc     r4
0049 BC0018     684            cjne    r4,#0x00,L004004?
004C 0D         685            inc     r5
004D 8001       686            sjmp    L004004?
004F            687   L004008?:
004F 22         688            ret
0050            689   ;------------------------------------------------------------
0050            690   ;Allocation info for local variables in function 'LCD_pulse'
0050            691   ;------------------------------------------------------------
0050            692   ;------------------------------------------------------------
0050            693   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:84: void LCD_pulse (void)
0050            694   ;        -----------------------------------------
0050            695   ;         function LCD_pulse
0050            696   ;        -----------------------------------------
0050            697   _LCD_pulse:
0050            698   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:86: LCD_E=1;
0050 D2A5       699            setb    _P2_5
0052            700   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:87: Wait50us();
0052 120100     701            lcall   _Wait50us
0055            702   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:88: LCD_E=0;
0055 C2A5       703            clr     _P2_5
0057 22         704            ret
0058            705   ;------------------------------------------------------------
0058            706   ;Allocation info for local variables in function 'LCD_byte'
0058            707   ;------------------------------------------------------------
0058            708   ;x                         Allocated to registers 
0058            709   ;------------------------------------------------------------
0058            710   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:91: void LCD_byte (unsigned char x)
0058            711   ;        -----------------------------------------
0058            712   ;         function LCD_byte
0058            713   ;        -----------------------------------------
0058            714   _LCD_byte:
0058 8582E0     715            mov     _ACC,dpl
005B            716   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:95: LCD_D7=ACC_7;
005B A2E7       717            mov     c,_ACC_7
005D 9294       718            mov     _P1_4,c
005F            719   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:96: LCD_D6=ACC_6;
005F A2E6       720            mov     c,_ACC_6
0061 9296       721            mov     _P1_6,c
0063            722   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:97: LCD_D5=ACC_5;
0063 A2E5       723            mov     c,_ACC_5
0065 9297       724            mov     _P1_7,c
0067            725   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:98: LCD_D4=ACC_4;
0067 A2E4       726            mov     c,_ACC_4
0069 92A0       727            mov     _P2_0,c
006B            728   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:99: LCD_D3=ACC_3;
006B A2E3       729            mov     c,_ACC_3
006D 92A1       730            mov     _P2_1,c
006F            731   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:100: LCD_D2=ACC_2;
006F A2E2       732            mov     c,_ACC_2
0071 92A2       733            mov     _P2_2,c
0073            734   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:101: LCD_D1=ACC_1;
0073 A2E1       735            mov     c,_ACC_1
0075 92A3       736            mov     _P2_3,c
0077            737   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:102: LCD_D0=ACC_0;
0077 A2E0       738            mov     c,_ACC_0
0079 92A4       739            mov     _P2_4,c
007B            740   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:103: LCD_pulse();
007B 020100     741            ljmp    _LCD_pulse
007E            742   ;------------------------------------------------------------
007E            743   ;Allocation info for local variables in function 'WriteData'
007E            744   ;------------------------------------------------------------
007E            745   ;x                         Allocated to registers r2 
007E            746   ;------------------------------------------------------------
007E            747   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:106: void WriteData (unsigned char x)
007E            748   ;        -----------------------------------------
007E            749   ;         function WriteData
007E            750   ;        -----------------------------------------
007E            751   _WriteData:
007E AA82       752            mov     r2,dpl
0080            753   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:108: LCD_RS=1;
0080 D2A7       754            setb    _P2_7
0082            755   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:109: LCD_byte(x);
0082 8A82       756            mov     dpl,r2
0084 120100     757            lcall   _LCD_byte
0087            758   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:110: waitms(2);
0087 900002     759            mov     dptr,#0x0002
008A 020100     760            ljmp    _waitms
008D            761   ;------------------------------------------------------------
008D            762   ;Allocation info for local variables in function 'WriteCommand'
008D            763   ;------------------------------------------------------------
008D            764   ;x                         Allocated to registers r2 
008D            765   ;------------------------------------------------------------
008D            766   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:113: void WriteCommand (unsigned char x)
008D            767   ;        -----------------------------------------
008D            768   ;         function WriteCommand
008D            769   ;        -----------------------------------------
008D            770   _WriteCommand:
008D AA82       771            mov     r2,dpl
008F            772   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:115: LCD_RS=0;
008F C2A7       773            clr     _P2_7
0091            774   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:116: LCD_byte(x);
0091 8A82       775            mov     dpl,r2
0093 120100     776            lcall   _LCD_byte
0096            777   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:117: waitms(5);
0096 900005     778            mov     dptr,#0x0005
0099 020100     779            ljmp    _waitms
009C            780   ;------------------------------------------------------------
009C            781   ;Allocation info for local variables in function 'LCD_8BIT'
009C            782   ;------------------------------------------------------------
009C            783   ;------------------------------------------------------------
009C            784   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:120: void LCD_8BIT (void)
009C            785   ;        -----------------------------------------
009C            786   ;         function LCD_8BIT
009C            787   ;        -----------------------------------------
009C            788   _LCD_8BIT:
009C            789   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:122: LCD_E=0;  // Resting state of LCD's enable is zero
009C C2A5       790            clr     _P2_5
009E            791   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:123: LCD_RW=0; // We are only writing to the LCD in this program
009E C2A6       792            clr     _P2_6
00A0            793   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:124: waitms(20);
00A0 900014     794            mov     dptr,#0x0014
00A3 120100     795            lcall   _waitms
00A6            796   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:126: WriteCommand(0x33);
00A6 758233     797            mov     dpl,#0x33
00A9 120100     798            lcall   _WriteCommand
00AC            799   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:127: WriteCommand(0x33);
00AC 758233     800            mov     dpl,#0x33
00AF 120100     801            lcall   _WriteCommand
00B2            802   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:128: WriteCommand(0x33); // Stay in 8-bit mode
00B2 758233     803            mov     dpl,#0x33
00B5 120100     804            lcall   _WriteCommand
00B8            805   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:131: WriteCommand(0x38);
00B8 758238     806            mov     dpl,#0x38
00BB 120100     807            lcall   _WriteCommand
00BE            808   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:132: WriteCommand(0x0c);
00BE 75820C     809            mov     dpl,#0x0C
00C1 120100     810            lcall   _WriteCommand
00C4            811   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:133: WriteCommand(0x01); // Clear screen command (takes some time)
00C4 758201     812            mov     dpl,#0x01
00C7 120100     813            lcall   _WriteCommand
00CA            814   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:134: waitms(20); // Wait for clear screen command to finsih.
00CA 900014     815            mov     dptr,#0x0014
00CD 020100     816            ljmp    _waitms
00D0            817   ;------------------------------------------------------------
00D0            818   ;Allocation info for local variables in function 'LCDprint'
00D0            819   ;------------------------------------------------------------
00D0            820   ;line                      Allocated with name '_LCDprint_PARM_2'
00D0            821   ;string                    Allocated to registers r2 r3 r4 
00D0            822   ;j                         Allocated to registers r5 
00D0            823   ;------------------------------------------------------------
00D0            824   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:137: void LCDprint(char * string, unsigned char line, bit clear)
00D0            825   ;        -----------------------------------------
00D0            826   ;         function LCDprint
00D0            827   ;        -----------------------------------------
00D0            828   _LCDprint:
00D0 AA82       829            mov     r2,dpl
00D2 AB83       830            mov     r3,dph
00D4 ACF0       831            mov     r4,b
00D6            832   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:141: WriteCommand(line==2?0xc0:0x80);
00D6 7402       833            mov     a,#0x02
00D8 B5C818     834            cjne    a,_LCDprint_PARM_2,L010013?
00DB 7DC0       835            mov     r5,#0xC0
00DD 8001       836            sjmp    L010014?
00DF            837   L010013?:
00DF 7D80       838            mov     r5,#0x80
00E1            839   L010014?:
00E1 8D82       840            mov     dpl,r5
00E3 C002       841            push    ar2
00E5 C003       842            push    ar3
00E7 C004       843            push    ar4
00E9 120100     844            lcall   _WriteCommand
00EC            845   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:142: waitms(5);
00EC 900005     846            mov     dptr,#0x0005
00EF 120100     847            lcall   _waitms
00F2 D004       848            pop     ar4
00F4 D003       849            pop     ar3
00F6 D002       850            pop     ar2
00F8            851   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:143: for(j=0; string[j]!=0; j++)      WriteData(string[j]);// Write the message
00F8 7D00       852            mov     r5,#0x00
00FA            853   L010003?:
00FA ED         854            mov     a,r5
00FB 2A         855            add     a,r2
00FC FE         856            mov     r6,a
00FD E4         857            clr     a
00FE 3B         858            addc    a,r3
00FF FF         859            mov     r7,a
0100 8C00       860            mov     ar0,r4
0102 8E82       861            mov     dpl,r6
0104 8F83       862            mov     dph,r7
0106 88F0       863            mov     b,r0
0108 120100     864            lcall   __gptrget
010B FE         865            mov     r6,a
010C 6001       866            jz      L010006?
010E 8E82       867            mov     dpl,r6
0110 C002       868            push    ar2
0112 C003       869            push    ar3
0114 C004       870            push    ar4
0116 C005       871            push    ar5
0118 120100     872            lcall   _WriteData
011B D005       873            pop     ar5
011D D004       874            pop     ar4
011F D003       875            pop     ar3
0121 D002       876            pop     ar2
0123 0D         877            inc     r5
0124 8001       878            sjmp    L010003?
0126            879   L010006?:
0126            880   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:144: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0126 309858     881            jnb     _LCDprint_PARM_3,L010011?
0129 8D02       882            mov     ar2,r5
012B            883   L010007?:
012B BA10D8     884            cjne    r2,#0x10,L010026?
012E            885   L010026?:
012E 5001       886            jnc     L010011?
0130 758220     887            mov     dpl,#0x20
0133 C002       888            push    ar2
0135 120100     889            lcall   _WriteData
0138 D002       890            pop     ar2
013A 0A         891            inc     r2
013B 8001       892            sjmp    L010007?
013D            893   L010011?:
013D 22         894            ret
013E            895   ;------------------------------------------------------------
013E            896   ;Allocation info for local variables in function 'Wait1S'
013E            897   ;------------------------------------------------------------
013E            898   ;------------------------------------------------------------
013E            899   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:147: void Wait1S (void)
013E            900   ;        -----------------------------------------
013E            901   ;         function Wait1S
013E            902   ;        -----------------------------------------
013E            903   _Wait1S:
013E            904   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:156: _endasm;
013E            905            
013E 7A28       906             mov R2, #40
0140            907             L3:
0140 79FA       908            mov R1, #250
0142            909             L2:
0142 78B8       910            mov R0, #184
0144            911             L1:
0144 D898       912            djnz R0, L1 ; 2 machine cycles-> 2*0.27126us*184=100us
0146 D958       913             djnz R1, L2 ; 100us*250=0.025s
0148 DA18       914             djnz R2, L3 ; 0.025s*40=1s
014A            915             
014A 22         916            ret
014B            917   ;------------------------------------------------------------
014B            918   ;Allocation info for local variables in function 'InitSerialPort'
014B            919   ;------------------------------------------------------------
014B            920   ;------------------------------------------------------------
014B            921   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:159: void InitSerialPort(void)
014B            922   ;        -----------------------------------------
014B            923   ;         function InitSerialPort
014B            924   ;        -----------------------------------------
014B            925   _InitSerialPort:
014B            926   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:161: BRGCON=0x00; //Make sure the baud rate generator is off
014B 75BD00     927            mov     _BRGCON,#0x00
014E            928   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:162: BRGR1=((XTAL/BAUD)-16)/0x100;
014E 75BF00     929            mov     _BRGR1,#0x00
0151            930   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:163: BRGR0=((XTAL/BAUD)-16)%0x100;
0151 75BE30     931            mov     _BRGR0,#0x30
0154            932   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:164: BRGCON=0x03; //Turn-on the baud rate generator
0154 75BD03     933            mov     _BRGCON,#0x03
0157            934   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:165: SCON=0x52; //Serial port in mode 1, ren, txrdy, rxempty
0157 759852     935            mov     _SCON,#0x52
015A            936   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:166: P1M1=0x00; //Enable pins RxD and Txd
015A 759100     937            mov     _P1M1,#0x00
015D            938   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:167: P1M2=0x00; //Enable pins RxD and Txd
015D 759200     939            mov     _P1M2,#0x00
0160 22         940            ret
0161            941   ;------------------------------------------------------------
0161            942   ;Allocation info for local variables in function 'InitADC'
0161            943   ;------------------------------------------------------------
0161            944   ;------------------------------------------------------------
0161            945   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:170: void InitADC(void)
0161            946   ;        -----------------------------------------
0161            947   ;         function InitADC
0161            948   ;        -----------------------------------------
0161            949   _InitADC:
0161            950   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:174: P0M1 |= (P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0161 43841E     951            orl     _P0M1,#0x1E
0164            952   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:175: P0M2 &= ~(P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0164 5385E1     953            anl     _P0M2,#0xE1
0167            954   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:178: BURST1=1; //Autoscan continuous conversion mode
0167 D2C6       955            setb    _BURST1
0169            956   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:179: ADMODB = CLK0; //ADC1 clock is 7.3728MHz/2
0169 75A120     957            mov     _ADMODB,#0x20
016C            958   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:180: ADINS  = (ADI13|ADI12|ADI11|ADI10); // Select the four channels for conversion
016C 75A3F0     959            mov     _ADINS,#0xF0
016F            960   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:181: ADCON1 = (ENADC1|ADCS10); //Enable the converter and start immediately
016F 759705     961            mov     _ADCON1,#0x05
0172            962   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:182: while((ADCI1&ADCON1)==0); //Wait for first conversion to complete
0172            963   L013001?:
0172 E597       964            mov     a,_ADCON1
0174 30E3D8     965            jnb     acc.3,L013001?
0177 22         966            ret
0178            967   ;------------------------------------------------------------
0178            968   ;Allocation info for local variables in function 'InitTimer0'
0178            969   ;------------------------------------------------------------
0178            970   ;------------------------------------------------------------
0178            971   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:185: void InitTimer0 (void)
0178            972   ;        -----------------------------------------
0178            973   ;         function InitTimer0
0178            974   ;        -----------------------------------------
0178            975   _InitTimer0:
0178            976   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:189: TR0=0; // Stop timer 0
0178 C28C       977            clr     _TR0
017A            978   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:190: TMOD=(TMOD&0xf0)|0x01; // 16-bit timer
017A 74F0       979            mov     a,#0xF0
017C 5589       980            anl     a,_TMOD
017E 4401       981            orl     a,#0x01
0180 F589       982            mov     _TMOD,a
0182            983   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:191: TH0=TIMER0_RELOAD_VALUE/0x100; // I think the RHS is 0001 0000 0000, are we dividing?
0182 758CFE     984            mov     _TH0,#0xFE
0185            985   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:192: TL0=TIMER0_RELOAD_VALUE%0x100; // % means modulo, apparently? ...are we modulo-ing?
0185 758A90     986            mov     _TL0,#0x90
0188            987   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:193: TR0=1; // Start timer 0 (bit 4 in TCON)
0188 D28C       988            setb    _TR0
018A            989   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:194: ET0=1; // Enable timer 0 interrupt - the interrupt controller IEN0 is bit-adressable, so we change only the bit we need
018A D2A9       990            setb    _ET0
018C            991   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:195: EA=1;  // Enable global interrupts
018C D2AF       992            setb    _EA
018E 22         993            ret
018F            994   ;------------------------------------------------------------
018F            995   ;Allocation info for local variables in function 'Timer0ISR'
018F            996   ;------------------------------------------------------------
018F            997   ;------------------------------------------------------------
018F            998   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:199: void Timer0ISR (void) interrupt 1{
018F            999   ;        -----------------------------------------
018F           1000   ;         function Timer0ISR
018F           1001   ;        -----------------------------------------
018F           1002   _Timer0ISR:
018F C0E0      1003            push    acc
0191 C0D0      1004            push    psw
0193 75D000    1005            mov     psw,#0x00
0196           1006   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:201: TR0=0; // Stop timer 0
0196 C28C      1007            clr     _TR0
0198           1008   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:202: TH0=TIMER0_RELOAD_VALUE/0x100;
0198 758CFE    1009            mov     _TH0,#0xFE
019B           1010   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:203: TL0=TIMER0_RELOAD_VALUE%0x100;
019B 758A90    1011            mov     _TL0,#0x90
019E           1012   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:204: TR0=1; // Start timer 0
019E D28C      1013            setb    _TR0
01A0           1014   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:206: if(++pwmcount>99) pwmcount=0;
01A0 05C8      1015            inc     _pwmcount
01A2 E5C8      1016            mov     a,_pwmcount
01A4 249C      1017            add     a,#0xff - 0x63
01A6 5001      1018            jnc     L015002?
01A8 75C800    1019            mov     _pwmcount,#0x00
01AB           1020   L015002?:
01AB           1021   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:207: P0_5=(pwm_left>pwmcount)?1:0;
01AB C3        1022            clr     c
01AC E5C8      1023            mov     a,_pwmcount
01AE 9588      1024            subb    a,_pwm_left
01B0 9285      1025            mov     _P0_5,c
01B2           1026   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:208: P0_6=(pwm_right>pwmcount)?1:0;
01B2 C3        1027            clr     c
01B3 E5C8      1028            mov     a,_pwmcount
01B5 9548      1029            subb    a,_pwm_right
01B7 9286      1030            mov     _P0_6,c
01B9           1031   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:210: msCount++;
01B9 7401      1032            mov     a,#0x01
01BB 2588      1033            add     a,_msCount
01BD F588      1034            mov     _msCount,a
01BF E4        1035            clr     a
01C0 3589      1036            addc    a,(_msCount + 1)
01C2 F589      1037            mov     (_msCount + 1),a
01C4           1038   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:211: if(msCount==10000)
01C4 7410      1039            mov     a,#0x10
01C6 B588D8    1040            cjne    a,_msCount,L015008?
01C9 7427      1041            mov     a,#0x27
01CB B589D8    1042            cjne    a,(_msCount + 1),L015008?
01CE           1043   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:213: time_update_flag=1;
01CE D278      1044            setb    _time_update_flag
01D0           1045   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:214: msCount=0;
01D0 E4        1046            clr     a
01D1 F588      1047            mov     _msCount,a
01D3 F589      1048            mov     (_msCount + 1),a
01D5           1049   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:215: secs++;
01D5 0548      1050            inc     _secs
01D7           1051   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:216: if(secs==60)
01D7 743C      1052            mov     a,#0x3C
01D9 B548D8    1053            cjne    a,_secs,L015008?
01DC           1054   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:218: secs=0;
01DC 754800    1055            mov     _secs,#0x00
01DF           1056   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:219: mins++;
01DF 0508      1057            inc     _mins
01E1           1058   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:220: if(mins==60)
01E1 743C      1059            mov     a,#0x3C
01E3 B508D8    1060            cjne    a,_mins,L015008?
01E6           1061   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:222: mins=0;
01E6 750800    1062            mov     _mins,#0x00
01E9           1063   L015008?:
01E9           1064   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:227: if(turn_time_update == 1){
01E9 302818    1065            jnb     _turn_time_update,L015011?
01EC           1066   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:228: turn_timer++;
01EC 7401      1067            mov     a,#0x01
01EE 2508      1068            add     a,_turn_timer
01F0 F508      1069            mov     _turn_timer,a
01F2 E4        1070            clr     a
01F3 3509      1071            addc    a,(_turn_timer + 1)
01F5 F509      1072            mov     (_turn_timer + 1),a
01F7           1073   L015011?:
01F7 D0D0      1074            pop     psw
01F9 D0E0      1075            pop     acc
01FB 32        1076            reti
01FC           1077   ;        eliminated unneeded push/pop dpl
01FC           1078   ;        eliminated unneeded push/pop dph
01FC           1079   ;        eliminated unneeded push/pop b
01FC           1080   ;------------------------------------------------------------
01FC           1081   ;Allocation info for local variables in function 'display_LCD'
01FC           1082   ;------------------------------------------------------------
01FC           1083   ;buff                      Allocated with name '_display_LCD_buff_1_94'
01FC           1084   ;------------------------------------------------------------
01FC           1085   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:232: void display_LCD(void){
01FC           1086   ;        -----------------------------------------
01FC           1087   ;         function display_LCD
01FC           1088   ;        -----------------------------------------
01FC           1089   _display_LCD:
01FC           1090   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:235: time_update_flag=0;
01FC C278      1091            clr     _time_update_flag
01FE           1092   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:242: sprintf(buff, "L=%5.2f R:%5.2f", (AD1DAT1/255.0)*3.3, (AD1DAT2/255.0)*3.3); //Display Left and Right Sensor
01FE 85D782    1093            mov     dpl,_AD1DAT2
0201 120100    1094            lcall   ___uchar2fs
0204 AA82      1095            mov     r2,dpl
0206 AB83      1096            mov     r3,dph
0208 ACF0      1097            mov     r4,b
020A FD        1098            mov     r5,a
020B E4        1099            clr     a
020C C0E0      1100            push    acc
020E C0E0      1101            push    acc
0210 747F      1102            mov     a,#0x7F
0212 C0E0      1103            push    acc
0214 7443      1104            mov     a,#0x43
0216 C0E0      1105            push    acc
0218 8A82      1106            mov     dpl,r2
021A 8B83      1107            mov     dph,r3
021C 8CF0      1108            mov     b,r4
021E ED        1109            mov     a,r5
021F 120100    1110            lcall   ___fsdiv
0222 AA82      1111            mov     r2,dpl
0224 AB83      1112            mov     r3,dph
0226 ACF0      1113            mov     r4,b
0228 FD        1114            mov     r5,a
0229 E581      1115            mov     a,sp
022B 24FC      1116            add     a,#0xfc
022D F581      1117            mov     sp,a
022F C002      1118            push    ar2
0231 C003      1119            push    ar3
0233 C004      1120            push    ar4
0235 C005      1121            push    ar5
0237 903333    1122            mov     dptr,#0x3333
023A 75F053    1123            mov     b,#0x53
023D 7440      1124            mov     a,#0x40
023F 120100    1125            lcall   ___fsmul
0242 AA82      1126            mov     r2,dpl
0244 AB83      1127            mov     r3,dph
0246 ACF0      1128            mov     r4,b
0248 FD        1129            mov     r5,a
0249 E581      1130            mov     a,sp
024B 24FC      1131            add     a,#0xfc
024D F581      1132            mov     sp,a
024F 85D682    1133            mov     dpl,_AD1DAT1
0252 C002      1134            push    ar2
0254 C003      1135            push    ar3
0256 C004      1136            push    ar4
0258 C005      1137            push    ar5
025A 120100    1138            lcall   ___uchar2fs
025D AE82      1139            mov     r6,dpl
025F AF83      1140            mov     r7,dph
0261 A8F0      1141            mov     r0,b
0263 F9        1142            mov     r1,a
0264 E4        1143            clr     a
0265 C0E0      1144            push    acc
0267 C0E0      1145            push    acc
0269 747F      1146            mov     a,#0x7F
026B C0E0      1147            push    acc
026D 7443      1148            mov     a,#0x43
026F C0E0      1149            push    acc
0271 8E82      1150            mov     dpl,r6
0273 8F83      1151            mov     dph,r7
0275 88F0      1152            mov     b,r0
0277 E9        1153            mov     a,r1
0278 120100    1154            lcall   ___fsdiv
027B AE82      1155            mov     r6,dpl
027D AF83      1156            mov     r7,dph
027F A8F0      1157            mov     r0,b
0281 F9        1158            mov     r1,a
0282 E581      1159            mov     a,sp
0284 24FC      1160            add     a,#0xfc
0286 F581      1161            mov     sp,a
0288 C006      1162            push    ar6
028A C007      1163            push    ar7
028C C000      1164            push    ar0
028E C001      1165            push    ar1
0290 903333    1166            mov     dptr,#0x3333
0293 75F053    1167            mov     b,#0x53
0296 7440      1168            mov     a,#0x40
0298 120100    1169            lcall   ___fsmul
029B AE82      1170            mov     r6,dpl
029D AF83      1171            mov     r7,dph
029F A8F0      1172            mov     r0,b
02A1 F9        1173            mov     r1,a
02A2 E581      1174            mov     a,sp
02A4 24FC      1175            add     a,#0xfc
02A6 F581      1176            mov     sp,a
02A8 C006      1177            push    ar6
02AA C007      1178            push    ar7
02AC C000      1179            push    ar0
02AE C001      1180            push    ar1
02B0 7458      1181            mov     a,#__str_0
02B2 C0E0      1182            push    acc
02B4 74AD      1183            mov     a,#(__str_0 >> 8)
02B6 C0E0      1184            push    acc
02B8 7480      1185            mov     a,#0x80
02BA C0E0      1186            push    acc
02BC 7418      1187            mov     a,#_display_LCD_buff_1_94
02BE C0E0      1188            push    acc
02C0 74A0      1189            mov     a,#(_display_LCD_buff_1_94 >> 8)
02C2 C0E0      1190            push    acc
02C4 7440      1191            mov     a,#0x40
02C6 C0E0      1192            push    acc
02C8 120100    1193            lcall   _sprintf
02CB E581      1194            mov     a,sp
02CD 24F2      1195            add     a,#0xf2
02CF F581      1196            mov     sp,a
02D1           1197   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:243: LCDprint(buff, 1, 1);
02D1 75C801    1198            mov     _LCDprint_PARM_2,#0x01
02D4 D298      1199            setb    _LCDprint_PARM_3
02D6 90A018    1200            mov     dptr,#_display_LCD_buff_1_94
02D9 75F040    1201            mov     b,#0x40
02DC 120100    1202            lcall   _LCDprint
02DF           1203   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:244: sprintf(buff, "LM=%d RM=%d", pwm_left, pwm_right); // Display Motor Values
02DF AA48      1204            mov     r2,_pwm_right
02E1 7B00      1205            mov     r3,#0x00
02E3 AC88      1206            mov     r4,_pwm_left
02E5 7D00      1207            mov     r5,#0x00
02E7 C002      1208            push    ar2
02E9 C003      1209            push    ar3
02EB C004      1210            push    ar4
02ED C005      1211            push    ar5
02EF 74D8      1212            mov     a,#__str_1
02F1 C0E0      1213            push    acc
02F3 74AD      1214            mov     a,#(__str_1 >> 8)
02F5 C0E0      1215            push    acc
02F7 7480      1216            mov     a,#0x80
02F9 C0E0      1217            push    acc
02FB 7418      1218            mov     a,#_display_LCD_buff_1_94
02FD C0E0      1219            push    acc
02FF 74A0      1220            mov     a,#(_display_LCD_buff_1_94 >> 8)
0301 C0E0      1221            push    acc
0303 7440      1222            mov     a,#0x40
0305 C0E0      1223            push    acc
0307 120100    1224            lcall   _sprintf
030A E581      1225            mov     a,sp
030C 24F6      1226            add     a,#0xf6
030E F581      1227            mov     sp,a
0310           1228   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:245: LCDprint(buff, 2, 1);
0310 75C802    1229            mov     _LCDprint_PARM_2,#0x02
0313 D298      1230            setb    _LCDprint_PARM_3
0315 90A018    1231            mov     dptr,#_display_LCD_buff_1_94
0318 75F040    1232            mov     b,#0x40
031B 020100    1233            ljmp    _LCDprint
031E           1234   ;------------------------------------------------------------
031E           1235   ;Allocation info for local variables in function 'turn_left'
031E           1236   ;------------------------------------------------------------
031E           1237   ;------------------------------------------------------------
031E           1238   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:249: void turn_left(void){
031E           1239   ;        -----------------------------------------
031E           1240   ;         function turn_left
031E           1241   ;        -----------------------------------------
031E           1242   _turn_left:
031E           1243   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:250: turn_timer = 0;
031E E4        1244            clr     a
031F F508      1245            mov     _turn_timer,a
0321 F509      1246            mov     (_turn_timer + 1),a
0323           1247   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:251: turn_time_update = 1;
0323 D228      1248            setb    _turn_time_update
0325           1249   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:252: while(1){
0325           1250   L017004?:
0325           1251   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:253: pwm_left = 20;
0325 758814    1252            mov     _pwm_left,#0x14
0328           1253   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:254: pwm_right = 100;
0328 754864    1254            mov     _pwm_right,#0x64
032B           1255   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:255: if(turn_timer == 2000){
032B 74D0      1256            mov     a,#0xD0
032D B50818    1257            cjne    a,_turn_timer,L017004?
0330 7407      1258            mov     a,#0x07
0332 B50918    1259            cjne    a,(_turn_timer + 1),L017004?
0335           1260   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:256: turn_time_update = 0;
0335 C228      1261            clr     _turn_time_update
0337           1262   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:257: turn_timer = 0;
0337 E4        1263            clr     a
0338 F508      1264            mov     _turn_timer,a
033A F509      1265            mov     (_turn_timer + 1),a
033C           1266   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:258: break;
033C 22        1267            ret
033D           1268   ;------------------------------------------------------------
033D           1269   ;Allocation info for local variables in function 'turn_right'
033D           1270   ;------------------------------------------------------------
033D           1271   ;------------------------------------------------------------
033D           1272   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:262: void turn_right(void){
033D           1273   ;        -----------------------------------------
033D           1274   ;         function turn_right
033D           1275   ;        -----------------------------------------
033D           1276   _turn_right:
033D           1277   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:263: turn_timer = 0;
033D E4        1278            clr     a
033E F508      1279            mov     _turn_timer,a
0340 F509      1280            mov     (_turn_timer + 1),a
0342           1281   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:264: turn_time_update = 1;
0342 D228      1282            setb    _turn_time_update
0344           1283   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:265: while(1){
0344           1284   L018004?:
0344           1285   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:266: pwm_left = 100;
0344 758864    1286            mov     _pwm_left,#0x64
0347           1287   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:267: pwm_right = 20;
0347 754814    1288            mov     _pwm_right,#0x14
034A           1289   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:268: if(turn_timer == 2000){
034A 74D0      1290            mov     a,#0xD0
034C B50858    1291            cjne    a,_turn_timer,L018004?
034F 7407      1292            mov     a,#0x07
0351 B50958    1293            cjne    a,(_turn_timer + 1),L018004?
0354           1294   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:269: turn_time_update = 0;
0354 C228      1295            clr     _turn_time_update
0356           1296   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:270: turn_timer = 0;
0356 E4        1297            clr     a
0357 F508      1298            mov     _turn_timer,a
0359 F509      1299            mov     (_turn_timer + 1),a
035B           1300   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:271: break;
035B 22        1301            ret
035C           1302   ;------------------------------------------------------------
035C           1303   ;Allocation info for local variables in function 'stop'
035C           1304   ;------------------------------------------------------------
035C           1305   ;------------------------------------------------------------
035C           1306   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:276: void stop(void){
035C           1307   ;        -----------------------------------------
035C           1308   ;         function stop
035C           1309   ;        -----------------------------------------
035C           1310   _stop:
035C           1311   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:277: while(1){
035C           1312   L019002?:
035C           1313   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:278: pwm_left = 0;
035C 758800    1314            mov     _pwm_left,#0x00
035F           1315   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:279: pwm_right = 0;
035F 754800    1316            mov     _pwm_right,#0x00
0362 8001      1317            sjmp    L019002?
0364           1318   ;------------------------------------------------------------
0364           1319   ;Allocation info for local variables in function 'execute'
0364           1320   ;------------------------------------------------------------
0364           1321   ;command                   Allocated to registers r2 r3 
0364           1322   ;------------------------------------------------------------
0364           1323   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:283: void execute(int command){
0364           1324   ;        -----------------------------------------
0364           1325   ;         function execute
0364           1326   ;        -----------------------------------------
0364           1327   _execute:
0364 AA82      1328            mov     r2,dpl
0366 AB83      1329            mov     r3,dph
0368           1330   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:284: switch(command){
0368 BA02D8    1331            cjne    r2,#0x02,L020014?
036B BB00D8    1332            cjne    r3,#0x00,L020014?
036E 8001      1333            sjmp    L020001?
0370           1334   L020014?:
0370 BA0358    1335            cjne    r2,#0x03,L020015?
0373 BB0058    1336            cjne    r3,#0x00,L020015?
0376 8001      1337            sjmp    L020002?
0378           1338   L020015?:
0378           1339   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:285: case 2:
0378 BA04D8    1340            cjne    r2,#0x04,L020008?
037B BB00D8    1341            cjne    r3,#0x00,L020008?
037E 8001      1342            sjmp    L020003?
0380           1343   L020001?:
0380           1344   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:286: turn_left();
0380 120100    1345            lcall   _turn_left
0383           1346   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:287: case 3:
0383           1347   L020002?:
0383           1348   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:288: turn_right();
0383 120100    1349            lcall   _turn_right
0386           1350   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:289: case 4:
0386           1351   L020003?:
0386           1352   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:290: if(start == 1){
0386           1353   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:291: start = 0;
0386 10D858    1354            jbc     _start,L020017?
0389 8001      1355            sjmp    L020005?
038B           1356   L020017?:
038B 22        1357            ret
038C           1358   L020005?:
038C           1359   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:294: stop();
038C           1360   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:296: }
038C 020100    1361            ljmp    _stop
038F           1362   L020008?:
038F 22        1363            ret
0390           1364   ;------------------------------------------------------------
0390           1365   ;Allocation info for local variables in function 'main'
0390           1366   ;------------------------------------------------------------
0390           1367   ;cor                       Allocated with name '_main_cor_1_112'
0390           1368   ;cur_error                 Allocated with name '_main_cur_error_1_112'
0390           1369   ;pre_error                 Allocated with name '_main_pre_error_1_112'
0390           1370   ;thresh                    Allocated to registers 
0390           1371   ;left                      Allocated to registers r2 r3 r4 r5 
0390           1372   ;right                     Allocated with name '_main_right_1_112'
0390           1373   ;line_sensor               Allocated with name '_main_line_sensor_1_112'
0390           1374   ;diff                      Allocated with name '_main_diff_1_112'
0390           1375   ;line_counter              Allocated with name '_main_line_counter_1_112'
0390           1376   ;command                   Allocated with name '_main_command_1_112'
0390           1377   ;state                     Allocated with name '_main_state_1_112'
0390           1378   ;------------------------------------------------------------
0390           1379   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:299: void main (void){
0390           1380   ;        -----------------------------------------
0390           1381   ;         function main
0390           1382   ;        -----------------------------------------
0390           1383   _main:
0390           1384   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:302: double cur_error =0;
0390           1385   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:307: double left = (AD1DAT1/255.0)*3.3;
0390 E4        1386            clr     a
0391 F5A8      1387            mov     _main_cur_error_1_112,a
0393 F5A9      1388            mov     (_main_cur_error_1_112 + 1),a
0395 F5AA      1389            mov     (_main_cur_error_1_112 + 2),a
0397 F5AB      1390            mov     (_main_cur_error_1_112 + 3),a
0399 E5D6      1391            mov     a,_AD1DAT1
039B           1392   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:308: double right = (AD1DAT2/255.0)*3.3;
039B E5D7      1393            mov     a,_AD1DAT2
039D           1394   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:309: double line_sensor = (AD1DAT3/255.0)*3.3;
039D E5F5      1395            mov     a,_AD1DAT3
039F           1396   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:313: int line_counter = 0;
039F           1397   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:314: int command = 0;
039F E4        1398            clr     a
03A0 F538      1399            mov     _main_line_counter_1_112,a
03A2 F539      1400            mov     (_main_line_counter_1_112 + 1),a
03A4 F588      1401            mov     _main_command_1_112,a
03A6 F589      1402            mov     (_main_command_1_112 + 1),a
03A8           1403   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:315: int state = 1;   
03A8 75D801    1404            mov     _main_state_1_112,#0x01
03AB E4        1405            clr     a
03AC F5D9      1406            mov     (_main_state_1_112 + 1),a
03AE           1407   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:318: InitPorts();
03AE 120100    1408            lcall   _InitPorts
03B1           1409   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:319: LCD_8BIT();
03B1 120100    1410            lcall   _LCD_8BIT
03B4           1411   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:320: InitSerialPort();
03B4 120100    1412            lcall   _InitSerialPort
03B7           1413   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:321: InitADC();
03B7 120100    1414            lcall   _InitADC
03BA           1415   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:322: InitTimer0();
03BA 120100    1416            lcall   _InitTimer0
03BD           1417   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:325: pre_error = 0;
03BD 75F800    1418            mov     _main_pre_error_1_112,#0x00
03C0 75F900    1419            mov     (_main_pre_error_1_112 + 1),#0x00
03C3 75FA00    1420            mov     (_main_pre_error_1_112 + 2),#0x00
03C6 75FB00    1421            mov     (_main_pre_error_1_112 + 3),#0x00
03C9           1422   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:326: while(1)
03C9           1423   L021036?:
03C9           1424   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:336: left = (AD1DAT1/255.0)*3.3;
03C9 85D682    1425            mov     dpl,_AD1DAT1
03CC 120100    1426            lcall   ___uchar2fs
03CF AE82      1427            mov     r6,dpl
03D1 AF83      1428            mov     r7,dph
03D3 AAF0      1429            mov     r2,b
03D5 FB        1430            mov     r3,a
03D6 E4        1431            clr     a
03D7 C0E0      1432            push    acc
03D9 C0E0      1433            push    acc
03DB 747F      1434            mov     a,#0x7F
03DD C0E0      1435            push    acc
03DF 7443      1436            mov     a,#0x43
03E1 C0E0      1437            push    acc
03E3 8E82      1438            mov     dpl,r6
03E5 8F83      1439            mov     dph,r7
03E7 8AF0      1440            mov     b,r2
03E9 EB        1441            mov     a,r3
03EA 120100    1442            lcall   ___fsdiv
03ED AA82      1443            mov     r2,dpl
03EF AB83      1444            mov     r3,dph
03F1 ACF0      1445            mov     r4,b
03F3 FD        1446            mov     r5,a
03F4 E581      1447            mov     a,sp
03F6 24FC      1448            add     a,#0xfc
03F8 F581      1449            mov     sp,a
03FA C002      1450            push    ar2
03FC C003      1451            push    ar3
03FE C004      1452            push    ar4
0400 C005      1453            push    ar5
0402 903333    1454            mov     dptr,#0x3333
0405 75F053    1455            mov     b,#0x53
0408 7440      1456            mov     a,#0x40
040A 120100    1457            lcall   ___fsmul
040D AA82      1458            mov     r2,dpl
040F AB83      1459            mov     r3,dph
0411 ACF0      1460            mov     r4,b
0413 FD        1461            mov     r5,a
0414 E581      1462            mov     a,sp
0416 24FC      1463            add     a,#0xfc
0418 F581      1464            mov     sp,a
041A           1465   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:337: right = (AD1DAT2/255.0)*3.3;
041A 85D782    1466            mov     dpl,_AD1DAT2
041D C002      1467            push    ar2
041F C003      1468            push    ar3
0421 C004      1469            push    ar4
0423 C005      1470            push    ar5
0425 120100    1471            lcall   ___uchar2fs
0428 AE82      1472            mov     r6,dpl
042A AF83      1473            mov     r7,dph
042C A8F0      1474            mov     r0,b
042E F9        1475            mov     r1,a
042F E4        1476            clr     a
0430 C0E0      1477            push    acc
0432 C0E0      1478            push    acc
0434 747F      1479            mov     a,#0x7F
0436 C0E0      1480            push    acc
0438 7443      1481            mov     a,#0x43
043A C0E0      1482            push    acc
043C 8E82      1483            mov     dpl,r6
043E 8F83      1484            mov     dph,r7
0440 88F0      1485            mov     b,r0
0442 E9        1486            mov     a,r1
0443 120100    1487            lcall   ___fsdiv
0446 AE82      1488            mov     r6,dpl
0448 AF83      1489            mov     r7,dph
044A A8F0      1490            mov     r0,b
044C F9        1491            mov     r1,a
044D E581      1492            mov     a,sp
044F 24FC      1493            add     a,#0xfc
0451 F581      1494            mov     sp,a
0453 C006      1495            push    ar6
0455 C007      1496            push    ar7
0457 C000      1497            push    ar0
0459 C001      1498            push    ar1
045B 903333    1499            mov     dptr,#0x3333
045E 75F053    1500            mov     b,#0x53
0461 7440      1501            mov     a,#0x40
0463 120100    1502            lcall   ___fsmul
0466 858248    1503            mov     _main_right_1_112,dpl
0469 858349    1504            mov     (_main_right_1_112 + 1),dph
046C 85F04A    1505            mov     (_main_right_1_112 + 2),b
046F F54B      1506            mov     (_main_right_1_112 + 3),a
0471 E581      1507            mov     a,sp
0473 24FC      1508            add     a,#0xfc
0475 F581      1509            mov     sp,a
0477           1510   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:338: line_sensor = (AD1DAT3/255.0)*3.3;
0477 85F582    1511            mov     dpl,_AD1DAT3
047A 120100    1512            lcall   ___uchar2fs
047D AE82      1513            mov     r6,dpl
047F AF83      1514            mov     r7,dph
0481 A8F0      1515            mov     r0,b
0483 F9        1516            mov     r1,a
0484 E4        1517            clr     a
0485 C0E0      1518            push    acc
0487 C0E0      1519            push    acc
0489 747F      1520            mov     a,#0x7F
048B C0E0      1521            push    acc
048D 7443      1522            mov     a,#0x43
048F C0E0      1523            push    acc
0491 8E82      1524            mov     dpl,r6
0493 8F83      1525            mov     dph,r7
0495 88F0      1526            mov     b,r0
0497 E9        1527            mov     a,r1
0498 120100    1528            lcall   ___fsdiv
049B AE82      1529            mov     r6,dpl
049D AF83      1530            mov     r7,dph
049F A8F0      1531            mov     r0,b
04A1 F9        1532            mov     r1,a
04A2 E581      1533            mov     a,sp
04A4 24FC      1534            add     a,#0xfc
04A6 F581      1535            mov     sp,a
04A8 C006      1536            push    ar6
04AA C007      1537            push    ar7
04AC C000      1538            push    ar0
04AE C001      1539            push    ar1
04B0 903333    1540            mov     dptr,#0x3333
04B3 75F053    1541            mov     b,#0x53
04B6 7440      1542            mov     a,#0x40
04B8 120100    1543            lcall   ___fsmul
04BB 858298    1544            mov     _main_line_sensor_1_112,dpl
04BE 858399    1545            mov     (_main_line_sensor_1_112 + 1),dph
04C1 85F09A    1546            mov     (_main_line_sensor_1_112 + 2),b
04C4 F59B      1547            mov     (_main_line_sensor_1_112 + 3),a
04C6 E581      1548            mov     a,sp
04C8 24FC      1549            add     a,#0xfc
04CA F581      1550            mov     sp,a
04CC D005      1551            pop     ar5
04CE D004      1552            pop     ar4
04D0 D003      1553            pop     ar3
04D2 D002      1554            pop     ar2
04D4           1555   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:339: diff = left - right;
04D4 C002      1556            push    ar2
04D6 C003      1557            push    ar3
04D8 C004      1558            push    ar4
04DA C005      1559            push    ar5
04DC C048      1560            push    _main_right_1_112
04DE C049      1561            push    (_main_right_1_112 + 1)
04E0 C04A      1562            push    (_main_right_1_112 + 2)
04E2 C04B      1563            push    (_main_right_1_112 + 3)
04E4 8A82      1564            mov     dpl,r2
04E6 8B83      1565            mov     dph,r3
04E8 8CF0      1566            mov     b,r4
04EA ED        1567            mov     a,r5
04EB 120100    1568            lcall   ___fssub
04EE 8582E8    1569            mov     _main_diff_1_112,dpl
04F1 8583E9    1570            mov     (_main_diff_1_112 + 1),dph
04F4 85F0EA    1571            mov     (_main_diff_1_112 + 2),b
04F7 F5EB      1572            mov     (_main_diff_1_112 + 3),a
04F9 E581      1573            mov     a,sp
04FB 24FC      1574            add     a,#0xfc
04FD F581      1575            mov     sp,a
04FF D005      1576            pop     ar5
0501 D004      1577            pop     ar4
0503 D003      1578            pop     ar3
0505 D002      1579            pop     ar2
0507           1580   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:342: if(time_update_flag==1) // If the clock has been updated, refresh the display
0507 307858    1581            jnb     _time_update_flag,L021002?
050A           1582   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:344: display_LCD();
050A C002      1583            push    ar2
050C C003      1584            push    ar3
050E C004      1585            push    ar4
0510 C005      1586            push    ar5
0512 120100    1587            lcall   _display_LCD
0515 D005      1588            pop     ar5
0517 D004      1589            pop     ar4
0519 D003      1590            pop     ar3
051B D002      1591            pop     ar2
051D           1592   L021002?:
051D           1593   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:348: cor = KP * cur_error + KD*(cur_error - pre_error);
051D C002      1594            push    ar2
051F C003      1595            push    ar3
0521 C004      1596            push    ar4
0523 C005      1597            push    ar5
0525 C0A8      1598            push    _main_cur_error_1_112
0527 C0A9      1599            push    (_main_cur_error_1_112 + 1)
0529 C0AA      1600            push    (_main_cur_error_1_112 + 2)
052B C0AB      1601            push    (_main_cur_error_1_112 + 3)
052D 900000    1602            mov     dptr,#0x0000
0530 75F0C8    1603            mov     b,#0xC8
0533 7441      1604            mov     a,#0x41
0535 120100    1605            lcall   ___fsmul
0538 858258    1606            mov     _main_cor_1_112,dpl
053B 858359    1607            mov     (_main_cor_1_112 + 1),dph
053E 85F05A    1608            mov     (_main_cor_1_112 + 2),b
0541 F55B      1609            mov     (_main_cor_1_112 + 3),a
0543 E581      1610            mov     a,sp
0545 24FC      1611            add     a,#0xfc
0547 F581      1612            mov     sp,a
0549 D005      1613            pop     ar5
054B D004      1614            pop     ar4
054D D003      1615            pop     ar3
054F D002      1616            pop     ar2
0551           1617   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:350: if((0.4 < left) && (left < 0.7) && (0.4 < right) && (right < 0.7)){
0551 C002      1618            push    ar2
0553 C003      1619            push    ar3
0555 C004      1620            push    ar4
0557 C005      1621            push    ar5
0559 C002      1622            push    ar2
055B C003      1623            push    ar3
055D C004      1624            push    ar4
055F C005      1625            push    ar5
0561 90CCCD    1626            mov     dptr,#0xCCCD
0564 75F0CC    1627            mov     b,#0xCC
0567 743E      1628            mov     a,#0x3E
0569 120100    1629            lcall   ___fslt
056C AE82      1630            mov     r6,dpl
056E E581      1631            mov     a,sp
0570 24FC      1632            add     a,#0xfc
0572 F581      1633            mov     sp,a
0574 D005      1634            pop     ar5
0576 D004      1635            pop     ar4
0578 D003      1636            pop     ar3
057A D002      1637            pop     ar2
057C EE        1638            mov     a,r6
057D 7001      1639            jnz     L021061?
057F 020100    1640            ljmp    L021004?
0582           1641   L021061?:
0582 C002      1642            push    ar2
0584 C003      1643            push    ar3
0586 C004      1644            push    ar4
0588 C005      1645            push    ar5
058A 7433      1646            mov     a,#0x33
058C C0E0      1647            push    acc
058E C0E0      1648            push    acc
0590 C0E0      1649            push    acc
0592 743F      1650            mov     a,#0x3F
0594 C0E0      1651            push    acc
0596 8A82      1652            mov     dpl,r2
0598 8B83      1653            mov     dph,r3
059A 8CF0      1654            mov     b,r4
059C ED        1655            mov     a,r5
059D 120100    1656            lcall   ___fslt
05A0 AE82      1657            mov     r6,dpl
05A2 E581      1658            mov     a,sp
05A4 24FC      1659            add     a,#0xfc
05A6 F581      1660            mov     sp,a
05A8 D005      1661            pop     ar5
05AA D004      1662            pop     ar4
05AC D003      1663            pop     ar3
05AE D002      1664            pop     ar2
05B0 EE        1665            mov     a,r6
05B1 6001      1666            jz      L021004?
05B3 C002      1667            push    ar2
05B5 C003      1668            push    ar3
05B7 C004      1669            push    ar4
05B9 C005      1670            push    ar5
05BB C048      1671            push    _main_right_1_112
05BD C049      1672            push    (_main_right_1_112 + 1)
05BF C04A      1673            push    (_main_right_1_112 + 2)
05C1 C04B      1674            push    (_main_right_1_112 + 3)
05C3 90CCCD    1675            mov     dptr,#0xCCCD
05C6 75F0CC    1676            mov     b,#0xCC
05C9 743E      1677            mov     a,#0x3E
05CB 120100    1678            lcall   ___fslt
05CE AE82      1679            mov     r6,dpl
05D0 E581      1680            mov     a,sp
05D2 24FC      1681            add     a,#0xfc
05D4 F581      1682            mov     sp,a
05D6 D005      1683            pop     ar5
05D8 D004      1684            pop     ar4
05DA D003      1685            pop     ar3
05DC D002      1686            pop     ar2
05DE EE        1687            mov     a,r6
05DF 6001      1688            jz      L021004?
05E1 C002      1689            push    ar2
05E3 C003      1690            push    ar3
05E5 C004      1691            push    ar4
05E7 C005      1692            push    ar5
05E9 7433      1693            mov     a,#0x33
05EB C0E0      1694            push    acc
05ED C0E0      1695            push    acc
05EF C0E0      1696            push    acc
05F1 743F      1697            mov     a,#0x3F
05F3 C0E0      1698            push    acc
05F5 854882    1699            mov     dpl,_main_right_1_112
05F8 854983    1700            mov     dph,(_main_right_1_112 + 1)
05FB 854AF0    1701            mov     b,(_main_right_1_112 + 2)
05FE E54B      1702            mov     a,(_main_right_1_112 + 3)
0600 120100    1703            lcall   ___fslt
0603 AE82      1704            mov     r6,dpl
0605 E581      1705            mov     a,sp
0607 24FC      1706            add     a,#0xfc
0609 F581      1707            mov     sp,a
060B D005      1708            pop     ar5
060D D004      1709            pop     ar4
060F D003      1710            pop     ar3
0611 D002      1711            pop     ar2
0613 EE        1712            mov     a,r6
0614 6001      1713            jz      L021004?
0616           1714   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:351: cur_error = 0;
0616 75A800    1715            mov     _main_cur_error_1_112,#0x00
0619 75A900    1716            mov     (_main_cur_error_1_112 + 1),#0x00
061C 75AA00    1717            mov     (_main_cur_error_1_112 + 2),#0x00
061F 75AB00    1718            mov     (_main_cur_error_1_112 + 3),#0x00
0622           1719   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:352: pwm_left = 100;
0622 758864    1720            mov     _pwm_left,#0x64
0625           1721   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:353: pwm_right = 100;
0625 754864    1722            mov     _pwm_right,#0x64
0628           1723   L021004?:
0628           1724   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:355: if(0.5<diff){    
0628 C002      1725            push    ar2
062A C003      1726            push    ar3
062C C004      1727            push    ar4
062E C005      1728            push    ar5
0630 C0E8      1729            push    _main_diff_1_112
0632 C0E9      1730            push    (_main_diff_1_112 + 1)
0634 C0EA      1731            push    (_main_diff_1_112 + 2)
0636 C0EB      1732            push    (_main_diff_1_112 + 3)
0638 900000    1733            mov     dptr,#(0x00&0x00ff)
063B E4        1734            clr     a
063C F5F0      1735            mov     b,a
063E 743F      1736            mov     a,#0x3F
0640 120100    1737            lcall   ___fslt
0643 AE82      1738            mov     r6,dpl
0645 E581      1739            mov     a,sp
0647 24FC      1740            add     a,#0xfc
0649 F581      1741            mov     sp,a
064B D005      1742            pop     ar5
064D D004      1743            pop     ar4
064F D003      1744            pop     ar3
0651 D002      1745            pop     ar2
0653 EE        1746            mov     a,r6
0654 6001      1747            jz      L021009?
0656           1748   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:356: cur_error = 3;
0656 75A800    1749            mov     _main_cur_error_1_112,#0x00
0659 75A900    1750            mov     (_main_cur_error_1_112 + 1),#0x00
065C 75AA40    1751            mov     (_main_cur_error_1_112 + 2),#0x40
065F 75AB40    1752            mov     (_main_cur_error_1_112 + 3),#0x40
0662           1753   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:357: pwm_left = 100 - cor;
0662 C002      1754            push    ar2
0664 C003      1755            push    ar3
0666 C004      1756            push    ar4
0668 C005      1757            push    ar5
066A C058      1758            push    _main_cor_1_112
066C C059      1759            push    (_main_cor_1_112 + 1)
066E C05A      1760            push    (_main_cor_1_112 + 2)
0670 C05B      1761            push    (_main_cor_1_112 + 3)
0672 900000    1762            mov     dptr,#0x0000
0675 75F0C8    1763            mov     b,#0xC8
0678 7442      1764            mov     a,#0x42
067A 120100    1765            lcall   ___fssub
067D AE82      1766            mov     r6,dpl
067F AF83      1767            mov     r7,dph
0681 A8F0      1768            mov     r0,b
0683 F9        1769            mov     r1,a
0684 E581      1770            mov     a,sp
0686 24FC      1771            add     a,#0xfc
0688 F581      1772            mov     sp,a
068A 8E82      1773            mov     dpl,r6
068C 8F83      1774            mov     dph,r7
068E 88F0      1775            mov     b,r0
0690 E9        1776            mov     a,r1
0691 120100    1777            lcall   ___fs2uchar
0694 858288    1778            mov     _pwm_left,dpl
0697 D005      1779            pop     ar5
0699 D004      1780            pop     ar4
069B D003      1781            pop     ar3
069D D002      1782            pop     ar2
069F           1783   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:358: pwm_right = 100;
069F 754864    1784            mov     _pwm_right,#0x64
06A2           1785   L021009?:
06A2           1786   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:360: if(diff<-0.5){
06A2 C002      1787            push    ar2
06A4 C003      1788            push    ar3
06A6 C004      1789            push    ar4
06A8 C005      1790            push    ar5
06AA E4        1791            clr     a
06AB C0E0      1792            push    acc
06AD C0E0      1793            push    acc
06AF C0E0      1794            push    acc
06B1 74BF      1795            mov     a,#0xBF
06B3 C0E0      1796            push    acc
06B5 85E882    1797            mov     dpl,_main_diff_1_112
06B8 85E983    1798            mov     dph,(_main_diff_1_112 + 1)
06BB 85EAF0    1799            mov     b,(_main_diff_1_112 + 2)
06BE E5EB      1800            mov     a,(_main_diff_1_112 + 3)
06C0 120100    1801            lcall   ___fslt
06C3 AE82      1802            mov     r6,dpl
06C5 E581      1803            mov     a,sp
06C7 24FC      1804            add     a,#0xfc
06C9 F581      1805            mov     sp,a
06CB D005      1806            pop     ar5
06CD D004      1807            pop     ar4
06CF D003      1808            pop     ar3
06D1 D002      1809            pop     ar2
06D3 EE        1810            mov     a,r6
06D4 6001      1811            jz      L021011?
06D6           1812   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:361: cur_error= -3;
06D6 75A800    1813            mov     _main_cur_error_1_112,#0x00
06D9 75A900    1814            mov     (_main_cur_error_1_112 + 1),#0x00
06DC 75AA40    1815            mov     (_main_cur_error_1_112 + 2),#0x40
06DF 75ABC0    1816            mov     (_main_cur_error_1_112 + 3),#0xC0
06E2           1817   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:362: pwm_left = 100;
06E2 758864    1818            mov     _pwm_left,#0x64
06E5           1819   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:363: pwm_right = 100 + cor;
06E5 C002      1820            push    ar2
06E7 C003      1821            push    ar3
06E9 C004      1822            push    ar4
06EB C005      1823            push    ar5
06ED E4        1824            clr     a
06EE C0E0      1825            push    acc
06F0 C0E0      1826            push    acc
06F2 74C8      1827            mov     a,#0xC8
06F4 C0E0      1828            push    acc
06F6 7442      1829            mov     a,#0x42
06F8 C0E0      1830            push    acc
06FA 855882    1831            mov     dpl,_main_cor_1_112
06FD 855983    1832            mov     dph,(_main_cor_1_112 + 1)
0700 855AF0    1833            mov     b,(_main_cor_1_112 + 2)
0703 E55B      1834            mov     a,(_main_cor_1_112 + 3)
0705 120100    1835            lcall   ___fsadd
0708 AE82      1836            mov     r6,dpl
070A AF83      1837            mov     r7,dph
070C A8F0      1838            mov     r0,b
070E F9        1839            mov     r1,a
070F E581      1840            mov     a,sp
0711 24FC      1841            add     a,#0xfc
0713 F581      1842            mov     sp,a
0715 8E82      1843            mov     dpl,r6
0717 8F83      1844            mov     dph,r7
0719 88F0      1845            mov     b,r0
071B E9        1846            mov     a,r1
071C 120100    1847            lcall   ___fs2uchar
071F 858248    1848            mov     _pwm_right,dpl
0722 D005      1849            pop     ar5
0724 D004      1850            pop     ar4
0726 D003      1851            pop     ar3
0728 D002      1852            pop     ar2
072A           1853   L021011?:
072A           1854   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:366: if((left < 0.4) || (right < 0.4)){
072A C002      1855            push    ar2
072C C003      1856            push    ar3
072E C004      1857            push    ar4
0730 C005      1858            push    ar5
0732 74CD      1859            mov     a,#0xCD
0734 C0E0      1860            push    acc
0736 74CC      1861            mov     a,#0xCC
0738 C0E0      1862            push    acc
073A C0E0      1863            push    acc
073C 743E      1864            mov     a,#0x3E
073E C0E0      1865            push    acc
0740 8A82      1866            mov     dpl,r2
0742 8B83      1867            mov     dph,r3
0744 8CF0      1868            mov     b,r4
0746 ED        1869            mov     a,r5
0747 120100    1870            lcall   ___fslt
074A AE82      1871            mov     r6,dpl
074C E581      1872            mov     a,sp
074E 24FC      1873            add     a,#0xfc
0750 F581      1874            mov     sp,a
0752 D005      1875            pop     ar5
0754 D004      1876            pop     ar4
0756 D003      1877            pop     ar3
0758 D002      1878            pop     ar2
075A EE        1879            mov     a,r6
075B 7001      1880            jnz     L021016?
075D C002      1881            push    ar2
075F C003      1882            push    ar3
0761 C004      1883            push    ar4
0763 C005      1884            push    ar5
0765 74CD      1885            mov     a,#0xCD
0767 C0E0      1886            push    acc
0769 74CC      1887            mov     a,#0xCC
076B C0E0      1888            push    acc
076D C0E0      1889            push    acc
076F 743E      1890            mov     a,#0x3E
0771 C0E0      1891            push    acc
0773 854882    1892            mov     dpl,_main_right_1_112
0776 854983    1893            mov     dph,(_main_right_1_112 + 1)
0779 854AF0    1894            mov     b,(_main_right_1_112 + 2)
077C E54B      1895            mov     a,(_main_right_1_112 + 3)
077E 120100    1896            lcall   ___fslt
0781 AE82      1897            mov     r6,dpl
0783 E581      1898            mov     a,sp
0785 24FC      1899            add     a,#0xfc
0787 F581      1900            mov     sp,a
0789 D005      1901            pop     ar5
078B D004      1902            pop     ar4
078D D003      1903            pop     ar3
078F D002      1904            pop     ar2
0791 EE        1905            mov     a,r6
0792 7001      1906            jnz     L021068?
0794 020100    1907            ljmp    L021017?
0797           1908   L021068?:
0797           1909   L021016?:
0797           1910   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:367: if(pre_error>0){
0797 C002      1911            push    ar2
0799 C003      1912            push    ar3
079B C004      1913            push    ar4
079D C005      1914            push    ar5
079F E4        1915            clr     a
07A0 C0E0      1916            push    acc
07A2 C0E0      1917            push    acc
07A4 C0E0      1918            push    acc
07A6 C0E0      1919            push    acc
07A8 85F882    1920            mov     dpl,_main_pre_error_1_112
07AB 85F983    1921            mov     dph,(_main_pre_error_1_112 + 1)
07AE 85FAF0    1922            mov     b,(_main_pre_error_1_112 + 2)
07B1 E5FB      1923            mov     a,(_main_pre_error_1_112 + 3)
07B3 120100    1924            lcall   ___fsgt
07B6 AE82      1925            mov     r6,dpl
07B8 E581      1926            mov     a,sp
07BA 24FC      1927            add     a,#0xfc
07BC F581      1928            mov     sp,a
07BE D005      1929            pop     ar5
07C0 D004      1930            pop     ar4
07C2 D003      1931            pop     ar3
07C4 D002      1932            pop     ar2
07C6 EE        1933            mov     a,r6
07C7 6001      1934            jz      L021013?
07C9           1935   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:368: cur_error = 5;
07C9 75A800    1936            mov     _main_cur_error_1_112,#0x00
07CC 75A900    1937            mov     (_main_cur_error_1_112 + 1),#0x00
07CF 75AAA0    1938            mov     (_main_cur_error_1_112 + 2),#0xA0
07D2 75AB40    1939            mov     (_main_cur_error_1_112 + 3),#0x40
07D5           1940   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:369: pwm_left = 100 - cor;
07D5 C002      1941            push    ar2
07D7 C003      1942            push    ar3
07D9 C004      1943            push    ar4
07DB C005      1944            push    ar5
07DD C058      1945            push    _main_cor_1_112
07DF C059      1946            push    (_main_cor_1_112 + 1)
07E1 C05A      1947            push    (_main_cor_1_112 + 2)
07E3 C05B      1948            push    (_main_cor_1_112 + 3)
07E5 900000    1949            mov     dptr,#0x0000
07E8 75F0C8    1950            mov     b,#0xC8
07EB 7442      1951            mov     a,#0x42
07ED 120100    1952            lcall   ___fssub
07F0 AE82      1953            mov     r6,dpl
07F2 AF83      1954            mov     r7,dph
07F4 A8F0      1955            mov     r0,b
07F6 F9        1956            mov     r1,a
07F7 E581      1957            mov     a,sp
07F9 24FC      1958            add     a,#0xfc
07FB F581      1959            mov     sp,a
07FD 8E82      1960            mov     dpl,r6
07FF 8F83      1961            mov     dph,r7
0801 88F0      1962            mov     b,r0
0803 E9        1963            mov     a,r1
0804 120100    1964            lcall   ___fs2uchar
0807 858288    1965            mov     _pwm_left,dpl
080A D005      1966            pop     ar5
080C D004      1967            pop     ar4
080E D003      1968            pop     ar3
0810 D002      1969            pop     ar2
0812           1970   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:370: pwm_right = 100;
0812 754864    1971            mov     _pwm_right,#0x64
0815           1972   L021013?:
0815           1973   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:372: if(pre_error < 0){
0815 C002      1974            push    ar2
0817 C003      1975            push    ar3
0819 C004      1976            push    ar4
081B C005      1977            push    ar5
081D E4        1978            clr     a
081E C0E0      1979            push    acc
0820 C0E0      1980            push    acc
0822 C0E0      1981            push    acc
0824 C0E0      1982            push    acc
0826 85F882    1983            mov     dpl,_main_pre_error_1_112
0829 85F983    1984            mov     dph,(_main_pre_error_1_112 + 1)
082C 85FAF0    1985            mov     b,(_main_pre_error_1_112 + 2)
082F E5FB      1986            mov     a,(_main_pre_error_1_112 + 3)
0831 120100    1987            lcall   ___fslt
0834 AE82      1988            mov     r6,dpl
0836 E581      1989            mov     a,sp
0838 24FC      1990            add     a,#0xfc
083A F581      1991            mov     sp,a
083C D005      1992            pop     ar5
083E D004      1993            pop     ar4
0840 D003      1994            pop     ar3
0842 D002      1995            pop     ar2
0844 EE        1996            mov     a,r6
0845 6001      1997            jz      L021017?
0847           1998   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:373: cur_error = -5;
0847 75A800    1999            mov     _main_cur_error_1_112,#0x00
084A 75A900    2000            mov     (_main_cur_error_1_112 + 1),#0x00
084D 75AAA0    2001            mov     (_main_cur_error_1_112 + 2),#0xA0
0850 75ABC0    2002            mov     (_main_cur_error_1_112 + 3),#0xC0
0853           2003   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:374: pwm_left = 100;
0853 758864    2004            mov     _pwm_left,#0x64
0856           2005   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:375: pwm_right = 100 + cor;
0856 C002      2006            push    ar2
0858 C003      2007            push    ar3
085A C004      2008            push    ar4
085C C005      2009            push    ar5
085E E4        2010            clr     a
085F C0E0      2011            push    acc
0861 C0E0      2012            push    acc
0863 74C8      2013            mov     a,#0xC8
0865 C0E0      2014            push    acc
0867 7442      2015            mov     a,#0x42
0869 C0E0      2016            push    acc
086B 855882    2017            mov     dpl,_main_cor_1_112
086E 855983    2018            mov     dph,(_main_cor_1_112 + 1)
0871 855AF0    2019            mov     b,(_main_cor_1_112 + 2)
0874 E55B      2020            mov     a,(_main_cor_1_112 + 3)
0876 120100    2021            lcall   ___fsadd
0879 AE82      2022            mov     r6,dpl
087B AF83      2023            mov     r7,dph
087D A8F0      2024            mov     r0,b
087F F9        2025            mov     r1,a
0880 E581      2026            mov     a,sp
0882 24FC      2027            add     a,#0xfc
0884 F581      2028            mov     sp,a
0886 8E82      2029            mov     dpl,r6
0888 8F83      2030            mov     dph,r7
088A 88F0      2031            mov     b,r0
088C E9        2032            mov     a,r1
088D 120100    2033            lcall   ___fs2uchar
0890 858248    2034            mov     _pwm_right,dpl
0893 D005      2035            pop     ar5
0895 D004      2036            pop     ar4
0897 D003      2037            pop     ar3
0899 D002      2038            pop     ar2
089B           2039   L021017?:
089B           2040   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:378: pre_error = cur_error;
089B 85A8F8    2041            mov     _main_pre_error_1_112,_main_cur_error_1_112
089E 85A9F9    2042            mov     (_main_pre_error_1_112 + 1),(_main_cur_error_1_112 + 1)
08A1 85AAFA    2043            mov     (_main_pre_error_1_112 + 2),(_main_cur_error_1_112 + 2)
08A4 85ABFB    2044            mov     (_main_pre_error_1_112 + 3),(_main_cur_error_1_112 + 3)
08A7           2045   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:379: printf("Error:%5.2f Left:%5.2f Right:%5.2f Left_Motor:%d Right_Motor:%d                \r", cur_error, left, right, pwm_left, pwm_right);
08A7 AE48      2046            mov     r6,_pwm_right
08A9 7F00      2047            mov     r7,#0x00
08AB A888      2048            mov     r0,_pwm_left
08AD 7900      2049            mov     r1,#0x00
08AF C006      2050            push    ar6
08B1 C007      2051            push    ar7
08B3 C000      2052            push    ar0
08B5 C001      2053            push    ar1
08B7 C048      2054            push    _main_right_1_112
08B9 C049      2055            push    (_main_right_1_112 + 1)
08BB C04A      2056            push    (_main_right_1_112 + 2)
08BD C04B      2057            push    (_main_right_1_112 + 3)
08BF C002      2058            push    ar2
08C1 C003      2059            push    ar3
08C3 C004      2060            push    ar4
08C5 C005      2061            push    ar5
08C7 C0A8      2062            push    _main_cur_error_1_112
08C9 C0A9      2063            push    (_main_cur_error_1_112 + 1)
08CB C0AA      2064            push    (_main_cur_error_1_112 + 2)
08CD C0AB      2065            push    (_main_cur_error_1_112 + 3)
08CF 7498      2066            mov     a,#__str_2
08D1 C0E0      2067            push    acc
08D3 74B4      2068            mov     a,#(__str_2 >> 8)
08D5 C0E0      2069            push    acc
08D7 7480      2070            mov     a,#0x80
08D9 C0E0      2071            push    acc
08DB 120100    2072            lcall   _printf
08DE E581      2073            mov     a,sp
08E0 24ED      2074            add     a,#0xed
08E2 F581      2075            mov     sp,a
08E4           2076   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:382: switch(state){
08E4 7401      2077            mov     a,#0x01
08E6 B5D818    2078            cjne    a,_main_state_1_112,L021071?
08E9 E4        2079            clr     a
08EA B5D918    2080            cjne    a,(_main_state_1_112 + 1),L021071?
08ED 8001      2081            sjmp    L021019?
08EF           2082   L021071?:
08EF 7402      2083            mov     a,#0x02
08F1 B5D898    2084            cjne    a,_main_state_1_112,L021072?
08F4 E4        2085            clr     a
08F5 B5D998    2086            cjne    a,(_main_state_1_112 + 1),L021072?
08F8 8001      2087            sjmp    L021022?
08FA           2088   L021072?:
08FA 7403      2089            mov     a,#0x03
08FC B5D818    2090            cjne    a,_main_state_1_112,L021073?
08FF E4        2091            clr     a
0900 B5D918    2092            cjne    a,(_main_state_1_112 + 1),L021073?
0903 020100    2093            ljmp    L021026?
0906           2094   L021073?:
0906 7404      2095            mov     a,#0x04
0908 B5D898    2096            cjne    a,_main_state_1_112,L021074?
090B E4        2097            clr     a
090C B5D998    2098            cjne    a,(_main_state_1_112 + 1),L021074?
090F 020100    2099            ljmp    L021033?
0912           2100   L021074?:
0912 020100    2101            ljmp    L021036?
0915           2102   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:383: case 1:
0915           2103   L021019?:
0915           2104   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:384: if(line_sensor >= HI_THRESH){
0915 E4        2105            clr     a
0916 C0E0      2106            push    acc
0918 C0E0      2107            push    acc
091A 7420      2108            mov     a,#0x20
091C C0E0      2109            push    acc
091E 7441      2110            mov     a,#0x41
0920 C0E0      2111            push    acc
0922 859882    2112            mov     dpl,_main_line_sensor_1_112
0925 859983    2113            mov     dph,(_main_line_sensor_1_112 + 1)
0928 859AF0    2114            mov     b,(_main_line_sensor_1_112 + 2)
092B E59B      2115            mov     a,(_main_line_sensor_1_112 + 3)
092D 120100    2116            lcall   ___fslt
0930 AA82      2117            mov     r2,dpl
0932 E581      2118            mov     a,sp
0934 24FC      2119            add     a,#0xfc
0936 F581      2120            mov     sp,a
0938 EA        2121            mov     a,r2
0939 6001      2122            jz      L021075?
093B 020100    2123            ljmp    L021036?
093E           2124   L021075?:
093E           2125   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:385: state = 2;
093E 75D802    2126            mov     _main_state_1_112,#0x02
0941 E4        2127            clr     a
0942 F5D9      2128            mov     (_main_state_1_112 + 1),a
0944           2129   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:387: break;                           
0944 020100    2130            ljmp    L021036?
0947           2131   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:388: case 2:
0947           2132   L021022?:
0947           2133   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:389: if((LO_THRESH<line_sensor)&&(line_sensor<MID_THRESH)){
0947 C098      2134            push    _main_line_sensor_1_112
0949 C099      2135            push    (_main_line_sensor_1_112 + 1)
094B C09A      2136            push    (_main_line_sensor_1_112 + 2)
094D C09B      2137            push    (_main_line_sensor_1_112 + 3)
094F 900000    2138            mov     dptr,#(0x00&0x00ff)
0952 E4        2139            clr     a
0953 F5F0      2140            mov     b,a
0955 120100    2141            lcall   ___fslt
0958 AA82      2142            mov     r2,dpl
095A E581      2143            mov     a,sp
095C 24FC      2144            add     a,#0xfc
095E F581      2145            mov     sp,a
0960 EA        2146            mov     a,r2
0961 7001      2147            jnz     L021076?
0963 020100    2148            ljmp    L021036?
0966           2149   L021076?:
0966 E4        2150            clr     a
0967 C0E0      2151            push    acc
0969 C0E0      2152            push    acc
096B 74A0      2153            mov     a,#0xA0
096D C0E0      2154            push    acc
096F 7440      2155            mov     a,#0x40
0971 C0E0      2156            push    acc
0973 859882    2157            mov     dpl,_main_line_sensor_1_112
0976 859983    2158            mov     dph,(_main_line_sensor_1_112 + 1)
0979 859AF0    2159            mov     b,(_main_line_sensor_1_112 + 2)
097C E59B      2160            mov     a,(_main_line_sensor_1_112 + 3)
097E 120100    2161            lcall   ___fslt
0981 AA82      2162            mov     r2,dpl
0983 E581      2163            mov     a,sp
0985 24FC      2164            add     a,#0xfc
0987 F581      2165            mov     sp,a
0989 EA        2166            mov     a,r2
098A 7001      2167            jnz     L021077?
098C 020100    2168            ljmp    L021036?
098F           2169   L021077?:
098F           2170   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:390: line_counter++;
098F 0538      2171            inc     _main_line_counter_1_112
0991 E4        2172            clr     a
0992 B538D8    2173            cjne    a,_main_line_counter_1_112,L021078?
0995 0539      2174            inc     (_main_line_counter_1_112 + 1)
0997           2175   L021078?:
0997           2176   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:391: state = 3;
0997 75D803    2177            mov     _main_state_1_112,#0x03
099A E4        2178            clr     a
099B F5D9      2179            mov     (_main_state_1_112 + 1),a
099D           2180   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:393: break;
099D 020100    2181            ljmp    L021036?
09A0           2182   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:394: case 3:
09A0           2183   L021026?:
09A0           2184   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:395: if(line_sensor<=LO_THRESH){
09A0 E4        2185            clr     a
09A1 C0E0      2186            push    acc
09A3 C0E0      2187            push    acc
09A5 C0E0      2188            push    acc
09A7 C0E0      2189            push    acc
09A9 859882    2190            mov     dpl,_main_line_sensor_1_112
09AC 859983    2191            mov     dph,(_main_line_sensor_1_112 + 1)
09AF 859AF0    2192            mov     b,(_main_line_sensor_1_112 + 2)
09B2 E59B      2193            mov     a,(_main_line_sensor_1_112 + 3)
09B4 120100    2194            lcall   ___fsgt
09B7 AA82      2195            mov     r2,dpl
09B9 E581      2196            mov     a,sp
09BB 24FC      2197            add     a,#0xfc
09BD F581      2198            mov     sp,a
09BF EA        2199            mov     a,r2
09C0 7001      2200            jnz     L021031?
09C2           2201   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:396: if(line_counter > 1){
09C2 C3        2202            clr     c
09C3 7401      2203            mov     a,#0x01
09C5 9538      2204            subb    a,_main_line_counter_1_112
09C7 E4        2205            clr     a
09C8 6480      2206            xrl     a,#0x80
09CA 8539F0    2207            mov     b,(_main_line_counter_1_112 + 1)
09CD 63F080    2208            xrl     b,#0x80
09D0 95F0      2209            subb    a,b
09D2 5001      2210            jnc     L021028?
09D4           2211   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:397: command = line_counter;
09D4 853888    2212            mov     _main_command_1_112,_main_line_counter_1_112
09D7 853989    2213            mov     (_main_command_1_112 + 1),(_main_line_counter_1_112 + 1)
09DA           2214   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:398: state = 1;
09DA 75D801    2215            mov     _main_state_1_112,#0x01
09DD E4        2216            clr     a
09DE F5D9      2217            mov     (_main_state_1_112 + 1),a
09E0 8001      2218            sjmp    L021029?
09E2           2219   L021028?:
09E2           2220   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:401: state = 4;
09E2 75D804    2221            mov     _main_state_1_112,#0x04
09E5 E4        2222            clr     a
09E6 F5D9      2223            mov     (_main_state_1_112 + 1),a
09E8           2224   L021029?:
09E8           2225   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:403: line_counter = 0;
09E8 E4        2226            clr     a
09E9 F538      2227            mov     _main_line_counter_1_112,a
09EB F539      2228            mov     (_main_line_counter_1_112 + 1),a
09ED 020100    2229            ljmp    L021036?
09F0           2230   L021031?:
09F0           2231   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:406: state = 1;
09F0 75D801    2232            mov     _main_state_1_112,#0x01
09F3 E4        2233            clr     a
09F4 F5D9      2234            mov     (_main_state_1_112 + 1),a
09F6           2235   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:407: break;
09F6 020100    2236            ljmp    L021036?
09F9           2237   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:408: case 4:
09F9           2238   L021033?:
09F9           2239   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:409: execute(command);
09F9 858882    2240            mov     dpl,_main_command_1_112
09FC 858983    2241            mov     dph,(_main_command_1_112 + 1)
09FF 120100    2242            lcall   _execute
0A02           2243   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:410: state = 1;
0A02 75D801    2244            mov     _main_state_1_112,#0x01
0A05 E4        2245            clr     a
0A06 F5D9      2246            mov     (_main_state_1_112 + 1),a
0A08           2247   ;        C:\Users\Saman\Documents\GitHub\eece_284\Code\main code.c:412: }
0A08 020100    2248            ljmp    L021036?
0A0B           2249            rseg R_CSEG
0A0B           2250   
0000           2251            rseg R_XINIT
0000           2252   
0000           2253            rseg R_CONST
0000           2254   __str_0:
0000 4C3D2535  2255            db 'L=%5.2f R:%5.2f'
     2E326620
     523A2535
     2E3266
000F 00        2256            db 0x00
0010           2257   __str_1:
0010 4C4D3D25  2258            db 'LM=%d RM=%d'
     6420524D
     3D2564
001B 00        2259            db 0x00
001C           2260   __str_2:
001C 4572726F  2261            db 'Error:%5.2f Left:%5.2f Right:%5.2f Left_Motor:%d Right_Motor'
     723A2535
     2E326620
     4C656674
     3A25352E
     32662052
     69676874
     3A25352E
     3266204C
     6566745F
     4D6F746F
     723A2564
     20526967
     68745F4D
     6F746F72
0058 3A256420  2262            db ':%d                '
     20202020
     20202020
     20202020
     202020
006B 0D        2263            db 0x0D
006C 00        2264            db 0x00
006D           2265   
000E           2266            CSEG
000E           2267   
000E           2268   end
