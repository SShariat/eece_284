0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Dec 11 2012) (MSVC)
0000              4   ; This file was generated Fri Mar 27 16:27:48 2015
0000              5   ;--------------------------------------------------------
                  5   $name main_code
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _execute
0000             29            public _stop
0000             30            public _turn_right
0000             31            public _turn_left
0000             32            public _display_LCD
0000             33            public _Timer0ISR
0000             34            public _InitTimer0
0000             35            public _InitADC
0000             36            public _InitSerialPort
0000             37            public _Wait1S
0000             38            public _LCDprint
0000             39            public _LCD_8BIT
0000             40            public _WriteCommand
0000             41            public _WriteData
0000             42            public _LCD_byte
0000             43            public _LCD_pulse
0000             44            public _waitms
0000             45            public _Wait50us
0000             46            public _InitPorts
0000             47            public _LCDprint_PARM_3
0000             48            public _start
0000             49            public _turn_time_update
0000             50            public _time_update_flag
0000             51            public _LCDprint_PARM_2
0000             52            public _turn_timer
0000             53            public _pwm_right
0000             54            public _pwm_left
0000             55            public _pwmcount
0000             56            public _mins
0000             57            public _secs
0000             58            public _msCount
0000             59   ;--------------------------------------------------------
0000             60   ; Special Function Registers
0000             61   ;--------------------------------------------------------
0000             62   _ACC            DATA 0xe0
0000             63   _ADCON0         DATA 0x8e
0000             64   _ADCON1         DATA 0x97
0000             65   _ADINS          DATA 0xa3
0000             66   _ADMODA         DATA 0xc0
0000             67   _ADMODB         DATA 0xa1
0000             68   _AD0BH          DATA 0xbb
0000             69   _AD0BL          DATA 0xa6
0000             70   _AD0DAT0        DATA 0xc5
0000             71   _AD0DAT1        DATA 0xc6
0000             72   _AD0DAT2        DATA 0xc7
0000             73   _AD0DAT3        DATA 0xf4
0000             74   _AD1BH          DATA 0xc4
0000             75   _AD1BL          DATA 0xbc
0000             76   _AD1DAT0        DATA 0xd5
0000             77   _AD1DAT1        DATA 0xd6
0000             78   _AD1DAT2        DATA 0xd7
0000             79   _AD1DAT3        DATA 0xf5
0000             80   _AUXR1          DATA 0xa2
0000             81   _B              DATA 0xf0
0000             82   _BRGR0          DATA 0xbe
0000             83   _BRGR1          DATA 0xbf
0000             84   _BRGCON         DATA 0xbd
0000             85   _CCCRA          DATA 0xea
0000             86   _CCCRB          DATA 0xeb
0000             87   _CCCRC          DATA 0xec
0000             88   _CCCRD          DATA 0xed
0000             89   _CMP1           DATA 0xac
0000             90   _CMP2           DATA 0xad
0000             91   _DEECON         DATA 0xf1
0000             92   _DEEDAT         DATA 0xf2
0000             93   _DEEADR         DATA 0xf3
0000             94   _DIVM           DATA 0x95
0000             95   _DPH            DATA 0x83
0000             96   _DPL            DATA 0x82
0000             97   _FMADRH         DATA 0xe7
0000             98   _FMADRL         DATA 0xe6
0000             99   _FMCON          DATA 0xe4
0000            100   _FMDATA         DATA 0xe5
0000            101   _I2ADR          DATA 0xdb
0000            102   _I2CON          DATA 0xd8
0000            103   _I2DAT          DATA 0xda
0000            104   _I2SCLH         DATA 0xdd
0000            105   _I2SCLL         DATA 0xdc
0000            106   _I2STAT         DATA 0xd9
0000            107   _ICRAH          DATA 0xab
0000            108   _ICRAL          DATA 0xaa
0000            109   _ICRBH          DATA 0xaf
0000            110   _ICRBL          DATA 0xae
0000            111   _IEN0           DATA 0xa8
0000            112   _IEN1           DATA 0xe8
0000            113   _IP0            DATA 0xb8
0000            114   _IP0H           DATA 0xb7
0000            115   _IP1            DATA 0xf8
0000            116   _IP1H           DATA 0xf7
0000            117   _KBCON          DATA 0x94
0000            118   _KBMASK         DATA 0x86
0000            119   _KBPATN         DATA 0x93
0000            120   _OCRAH          DATA 0xef
0000            121   _OCRAL          DATA 0xee
0000            122   _OCRBH          DATA 0xfb
0000            123   _OCRBL          DATA 0xfa
0000            124   _OCRCH          DATA 0xfd
0000            125   _OCRCL          DATA 0xfc
0000            126   _OCRDH          DATA 0xff
0000            127   _OCRDL          DATA 0xfe
0000            128   _P0             DATA 0x80
0000            129   _P1             DATA 0x90
0000            130   _P2             DATA 0xa0
0000            131   _P3             DATA 0xb0
0000            132   _P0M1           DATA 0x84
0000            133   _P0M2           DATA 0x85
0000            134   _P1M1           DATA 0x91
0000            135   _P1M2           DATA 0x92
0000            136   _P2M1           DATA 0xa4
0000            137   _P2M2           DATA 0xa5
0000            138   _P3M1           DATA 0xb1
0000            139   _P3M2           DATA 0xb2
0000            140   _PCON           DATA 0x87
0000            141   _PCONA          DATA 0xb5
0000            142   _PSW            DATA 0xd0
0000            143   _PT0AD          DATA 0xf6
0000            144   _RSTSRC         DATA 0xdf
0000            145   _RTCCON         DATA 0xd1
0000            146   _RTCH           DATA 0xd2
0000            147   _RTCL           DATA 0xd3
0000            148   _SADDR          DATA 0xa9
0000            149   _SADEN          DATA 0xb9
0000            150   _SBUF           DATA 0x99
0000            151   _SCON           DATA 0x98
0000            152   _SSTAT          DATA 0xba
0000            153   _SP             DATA 0x81
0000            154   _SPCTL          DATA 0xe2
0000            155   _SPSTAT         DATA 0xe1
0000            156   _SPDAT          DATA 0xe3
0000            157   _TAMOD          DATA 0x8f
0000            158   _TCON           DATA 0x88
0000            159   _TCR20          DATA 0xc8
0000            160   _TCR21          DATA 0xf9
0000            161   _TH0            DATA 0x8c
0000            162   _TH1            DATA 0x8d
0000            163   _TH2            DATA 0xcd
0000            164   _TICR2          DATA 0xc9
0000            165   _TIFR2          DATA 0xe9
0000            166   _TISE2          DATA 0xde
0000            167   _TL0            DATA 0x8a
0000            168   _TL1            DATA 0x8b
0000            169   _TL2            DATA 0xcc
0000            170   _TMOD           DATA 0x89
0000            171   _TOR2H          DATA 0xcf
0000            172   _TOR2L          DATA 0xce
0000            173   _TPCR2H         DATA 0xcb
0000            174   _TPCR2L         DATA 0xca
0000            175   _TRIM           DATA 0x96
0000            176   _WDCON          DATA 0xa7
0000            177   _WDL            DATA 0xc1
0000            178   _WFEED1         DATA 0xc2
0000            179   _WFEED2         DATA 0xc3
0000            180   ;--------------------------------------------------------
0000            181   ; special function bits
0000            182   ;--------------------------------------------------------
0000            183   _ACC_7          BIT 0xe7
0000            184   _ACC_6          BIT 0xe6
0000            185   _ACC_5          BIT 0xe5
0000            186   _ACC_4          BIT 0xe4
0000            187   _ACC_3          BIT 0xe3
0000            188   _ACC_2          BIT 0xe2
0000            189   _ACC_1          BIT 0xe1
0000            190   _ACC_0          BIT 0xe0
0000            191   _ADMODA_7       BIT 0xc7
0000            192   _ADMODA_6       BIT 0xc6
0000            193   _ADMODA_5       BIT 0xc5
0000            194   _ADMODA_4       BIT 0xc4
0000            195   _ADMODA_3       BIT 0xc3
0000            196   _ADMODA_2       BIT 0xc2
0000            197   _ADMODA_1       BIT 0xc1
0000            198   _ADMODA_0       BIT 0xc0
0000            199   _BNDI1          BIT 0xc7
0000            200   _BURST1         BIT 0xc6
0000            201   _SCC1           BIT 0xc5
0000            202   _SCAN1          BIT 0xc4
0000            203   _BNDI0          BIT 0xc3
0000            204   _BURST0         BIT 0xc2
0000            205   _SCC0           BIT 0xc1
0000            206   _SCAN0          BIT 0xc0
0000            207   _B_7            BIT 0xf7
0000            208   _B_6            BIT 0xf6
0000            209   _B_5            BIT 0xf5
0000            210   _B_4            BIT 0xf4
0000            211   _B_3            BIT 0xf3
0000            212   _B_2            BIT 0xf2
0000            213   _B_1            BIT 0xf1
0000            214   _B_0            BIT 0xf0
0000            215   _I2CON_7        BIT 0xdf
0000            216   _I2CON_6        BIT 0xde
0000            217   _I2CON_5        BIT 0xdd
0000            218   _I2CON_4        BIT 0xdc
0000            219   _I2CON_3        BIT 0xdb
0000            220   _I2CON_2        BIT 0xda
0000            221   _I2CON_1        BIT 0xd9
0000            222   _I2CON_0        BIT 0xd8
0000            223   _I2EN           BIT 0xde
0000            224   _STA            BIT 0xdd
0000            225   _STO            BIT 0xdc
0000            226   _SI             BIT 0xdb
0000            227   _AA             BIT 0xda
0000            228   _CRSEL          BIT 0xd8
0000            229   _IEN0_7         BIT 0xaf
0000            230   _IEN0_6         BIT 0xae
0000            231   _IEN0_5         BIT 0xad
0000            232   _IEN0_4         BIT 0xac
0000            233   _IEN0_3         BIT 0xab
0000            234   _IEN0_2         BIT 0xaa
0000            235   _IEN0_1         BIT 0xa9
0000            236   _IEN0_0         BIT 0xa8
0000            237   _EA             BIT 0xaf
0000            238   _EWDRT          BIT 0xae
0000            239   _EBO            BIT 0xad
0000            240   _ES             BIT 0xac
0000            241   _ESR            BIT 0xac
0000            242   _ET1            BIT 0xab
0000            243   _EX1            BIT 0xaa
0000            244   _ET0            BIT 0xa9
0000            245   _EX0            BIT 0xa8
0000            246   _IEN1_7         BIT 0xef
0000            247   _IEN1_6         BIT 0xee
0000            248   _IEN1_5         BIT 0xed
0000            249   _IEN1_4         BIT 0xec
0000            250   _IEN1_3         BIT 0xeb
0000            251   _IEN1_2         BIT 0xea
0000            252   _IEN1_1         BIT 0xe9
0000            253   _IEN1_0         BIT 0xe8
0000            254   _EADEE          BIT 0xef
0000            255   _EST            BIT 0xee
0000            256   _ECCU           BIT 0xec
0000            257   _ESPI           BIT 0xeb
0000            258   _EC             BIT 0xea
0000            259   _EKBI           BIT 0xe9
0000            260   _EI2C           BIT 0xe8
0000            261   _IP0_7          BIT 0xbf
0000            262   _IP0_6          BIT 0xbe
0000            263   _IP0_5          BIT 0xbd
0000            264   _IP0_4          BIT 0xbc
0000            265   _IP0_3          BIT 0xbb
0000            266   _IP0_2          BIT 0xba
0000            267   _IP0_1          BIT 0xb9
0000            268   _IP0_0          BIT 0xb8
0000            269   _PWDRT          BIT 0xbe
0000            270   _PBO            BIT 0xbd
0000            271   _PS             BIT 0xbc
0000            272   _PSR            BIT 0xbc
0000            273   _PT1            BIT 0xbb
0000            274   _PX1            BIT 0xba
0000            275   _PT0            BIT 0xb9
0000            276   _PX0            BIT 0xb8
0000            277   _IP1_7          BIT 0xff
0000            278   _IP1_6          BIT 0xfe
0000            279   _IP1_5          BIT 0xfd
0000            280   _IP1_4          BIT 0xfc
0000            281   _IP1_3          BIT 0xfb
0000            282   _IP1_2          BIT 0xfa
0000            283   _IP1_1          BIT 0xf9
0000            284   _IP1_0          BIT 0xf8
0000            285   _PADEE          BIT 0xff
0000            286   _PST            BIT 0xfe
0000            287   _PCCU           BIT 0xfc
0000            288   _PSPI           BIT 0xfb
0000            289   _PC             BIT 0xfa
0000            290   _PKBI           BIT 0xf9
0000            291   _PI2C           BIT 0xf8
0000            292   _P0_7           BIT 0x87
0000            293   _P0_6           BIT 0x86
0000            294   _P0_5           BIT 0x85
0000            295   _P0_4           BIT 0x84
0000            296   _P0_3           BIT 0x83
0000            297   _P0_2           BIT 0x82
0000            298   _P0_1           BIT 0x81
0000            299   _P0_0           BIT 0x80
0000            300   _T1             BIT 0x87
0000            301   _KB7            BIT 0x87
0000            302   _CMP_1          BIT 0x86
0000            303   _KB6            BIT 0x86
0000            304   _CMPREF         BIT 0x85
0000            305   _KB5            BIT 0x85
0000            306   _CIN1A          BIT 0x84
0000            307   _KB4            BIT 0x84
0000            308   _CIN1B          BIT 0x83
0000            309   _KB3            BIT 0x83
0000            310   _CIN2A          BIT 0x82
0000            311   _KB2            BIT 0x82
0000            312   _CIN2B          BIT 0x81
0000            313   _KB1            BIT 0x81
0000            314   _CMP_2          BIT 0x80
0000            315   _KB0            BIT 0x80
0000            316   _P1_7           BIT 0x97
0000            317   _P1_6           BIT 0x96
0000            318   _P1_5           BIT 0x95
0000            319   _P1_4           BIT 0x94
0000            320   _P1_3           BIT 0x93
0000            321   _P1_2           BIT 0x92
0000            322   _P1_1           BIT 0x91
0000            323   _P1_0           BIT 0x90
0000            324   _OCC            BIT 0x97
0000            325   _OCB            BIT 0x96
0000            326   _RST            BIT 0x95
0000            327   _INT1           BIT 0x94
0000            328   _INT0           BIT 0x93
0000            329   _SDA            BIT 0x93
0000            330   _T0             BIT 0x92
0000            331   _SCL            BIT 0x92
0000            332   _RXD            BIT 0x91
0000            333   _TXD            BIT 0x90
0000            334   _P2_7           BIT 0xa7
0000            335   _P2_6           BIT 0xa6
0000            336   _P2_5           BIT 0xa5
0000            337   _P2_4           BIT 0xa4
0000            338   _P2_3           BIT 0xa3
0000            339   _P2_2           BIT 0xa2
0000            340   _P2_1           BIT 0xa1
0000            341   _P2_0           BIT 0xa0
0000            342   _ICA            BIT 0xa7
0000            343   _OCA            BIT 0xa6
0000            344   _SPICLK         BIT 0xa5
0000            345   _SS             BIT 0xa4
0000            346   _MISO           BIT 0xa3
0000            347   _MOSI           BIT 0xa2
0000            348   _OCD            BIT 0xa1
0000            349   _ICB            BIT 0xa0
0000            350   _P3_7           BIT 0xb7
0000            351   _P3_6           BIT 0xb6
0000            352   _P3_5           BIT 0xb5
0000            353   _P3_4           BIT 0xb4
0000            354   _P3_3           BIT 0xb3
0000            355   _P3_2           BIT 0xb2
0000            356   _P3_1           BIT 0xb1
0000            357   _P3_0           BIT 0xb0
0000            358   _XTAL1          BIT 0xb1
0000            359   _XTAL2          BIT 0xb0
0000            360   _PSW_7          BIT 0xd7
0000            361   _PSW_6          BIT 0xd6
0000            362   _PSW_5          BIT 0xd5
0000            363   _PSW_4          BIT 0xd4
0000            364   _PSW_3          BIT 0xd3
0000            365   _PSW_2          BIT 0xd2
0000            366   _PSW_1          BIT 0xd1
0000            367   _PSW_0          BIT 0xd0
0000            368   _CY             BIT 0xd7
0000            369   _AC             BIT 0xd6
0000            370   _F0             BIT 0xd5
0000            371   _RS1            BIT 0xd4
0000            372   _RS0            BIT 0xd3
0000            373   _OV             BIT 0xd2
0000            374   _F1             BIT 0xd1
0000            375   _P              BIT 0xd0
0000            376   _SCON_7         BIT 0x9f
0000            377   _SCON_6         BIT 0x9e
0000            378   _SCON_5         BIT 0x9d
0000            379   _SCON_4         BIT 0x9c
0000            380   _SCON_3         BIT 0x9b
0000            381   _SCON_2         BIT 0x9a
0000            382   _SCON_1         BIT 0x99
0000            383   _SCON_0         BIT 0x98
0000            384   _SM0            BIT 0x9f
0000            385   _FE             BIT 0x9f
0000            386   _SM1            BIT 0x9e
0000            387   _SM2            BIT 0x9d
0000            388   _REN            BIT 0x9c
0000            389   _TB8            BIT 0x9b
0000            390   _RB8            BIT 0x9a
0000            391   _TI             BIT 0x99
0000            392   _RI             BIT 0x98
0000            393   _TCON_7         BIT 0x8f
0000            394   _TCON_6         BIT 0x8e
0000            395   _TCON_5         BIT 0x8d
0000            396   _TCON_4         BIT 0x8c
0000            397   _TCON_3         BIT 0x8b
0000            398   _TCON_2         BIT 0x8a
0000            399   _TCON_1         BIT 0x89
0000            400   _TCON_0         BIT 0x88
0000            401   _TF1            BIT 0x8f
0000            402   _TR1            BIT 0x8e
0000            403   _TF0            BIT 0x8d
0000            404   _TR0            BIT 0x8c
0000            405   _IE1            BIT 0x8b
0000            406   _IT1            BIT 0x8a
0000            407   _IE0            BIT 0x89
0000            408   _IT0            BIT 0x88
0000            409   _TCR20_7        BIT 0xcf
0000            410   _TCR20_6        BIT 0xce
0000            411   _TCR20_5        BIT 0xcd
0000            412   _TCR20_4        BIT 0xcc
0000            413   _TCR20_3        BIT 0xcb
0000            414   _TCR20_2        BIT 0xca
0000            415   _TCR20_1        BIT 0xc9
0000            416   _TCR20_0        BIT 0xc8
0000            417   _PLEEN          BIT 0xcf
0000            418   _HLTRN          BIT 0xce
0000            419   _HLTEN          BIT 0xcd
0000            420   _ALTCD          BIT 0xcc
0000            421   _ALTAB          BIT 0xcb
0000            422   _TDIR2          BIT 0xca
0000            423   _TMOD21         BIT 0xc9
0000            424   _TMOD20         BIT 0xc8
0000            425   ;--------------------------------------------------------
0000            426   ; overlayable register banks
0000            427   ;--------------------------------------------------------
0000            428            rbank0 segment data overlay
0000            429   ;--------------------------------------------------------
0000            430   ; internal ram data
0000            431   ;--------------------------------------------------------
0000            432            rseg R_DSEG
0000            433   _msCount:
0000            434            ds 2
0002            435   _secs:
0002            436            ds 1
0003            437   _mins:
0003            438            ds 1
0004            439   _pwmcount:
0004            440            ds 1
0005            441   _pwm_left:
0005            442            ds 1
0006            443   _pwm_right:
0006            444            ds 1
0007            445   _turn_timer:
0007            446            ds 2
0009            447   _LCDprint_PARM_2:
0009            448            ds 1
000A            449   _display_LCD_buff_1_94:
000A            450            ds 17
001B            451   _main_cur_error_1_112:
001B            452            ds 4
001F            453   _main_pre_error_1_112:
001F            454            ds 4
0023            455   _main_left_1_112:
0023            456            ds 4
0027            457   _main_right_1_112:
0027            458            ds 4
002B            459   _main_line_sensor_1_112:
002B            460            ds 4
002F            461   _main_diff_1_112:
002F            462            ds 4
0033            463   _main_line_counter_1_112:
0033            464            ds 2
0035            465   _main_command_1_112:
0035            466            ds 2
0037            467   _main_state_1_112:
0037            468            ds 2
0039            469   _main_sloc0_1_0:
0039            470            ds 4
003D            471   ;--------------------------------------------------------
003D            472   ; overlayable items in internal ram 
003D            473   ;--------------------------------------------------------
0000            474            rseg R_OSEG
0000            475   ;--------------------------------------------------------
0000            476   ; indirectly addressable internal ram data
0000            477   ;--------------------------------------------------------
0000            478            rseg R_ISEG
0000            479   ;--------------------------------------------------------
0000            480   ; absolute internal ram data
0000            481   ;--------------------------------------------------------
0000            482            DSEG
0000            483   ;--------------------------------------------------------
0000            484   ; bit data
0000            485   ;--------------------------------------------------------
0000            486            rseg R_BSEG
0000            487   _time_update_flag:
0000            488            DBIT    1
0001            489   _turn_time_update:
0001            490            DBIT    1
0002            491   _start:
0002            492            DBIT    1
0003            493   _LCDprint_PARM_3:
0003            494            DBIT    1
0004            495   ;--------------------------------------------------------
0004            496   ; paged external ram data
0004            497   ;--------------------------------------------------------
0000            498            rseg R_PSEG
0000            499   ;--------------------------------------------------------
0000            500   ; external ram data
0000            501   ;--------------------------------------------------------
0000            502            rseg R_XSEG
FFC8            503            XSEG at 0xffc8
FFC8            504   _BODCFG: ds 1
FFC9            505            public _BODCFG
0000            506            rseg R_XSEG
FFDE            507            XSEG at 0xffde
FFDE            508   _CLKCON: ds 1
FFDF            509            public _CLKCON
0000            510            rseg R_XSEG
FFE1            511            XSEG at 0xffe1
FFE1            512   _PGACON1: ds 1
FFE2            513            public _PGACON1
0000            514            rseg R_XSEG
FFE4            515            XSEG at 0xffe4
FFE4            516   _PGACON1B: ds 1
FFE5            517            public _PGACON1B
0000            518            rseg R_XSEG
FFE3            519            XSEG at 0xffe3
FFE3            520   _PGA1TRIM8X16X: ds 1
FFE4            521            public _PGA1TRIM8X16X
0000            522            rseg R_XSEG
FFE2            523            XSEG at 0xffe2
FFE2            524   _PGA1TRIM2X4X: ds 1
FFE3            525            public _PGA1TRIM2X4X
0000            526            rseg R_XSEG
FFCA            527            XSEG at 0xffca
FFCA            528   _PGACON0: ds 1
FFCB            529            public _PGACON0
0000            530            rseg R_XSEG
FFCE            531            XSEG at 0xffce
FFCE            532   _PGACON0B: ds 1
FFCF            533            public _PGACON0B
0000            534            rseg R_XSEG
FFCD            535            XSEG at 0xffcd
FFCD            536   _PGA0TRIM8X16X: ds 1
FFCE            537            public _PGA0TRIM8X16X
0000            538            rseg R_XSEG
FFCC            539            XSEG at 0xffcc
FFCC            540   _PGA0TRIM2X4X: ds 1
FFCD            541            public _PGA0TRIM2X4X
0000            542            rseg R_XSEG
FFBF            543            XSEG at 0xffbf
FFBF            544   _RTCDATH: ds 1
FFC0            545            public _RTCDATH
0000            546            rseg R_XSEG
FFBE            547            XSEG at 0xffbe
FFBE            548   _RTCDATL: ds 1
FFBF            549            public _RTCDATL
0000            550            rseg R_XSEG
0000            551   ;--------------------------------------------------------
0000            552   ; absolute external ram data
0000            553   ;--------------------------------------------------------
FFBF            554            XSEG
FFBF            555   ;--------------------------------------------------------
FFBF            556   ; external initialized ram data
FFBF            557   ;--------------------------------------------------------
0000            558            rseg R_IXSEG
0000            559            rseg R_HOME
0000            560            rseg R_GSINIT
0000            561            rseg R_CSEG
0000            562   ;--------------------------------------------------------
0000            563   ; Reset entry point and interrupt vectors
0000            564   ;--------------------------------------------------------
0000            565            CSEG at 0x0000
0000 020100     566            ljmp    _crt0
000B            567            CSEG at 0x000b
000B 020100     568            ljmp    _Timer0ISR
000E            569   ;--------------------------------------------------------
000E            570   ; global & static initialisations
000E            571   ;--------------------------------------------------------
0000            572            rseg R_HOME
0000            573            rseg R_GSINIT
0000            574            rseg R_GSINIT
0000            575   ;--------------------------------------------------------
0000            576   ; data variables initialization
0000            577   ;--------------------------------------------------------
0000            578            rseg R_DINIT
0000            579   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:43: volatile int msCount=0; // Volatiles can be changed by stuff outside our program, like memory registers
0000 E4         580            clr     a
0001 F548       581            mov     _msCount,a
0003 F549       582            mov     (_msCount + 1),a
0005            583   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:44: volatile unsigned char secs=0, mins=0; // They are like global variables, kinda 
0005 750800     584            mov     _secs,#0x00
0008            585   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:44: volatile bit time_update_flag=0;
0008 75C800     586            mov     _mins,#0x00
000B            587   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:49: volatile int turn_timer = 0;
000B E4         588            clr     a
000C F5C8       589            mov     _turn_timer,a
000E F5C9       590            mov     (_turn_timer + 1),a
0010            591   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:45: volatile bit time_update_flag=0;
0010 C238       592            clr     _time_update_flag
0012            593   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:50: volatile bit turn_time_update=0;
0012 C2E8       594            clr     _turn_time_update
0014            595   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:51: volatile bit start = 1;
0014 D298       596            setb    _start
0016            597            ; The linker places a 'ret' at the end of segment R_DINIT.
0016            598   ;--------------------------------------------------------
0016            599   ; code
0016            600   ;--------------------------------------------------------
0000            601            rseg R_CSEG
0000            602   ;------------------------------------------------------------
0000            603   ;Allocation info for local variables in function 'InitPorts'
0000            604   ;------------------------------------------------------------
0000            605   ;------------------------------------------------------------
0000            606   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:53: void InitPorts(void)
0000            607   ;        -----------------------------------------
0000            608   ;         function InitPorts
0000            609   ;        -----------------------------------------
0000            610   _InitPorts:
0000            611            using   0
0000            612   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:55: P0M1=0x1E;
0000 75841E     613            mov     _P0M1,#0x1E
0003            614   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:56: P0M2=0x00;
0003 758500     615            mov     _P0M2,#0x00
0006            616   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:57: P1M1=0;
0006 759100     617            mov     _P1M1,#0x00
0009            618   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:58: P1M2=0;
0009 759200     619            mov     _P1M2,#0x00
000C            620   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:59: P2M1=0;
000C 75A400     621            mov     _P2M1,#0x00
000F            622   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:60: P2M2=0;
000F 75A500     623            mov     _P2M2,#0x00
0012            624   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:61: P3M1=0;
0012 75B100     625            mov     _P3M1,#0x00
0015            626   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:62: P3M2=0;
0015 75B200     627            mov     _P3M2,#0x00
0018 22         628            ret
0019            629   ;------------------------------------------------------------
0019            630   ;Allocation info for local variables in function 'Wait50us'
0019            631   ;------------------------------------------------------------
0019            632   ;------------------------------------------------------------
0019            633   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:65: void Wait50us (void)
0019            634   ;        -----------------------------------------
0019            635   ;         function Wait50us
0019            636   ;        -----------------------------------------
0019            637   _Wait50us:
0019            638   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:70: _endasm;
0019            639            
0019 7852       640             mov R0, #82
001B            641             L0:
001B D868       642            djnz R0, L0 ; 2 machine cycles-> 2*0.27126us*92=50us
001D            643             
001D 22         644            ret
001E            645   ;------------------------------------------------------------
001E            646   ;Allocation info for local variables in function 'waitms'
001E            647   ;------------------------------------------------------------
001E            648   ;ms                        Allocated to registers r2 r3 
001E            649   ;j                         Allocated to registers r4 r5 
001E            650   ;k                         Allocated to registers r6 
001E            651   ;------------------------------------------------------------
001E            652   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:73: void waitms (unsigned int ms)
001E            653   ;        -----------------------------------------
001E            654   ;         function waitms
001E            655   ;        -----------------------------------------
001E            656   _waitms:
001E AA82       657            mov     r2,dpl
0020 AB83       658            mov     r3,dph
0022            659   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:79: for(j=0; j<ms; j++)
0022 7C00       660            mov     r4,#0x00
0024 7D00       661            mov     r5,#0x00
0026            662   L004004?:
0026 C3         663            clr     c
0027 EC         664            mov     a,r4
0028 9A         665            subb    a,r2
0029 ED         666            mov     a,r5
002A 9B         667            subb    a,r3
002B 5001       668            jnc     L004008?
002D            669   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:80: for (k=0; k<20; k++) Wait50us();
002D 7E14       670            mov     r6,#0x14
002F            671   L004003?:
002F C002       672            push    ar2
0031 C003       673            push    ar3
0033 C004       674            push    ar4
0035 C005       675            push    ar5
0037 C006       676            push    ar6
0039 120100     677            lcall   _Wait50us
003C D006       678            pop     ar6
003E D005       679            pop     ar5
0040 D004       680            pop     ar4
0042 D003       681            pop     ar3
0044 D002       682            pop     ar2
0046 DEA8       683            djnz    r6,L004003?
0048            684   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:79: for(j=0; j<ms; j++)
0048 0C         685            inc     r4
0049 BC0028     686            cjne    r4,#0x00,L004004?
004C 0D         687            inc     r5
004D 8001       688            sjmp    L004004?
004F            689   L004008?:
004F 22         690            ret
0050            691   ;------------------------------------------------------------
0050            692   ;Allocation info for local variables in function 'LCD_pulse'
0050            693   ;------------------------------------------------------------
0050            694   ;------------------------------------------------------------
0050            695   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:83: void LCD_pulse (void)
0050            696   ;        -----------------------------------------
0050            697   ;         function LCD_pulse
0050            698   ;        -----------------------------------------
0050            699   _LCD_pulse:
0050            700   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:85: LCD_E=1;
0050 D2A5       701            setb    _P2_5
0052            702   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:86: Wait50us();
0052 120100     703            lcall   _Wait50us
0055            704   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:87: LCD_E=0;
0055 C2A5       705            clr     _P2_5
0057 22         706            ret
0058            707   ;------------------------------------------------------------
0058            708   ;Allocation info for local variables in function 'LCD_byte'
0058            709   ;------------------------------------------------------------
0058            710   ;x                         Allocated to registers 
0058            711   ;------------------------------------------------------------
0058            712   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:90: void LCD_byte (unsigned char x)
0058            713   ;        -----------------------------------------
0058            714   ;         function LCD_byte
0058            715   ;        -----------------------------------------
0058            716   _LCD_byte:
0058 8582E0     717            mov     _ACC,dpl
005B            718   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:94: LCD_D7=ACC_7;
005B A2E7       719            mov     c,_ACC_7
005D 9294       720            mov     _P1_4,c
005F            721   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:95: LCD_D6=ACC_6;
005F A2E6       722            mov     c,_ACC_6
0061 9296       723            mov     _P1_6,c
0063            724   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:96: LCD_D5=ACC_5;
0063 A2E5       725            mov     c,_ACC_5
0065 9297       726            mov     _P1_7,c
0067            727   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:97: LCD_D4=ACC_4;
0067 A2E4       728            mov     c,_ACC_4
0069 92A0       729            mov     _P2_0,c
006B            730   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:98: LCD_D3=ACC_3;
006B A2E3       731            mov     c,_ACC_3
006D 92A1       732            mov     _P2_1,c
006F            733   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:99: LCD_D2=ACC_2;
006F A2E2       734            mov     c,_ACC_2
0071 92A2       735            mov     _P2_2,c
0073            736   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:100: LCD_D1=ACC_1;
0073 A2E1       737            mov     c,_ACC_1
0075 92A3       738            mov     _P2_3,c
0077            739   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:101: LCD_D0=ACC_0;
0077 A2E0       740            mov     c,_ACC_0
0079 92A4       741            mov     _P2_4,c
007B            742   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:102: LCD_pulse();
007B 020100     743            ljmp    _LCD_pulse
007E            744   ;------------------------------------------------------------
007E            745   ;Allocation info for local variables in function 'WriteData'
007E            746   ;------------------------------------------------------------
007E            747   ;x                         Allocated to registers r2 
007E            748   ;------------------------------------------------------------
007E            749   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:105: void WriteData (unsigned char x)
007E            750   ;        -----------------------------------------
007E            751   ;         function WriteData
007E            752   ;        -----------------------------------------
007E            753   _WriteData:
007E AA82       754            mov     r2,dpl
0080            755   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:107: LCD_RS=1;
0080 D2A7       756            setb    _P2_7
0082            757   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:108: LCD_byte(x);
0082 8A82       758            mov     dpl,r2
0084 120100     759            lcall   _LCD_byte
0087            760   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:109: waitms(2);
0087 900002     761            mov     dptr,#0x0002
008A 020100     762            ljmp    _waitms
008D            763   ;------------------------------------------------------------
008D            764   ;Allocation info for local variables in function 'WriteCommand'
008D            765   ;------------------------------------------------------------
008D            766   ;x                         Allocated to registers r2 
008D            767   ;------------------------------------------------------------
008D            768   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:112: void WriteCommand (unsigned char x)
008D            769   ;        -----------------------------------------
008D            770   ;         function WriteCommand
008D            771   ;        -----------------------------------------
008D            772   _WriteCommand:
008D AA82       773            mov     r2,dpl
008F            774   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:114: LCD_RS=0;
008F C2A7       775            clr     _P2_7
0091            776   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:115: LCD_byte(x);
0091 8A82       777            mov     dpl,r2
0093 120100     778            lcall   _LCD_byte
0096            779   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:116: waitms(5);
0096 900005     780            mov     dptr,#0x0005
0099 020100     781            ljmp    _waitms
009C            782   ;------------------------------------------------------------
009C            783   ;Allocation info for local variables in function 'LCD_8BIT'
009C            784   ;------------------------------------------------------------
009C            785   ;------------------------------------------------------------
009C            786   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:119: void LCD_8BIT (void)
009C            787   ;        -----------------------------------------
009C            788   ;         function LCD_8BIT
009C            789   ;        -----------------------------------------
009C            790   _LCD_8BIT:
009C            791   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:121: LCD_E=0;  // Resting state of LCD's enable is zero
009C C2A5       792            clr     _P2_5
009E            793   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:122: LCD_RW=0; // We are only writing to the LCD in this program
009E C2A6       794            clr     _P2_6
00A0            795   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:123: waitms(20);
00A0 900014     796            mov     dptr,#0x0014
00A3 120100     797            lcall   _waitms
00A6            798   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:125: WriteCommand(0x33);
00A6 758233     799            mov     dpl,#0x33
00A9 120100     800            lcall   _WriteCommand
00AC            801   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:126: WriteCommand(0x33);
00AC 758233     802            mov     dpl,#0x33
00AF 120100     803            lcall   _WriteCommand
00B2            804   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:127: WriteCommand(0x33); // Stay in 8-bit mode
00B2 758233     805            mov     dpl,#0x33
00B5 120100     806            lcall   _WriteCommand
00B8            807   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:130: WriteCommand(0x38);
00B8 758238     808            mov     dpl,#0x38
00BB 120100     809            lcall   _WriteCommand
00BE            810   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:131: WriteCommand(0x0c);
00BE 75820C     811            mov     dpl,#0x0C
00C1 120100     812            lcall   _WriteCommand
00C4            813   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:132: WriteCommand(0x01); // Clear screen command (takes some time)
00C4 758201     814            mov     dpl,#0x01
00C7 120100     815            lcall   _WriteCommand
00CA            816   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:133: waitms(20); // Wait for clear screen command to finsih.
00CA 900014     817            mov     dptr,#0x0014
00CD 020100     818            ljmp    _waitms
00D0            819   ;------------------------------------------------------------
00D0            820   ;Allocation info for local variables in function 'LCDprint'
00D0            821   ;------------------------------------------------------------
00D0            822   ;line                      Allocated with name '_LCDprint_PARM_2'
00D0            823   ;string                    Allocated to registers r2 r3 r4 
00D0            824   ;j                         Allocated to registers r5 
00D0            825   ;------------------------------------------------------------
00D0            826   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:136: void LCDprint(char * string, unsigned char line, bit clear)
00D0            827   ;        -----------------------------------------
00D0            828   ;         function LCDprint
00D0            829   ;        -----------------------------------------
00D0            830   _LCDprint:
00D0 AA82       831            mov     r2,dpl
00D2 AB83       832            mov     r3,dph
00D4 ACF0       833            mov     r4,b
00D6            834   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:140: WriteCommand(line==2?0xc0:0x80);
00D6 7402       835            mov     a,#0x02
00D8 B58828     836            cjne    a,_LCDprint_PARM_2,L010013?
00DB 7DC0       837            mov     r5,#0xC0
00DD 8001       838            sjmp    L010014?
00DF            839   L010013?:
00DF 7D80       840            mov     r5,#0x80
00E1            841   L010014?:
00E1 8D82       842            mov     dpl,r5
00E3 C002       843            push    ar2
00E5 C003       844            push    ar3
00E7 C004       845            push    ar4
00E9 120100     846            lcall   _WriteCommand
00EC            847   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:141: waitms(5);
00EC 900005     848            mov     dptr,#0x0005
00EF 120100     849            lcall   _waitms
00F2 D004       850            pop     ar4
00F4 D003       851            pop     ar3
00F6 D002       852            pop     ar2
00F8            853   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:142: for(j=0; string[j]!=0; j++)     WriteData(string[j]);// Write the message
00F8 7D00       854            mov     r5,#0x00
00FA            855   L010003?:
00FA ED         856            mov     a,r5
00FB 2A         857            add     a,r2
00FC FE         858            mov     r6,a
00FD E4         859            clr     a
00FE 3B         860            addc    a,r3
00FF FF         861            mov     r7,a
0100 8C00       862            mov     ar0,r4
0102 8E82       863            mov     dpl,r6
0104 8F83       864            mov     dph,r7
0106 88F0       865            mov     b,r0
0108 120100     866            lcall   __gptrget
010B FE         867            mov     r6,a
010C 6001       868            jz      L010006?
010E 8E82       869            mov     dpl,r6
0110 C002       870            push    ar2
0112 C003       871            push    ar3
0114 C004       872            push    ar4
0116 C005       873            push    ar5
0118 120100     874            lcall   _WriteData
011B D005       875            pop     ar5
011D D004       876            pop     ar4
011F D003       877            pop     ar3
0121 D002       878            pop     ar2
0123 0D         879            inc     r5
0124 8001       880            sjmp    L010003?
0126            881   L010006?:
0126            882   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:143: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0126 305868     883            jnb     _LCDprint_PARM_3,L010011?
0129 8D02       884            mov     ar2,r5
012B            885   L010007?:
012B BA10E8     886            cjne    r2,#0x10,L010026?
012E            887   L010026?:
012E 5001       888            jnc     L010011?
0130 758220     889            mov     dpl,#0x20
0133 C002       890            push    ar2
0135 120100     891            lcall   _WriteData
0138 D002       892            pop     ar2
013A 0A         893            inc     r2
013B 8001       894            sjmp    L010007?
013D            895   L010011?:
013D 22         896            ret
013E            897   ;------------------------------------------------------------
013E            898   ;Allocation info for local variables in function 'Wait1S'
013E            899   ;------------------------------------------------------------
013E            900   ;------------------------------------------------------------
013E            901   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:146: void Wait1S (void)
013E            902   ;        -----------------------------------------
013E            903   ;         function Wait1S
013E            904   ;        -----------------------------------------
013E            905   _Wait1S:
013E            906   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:155: _endasm;
013E            907            
013E 7A28       908             mov R2, #40
0140            909             L3:
0140 79FA       910            mov R1, #250
0142            911             L2:
0142 78B8       912            mov R0, #184
0144            913             L1:
0144 D8A8       914            djnz R0, L1 ; 2 machine cycles-> 2*0.27126us*184=100us
0146 D968       915             djnz R1, L2 ; 100us*250=0.025s
0148 DA28       916             djnz R2, L3 ; 0.025s*40=1s
014A            917             
014A 22         918            ret
014B            919   ;------------------------------------------------------------
014B            920   ;Allocation info for local variables in function 'InitSerialPort'
014B            921   ;------------------------------------------------------------
014B            922   ;------------------------------------------------------------
014B            923   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:158: void InitSerialPort(void)
014B            924   ;        -----------------------------------------
014B            925   ;         function InitSerialPort
014B            926   ;        -----------------------------------------
014B            927   _InitSerialPort:
014B            928   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:160: BRGCON=0x00; //Make sure the baud rate generator is off
014B 75BD00     929            mov     _BRGCON,#0x00
014E            930   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:161: BRGR1=((XTAL/BAUD)-16)/0x100;
014E 75BF00     931            mov     _BRGR1,#0x00
0151            932   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:162: BRGR0=((XTAL/BAUD)-16)%0x100;
0151 75BE30     933            mov     _BRGR0,#0x30
0154            934   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:163: BRGCON=0x03; //Turn-on the baud rate generator
0154 75BD03     935            mov     _BRGCON,#0x03
0157            936   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:164: SCON=0x52; //Serial port in mode 1, ren, txrdy, rxempty
0157 759852     937            mov     _SCON,#0x52
015A            938   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:165: P1M1=0x00; //Enable pins RxD and Txd
015A 759100     939            mov     _P1M1,#0x00
015D            940   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:166: P1M2=0x00; //Enable pins RxD and Txd
015D 759200     941            mov     _P1M2,#0x00
0160 22         942            ret
0161            943   ;------------------------------------------------------------
0161            944   ;Allocation info for local variables in function 'InitADC'
0161            945   ;------------------------------------------------------------
0161            946   ;------------------------------------------------------------
0161            947   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:169: void InitADC(void)
0161            948   ;        -----------------------------------------
0161            949   ;         function InitADC
0161            950   ;        -----------------------------------------
0161            951   _InitADC:
0161            952   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:173: P0M1 |= (P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0161 43841E     953            orl     _P0M1,#0x1E
0164            954   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:174: P0M2 &= ~(P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0164 5385E1     955            anl     _P0M2,#0xE1
0167            956   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:177: BURST1=1; //Autoscan continuous conversion mode
0167 D2C6       957            setb    _BURST1
0169            958   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:178: ADMODB = CLK0; //ADC1 clock is 7.3728MHz/2
0169 75A120     959            mov     _ADMODB,#0x20
016C            960   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:179: ADINS  = (ADI13|ADI12|ADI11|ADI10); // Select the four channels for conversion
016C 75A3F0     961            mov     _ADINS,#0xF0
016F            962   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:180: ADCON1 = (ENADC1|ADCS10); //Enable the converter and start immediately
016F 759705     963            mov     _ADCON1,#0x05
0172            964   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:181: while((ADCI1&ADCON1)==0); //Wait for first conversion to complete
0172            965   L013001?:
0172 E597       966            mov     a,_ADCON1
0174 30E3E8     967            jnb     acc.3,L013001?
0177 22         968            ret
0178            969   ;------------------------------------------------------------
0178            970   ;Allocation info for local variables in function 'InitTimer0'
0178            971   ;------------------------------------------------------------
0178            972   ;------------------------------------------------------------
0178            973   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:184: void InitTimer0 (void)
0178            974   ;        -----------------------------------------
0178            975   ;         function InitTimer0
0178            976   ;        -----------------------------------------
0178            977   _InitTimer0:
0178            978   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:188: TR0=0; // Stop timer 0
0178 C28C       979            clr     _TR0
017A            980   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:189: TMOD=(TMOD&0xf0)|0x01; // 16-bit timer
017A 74F0       981            mov     a,#0xF0
017C 5589       982            anl     a,_TMOD
017E 4401       983            orl     a,#0x01
0180 F589       984            mov     _TMOD,a
0182            985   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:190: TH0=TIMER0_RELOAD_VALUE/0x100; // I think the RHS is 0001 0000 0000, are we dividing?
0182 758CFE     986            mov     _TH0,#0xFE
0185            987   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:191: TL0=TIMER0_RELOAD_VALUE%0x100; // % means modulo, apparently? ...are we modulo-ing?
0185 758A90     988            mov     _TL0,#0x90
0188            989   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:192: TR0=1; // Start timer 0 (bit 4 in TCON)
0188 D28C       990            setb    _TR0
018A            991   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:193: ET0=1; // Enable timer 0 interrupt - the interrupt controller IEN0 is bit-adressable, so we change only the bit we need
018A D2A9       992            setb    _ET0
018C            993   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:194: EA=1;  // Enable global interrupts
018C D2AF       994            setb    _EA
018E 22         995            ret
018F            996   ;------------------------------------------------------------
018F            997   ;Allocation info for local variables in function 'Timer0ISR'
018F            998   ;------------------------------------------------------------
018F            999   ;------------------------------------------------------------
018F           1000   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:198: void Timer0ISR (void) interrupt 1{
018F           1001   ;        -----------------------------------------
018F           1002   ;         function Timer0ISR
018F           1003   ;        -----------------------------------------
018F           1004   _Timer0ISR:
018F C0E0      1005            push    acc
0191 C0D0      1006            push    psw
0193 75D000    1007            mov     psw,#0x00
0196           1008   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:200: TR0=0; // Stop timer 0
0196 C28C      1009            clr     _TR0
0198           1010   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:201: TH0=TIMER0_RELOAD_VALUE/0x100;
0198 758CFE    1011            mov     _TH0,#0xFE
019B           1012   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:202: TL0=TIMER0_RELOAD_VALUE%0x100;
019B 758A90    1013            mov     _TL0,#0x90
019E           1014   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:203: TR0=1; // Start timer 0
019E D28C      1015            setb    _TR0
01A0           1016   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:205: if(++pwmcount>99) pwmcount=0;
01A0 0588      1017            inc     _pwmcount
01A2 E588      1018            mov     a,_pwmcount
01A4 249C      1019            add     a,#0xff - 0x63
01A6 5001      1020            jnc     L015002?
01A8 758800    1021            mov     _pwmcount,#0x00
01AB           1022   L015002?:
01AB           1023   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:206: P0_5=(pwm_left>pwmcount)?1:0;
01AB C3        1024            clr     c
01AC E588      1025            mov     a,_pwmcount
01AE 9548      1026            subb    a,_pwm_left
01B0 9285      1027            mov     _P0_5,c
01B2           1028   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:207: P0_6=(pwm_right>pwmcount)?1:0;
01B2 C3        1029            clr     c
01B3 E588      1030            mov     a,_pwmcount
01B5 9508      1031            subb    a,_pwm_right
01B7 9286      1032            mov     _P0_6,c
01B9           1033   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:209: msCount++;
01B9 7401      1034            mov     a,#0x01
01BB 2548      1035            add     a,_msCount
01BD F548      1036            mov     _msCount,a
01BF E4        1037            clr     a
01C0 3549      1038            addc    a,(_msCount + 1)
01C2 F549      1039            mov     (_msCount + 1),a
01C4           1040   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:210: if(msCount==10000)
01C4 7410      1041            mov     a,#0x10
01C6 B548E8    1042            cjne    a,_msCount,L015008?
01C9 7427      1043            mov     a,#0x27
01CB B549E8    1044            cjne    a,(_msCount + 1),L015008?
01CE           1045   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:212: time_update_flag=1;
01CE D238      1046            setb    _time_update_flag
01D0           1047   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:213: msCount=0;
01D0 E4        1048            clr     a
01D1 F548      1049            mov     _msCount,a
01D3 F549      1050            mov     (_msCount + 1),a
01D5           1051   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:214: secs++;
01D5 0508      1052            inc     _secs
01D7           1053   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:215: if(secs==60)
01D7 743C      1054            mov     a,#0x3C
01D9 B508E8    1055            cjne    a,_secs,L015008?
01DC           1056   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:217: secs=0;
01DC 750800    1057            mov     _secs,#0x00
01DF           1058   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:218: mins++;
01DF 05C8      1059            inc     _mins
01E1           1060   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:219: if(mins==60)
01E1 743C      1061            mov     a,#0x3C
01E3 B5C8E8    1062            cjne    a,_mins,L015008?
01E6           1063   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:221: mins=0;
01E6 75C800    1064            mov     _mins,#0x00
01E9           1065   L015008?:
01E9           1066   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:226: if(turn_time_update == 1){
01E9 30E828    1067            jnb     _turn_time_update,L015011?
01EC           1068   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:227: turn_timer++;
01EC 7401      1069            mov     a,#0x01
01EE 25C8      1070            add     a,_turn_timer
01F0 F5C8      1071            mov     _turn_timer,a
01F2 E4        1072            clr     a
01F3 35C9      1073            addc    a,(_turn_timer + 1)
01F5 F5C9      1074            mov     (_turn_timer + 1),a
01F7           1075   L015011?:
01F7 D0D0      1076            pop     psw
01F9 D0E0      1077            pop     acc
01FB 32        1078            reti
01FC           1079   ;        eliminated unneeded push/pop dpl
01FC           1080   ;        eliminated unneeded push/pop dph
01FC           1081   ;        eliminated unneeded push/pop b
01FC           1082   ;------------------------------------------------------------
01FC           1083   ;Allocation info for local variables in function 'display_LCD'
01FC           1084   ;------------------------------------------------------------
01FC           1085   ;buff                      Allocated with name '_display_LCD_buff_1_94'
01FC           1086   ;------------------------------------------------------------
01FC           1087   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:231: void display_LCD(void){
01FC           1088   ;        -----------------------------------------
01FC           1089   ;         function display_LCD
01FC           1090   ;        -----------------------------------------
01FC           1091   _display_LCD:
01FC           1092   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:234: time_update_flag=0;
01FC C238      1093            clr     _time_update_flag
01FE           1094   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:241: sprintf(buff, "L=%5.2f R:%5.2f", (AD1DAT1/255.0)*3.3, (AD1DAT2/255.0)*3.3); //Display Left and Right Sensor
01FE 85D782    1095            mov     dpl,_AD1DAT2
0201 120100    1096            lcall   ___uchar2fs
0204 AA82      1097            mov     r2,dpl
0206 AB83      1098            mov     r3,dph
0208 ACF0      1099            mov     r4,b
020A FD        1100            mov     r5,a
020B E4        1101            clr     a
020C C0E0      1102            push    acc
020E C0E0      1103            push    acc
0210 747F      1104            mov     a,#0x7F
0212 C0E0      1105            push    acc
0214 7443      1106            mov     a,#0x43
0216 C0E0      1107            push    acc
0218 8A82      1108            mov     dpl,r2
021A 8B83      1109            mov     dph,r3
021C 8CF0      1110            mov     b,r4
021E ED        1111            mov     a,r5
021F 120100    1112            lcall   ___fsdiv
0222 AA82      1113            mov     r2,dpl
0224 AB83      1114            mov     r3,dph
0226 ACF0      1115            mov     r4,b
0228 FD        1116            mov     r5,a
0229 E581      1117            mov     a,sp
022B 24FC      1118            add     a,#0xfc
022D F581      1119            mov     sp,a
022F C002      1120            push    ar2
0231 C003      1121            push    ar3
0233 C004      1122            push    ar4
0235 C005      1123            push    ar5
0237 903333    1124            mov     dptr,#0x3333
023A 75F053    1125            mov     b,#0x53
023D 7440      1126            mov     a,#0x40
023F 120100    1127            lcall   ___fsmul
0242 AA82      1128            mov     r2,dpl
0244 AB83      1129            mov     r3,dph
0246 ACF0      1130            mov     r4,b
0248 FD        1131            mov     r5,a
0249 E581      1132            mov     a,sp
024B 24FC      1133            add     a,#0xfc
024D F581      1134            mov     sp,a
024F 85D682    1135            mov     dpl,_AD1DAT1
0252 C002      1136            push    ar2
0254 C003      1137            push    ar3
0256 C004      1138            push    ar4
0258 C005      1139            push    ar5
025A 120100    1140            lcall   ___uchar2fs
025D AE82      1141            mov     r6,dpl
025F AF83      1142            mov     r7,dph
0261 A8F0      1143            mov     r0,b
0263 F9        1144            mov     r1,a
0264 E4        1145            clr     a
0265 C0E0      1146            push    acc
0267 C0E0      1147            push    acc
0269 747F      1148            mov     a,#0x7F
026B C0E0      1149            push    acc
026D 7443      1150            mov     a,#0x43
026F C0E0      1151            push    acc
0271 8E82      1152            mov     dpl,r6
0273 8F83      1153            mov     dph,r7
0275 88F0      1154            mov     b,r0
0277 E9        1155            mov     a,r1
0278 120100    1156            lcall   ___fsdiv
027B AE82      1157            mov     r6,dpl
027D AF83      1158            mov     r7,dph
027F A8F0      1159            mov     r0,b
0281 F9        1160            mov     r1,a
0282 E581      1161            mov     a,sp
0284 24FC      1162            add     a,#0xfc
0286 F581      1163            mov     sp,a
0288 C006      1164            push    ar6
028A C007      1165            push    ar7
028C C000      1166            push    ar0
028E C001      1167            push    ar1
0290 903333    1168            mov     dptr,#0x3333
0293 75F053    1169            mov     b,#0x53
0296 7440      1170            mov     a,#0x40
0298 120100    1171            lcall   ___fsmul
029B AE82      1172            mov     r6,dpl
029D AF83      1173            mov     r7,dph
029F A8F0      1174            mov     r0,b
02A1 F9        1175            mov     r1,a
02A2 E581      1176            mov     a,sp
02A4 24FC      1177            add     a,#0xfc
02A6 F581      1178            mov     sp,a
02A8 C006      1179            push    ar6
02AA C007      1180            push    ar7
02AC C000      1181            push    ar0
02AE C001      1182            push    ar1
02B0 7468      1183            mov     a,#__str_0
02B2 C0E0      1184            push    acc
02B4 74B0      1185            mov     a,#(__str_0 >> 8)
02B6 C0E0      1186            push    acc
02B8 7480      1187            mov     a,#0x80
02BA C0E0      1188            push    acc
02BC 74D8      1189            mov     a,#_display_LCD_buff_1_94
02BE C0E0      1190            push    acc
02C0 74A2      1191            mov     a,#(_display_LCD_buff_1_94 >> 8)
02C2 C0E0      1192            push    acc
02C4 7440      1193            mov     a,#0x40
02C6 C0E0      1194            push    acc
02C8 120100    1195            lcall   _sprintf
02CB E581      1196            mov     a,sp
02CD 24F2      1197            add     a,#0xf2
02CF F581      1198            mov     sp,a
02D1           1199   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:242: LCDprint(buff, 1, 1);
02D1 758801    1200            mov     _LCDprint_PARM_2,#0x01
02D4 D258      1201            setb    _LCDprint_PARM_3
02D6 90A2D8    1202            mov     dptr,#_display_LCD_buff_1_94
02D9 75F040    1203            mov     b,#0x40
02DC 120100    1204            lcall   _LCDprint
02DF           1205   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:243: sprintf(buff, "LM=%d RM=%d", pwm_left, pwm_right); // Display Motor Values
02DF AA08      1206            mov     r2,_pwm_right
02E1 7B00      1207            mov     r3,#0x00
02E3 AC48      1208            mov     r4,_pwm_left
02E5 7D00      1209            mov     r5,#0x00
02E7 C002      1210            push    ar2
02E9 C003      1211            push    ar3
02EB C004      1212            push    ar4
02ED C005      1213            push    ar5
02EF 74E8      1214            mov     a,#__str_1
02F1 C0E0      1215            push    acc
02F3 74B0      1216            mov     a,#(__str_1 >> 8)
02F5 C0E0      1217            push    acc
02F7 7480      1218            mov     a,#0x80
02F9 C0E0      1219            push    acc
02FB 74D8      1220            mov     a,#_display_LCD_buff_1_94
02FD C0E0      1221            push    acc
02FF 74A2      1222            mov     a,#(_display_LCD_buff_1_94 >> 8)
0301 C0E0      1223            push    acc
0303 7440      1224            mov     a,#0x40
0305 C0E0      1225            push    acc
0307 120100    1226            lcall   _sprintf
030A E581      1227            mov     a,sp
030C 24F6      1228            add     a,#0xf6
030E F581      1229            mov     sp,a
0310           1230   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:244: LCDprint(buff, 2, 1);
0310 758802    1231            mov     _LCDprint_PARM_2,#0x02
0313 D258      1232            setb    _LCDprint_PARM_3
0315 90A2D8    1233            mov     dptr,#_display_LCD_buff_1_94
0318 75F040    1234            mov     b,#0x40
031B 020100    1235            ljmp    _LCDprint
031E           1236   ;------------------------------------------------------------
031E           1237   ;Allocation info for local variables in function 'turn_left'
031E           1238   ;------------------------------------------------------------
031E           1239   ;------------------------------------------------------------
031E           1240   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:248: void turn_left(void){
031E           1241   ;        -----------------------------------------
031E           1242   ;         function turn_left
031E           1243   ;        -----------------------------------------
031E           1244   _turn_left:
031E           1245   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:249: turn_timer = 0;
031E E4        1246            clr     a
031F F5C8      1247            mov     _turn_timer,a
0321 F5C9      1248            mov     (_turn_timer + 1),a
0323           1249   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:250: turn_time_update = 1;
0323 D2E8      1250            setb    _turn_time_update
0325           1251   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:251: while(1){
0325           1252   L017004?:
0325           1253   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:252: pwm_left = 20;
0325 754814    1254            mov     _pwm_left,#0x14
0328           1255   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:253: pwm_right = 100;
0328 750864    1256            mov     _pwm_right,#0x64
032B           1257   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:254: if(turn_timer == 2000){
032B 74D0      1258            mov     a,#0xD0
032D B5C828    1259            cjne    a,_turn_timer,L017004?
0330 7407      1260            mov     a,#0x07
0332 B5C928    1261            cjne    a,(_turn_timer + 1),L017004?
0335           1262   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:255: turn_time_update = 0;
0335 C2E8      1263            clr     _turn_time_update
0337           1264   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:256: turn_timer = 0;
0337 E4        1265            clr     a
0338 F5C8      1266            mov     _turn_timer,a
033A F5C9      1267            mov     (_turn_timer + 1),a
033C           1268   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:257: break;
033C 22        1269            ret
033D           1270   ;------------------------------------------------------------
033D           1271   ;Allocation info for local variables in function 'turn_right'
033D           1272   ;------------------------------------------------------------
033D           1273   ;------------------------------------------------------------
033D           1274   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:261: void turn_right(void){
033D           1275   ;        -----------------------------------------
033D           1276   ;         function turn_right
033D           1277   ;        -----------------------------------------
033D           1278   _turn_right:
033D           1279   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:262: turn_timer = 0;
033D E4        1280            clr     a
033E F5C8      1281            mov     _turn_timer,a
0340 F5C9      1282            mov     (_turn_timer + 1),a
0342           1283   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:263: turn_time_update = 1;
0342 D2E8      1284            setb    _turn_time_update
0344           1285   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:264: while(1){
0344           1286   L018004?:
0344           1287   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:265: pwm_left = 100;
0344 754864    1288            mov     _pwm_left,#0x64
0347           1289   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:266: pwm_right = 20;
0347 750814    1290            mov     _pwm_right,#0x14
034A           1291   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:267: if(turn_timer == 2000){
034A 74D0      1292            mov     a,#0xD0
034C B5C868    1293            cjne    a,_turn_timer,L018004?
034F 7407      1294            mov     a,#0x07
0351 B5C968    1295            cjne    a,(_turn_timer + 1),L018004?
0354           1296   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:268: turn_time_update = 0;
0354 C2E8      1297            clr     _turn_time_update
0356           1298   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:269: turn_timer = 0;
0356 E4        1299            clr     a
0357 F5C8      1300            mov     _turn_timer,a
0359 F5C9      1301            mov     (_turn_timer + 1),a
035B           1302   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:270: break;
035B 22        1303            ret
035C           1304   ;------------------------------------------------------------
035C           1305   ;Allocation info for local variables in function 'stop'
035C           1306   ;------------------------------------------------------------
035C           1307   ;------------------------------------------------------------
035C           1308   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:275: void stop(void){
035C           1309   ;        -----------------------------------------
035C           1310   ;         function stop
035C           1311   ;        -----------------------------------------
035C           1312   _stop:
035C           1313   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:276: while(1){
035C           1314   L019002?:
035C           1315   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:277: pwm_left = 0;
035C 754800    1316            mov     _pwm_left,#0x00
035F           1317   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:278: pwm_right = 0;
035F 750800    1318            mov     _pwm_right,#0x00
0362 8001      1319            sjmp    L019002?
0364           1320   ;------------------------------------------------------------
0364           1321   ;Allocation info for local variables in function 'execute'
0364           1322   ;------------------------------------------------------------
0364           1323   ;command                   Allocated to registers r2 r3 
0364           1324   ;------------------------------------------------------------
0364           1325   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:282: void execute(int command){
0364           1326   ;        -----------------------------------------
0364           1327   ;         function execute
0364           1328   ;        -----------------------------------------
0364           1329   _execute:
0364 AA82      1330            mov     r2,dpl
0366 AB83      1331            mov     r3,dph
0368           1332   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:283: switch(command){
0368 BA02E8    1333            cjne    r2,#0x02,L020014?
036B BB00E8    1334            cjne    r3,#0x00,L020014?
036E 8001      1335            sjmp    L020001?
0370           1336   L020014?:
0370 BA0368    1337            cjne    r2,#0x03,L020015?
0373 BB0068    1338            cjne    r3,#0x00,L020015?
0376 8001      1339            sjmp    L020002?
0378           1340   L020015?:
0378           1341   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:284: case 2:
0378 BA04E8    1342            cjne    r2,#0x04,L020008?
037B BB00E8    1343            cjne    r3,#0x00,L020008?
037E 8001      1344            sjmp    L020003?
0380           1345   L020001?:
0380           1346   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:285: turn_left();
0380 120100    1347            lcall   _turn_left
0383           1348   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:286: case 3:
0383           1349   L020002?:
0383           1350   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:287: turn_right();
0383 120100    1351            lcall   _turn_right
0386           1352   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:288: case 4:
0386           1353   L020003?:
0386           1354   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:289: if(start == 1){
0386           1355   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:290: start = 0;
0386 109868    1356            jbc     _start,L020017?
0389 8001      1357            sjmp    L020005?
038B           1358   L020017?:
038B 22        1359            ret
038C           1360   L020005?:
038C           1361   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:293: stop();
038C           1362   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:295: }
038C 020100    1363            ljmp    _stop
038F           1364   L020008?:
038F 22        1365            ret
0390           1366   ;------------------------------------------------------------
0390           1367   ;Allocation info for local variables in function 'main'
0390           1368   ;------------------------------------------------------------
0390           1369   ;cor                       Allocated to registers r2 r3 r4 r5 
0390           1370   ;cur_error                 Allocated with name '_main_cur_error_1_112'
0390           1371   ;pre_error                 Allocated with name '_main_pre_error_1_112'
0390           1372   ;thresh                    Allocated to registers 
0390           1373   ;left                      Allocated with name '_main_left_1_112'
0390           1374   ;right                     Allocated with name '_main_right_1_112'
0390           1375   ;line_sensor               Allocated with name '_main_line_sensor_1_112'
0390           1376   ;diff                      Allocated with name '_main_diff_1_112'
0390           1377   ;line_counter              Allocated with name '_main_line_counter_1_112'
0390           1378   ;command                   Allocated with name '_main_command_1_112'
0390           1379   ;state                     Allocated with name '_main_state_1_112'
0390           1380   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0390           1381   ;------------------------------------------------------------
0390           1382   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:298: void main (void){
0390           1383   ;        -----------------------------------------
0390           1384   ;         function main
0390           1385   ;        -----------------------------------------
0390           1386   _main:
0390           1387   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:301: double cur_error =0;
0390           1388   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:306: double left = (AD1DAT1/255.0)*3.3;
0390 E4        1389            clr     a
0391 F528      1390            mov     _main_cur_error_1_112,a
0393 F529      1391            mov     (_main_cur_error_1_112 + 1),a
0395 F52A      1392            mov     (_main_cur_error_1_112 + 2),a
0397 F52B      1393            mov     (_main_cur_error_1_112 + 3),a
0399 E5D6      1394            mov     a,_AD1DAT1
039B           1395   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:307: double right = (AD1DAT2/255.0)*3.3;
039B E5D7      1396            mov     a,_AD1DAT2
039D           1397   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:308: double line_sensor = (AD1DAT3/255.0)*3.3;
039D E5F5      1398            mov     a,_AD1DAT3
039F           1399   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:312: int line_counter = 0;
039F           1400   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:313: int command = 0;
039F E4        1401            clr     a
03A0 F508      1402            mov     _main_line_counter_1_112,a
03A2 F509      1403            mov     (_main_line_counter_1_112 + 1),a
03A4 F558      1404            mov     _main_command_1_112,a
03A6 F559      1405            mov     (_main_command_1_112 + 1),a
03A8           1406   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:314: int state = 1;  
03A8 75A801    1407            mov     _main_state_1_112,#0x01
03AB E4        1408            clr     a
03AC F5A9      1409            mov     (_main_state_1_112 + 1),a
03AE           1410   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:317: InitPorts();
03AE 120100    1411            lcall   _InitPorts
03B1           1412   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:318: LCD_8BIT();
03B1 120100    1413            lcall   _LCD_8BIT
03B4           1414   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:319: InitSerialPort();
03B4 120100    1415            lcall   _InitSerialPort
03B7           1416   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:320: InitADC();
03B7 120100    1417            lcall   _InitADC
03BA           1418   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:321: InitTimer0();
03BA 120100    1419            lcall   _InitTimer0
03BD           1420   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:324: pre_error = 0;
03BD 757800    1421            mov     _main_pre_error_1_112,#0x00
03C0 757900    1422            mov     (_main_pre_error_1_112 + 1),#0x00
03C3 757A00    1423            mov     (_main_pre_error_1_112 + 2),#0x00
03C6 757B00    1424            mov     (_main_pre_error_1_112 + 3),#0x00
03C9           1425   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:325: while(1)
03C9           1426   L021036?:
03C9           1427   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:335: left = (AD1DAT1/255.0)*3.3;
03C9 85D682    1428            mov     dpl,_AD1DAT1
03CC 120100    1429            lcall   ___uchar2fs
03CF AE82      1430            mov     r6,dpl
03D1 AF83      1431            mov     r7,dph
03D3 A8F0      1432            mov     r0,b
03D5 F9        1433            mov     r1,a
03D6 E4        1434            clr     a
03D7 C0E0      1435            push    acc
03D9 C0E0      1436            push    acc
03DB 747F      1437            mov     a,#0x7F
03DD C0E0      1438            push    acc
03DF 7443      1439            mov     a,#0x43
03E1 C0E0      1440            push    acc
03E3 8E82      1441            mov     dpl,r6
03E5 8F83      1442            mov     dph,r7
03E7 88F0      1443            mov     b,r0
03E9 E9        1444            mov     a,r1
03EA 120100    1445            lcall   ___fsdiv
03ED AE82      1446            mov     r6,dpl
03EF AF83      1447            mov     r7,dph
03F1 A8F0      1448            mov     r0,b
03F3 F9        1449            mov     r1,a
03F4 E581      1450            mov     a,sp
03F6 24FC      1451            add     a,#0xfc
03F8 F581      1452            mov     sp,a
03FA C006      1453            push    ar6
03FC C007      1454            push    ar7
03FE C000      1455            push    ar0
0400 C001      1456            push    ar1
0402 903333    1457            mov     dptr,#0x3333
0405 75F053    1458            mov     b,#0x53
0408 7440      1459            mov     a,#0x40
040A 120100    1460            lcall   ___fsmul
040D 8582C8    1461            mov     _main_left_1_112,dpl
0410 8583C9    1462            mov     (_main_left_1_112 + 1),dph
0413 85F0CA    1463            mov     (_main_left_1_112 + 2),b
0416 F5CB      1464            mov     (_main_left_1_112 + 3),a
0418 E581      1465            mov     a,sp
041A 24FC      1466            add     a,#0xfc
041C F581      1467            mov     sp,a
041E           1468   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:336: right = (AD1DAT2/255.0)*3.3;
041E 85D782    1469            mov     dpl,_AD1DAT2
0421 120100    1470            lcall   ___uchar2fs
0424 AE82      1471            mov     r6,dpl
0426 AF83      1472            mov     r7,dph
0428 A8F0      1473            mov     r0,b
042A F9        1474            mov     r1,a
042B E4        1475            clr     a
042C C0E0      1476            push    acc
042E C0E0      1477            push    acc
0430 747F      1478            mov     a,#0x7F
0432 C0E0      1479            push    acc
0434 7443      1480            mov     a,#0x43
0436 C0E0      1481            push    acc
0438 8E82      1482            mov     dpl,r6
043A 8F83      1483            mov     dph,r7
043C 88F0      1484            mov     b,r0
043E E9        1485            mov     a,r1
043F 120100    1486            lcall   ___fsdiv
0442 AE82      1487            mov     r6,dpl
0444 AF83      1488            mov     r7,dph
0446 A8F0      1489            mov     r0,b
0448 F9        1490            mov     r1,a
0449 E581      1491            mov     a,sp
044B 24FC      1492            add     a,#0xfc
044D F581      1493            mov     sp,a
044F C006      1494            push    ar6
0451 C007      1495            push    ar7
0453 C000      1496            push    ar0
0455 C001      1497            push    ar1
0457 903333    1498            mov     dptr,#0x3333
045A 75F053    1499            mov     b,#0x53
045D 7440      1500            mov     a,#0x40
045F 120100    1501            lcall   ___fsmul
0462 858218    1502            mov     _main_right_1_112,dpl
0465 858319    1503            mov     (_main_right_1_112 + 1),dph
0468 85F01A    1504            mov     (_main_right_1_112 + 2),b
046B F51B      1505            mov     (_main_right_1_112 + 3),a
046D E581      1506            mov     a,sp
046F 24FC      1507            add     a,#0xfc
0471 F581      1508            mov     sp,a
0473           1509   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:337: line_sensor = (AD1DAT3/255.0)*3.3;
0473 85F582    1510            mov     dpl,_AD1DAT3
0476 120100    1511            lcall   ___uchar2fs
0479 AE82      1512            mov     r6,dpl
047B AF83      1513            mov     r7,dph
047D A8F0      1514            mov     r0,b
047F F9        1515            mov     r1,a
0480 E4        1516            clr     a
0481 C0E0      1517            push    acc
0483 C0E0      1518            push    acc
0485 747F      1519            mov     a,#0x7F
0487 C0E0      1520            push    acc
0489 7443      1521            mov     a,#0x43
048B C0E0      1522            push    acc
048D 8E82      1523            mov     dpl,r6
048F 8F83      1524            mov     dph,r7
0491 88F0      1525            mov     b,r0
0493 E9        1526            mov     a,r1
0494 120100    1527            lcall   ___fsdiv
0497 AE82      1528            mov     r6,dpl
0499 AF83      1529            mov     r7,dph
049B A8F0      1530            mov     r0,b
049D F9        1531            mov     r1,a
049E E581      1532            mov     a,sp
04A0 24FC      1533            add     a,#0xfc
04A2 F581      1534            mov     sp,a
04A4 C006      1535            push    ar6
04A6 C007      1536            push    ar7
04A8 C000      1537            push    ar0
04AA C001      1538            push    ar1
04AC 903333    1539            mov     dptr,#0x3333
04AF 75F053    1540            mov     b,#0x53
04B2 7440      1541            mov     a,#0x40
04B4 120100    1542            lcall   ___fsmul
04B7 858268    1543            mov     _main_line_sensor_1_112,dpl
04BA 858369    1544            mov     (_main_line_sensor_1_112 + 1),dph
04BD 85F06A    1545            mov     (_main_line_sensor_1_112 + 2),b
04C0 F56B      1546            mov     (_main_line_sensor_1_112 + 3),a
04C2 E581      1547            mov     a,sp
04C4 24FC      1548            add     a,#0xfc
04C6 F581      1549            mov     sp,a
04C8           1550   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:338: diff = left - right;
04C8 C018      1551            push    _main_right_1_112
04CA C019      1552            push    (_main_right_1_112 + 1)
04CC C01A      1553            push    (_main_right_1_112 + 2)
04CE C01B      1554            push    (_main_right_1_112 + 3)
04D0 85C882    1555            mov     dpl,_main_left_1_112
04D3 85C983    1556            mov     dph,(_main_left_1_112 + 1)
04D6 85CAF0    1557            mov     b,(_main_left_1_112 + 2)
04D9 E5CB      1558            mov     a,(_main_left_1_112 + 3)
04DB 120100    1559            lcall   ___fssub
04DE 8582B8    1560            mov     _main_diff_1_112,dpl
04E1 8583B9    1561            mov     (_main_diff_1_112 + 1),dph
04E4 85F0BA    1562            mov     (_main_diff_1_112 + 2),b
04E7 F5BB      1563            mov     (_main_diff_1_112 + 3),a
04E9 E581      1564            mov     a,sp
04EB 24FC      1565            add     a,#0xfc
04ED F581      1566            mov     sp,a
04EF           1567   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:341: if(time_update_flag==1) // If the clock has been updated, refresh the display
04EF 303868    1568            jnb     _time_update_flag,L021002?
04F2           1569   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:343: display_LCD();
04F2 120100    1570            lcall   _display_LCD
04F5           1571   L021002?:
04F5           1572   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:349: if((left > 0.9) && (left < 1.1) && (right > 0.9) && (right < 1.1)){
04F5 7466      1573            mov     a,#0x66
04F7 C0E0      1574            push    acc
04F9 C0E0      1575            push    acc
04FB C0E0      1576            push    acc
04FD 743F      1577            mov     a,#0x3F
04FF C0E0      1578            push    acc
0501 85C882    1579            mov     dpl,_main_left_1_112
0504 85C983    1580            mov     dph,(_main_left_1_112 + 1)
0507 85CAF0    1581            mov     b,(_main_left_1_112 + 2)
050A E5CB      1582            mov     a,(_main_left_1_112 + 3)
050C 120100    1583            lcall   ___fsgt
050F AE82      1584            mov     r6,dpl
0511 E581      1585            mov     a,sp
0513 24FC      1586            add     a,#0xfc
0515 F581      1587            mov     sp,a
0517 EE        1588            mov     a,r6
0518 7001      1589            jnz     L021062?
051A 020100    1590            ljmp    L021004?
051D           1591   L021062?:
051D 74CD      1592            mov     a,#0xCD
051F C0E0      1593            push    acc
0521 74CC      1594            mov     a,#0xCC
0523 C0E0      1595            push    acc
0525 748C      1596            mov     a,#0x8C
0527 C0E0      1597            push    acc
0529 743F      1598            mov     a,#0x3F
052B C0E0      1599            push    acc
052D 85C882    1600            mov     dpl,_main_left_1_112
0530 85C983    1601            mov     dph,(_main_left_1_112 + 1)
0533 85CAF0    1602            mov     b,(_main_left_1_112 + 2)
0536 E5CB      1603            mov     a,(_main_left_1_112 + 3)
0538 120100    1604            lcall   ___fslt
053B AE82      1605            mov     r6,dpl
053D E581      1606            mov     a,sp
053F 24FC      1607            add     a,#0xfc
0541 F581      1608            mov     sp,a
0543 EE        1609            mov     a,r6
0544 6001      1610            jz      L021004?
0546 7466      1611            mov     a,#0x66
0548 C0E0      1612            push    acc
054A C0E0      1613            push    acc
054C C0E0      1614            push    acc
054E 743F      1615            mov     a,#0x3F
0550 C0E0      1616            push    acc
0552 851882    1617            mov     dpl,_main_right_1_112
0555 851983    1618            mov     dph,(_main_right_1_112 + 1)
0558 851AF0    1619            mov     b,(_main_right_1_112 + 2)
055B E51B      1620            mov     a,(_main_right_1_112 + 3)
055D 120100    1621            lcall   ___fsgt
0560 AE82      1622            mov     r6,dpl
0562 E581      1623            mov     a,sp
0564 24FC      1624            add     a,#0xfc
0566 F581      1625            mov     sp,a
0568 EE        1626            mov     a,r6
0569 6001      1627            jz      L021004?
056B 74CD      1628            mov     a,#0xCD
056D C0E0      1629            push    acc
056F 74CC      1630            mov     a,#0xCC
0571 C0E0      1631            push    acc
0573 748C      1632            mov     a,#0x8C
0575 C0E0      1633            push    acc
0577 743F      1634            mov     a,#0x3F
0579 C0E0      1635            push    acc
057B 851882    1636            mov     dpl,_main_right_1_112
057E 851983    1637            mov     dph,(_main_right_1_112 + 1)
0581 851AF0    1638            mov     b,(_main_right_1_112 + 2)
0584 E51B      1639            mov     a,(_main_right_1_112 + 3)
0586 120100    1640            lcall   ___fslt
0589 AE82      1641            mov     r6,dpl
058B E581      1642            mov     a,sp
058D 24FC      1643            add     a,#0xfc
058F F581      1644            mov     sp,a
0591 EE        1645            mov     a,r6
0592 6001      1646            jz      L021004?
0594           1647   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:350: cur_error = 0;
0594 752800    1648            mov     _main_cur_error_1_112,#0x00
0597 752900    1649            mov     (_main_cur_error_1_112 + 1),#0x00
059A 752A00    1650            mov     (_main_cur_error_1_112 + 2),#0x00
059D 752B00    1651            mov     (_main_cur_error_1_112 + 3),#0x00
05A0           1652   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:351: pwm_left = 100;
05A0 754864    1653            mov     _pwm_left,#0x64
05A3           1654   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:352: pwm_right = 100;
05A3 750864    1655            mov     _pwm_right,#0x64
05A6           1656   L021004?:
05A6           1657   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:354: if(0.1<diff){   
05A6 C0B8      1658            push    _main_diff_1_112
05A8 C0B9      1659            push    (_main_diff_1_112 + 1)
05AA C0BA      1660            push    (_main_diff_1_112 + 2)
05AC C0BB      1661            push    (_main_diff_1_112 + 3)
05AE 90CCCD    1662            mov     dptr,#0xCCCD
05B1 75F0CC    1663            mov     b,#0xCC
05B4 743D      1664            mov     a,#0x3D
05B6 120100    1665            lcall   ___fslt
05B9 AE82      1666            mov     r6,dpl
05BB E581      1667            mov     a,sp
05BD 24FC      1668            add     a,#0xfc
05BF F581      1669            mov     sp,a
05C1 EE        1670            mov     a,r6
05C2 7001      1671            jnz     L021066?
05C4 020100    1672            ljmp    L021009?
05C7           1673   L021066?:
05C7           1674   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:355: cur_error = 1;
05C7 752800    1675            mov     _main_cur_error_1_112,#0x00
05CA 752900    1676            mov     (_main_cur_error_1_112 + 1),#0x00
05CD 752A80    1677            mov     (_main_cur_error_1_112 + 2),#0x80
05D0 752B3F    1678            mov     (_main_cur_error_1_112 + 3),#0x3F
05D3           1679   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:356: cor = KP * 2 * diff * cur_error + KD*(cur_error - pre_error);
05D3 C0B8      1680            push    _main_diff_1_112
05D5 C0B9      1681            push    (_main_diff_1_112 + 1)
05D7 C0BA      1682            push    (_main_diff_1_112 + 2)
05D9 C0BB      1683            push    (_main_diff_1_112 + 3)
05DB 900000    1684            mov     dptr,#0x0000
05DE 75F020    1685            mov     b,#0x20
05E1 7442      1686            mov     a,#0x42
05E3 120100    1687            lcall   ___fsmul
05E6 AE82      1688            mov     r6,dpl
05E8 AF83      1689            mov     r7,dph
05EA A8F0      1690            mov     r0,b
05EC F9        1691            mov     r1,a
05ED E581      1692            mov     a,sp
05EF 24FC      1693            add     a,#0xfc
05F1 F581      1694            mov     sp,a
05F3 C006      1695            push    ar6
05F5 C007      1696            push    ar7
05F7 C000      1697            push    ar0
05F9 C001      1698            push    ar1
05FB C078      1699            push    _main_pre_error_1_112
05FD C079      1700            push    (_main_pre_error_1_112 + 1)
05FF C07A      1701            push    (_main_pre_error_1_112 + 2)
0601 C07B      1702            push    (_main_pre_error_1_112 + 3)
0603 900000    1703            mov     dptr,#0x0000
0606 75F080    1704            mov     b,#0x80
0609 743F      1705            mov     a,#0x3F
060B 120100    1706            lcall   ___fssub
060E AA82      1707            mov     r2,dpl
0610 AB83      1708            mov     r3,dph
0612 ACF0      1709            mov     r4,b
0614 FD        1710            mov     r5,a
0615 E581      1711            mov     a,sp
0617 24FC      1712            add     a,#0xfc
0619 F581      1713            mov     sp,a
061B C002      1714            push    ar2
061D C003      1715            push    ar3
061F C004      1716            push    ar4
0621 C005      1717            push    ar5
0623 900000    1718            mov     dptr,#0x0000
0626 75F020    1719            mov     b,#0x20
0629 7441      1720            mov     a,#0x41
062B 120100    1721            lcall   ___fsmul
062E AA82      1722            mov     r2,dpl
0630 AB83      1723            mov     r3,dph
0632 ACF0      1724            mov     r4,b
0634 FD        1725            mov     r5,a
0635 E581      1726            mov     a,sp
0637 24FC      1727            add     a,#0xfc
0639 F581      1728            mov     sp,a
063B D001      1729            pop     ar1
063D D000      1730            pop     ar0
063F D007      1731            pop     ar7
0641 D006      1732            pop     ar6
0643 C002      1733            push    ar2
0645 C003      1734            push    ar3
0647 C004      1735            push    ar4
0649 C005      1736            push    ar5
064B 8E82      1737            mov     dpl,r6
064D 8F83      1738            mov     dph,r7
064F 88F0      1739            mov     b,r0
0651 E9        1740            mov     a,r1
0652 120100    1741            lcall   ___fsadd
0655 AA82      1742            mov     r2,dpl
0657 AB83      1743            mov     r3,dph
0659 ACF0      1744            mov     r4,b
065B FD        1745            mov     r5,a
065C E581      1746            mov     a,sp
065E 24FC      1747            add     a,#0xfc
0660 F581      1748            mov     sp,a
0662           1749   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:357: pwm_left = 100 - cor;
0662 C002      1750            push    ar2
0664 C003      1751            push    ar3
0666 C004      1752            push    ar4
0668 C005      1753            push    ar5
066A 900000    1754            mov     dptr,#0x0000
066D 75F0C8    1755            mov     b,#0xC8
0670 7442      1756            mov     a,#0x42
0672 120100    1757            lcall   ___fssub
0675 AE82      1758            mov     r6,dpl
0677 AF83      1759            mov     r7,dph
0679 A8F0      1760            mov     r0,b
067B F9        1761            mov     r1,a
067C E581      1762            mov     a,sp
067E 24FC      1763            add     a,#0xfc
0680 F581      1764            mov     sp,a
0682 8E82      1765            mov     dpl,r6
0684 8F83      1766            mov     dph,r7
0686 88F0      1767            mov     b,r0
0688 E9        1768            mov     a,r1
0689 120100    1769            lcall   ___fs2uchar
068C 858248    1770            mov     _pwm_left,dpl
068F           1771   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:358: pwm_right = 100;
068F 750864    1772            mov     _pwm_right,#0x64
0692           1773   L021009?:
0692           1774   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:360: if(diff<-0.1){
0692 74CD      1775            mov     a,#0xCD
0694 C0E0      1776            push    acc
0696 74CC      1777            mov     a,#0xCC
0698 C0E0      1778            push    acc
069A C0E0      1779            push    acc
069C 74BD      1780            mov     a,#0xBD
069E C0E0      1781            push    acc
06A0 85B882    1782            mov     dpl,_main_diff_1_112
06A3 85B983    1783            mov     dph,(_main_diff_1_112 + 1)
06A6 85BAF0    1784            mov     b,(_main_diff_1_112 + 2)
06A9 E5BB      1785            mov     a,(_main_diff_1_112 + 3)
06AB 120100    1786            lcall   ___fslt
06AE AE82      1787            mov     r6,dpl
06B0 E581      1788            mov     a,sp
06B2 24FC      1789            add     a,#0xfc
06B4 F581      1790            mov     sp,a
06B6 EE        1791            mov     a,r6
06B7 7001      1792            jnz     L021067?
06B9 020100    1793            ljmp    L021011?
06BC           1794   L021067?:
06BC           1795   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:361: cur_error= -1;
06BC 752800    1796            mov     _main_cur_error_1_112,#0x00
06BF 752900    1797            mov     (_main_cur_error_1_112 + 1),#0x00
06C2 752A80    1798            mov     (_main_cur_error_1_112 + 2),#0x80
06C5 752BBF    1799            mov     (_main_cur_error_1_112 + 3),#0xBF
06C8           1800   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:362: cor = KP * -2 * diff * cur_error + KD*(cur_error - pre_error);
06C8 C0B8      1801            push    _main_diff_1_112
06CA C0B9      1802            push    (_main_diff_1_112 + 1)
06CC C0BA      1803            push    (_main_diff_1_112 + 2)
06CE C0BB      1804            push    (_main_diff_1_112 + 3)
06D0 900000    1805            mov     dptr,#0x0000
06D3 75F020    1806            mov     b,#0x20
06D6 74C2      1807            mov     a,#0xC2
06D8 120100    1808            lcall   ___fsmul
06DB AE82      1809            mov     r6,dpl
06DD AF83      1810            mov     r7,dph
06DF A8F0      1811            mov     r0,b
06E1 F9        1812            mov     r1,a
06E2 E581      1813            mov     a,sp
06E4 24FC      1814            add     a,#0xfc
06E6 F581      1815            mov     sp,a
06E8 8EE8      1816            mov     _main_sloc0_1_0,r6
06EA 8FE9      1817            mov     (_main_sloc0_1_0 + 1),r7
06EC 88EA      1818            mov     (_main_sloc0_1_0 + 2),r0
06EE E9        1819            mov     a,r1
06EF B2E7      1820            cpl     acc.7
06F1 F5EB      1821            mov     (_main_sloc0_1_0 + 3),a
06F3 C078      1822            push    _main_pre_error_1_112
06F5 C079      1823            push    (_main_pre_error_1_112 + 1)
06F7 C07A      1824            push    (_main_pre_error_1_112 + 2)
06F9 C07B      1825            push    (_main_pre_error_1_112 + 3)
06FB 900000    1826            mov     dptr,#0x0000
06FE 75F080    1827            mov     b,#0x80
0701 74BF      1828            mov     a,#0xBF
0703 120100    1829            lcall   ___fssub
0706 AE82      1830            mov     r6,dpl
0708 AF83      1831            mov     r7,dph
070A A8F0      1832            mov     r0,b
070C F9        1833            mov     r1,a
070D E581      1834            mov     a,sp
070F 24FC      1835            add     a,#0xfc
0711 F581      1836            mov     sp,a
0713 C006      1837            push    ar6
0715 C007      1838            push    ar7
0717 C000      1839            push    ar0
0719 C001      1840            push    ar1
071B 900000    1841            mov     dptr,#0x0000
071E 75F020    1842            mov     b,#0x20
0721 7441      1843            mov     a,#0x41
0723 120100    1844            lcall   ___fsmul
0726 AE82      1845            mov     r6,dpl
0728 AF83      1846            mov     r7,dph
072A A8F0      1847            mov     r0,b
072C F9        1848            mov     r1,a
072D E581      1849            mov     a,sp
072F 24FC      1850            add     a,#0xfc
0731 F581      1851            mov     sp,a
0733 C006      1852            push    ar6
0735 C007      1853            push    ar7
0737 C000      1854            push    ar0
0739 C001      1855            push    ar1
073B 85E882    1856            mov     dpl,_main_sloc0_1_0
073E 85E983    1857            mov     dph,(_main_sloc0_1_0 + 1)
0741 85EAF0    1858            mov     b,(_main_sloc0_1_0 + 2)
0744 E5EB      1859            mov     a,(_main_sloc0_1_0 + 3)
0746 120100    1860            lcall   ___fsadd
0749 AA82      1861            mov     r2,dpl
074B AB83      1862            mov     r3,dph
074D ACF0      1863            mov     r4,b
074F FD        1864            mov     r5,a
0750 E581      1865            mov     a,sp
0752 24FC      1866            add     a,#0xfc
0754 F581      1867            mov     sp,a
0756           1868   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:363: pwm_left = 100;
0756 754864    1869            mov     _pwm_left,#0x64
0759           1870   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:364: pwm_right = 100 + cor;
0759 E4        1871            clr     a
075A C0E0      1872            push    acc
075C C0E0      1873            push    acc
075E 74C8      1874            mov     a,#0xC8
0760 C0E0      1875            push    acc
0762 7442      1876            mov     a,#0x42
0764 C0E0      1877            push    acc
0766 8A82      1878            mov     dpl,r2
0768 8B83      1879            mov     dph,r3
076A 8CF0      1880            mov     b,r4
076C ED        1881            mov     a,r5
076D 120100    1882            lcall   ___fsadd
0770 AE82      1883            mov     r6,dpl
0772 AF83      1884            mov     r7,dph
0774 A8F0      1885            mov     r0,b
0776 F9        1886            mov     r1,a
0777 E581      1887            mov     a,sp
0779 24FC      1888            add     a,#0xfc
077B F581      1889            mov     sp,a
077D 8E82      1890            mov     dpl,r6
077F 8F83      1891            mov     dph,r7
0781 88F0      1892            mov     b,r0
0783 E9        1893            mov     a,r1
0784 120100    1894            lcall   ___fs2uchar
0787 858208    1895            mov     _pwm_right,dpl
078A           1896   L021011?:
078A           1897   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:377: if((left < 0.8) && (right < 0.8)){
078A 74CD      1898            mov     a,#0xCD
078C C0E0      1899            push    acc
078E 74CC      1900            mov     a,#0xCC
0790 C0E0      1901            push    acc
0792 744C      1902            mov     a,#0x4C
0794 C0E0      1903            push    acc
0796 743F      1904            mov     a,#0x3F
0798 C0E0      1905            push    acc
079A 85C882    1906            mov     dpl,_main_left_1_112
079D 85C983    1907            mov     dph,(_main_left_1_112 + 1)
07A0 85CAF0    1908            mov     b,(_main_left_1_112 + 2)
07A3 E5CB      1909            mov     a,(_main_left_1_112 + 3)
07A5 120100    1910            lcall   ___fslt
07A8 AE82      1911            mov     r6,dpl
07AA E581      1912            mov     a,sp
07AC 24FC      1913            add     a,#0xfc
07AE F581      1914            mov     sp,a
07B0 EE        1915            mov     a,r6
07B1 7001      1916            jnz     L021068?
07B3 020100    1917            ljmp    L021017?
07B6           1918   L021068?:
07B6 74CD      1919            mov     a,#0xCD
07B8 C0E0      1920            push    acc
07BA 74CC      1921            mov     a,#0xCC
07BC C0E0      1922            push    acc
07BE 744C      1923            mov     a,#0x4C
07C0 C0E0      1924            push    acc
07C2 743F      1925            mov     a,#0x3F
07C4 C0E0      1926            push    acc
07C6 851882    1927            mov     dpl,_main_right_1_112
07C9 851983    1928            mov     dph,(_main_right_1_112 + 1)
07CC 851AF0    1929            mov     b,(_main_right_1_112 + 2)
07CF E51B      1930            mov     a,(_main_right_1_112 + 3)
07D1 120100    1931            lcall   ___fslt
07D4 AE82      1932            mov     r6,dpl
07D6 E581      1933            mov     a,sp
07D8 24FC      1934            add     a,#0xfc
07DA F581      1935            mov     sp,a
07DC EE        1936            mov     a,r6
07DD 7001      1937            jnz     L021069?
07DF 020100    1938            ljmp    L021017?
07E2           1939   L021069?:
07E2           1940   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:378: if(pre_error > 0){
07E2 E4        1941            clr     a
07E3 C0E0      1942            push    acc
07E5 C0E0      1943            push    acc
07E7 C0E0      1944            push    acc
07E9 C0E0      1945            push    acc
07EB 857882    1946            mov     dpl,_main_pre_error_1_112
07EE 857983    1947            mov     dph,(_main_pre_error_1_112 + 1)
07F1 857AF0    1948            mov     b,(_main_pre_error_1_112 + 2)
07F4 E57B      1949            mov     a,(_main_pre_error_1_112 + 3)
07F6 120100    1950            lcall   ___fsgt
07F9 AE82      1951            mov     r6,dpl
07FB E581      1952            mov     a,sp
07FD 24FC      1953            add     a,#0xfc
07FF F581      1954            mov     sp,a
0801 EE        1955            mov     a,r6
0802 7001      1956            jnz     L021070?
0804 020100    1957            ljmp    L021013?
0807           1958   L021070?:
0807           1959   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:379: cur_error = 5;
0807 752800    1960            mov     _main_cur_error_1_112,#0x00
080A 752900    1961            mov     (_main_cur_error_1_112 + 1),#0x00
080D 752AA0    1962            mov     (_main_cur_error_1_112 + 2),#0xA0
0810 752B40    1963            mov     (_main_cur_error_1_112 + 3),#0x40
0813           1964   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:380: cor = KP * cur_error + KD*(cur_error - pre_error);
0813 C078      1965            push    _main_pre_error_1_112
0815 C079      1966            push    (_main_pre_error_1_112 + 1)
0817 C07A      1967            push    (_main_pre_error_1_112 + 2)
0819 C07B      1968            push    (_main_pre_error_1_112 + 3)
081B 900000    1969            mov     dptr,#0x0000
081E 75F0A0    1970            mov     b,#0xA0
0821 7440      1971            mov     a,#0x40
0823 120100    1972            lcall   ___fssub
0826 AE82      1973            mov     r6,dpl
0828 AF83      1974            mov     r7,dph
082A A8F0      1975            mov     r0,b
082C F9        1976            mov     r1,a
082D E581      1977            mov     a,sp
082F 24FC      1978            add     a,#0xfc
0831 F581      1979            mov     sp,a
0833 C006      1980            push    ar6
0835 C007      1981            push    ar7
0837 C000      1982            push    ar0
0839 C001      1983            push    ar1
083B 900000    1984            mov     dptr,#0x0000
083E 75F020    1985            mov     b,#0x20
0841 7441      1986            mov     a,#0x41
0843 120100    1987            lcall   ___fsmul
0846 AE82      1988            mov     r6,dpl
0848 AF83      1989            mov     r7,dph
084A A8F0      1990            mov     r0,b
084C F9        1991            mov     r1,a
084D E581      1992            mov     a,sp
084F 24FC      1993            add     a,#0xfc
0851 F581      1994            mov     sp,a
0853 C006      1995            push    ar6
0855 C007      1996            push    ar7
0857 C000      1997            push    ar0
0859 C001      1998            push    ar1
085B 900000    1999            mov     dptr,#0x0000
085E 75F0C8    2000            mov     b,#0xC8
0861 7442      2001            mov     a,#0x42
0863 120100    2002            lcall   ___fsadd
0866 AA82      2003            mov     r2,dpl
0868 AB83      2004            mov     r3,dph
086A ACF0      2005            mov     r4,b
086C FD        2006            mov     r5,a
086D E581      2007            mov     a,sp
086F 24FC      2008            add     a,#0xfc
0871 F581      2009            mov     sp,a
0873           2010   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:381: pwm_left = 100 - cor;
0873 C002      2011            push    ar2
0875 C003      2012            push    ar3
0877 C004      2013            push    ar4
0879 C005      2014            push    ar5
087B 900000    2015            mov     dptr,#0x0000
087E 75F0C8    2016            mov     b,#0xC8
0881 7442      2017            mov     a,#0x42
0883 120100    2018            lcall   ___fssub
0886 AE82      2019            mov     r6,dpl
0888 AF83      2020            mov     r7,dph
088A A8F0      2021            mov     r0,b
088C F9        2022            mov     r1,a
088D E581      2023            mov     a,sp
088F 24FC      2024            add     a,#0xfc
0891 F581      2025            mov     sp,a
0893 8E82      2026            mov     dpl,r6
0895 8F83      2027            mov     dph,r7
0897 88F0      2028            mov     b,r0
0899 E9        2029            mov     a,r1
089A 120100    2030            lcall   ___fs2uchar
089D 858248    2031            mov     _pwm_left,dpl
08A0           2032   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:382: pwm_right = 100;
08A0 750864    2033            mov     _pwm_right,#0x64
08A3           2034   L021013?:
08A3           2035   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:385: if(pre_error < 0){
08A3 E4        2036            clr     a
08A4 C0E0      2037            push    acc
08A6 C0E0      2038            push    acc
08A8 C0E0      2039            push    acc
08AA C0E0      2040            push    acc
08AC 857882    2041            mov     dpl,_main_pre_error_1_112
08AF 857983    2042            mov     dph,(_main_pre_error_1_112 + 1)
08B2 857AF0    2043            mov     b,(_main_pre_error_1_112 + 2)
08B5 E57B      2044            mov     a,(_main_pre_error_1_112 + 3)
08B7 120100    2045            lcall   ___fslt
08BA AE82      2046            mov     r6,dpl
08BC E581      2047            mov     a,sp
08BE 24FC      2048            add     a,#0xfc
08C0 F581      2049            mov     sp,a
08C2 EE        2050            mov     a,r6
08C3 7001      2051            jnz     L021071?
08C5 020100    2052            ljmp    L021017?
08C8           2053   L021071?:
08C8           2054   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:386: cur_error = -5;
08C8 752800    2055            mov     _main_cur_error_1_112,#0x00
08CB 752900    2056            mov     (_main_cur_error_1_112 + 1),#0x00
08CE 752AA0    2057            mov     (_main_cur_error_1_112 + 2),#0xA0
08D1 752BC0    2058            mov     (_main_cur_error_1_112 + 3),#0xC0
08D4           2059   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:387: cor = KP * cur_error + KD*(cur_error - pre_error);
08D4 C078      2060            push    _main_pre_error_1_112
08D6 C079      2061            push    (_main_pre_error_1_112 + 1)
08D8 C07A      2062            push    (_main_pre_error_1_112 + 2)
08DA C07B      2063            push    (_main_pre_error_1_112 + 3)
08DC 900000    2064            mov     dptr,#0x0000
08DF 75F0A0    2065            mov     b,#0xA0
08E2 74C0      2066            mov     a,#0xC0
08E4 120100    2067            lcall   ___fssub
08E7 AE82      2068            mov     r6,dpl
08E9 AF83      2069            mov     r7,dph
08EB A8F0      2070            mov     r0,b
08ED F9        2071            mov     r1,a
08EE E581      2072            mov     a,sp
08F0 24FC      2073            add     a,#0xfc
08F2 F581      2074            mov     sp,a
08F4 C006      2075            push    ar6
08F6 C007      2076            push    ar7
08F8 C000      2077            push    ar0
08FA C001      2078            push    ar1
08FC 900000    2079            mov     dptr,#0x0000
08FF 75F020    2080            mov     b,#0x20
0902 7441      2081            mov     a,#0x41
0904 120100    2082            lcall   ___fsmul
0907 AE82      2083            mov     r6,dpl
0909 AF83      2084            mov     r7,dph
090B A8F0      2085            mov     r0,b
090D F9        2086            mov     r1,a
090E E581      2087            mov     a,sp
0910 24FC      2088            add     a,#0xfc
0912 F581      2089            mov     sp,a
0914 C006      2090            push    ar6
0916 C007      2091            push    ar7
0918 C000      2092            push    ar0
091A C001      2093            push    ar1
091C 900000    2094            mov     dptr,#0x0000
091F 75F0C8    2095            mov     b,#0xC8
0922 74C2      2096            mov     a,#0xC2
0924 120100    2097            lcall   ___fsadd
0927 AA82      2098            mov     r2,dpl
0929 AB83      2099            mov     r3,dph
092B ACF0      2100            mov     r4,b
092D FD        2101            mov     r5,a
092E E581      2102            mov     a,sp
0930 24FC      2103            add     a,#0xfc
0932 F581      2104            mov     sp,a
0934           2105   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:388: pwm_left = 100;
0934 754864    2106            mov     _pwm_left,#0x64
0937           2107   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:389: pwm_right = 100 + cor;
0937 E4        2108            clr     a
0938 C0E0      2109            push    acc
093A C0E0      2110            push    acc
093C 74C8      2111            mov     a,#0xC8
093E C0E0      2112            push    acc
0940 7442      2113            mov     a,#0x42
0942 C0E0      2114            push    acc
0944 8A82      2115            mov     dpl,r2
0946 8B83      2116            mov     dph,r3
0948 8CF0      2117            mov     b,r4
094A ED        2118            mov     a,r5
094B 120100    2119            lcall   ___fsadd
094E AA82      2120            mov     r2,dpl
0950 AB83      2121            mov     r3,dph
0952 ACF0      2122            mov     r4,b
0954 FD        2123            mov     r5,a
0955 E581      2124            mov     a,sp
0957 24FC      2125            add     a,#0xfc
0959 F581      2126            mov     sp,a
095B 8A82      2127            mov     dpl,r2
095D 8B83      2128            mov     dph,r3
095F 8CF0      2129            mov     b,r4
0961 ED        2130            mov     a,r5
0962 120100    2131            lcall   ___fs2uchar
0965 858208    2132            mov     _pwm_right,dpl
0968           2133   L021017?:
0968           2134   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:393: pre_error = cur_error;
0968 852878    2135            mov     _main_pre_error_1_112,_main_cur_error_1_112
096B 852979    2136            mov     (_main_pre_error_1_112 + 1),(_main_cur_error_1_112 + 1)
096E 852A7A    2137            mov     (_main_pre_error_1_112 + 2),(_main_cur_error_1_112 + 2)
0971 852B7B    2138            mov     (_main_pre_error_1_112 + 3),(_main_cur_error_1_112 + 3)
0974           2139   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:394: printf("Error:%5.2f Left:%5.2f Right:%5.2f Left_Motor:%d Right_Motor:%d                \r", cur_error, left, right, pwm_left, pwm_right);
0974 AA08      2140            mov     r2,_pwm_right
0976 7B00      2141            mov     r3,#0x00
0978 AC48      2142            mov     r4,_pwm_left
097A 7D00      2143            mov     r5,#0x00
097C C002      2144            push    ar2
097E C003      2145            push    ar3
0980 C004      2146            push    ar4
0982 C005      2147            push    ar5
0984 C018      2148            push    _main_right_1_112
0986 C019      2149            push    (_main_right_1_112 + 1)
0988 C01A      2150            push    (_main_right_1_112 + 2)
098A C01B      2151            push    (_main_right_1_112 + 3)
098C C0C8      2152            push    _main_left_1_112
098E C0C9      2153            push    (_main_left_1_112 + 1)
0990 C0CA      2154            push    (_main_left_1_112 + 2)
0992 C0CB      2155            push    (_main_left_1_112 + 3)
0994 C028      2156            push    _main_cur_error_1_112
0996 C029      2157            push    (_main_cur_error_1_112 + 1)
0998 C02A      2158            push    (_main_cur_error_1_112 + 2)
099A C02B      2159            push    (_main_cur_error_1_112 + 3)
099C 74A8      2160            mov     a,#__str_2
099E C0E0      2161            push    acc
09A0 74B8      2162            mov     a,#(__str_2 >> 8)
09A2 C0E0      2163            push    acc
09A4 7480      2164            mov     a,#0x80
09A6 C0E0      2165            push    acc
09A8 120100    2166            lcall   _printf
09AB E581      2167            mov     a,sp
09AD 24ED      2168            add     a,#0xed
09AF F581      2169            mov     sp,a
09B1           2170   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:397: switch(state){
09B1 7401      2171            mov     a,#0x01
09B3 B5A828    2172            cjne    a,_main_state_1_112,L021072?
09B6 E4        2173            clr     a
09B7 B5A928    2174            cjne    a,(_main_state_1_112 + 1),L021072?
09BA 8001      2175            sjmp    L021019?
09BC           2176   L021072?:
09BC 7402      2177            mov     a,#0x02
09BE B5A8A8    2178            cjne    a,_main_state_1_112,L021073?
09C1 E4        2179            clr     a
09C2 B5A9A8    2180            cjne    a,(_main_state_1_112 + 1),L021073?
09C5 8001      2181            sjmp    L021022?
09C7           2182   L021073?:
09C7 7403      2183            mov     a,#0x03
09C9 B5A828    2184            cjne    a,_main_state_1_112,L021074?
09CC E4        2185            clr     a
09CD B5A928    2186            cjne    a,(_main_state_1_112 + 1),L021074?
09D0 020100    2187            ljmp    L021026?
09D3           2188   L021074?:
09D3 7404      2189            mov     a,#0x04
09D5 B5A8A8    2190            cjne    a,_main_state_1_112,L021075?
09D8 E4        2191            clr     a
09D9 B5A9A8    2192            cjne    a,(_main_state_1_112 + 1),L021075?
09DC 020100    2193            ljmp    L021033?
09DF           2194   L021075?:
09DF 020100    2195            ljmp    L021036?
09E2           2196   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:398: case 1:
09E2           2197   L021019?:
09E2           2198   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:399: if(line_sensor >= HI_THRESH){
09E2 E4        2199            clr     a
09E3 C0E0      2200            push    acc
09E5 C0E0      2201            push    acc
09E7 7420      2202            mov     a,#0x20
09E9 C0E0      2203            push    acc
09EB 7441      2204            mov     a,#0x41
09ED C0E0      2205            push    acc
09EF 856882    2206            mov     dpl,_main_line_sensor_1_112
09F2 856983    2207            mov     dph,(_main_line_sensor_1_112 + 1)
09F5 856AF0    2208            mov     b,(_main_line_sensor_1_112 + 2)
09F8 E56B      2209            mov     a,(_main_line_sensor_1_112 + 3)
09FA 120100    2210            lcall   ___fslt
09FD AA82      2211            mov     r2,dpl
09FF E581      2212            mov     a,sp
0A01 24FC      2213            add     a,#0xfc
0A03 F581      2214            mov     sp,a
0A05 EA        2215            mov     a,r2
0A06 6001      2216            jz      L021076?
0A08 020100    2217            ljmp    L021036?
0A0B           2218   L021076?:
0A0B           2219   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:400: state = 2;
0A0B 75A802    2220            mov     _main_state_1_112,#0x02
0A0E E4        2221            clr     a
0A0F F5A9      2222            mov     (_main_state_1_112 + 1),a
0A11           2223   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:402: break;                          
0A11 020100    2224            ljmp    L021036?
0A14           2225   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:403: case 2:
0A14           2226   L021022?:
0A14           2227   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:404: if((LO_THRESH<line_sensor)&&(line_sensor<MID_THRESH)){
0A14 C068      2228            push    _main_line_sensor_1_112
0A16 C069      2229            push    (_main_line_sensor_1_112 + 1)
0A18 C06A      2230            push    (_main_line_sensor_1_112 + 2)
0A1A C06B      2231            push    (_main_line_sensor_1_112 + 3)
0A1C 900000    2232            mov     dptr,#(0x00&0x00ff)
0A1F E4        2233            clr     a
0A20 F5F0      2234            mov     b,a
0A22 120100    2235            lcall   ___fslt
0A25 AA82      2236            mov     r2,dpl
0A27 E581      2237            mov     a,sp
0A29 24FC      2238            add     a,#0xfc
0A2B F581      2239            mov     sp,a
0A2D EA        2240            mov     a,r2
0A2E 7001      2241            jnz     L021077?
0A30 020100    2242            ljmp    L021036?
0A33           2243   L021077?:
0A33 E4        2244            clr     a
0A34 C0E0      2245            push    acc
0A36 C0E0      2246            push    acc
0A38 74A0      2247            mov     a,#0xA0
0A3A C0E0      2248            push    acc
0A3C 7440      2249            mov     a,#0x40
0A3E C0E0      2250            push    acc
0A40 856882    2251            mov     dpl,_main_line_sensor_1_112
0A43 856983    2252            mov     dph,(_main_line_sensor_1_112 + 1)
0A46 856AF0    2253            mov     b,(_main_line_sensor_1_112 + 2)
0A49 E56B      2254            mov     a,(_main_line_sensor_1_112 + 3)
0A4B 120100    2255            lcall   ___fslt
0A4E AA82      2256            mov     r2,dpl
0A50 E581      2257            mov     a,sp
0A52 24FC      2258            add     a,#0xfc
0A54 F581      2259            mov     sp,a
0A56 EA        2260            mov     a,r2
0A57 7001      2261            jnz     L021078?
0A59 020100    2262            ljmp    L021036?
0A5C           2263   L021078?:
0A5C           2264   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:405: line_counter++;
0A5C 0508      2265            inc     _main_line_counter_1_112
0A5E E4        2266            clr     a
0A5F B508E8    2267            cjne    a,_main_line_counter_1_112,L021079?
0A62 0509      2268            inc     (_main_line_counter_1_112 + 1)
0A64           2269   L021079?:
0A64           2270   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:406: state = 3;
0A64 75A803    2271            mov     _main_state_1_112,#0x03
0A67 E4        2272            clr     a
0A68 F5A9      2273            mov     (_main_state_1_112 + 1),a
0A6A           2274   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:408: break;
0A6A 020100    2275            ljmp    L021036?
0A6D           2276   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:409: case 3:
0A6D           2277   L021026?:
0A6D           2278   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:410: if(line_sensor<=LO_THRESH){
0A6D E4        2279            clr     a
0A6E C0E0      2280            push    acc
0A70 C0E0      2281            push    acc
0A72 C0E0      2282            push    acc
0A74 C0E0      2283            push    acc
0A76 856882    2284            mov     dpl,_main_line_sensor_1_112
0A79 856983    2285            mov     dph,(_main_line_sensor_1_112 + 1)
0A7C 856AF0    2286            mov     b,(_main_line_sensor_1_112 + 2)
0A7F E56B      2287            mov     a,(_main_line_sensor_1_112 + 3)
0A81 120100    2288            lcall   ___fsgt
0A84 AA82      2289            mov     r2,dpl
0A86 E581      2290            mov     a,sp
0A88 24FC      2291            add     a,#0xfc
0A8A F581      2292            mov     sp,a
0A8C EA        2293            mov     a,r2
0A8D 7001      2294            jnz     L021031?
0A8F           2295   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:411: if(line_counter > 1){
0A8F C3        2296            clr     c
0A90 7401      2297            mov     a,#0x01
0A92 9508      2298            subb    a,_main_line_counter_1_112
0A94 E4        2299            clr     a
0A95 6480      2300            xrl     a,#0x80
0A97 8509F0    2301            mov     b,(_main_line_counter_1_112 + 1)
0A9A 63F080    2302            xrl     b,#0x80
0A9D 95F0      2303            subb    a,b
0A9F 5001      2304            jnc     L021028?
0AA1           2305   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:412: command = line_counter;
0AA1 850858    2306            mov     _main_command_1_112,_main_line_counter_1_112
0AA4 850959    2307            mov     (_main_command_1_112 + 1),(_main_line_counter_1_112 + 1)
0AA7           2308   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:413: state = 1;
0AA7 75A801    2309            mov     _main_state_1_112,#0x01
0AAA E4        2310            clr     a
0AAB F5A9      2311            mov     (_main_state_1_112 + 1),a
0AAD 8001      2312            sjmp    L021029?
0AAF           2313   L021028?:
0AAF           2314   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:416: state = 4;
0AAF 75A804    2315            mov     _main_state_1_112,#0x04
0AB2 E4        2316            clr     a
0AB3 F5A9      2317            mov     (_main_state_1_112 + 1),a
0AB5           2318   L021029?:
0AB5           2319   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:418: line_counter = 0;
0AB5 E4        2320            clr     a
0AB6 F508      2321            mov     _main_line_counter_1_112,a
0AB8 F509      2322            mov     (_main_line_counter_1_112 + 1),a
0ABA 020100    2323            ljmp    L021036?
0ABD           2324   L021031?:
0ABD           2325   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:421: state = 1;
0ABD 75A801    2326            mov     _main_state_1_112,#0x01
0AC0 E4        2327            clr     a
0AC1 F5A9      2328            mov     (_main_state_1_112 + 1),a
0AC3           2329   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:422: break;
0AC3 020100    2330            ljmp    L021036?
0AC6           2331   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:423: case 4:
0AC6           2332   L021033?:
0AC6           2333   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:424: execute(command);
0AC6 855882    2334            mov     dpl,_main_command_1_112
0AC9 855983    2335            mov     dph,(_main_command_1_112 + 1)
0ACC 120100    2336            lcall   _execute
0ACF           2337   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:425: state = 1;
0ACF 75A801    2338            mov     _main_state_1_112,#0x01
0AD2 E4        2339            clr     a
0AD3 F5A9      2340            mov     (_main_state_1_112 + 1),a
0AD5           2341   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:427: }
0AD5 020100    2342            ljmp    L021036?
0AD8           2343            rseg R_CSEG
0AD8           2344   
0000           2345            rseg R_XINIT
0000           2346   
0000           2347            rseg R_CONST
0000           2348   __str_0:
0000 4C3D2535  2349            db 'L=%5.2f R:%5.2f'
     2E326620
     523A2535
     2E3266
000F 00        2350            db 0x00
0010           2351   __str_1:
0010 4C4D3D25  2352            db 'LM=%d RM=%d'
     6420524D
     3D2564
001B 00        2353            db 0x00
001C           2354   __str_2:
001C 4572726F  2355            db 'Error:%5.2f Left:%5.2f Right:%5.2f Left_Motor:%d Right_Motor'
     723A2535
     2E326620
     4C656674
     3A25352E
     32662052
     69676874
     3A25352E
     3266204C
     6566745F
     4D6F746F
     723A2564
     20526967
     68745F4D
     6F746F72
0058 3A256420  2356            db ':%d                '
     20202020
     20202020
     20202020
     202020
006B 0D        2357            db 0x0D
006C 00        2358            db 0x00
006D           2359   
000E           2360            CSEG
000E           2361   
000E           2362   end
