0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Dec 11 2012) (MSVC)
0000              4   ; This file was generated Sun Mar 29 14:45:16 2015
0000              5   ;--------------------------------------------------------
                  5   $name main_code
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _execute
0000             29            public _stop
0000             30            public _turn_right
0000             31            public _turn_left
0000             32            public _display_LCD
0000             33            public _Timer0ISR
0000             34            public _InitTimer0
0000             35            public _InitADC
0000             36            public _InitSerialPort
0000             37            public _Wait1S
0000             38            public _LCDprint
0000             39            public _LCD_8BIT
0000             40            public _WriteCommand
0000             41            public _WriteData
0000             42            public _LCD_byte
0000             43            public _LCD_pulse
0000             44            public _waitms
0000             45            public _Wait50us
0000             46            public _InitPorts
0000             47            public _LCDprint_PARM_3
0000             48            public _start_timer
0000             49            public _start
0000             50            public _turn_time_update
0000             51            public _time_update_flag
0000             52            public _LCDprint_PARM_2
0000             53            public _line_counter
0000             54            public _action_timer
0000             55            public _turn_timer
0000             56            public _pwm_right
0000             57            public _pwm_left
0000             58            public _pwmcount
0000             59            public _mins
0000             60            public _secs
0000             61            public _msCount
0000             62   ;--------------------------------------------------------
0000             63   ; Special Function Registers
0000             64   ;--------------------------------------------------------
0000             65   _ACC            DATA 0xe0
0000             66   _ADCON0         DATA 0x8e
0000             67   _ADCON1         DATA 0x97
0000             68   _ADINS          DATA 0xa3
0000             69   _ADMODA         DATA 0xc0
0000             70   _ADMODB         DATA 0xa1
0000             71   _AD0BH          DATA 0xbb
0000             72   _AD0BL          DATA 0xa6
0000             73   _AD0DAT0        DATA 0xc5
0000             74   _AD0DAT1        DATA 0xc6
0000             75   _AD0DAT2        DATA 0xc7
0000             76   _AD0DAT3        DATA 0xf4
0000             77   _AD1BH          DATA 0xc4
0000             78   _AD1BL          DATA 0xbc
0000             79   _AD1DAT0        DATA 0xd5
0000             80   _AD1DAT1        DATA 0xd6
0000             81   _AD1DAT2        DATA 0xd7
0000             82   _AD1DAT3        DATA 0xf5
0000             83   _AUXR1          DATA 0xa2
0000             84   _B              DATA 0xf0
0000             85   _BRGR0          DATA 0xbe
0000             86   _BRGR1          DATA 0xbf
0000             87   _BRGCON         DATA 0xbd
0000             88   _CCCRA          DATA 0xea
0000             89   _CCCRB          DATA 0xeb
0000             90   _CCCRC          DATA 0xec
0000             91   _CCCRD          DATA 0xed
0000             92   _CMP1           DATA 0xac
0000             93   _CMP2           DATA 0xad
0000             94   _DEECON         DATA 0xf1
0000             95   _DEEDAT         DATA 0xf2
0000             96   _DEEADR         DATA 0xf3
0000             97   _DIVM           DATA 0x95
0000             98   _DPH            DATA 0x83
0000             99   _DPL            DATA 0x82
0000            100   _FMADRH         DATA 0xe7
0000            101   _FMADRL         DATA 0xe6
0000            102   _FMCON          DATA 0xe4
0000            103   _FMDATA         DATA 0xe5
0000            104   _I2ADR          DATA 0xdb
0000            105   _I2CON          DATA 0xd8
0000            106   _I2DAT          DATA 0xda
0000            107   _I2SCLH         DATA 0xdd
0000            108   _I2SCLL         DATA 0xdc
0000            109   _I2STAT         DATA 0xd9
0000            110   _ICRAH          DATA 0xab
0000            111   _ICRAL          DATA 0xaa
0000            112   _ICRBH          DATA 0xaf
0000            113   _ICRBL          DATA 0xae
0000            114   _IEN0           DATA 0xa8
0000            115   _IEN1           DATA 0xe8
0000            116   _IP0            DATA 0xb8
0000            117   _IP0H           DATA 0xb7
0000            118   _IP1            DATA 0xf8
0000            119   _IP1H           DATA 0xf7
0000            120   _KBCON          DATA 0x94
0000            121   _KBMASK         DATA 0x86
0000            122   _KBPATN         DATA 0x93
0000            123   _OCRAH          DATA 0xef
0000            124   _OCRAL          DATA 0xee
0000            125   _OCRBH          DATA 0xfb
0000            126   _OCRBL          DATA 0xfa
0000            127   _OCRCH          DATA 0xfd
0000            128   _OCRCL          DATA 0xfc
0000            129   _OCRDH          DATA 0xff
0000            130   _OCRDL          DATA 0xfe
0000            131   _P0             DATA 0x80
0000            132   _P1             DATA 0x90
0000            133   _P2             DATA 0xa0
0000            134   _P3             DATA 0xb0
0000            135   _P0M1           DATA 0x84
0000            136   _P0M2           DATA 0x85
0000            137   _P1M1           DATA 0x91
0000            138   _P1M2           DATA 0x92
0000            139   _P2M1           DATA 0xa4
0000            140   _P2M2           DATA 0xa5
0000            141   _P3M1           DATA 0xb1
0000            142   _P3M2           DATA 0xb2
0000            143   _PCON           DATA 0x87
0000            144   _PCONA          DATA 0xb5
0000            145   _PSW            DATA 0xd0
0000            146   _PT0AD          DATA 0xf6
0000            147   _RSTSRC         DATA 0xdf
0000            148   _RTCCON         DATA 0xd1
0000            149   _RTCH           DATA 0xd2
0000            150   _RTCL           DATA 0xd3
0000            151   _SADDR          DATA 0xa9
0000            152   _SADEN          DATA 0xb9
0000            153   _SBUF           DATA 0x99
0000            154   _SCON           DATA 0x98
0000            155   _SSTAT          DATA 0xba
0000            156   _SP             DATA 0x81
0000            157   _SPCTL          DATA 0xe2
0000            158   _SPSTAT         DATA 0xe1
0000            159   _SPDAT          DATA 0xe3
0000            160   _TAMOD          DATA 0x8f
0000            161   _TCON           DATA 0x88
0000            162   _TCR20          DATA 0xc8
0000            163   _TCR21          DATA 0xf9
0000            164   _TH0            DATA 0x8c
0000            165   _TH1            DATA 0x8d
0000            166   _TH2            DATA 0xcd
0000            167   _TICR2          DATA 0xc9
0000            168   _TIFR2          DATA 0xe9
0000            169   _TISE2          DATA 0xde
0000            170   _TL0            DATA 0x8a
0000            171   _TL1            DATA 0x8b
0000            172   _TL2            DATA 0xcc
0000            173   _TMOD           DATA 0x89
0000            174   _TOR2H          DATA 0xcf
0000            175   _TOR2L          DATA 0xce
0000            176   _TPCR2H         DATA 0xcb
0000            177   _TPCR2L         DATA 0xca
0000            178   _TRIM           DATA 0x96
0000            179   _WDCON          DATA 0xa7
0000            180   _WDL            DATA 0xc1
0000            181   _WFEED1         DATA 0xc2
0000            182   _WFEED2         DATA 0xc3
0000            183   ;--------------------------------------------------------
0000            184   ; special function bits
0000            185   ;--------------------------------------------------------
0000            186   _ACC_7          BIT 0xe7
0000            187   _ACC_6          BIT 0xe6
0000            188   _ACC_5          BIT 0xe5
0000            189   _ACC_4          BIT 0xe4
0000            190   _ACC_3          BIT 0xe3
0000            191   _ACC_2          BIT 0xe2
0000            192   _ACC_1          BIT 0xe1
0000            193   _ACC_0          BIT 0xe0
0000            194   _ADMODA_7       BIT 0xc7
0000            195   _ADMODA_6       BIT 0xc6
0000            196   _ADMODA_5       BIT 0xc5
0000            197   _ADMODA_4       BIT 0xc4
0000            198   _ADMODA_3       BIT 0xc3
0000            199   _ADMODA_2       BIT 0xc2
0000            200   _ADMODA_1       BIT 0xc1
0000            201   _ADMODA_0       BIT 0xc0
0000            202   _BNDI1          BIT 0xc7
0000            203   _BURST1         BIT 0xc6
0000            204   _SCC1           BIT 0xc5
0000            205   _SCAN1          BIT 0xc4
0000            206   _BNDI0          BIT 0xc3
0000            207   _BURST0         BIT 0xc2
0000            208   _SCC0           BIT 0xc1
0000            209   _SCAN0          BIT 0xc0
0000            210   _B_7            BIT 0xf7
0000            211   _B_6            BIT 0xf6
0000            212   _B_5            BIT 0xf5
0000            213   _B_4            BIT 0xf4
0000            214   _B_3            BIT 0xf3
0000            215   _B_2            BIT 0xf2
0000            216   _B_1            BIT 0xf1
0000            217   _B_0            BIT 0xf0
0000            218   _I2CON_7        BIT 0xdf
0000            219   _I2CON_6        BIT 0xde
0000            220   _I2CON_5        BIT 0xdd
0000            221   _I2CON_4        BIT 0xdc
0000            222   _I2CON_3        BIT 0xdb
0000            223   _I2CON_2        BIT 0xda
0000            224   _I2CON_1        BIT 0xd9
0000            225   _I2CON_0        BIT 0xd8
0000            226   _I2EN           BIT 0xde
0000            227   _STA            BIT 0xdd
0000            228   _STO            BIT 0xdc
0000            229   _SI             BIT 0xdb
0000            230   _AA             BIT 0xda
0000            231   _CRSEL          BIT 0xd8
0000            232   _IEN0_7         BIT 0xaf
0000            233   _IEN0_6         BIT 0xae
0000            234   _IEN0_5         BIT 0xad
0000            235   _IEN0_4         BIT 0xac
0000            236   _IEN0_3         BIT 0xab
0000            237   _IEN0_2         BIT 0xaa
0000            238   _IEN0_1         BIT 0xa9
0000            239   _IEN0_0         BIT 0xa8
0000            240   _EA             BIT 0xaf
0000            241   _EWDRT          BIT 0xae
0000            242   _EBO            BIT 0xad
0000            243   _ES             BIT 0xac
0000            244   _ESR            BIT 0xac
0000            245   _ET1            BIT 0xab
0000            246   _EX1            BIT 0xaa
0000            247   _ET0            BIT 0xa9
0000            248   _EX0            BIT 0xa8
0000            249   _IEN1_7         BIT 0xef
0000            250   _IEN1_6         BIT 0xee
0000            251   _IEN1_5         BIT 0xed
0000            252   _IEN1_4         BIT 0xec
0000            253   _IEN1_3         BIT 0xeb
0000            254   _IEN1_2         BIT 0xea
0000            255   _IEN1_1         BIT 0xe9
0000            256   _IEN1_0         BIT 0xe8
0000            257   _EADEE          BIT 0xef
0000            258   _EST            BIT 0xee
0000            259   _ECCU           BIT 0xec
0000            260   _ESPI           BIT 0xeb
0000            261   _EC             BIT 0xea
0000            262   _EKBI           BIT 0xe9
0000            263   _EI2C           BIT 0xe8
0000            264   _IP0_7          BIT 0xbf
0000            265   _IP0_6          BIT 0xbe
0000            266   _IP0_5          BIT 0xbd
0000            267   _IP0_4          BIT 0xbc
0000            268   _IP0_3          BIT 0xbb
0000            269   _IP0_2          BIT 0xba
0000            270   _IP0_1          BIT 0xb9
0000            271   _IP0_0          BIT 0xb8
0000            272   _PWDRT          BIT 0xbe
0000            273   _PBO            BIT 0xbd
0000            274   _PS             BIT 0xbc
0000            275   _PSR            BIT 0xbc
0000            276   _PT1            BIT 0xbb
0000            277   _PX1            BIT 0xba
0000            278   _PT0            BIT 0xb9
0000            279   _PX0            BIT 0xb8
0000            280   _IP1_7          BIT 0xff
0000            281   _IP1_6          BIT 0xfe
0000            282   _IP1_5          BIT 0xfd
0000            283   _IP1_4          BIT 0xfc
0000            284   _IP1_3          BIT 0xfb
0000            285   _IP1_2          BIT 0xfa
0000            286   _IP1_1          BIT 0xf9
0000            287   _IP1_0          BIT 0xf8
0000            288   _PADEE          BIT 0xff
0000            289   _PST            BIT 0xfe
0000            290   _PCCU           BIT 0xfc
0000            291   _PSPI           BIT 0xfb
0000            292   _PC             BIT 0xfa
0000            293   _PKBI           BIT 0xf9
0000            294   _PI2C           BIT 0xf8
0000            295   _P0_7           BIT 0x87
0000            296   _P0_6           BIT 0x86
0000            297   _P0_5           BIT 0x85
0000            298   _P0_4           BIT 0x84
0000            299   _P0_3           BIT 0x83
0000            300   _P0_2           BIT 0x82
0000            301   _P0_1           BIT 0x81
0000            302   _P0_0           BIT 0x80
0000            303   _T1             BIT 0x87
0000            304   _KB7            BIT 0x87
0000            305   _CMP_1          BIT 0x86
0000            306   _KB6            BIT 0x86
0000            307   _CMPREF         BIT 0x85
0000            308   _KB5            BIT 0x85
0000            309   _CIN1A          BIT 0x84
0000            310   _KB4            BIT 0x84
0000            311   _CIN1B          BIT 0x83
0000            312   _KB3            BIT 0x83
0000            313   _CIN2A          BIT 0x82
0000            314   _KB2            BIT 0x82
0000            315   _CIN2B          BIT 0x81
0000            316   _KB1            BIT 0x81
0000            317   _CMP_2          BIT 0x80
0000            318   _KB0            BIT 0x80
0000            319   _P1_7           BIT 0x97
0000            320   _P1_6           BIT 0x96
0000            321   _P1_5           BIT 0x95
0000            322   _P1_4           BIT 0x94
0000            323   _P1_3           BIT 0x93
0000            324   _P1_2           BIT 0x92
0000            325   _P1_1           BIT 0x91
0000            326   _P1_0           BIT 0x90
0000            327   _OCC            BIT 0x97
0000            328   _OCB            BIT 0x96
0000            329   _RST            BIT 0x95
0000            330   _INT1           BIT 0x94
0000            331   _INT0           BIT 0x93
0000            332   _SDA            BIT 0x93
0000            333   _T0             BIT 0x92
0000            334   _SCL            BIT 0x92
0000            335   _RXD            BIT 0x91
0000            336   _TXD            BIT 0x90
0000            337   _P2_7           BIT 0xa7
0000            338   _P2_6           BIT 0xa6
0000            339   _P2_5           BIT 0xa5
0000            340   _P2_4           BIT 0xa4
0000            341   _P2_3           BIT 0xa3
0000            342   _P2_2           BIT 0xa2
0000            343   _P2_1           BIT 0xa1
0000            344   _P2_0           BIT 0xa0
0000            345   _ICA            BIT 0xa7
0000            346   _OCA            BIT 0xa6
0000            347   _SPICLK         BIT 0xa5
0000            348   _SS             BIT 0xa4
0000            349   _MISO           BIT 0xa3
0000            350   _MOSI           BIT 0xa2
0000            351   _OCD            BIT 0xa1
0000            352   _ICB            BIT 0xa0
0000            353   _P3_7           BIT 0xb7
0000            354   _P3_6           BIT 0xb6
0000            355   _P3_5           BIT 0xb5
0000            356   _P3_4           BIT 0xb4
0000            357   _P3_3           BIT 0xb3
0000            358   _P3_2           BIT 0xb2
0000            359   _P3_1           BIT 0xb1
0000            360   _P3_0           BIT 0xb0
0000            361   _XTAL1          BIT 0xb1
0000            362   _XTAL2          BIT 0xb0
0000            363   _PSW_7          BIT 0xd7
0000            364   _PSW_6          BIT 0xd6
0000            365   _PSW_5          BIT 0xd5
0000            366   _PSW_4          BIT 0xd4
0000            367   _PSW_3          BIT 0xd3
0000            368   _PSW_2          BIT 0xd2
0000            369   _PSW_1          BIT 0xd1
0000            370   _PSW_0          BIT 0xd0
0000            371   _CY             BIT 0xd7
0000            372   _AC             BIT 0xd6
0000            373   _F0             BIT 0xd5
0000            374   _RS1            BIT 0xd4
0000            375   _RS0            BIT 0xd3
0000            376   _OV             BIT 0xd2
0000            377   _F1             BIT 0xd1
0000            378   _P              BIT 0xd0
0000            379   _SCON_7         BIT 0x9f
0000            380   _SCON_6         BIT 0x9e
0000            381   _SCON_5         BIT 0x9d
0000            382   _SCON_4         BIT 0x9c
0000            383   _SCON_3         BIT 0x9b
0000            384   _SCON_2         BIT 0x9a
0000            385   _SCON_1         BIT 0x99
0000            386   _SCON_0         BIT 0x98
0000            387   _SM0            BIT 0x9f
0000            388   _FE             BIT 0x9f
0000            389   _SM1            BIT 0x9e
0000            390   _SM2            BIT 0x9d
0000            391   _REN            BIT 0x9c
0000            392   _TB8            BIT 0x9b
0000            393   _RB8            BIT 0x9a
0000            394   _TI             BIT 0x99
0000            395   _RI             BIT 0x98
0000            396   _TCON_7         BIT 0x8f
0000            397   _TCON_6         BIT 0x8e
0000            398   _TCON_5         BIT 0x8d
0000            399   _TCON_4         BIT 0x8c
0000            400   _TCON_3         BIT 0x8b
0000            401   _TCON_2         BIT 0x8a
0000            402   _TCON_1         BIT 0x89
0000            403   _TCON_0         BIT 0x88
0000            404   _TF1            BIT 0x8f
0000            405   _TR1            BIT 0x8e
0000            406   _TF0            BIT 0x8d
0000            407   _TR0            BIT 0x8c
0000            408   _IE1            BIT 0x8b
0000            409   _IT1            BIT 0x8a
0000            410   _IE0            BIT 0x89
0000            411   _IT0            BIT 0x88
0000            412   _TCR20_7        BIT 0xcf
0000            413   _TCR20_6        BIT 0xce
0000            414   _TCR20_5        BIT 0xcd
0000            415   _TCR20_4        BIT 0xcc
0000            416   _TCR20_3        BIT 0xcb
0000            417   _TCR20_2        BIT 0xca
0000            418   _TCR20_1        BIT 0xc9
0000            419   _TCR20_0        BIT 0xc8
0000            420   _PLEEN          BIT 0xcf
0000            421   _HLTRN          BIT 0xce
0000            422   _HLTEN          BIT 0xcd
0000            423   _ALTCD          BIT 0xcc
0000            424   _ALTAB          BIT 0xcb
0000            425   _TDIR2          BIT 0xca
0000            426   _TMOD21         BIT 0xc9
0000            427   _TMOD20         BIT 0xc8
0000            428   ;--------------------------------------------------------
0000            429   ; overlayable register banks
0000            430   ;--------------------------------------------------------
0000            431            rbank0 segment data overlay
0000            432   ;--------------------------------------------------------
0000            433   ; internal ram data
0000            434   ;--------------------------------------------------------
0000            435            rseg R_DSEG
0000            436   _msCount:
0000            437            ds 2
0002            438   _secs:
0002            439            ds 1
0003            440   _mins:
0003            441            ds 1
0004            442   _pwmcount:
0004            443            ds 1
0005            444   _pwm_left:
0005            445            ds 1
0006            446   _pwm_right:
0006            447            ds 1
0007            448   _turn_timer:
0007            449            ds 2
0009            450   _action_timer:
0009            451            ds 2
000B            452   _line_counter:
000B            453            ds 2
000D            454   _LCDprint_PARM_2:
000D            455            ds 1
000E            456   _display_LCD_buff_1_96:
000E            457            ds 17
001F            458   _main_cur_error_1_112:
001F            459            ds 4
0023            460   _main_pre_error_1_112:
0023            461            ds 4
0027            462   _main_left_1_112:
0027            463            ds 4
002B            464   _main_right_1_112:
002B            465            ds 4
002F            466   _main_line_sensor_1_112:
002F            467            ds 4
0033            468   _main_diff_1_112:
0033            469            ds 4
0037            470   _main_line_counter_1_112:
0037            471            ds 2
0039            472   _main_command_1_112:
0039            473            ds 2
003B            474   _main_state_1_112:
003B            475            ds 2
003D            476   ;--------------------------------------------------------
003D            477   ; overlayable items in internal ram 
003D            478   ;--------------------------------------------------------
0000            479            rseg R_OSEG
0000            480   ;--------------------------------------------------------
0000            481   ; indirectly addressable internal ram data
0000            482   ;--------------------------------------------------------
0000            483            rseg R_ISEG
0000            484   ;--------------------------------------------------------
0000            485   ; absolute internal ram data
0000            486   ;--------------------------------------------------------
0000            487            DSEG
0000            488   ;--------------------------------------------------------
0000            489   ; bit data
0000            490   ;--------------------------------------------------------
0000            491            rseg R_BSEG
0000            492   _time_update_flag:
0000            493            DBIT    1
0001            494   _turn_time_update:
0001            495            DBIT    1
0002            496   _start:
0002            497            DBIT    1
0003            498   _start_timer:
0003            499            DBIT    1
0004            500   _LCDprint_PARM_3:
0004            501            DBIT    1
0005            502   ;--------------------------------------------------------
0005            503   ; paged external ram data
0005            504   ;--------------------------------------------------------
0000            505            rseg R_PSEG
0000            506   ;--------------------------------------------------------
0000            507   ; external ram data
0000            508   ;--------------------------------------------------------
0000            509            rseg R_XSEG
FFC8            510            XSEG at 0xffc8
FFC8            511   _BODCFG: ds 1
FFC9            512            public _BODCFG
0000            513            rseg R_XSEG
FFDE            514            XSEG at 0xffde
FFDE            515   _CLKCON: ds 1
FFDF            516            public _CLKCON
0000            517            rseg R_XSEG
FFE1            518            XSEG at 0xffe1
FFE1            519   _PGACON1: ds 1
FFE2            520            public _PGACON1
0000            521            rseg R_XSEG
FFE4            522            XSEG at 0xffe4
FFE4            523   _PGACON1B: ds 1
FFE5            524            public _PGACON1B
0000            525            rseg R_XSEG
FFE3            526            XSEG at 0xffe3
FFE3            527   _PGA1TRIM8X16X: ds 1
FFE4            528            public _PGA1TRIM8X16X
0000            529            rseg R_XSEG
FFE2            530            XSEG at 0xffe2
FFE2            531   _PGA1TRIM2X4X: ds 1
FFE3            532            public _PGA1TRIM2X4X
0000            533            rseg R_XSEG
FFCA            534            XSEG at 0xffca
FFCA            535   _PGACON0: ds 1
FFCB            536            public _PGACON0
0000            537            rseg R_XSEG
FFCE            538            XSEG at 0xffce
FFCE            539   _PGACON0B: ds 1
FFCF            540            public _PGACON0B
0000            541            rseg R_XSEG
FFCD            542            XSEG at 0xffcd
FFCD            543   _PGA0TRIM8X16X: ds 1
FFCE            544            public _PGA0TRIM8X16X
0000            545            rseg R_XSEG
FFCC            546            XSEG at 0xffcc
FFCC            547   _PGA0TRIM2X4X: ds 1
FFCD            548            public _PGA0TRIM2X4X
0000            549            rseg R_XSEG
FFBF            550            XSEG at 0xffbf
FFBF            551   _RTCDATH: ds 1
FFC0            552            public _RTCDATH
0000            553            rseg R_XSEG
FFBE            554            XSEG at 0xffbe
FFBE            555   _RTCDATL: ds 1
FFBF            556            public _RTCDATL
0000            557            rseg R_XSEG
0000            558   ;--------------------------------------------------------
0000            559   ; absolute external ram data
0000            560   ;--------------------------------------------------------
FFBF            561            XSEG
FFBF            562   ;--------------------------------------------------------
FFBF            563   ; external initialized ram data
FFBF            564   ;--------------------------------------------------------
0000            565            rseg R_IXSEG
0000            566            rseg R_HOME
0000            567            rseg R_GSINIT
0000            568            rseg R_CSEG
0000            569   ;--------------------------------------------------------
0000            570   ; Reset entry point and interrupt vectors
0000            571   ;--------------------------------------------------------
0000            572            CSEG at 0x0000
0000 020100     573            ljmp    _crt0
000B            574            CSEG at 0x000b
000B 020100     575            ljmp    _Timer0ISR
000E            576   ;--------------------------------------------------------
000E            577   ; global & static initialisations
000E            578   ;--------------------------------------------------------
0000            579            rseg R_HOME
0000            580            rseg R_GSINIT
0000            581            rseg R_GSINIT
0000            582   ;--------------------------------------------------------
0000            583   ; data variables initialization
0000            584   ;--------------------------------------------------------
0000            585            rseg R_DINIT
0000            586   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:44: volatile int msCount=0; // Volatiles can be changed by stuff outside our program, like memory registers
0000 E4         587            clr     a
0001 F508       588            mov     _msCount,a
0003 F509       589            mov     (_msCount + 1),a
0005            590   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:45: volatile unsigned char secs=0, mins=0; // They are like global variables, kinda 
0005 75C800     591            mov     _secs,#0x00
0008            592   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:45: volatile bit time_update_flag=0;
0008 758800     593            mov     _mins,#0x00
000B            594   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:50: volatile int turn_timer = 0;
000B E4         595            clr     a
000C F588       596            mov     _turn_timer,a
000E F589       597            mov     (_turn_timer + 1),a
0010            598   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:54: volatile int action_timer = 0;
0010 E4         599            clr     a
0011 F548       600            mov     _action_timer,a
0013 F549       601            mov     (_action_timer + 1),a
0015            602   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:55: volatile int line_counter = 0;
0015 E4         603            clr     a
0016 F508       604            mov     _line_counter,a
0018 F509       605            mov     (_line_counter + 1),a
001A            606   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:46: volatile bit time_update_flag=0;
001A C278       607            clr     _time_update_flag
001C            608   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:51: volatile bit turn_time_update=0;
001C C228       609            clr     _turn_time_update
001E            610   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:52: volatile bit start = 1;
001E D2D8       611            setb    _start
0020            612   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:53: volatile bit start_timer = 0;
0020 C298       613            clr     _start_timer
0022            614            ; The linker places a 'ret' at the end of segment R_DINIT.
0022            615   ;--------------------------------------------------------
0022            616   ; code
0022            617   ;--------------------------------------------------------
0000            618            rseg R_CSEG
0000            619   ;------------------------------------------------------------
0000            620   ;Allocation info for local variables in function 'InitPorts'
0000            621   ;------------------------------------------------------------
0000            622   ;------------------------------------------------------------
0000            623   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:57: void InitPorts(void)
0000            624   ;        -----------------------------------------
0000            625   ;         function InitPorts
0000            626   ;        -----------------------------------------
0000            627   _InitPorts:
0000            628            using   0
0000            629   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:59: P0M1=0x1E;
0000 75841E     630            mov     _P0M1,#0x1E
0003            631   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:60: P0M2=0x00;
0003 758500     632            mov     _P0M2,#0x00
0006            633   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:61: P1M1=0;
0006 759100     634            mov     _P1M1,#0x00
0009            635   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:62: P1M2=0;
0009 759200     636            mov     _P1M2,#0x00
000C            637   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:63: P2M1=0;
000C 75A400     638            mov     _P2M1,#0x00
000F            639   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:64: P2M2=0;
000F 75A500     640            mov     _P2M2,#0x00
0012            641   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:65: P3M1=0;
0012 75B100     642            mov     _P3M1,#0x00
0015            643   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:66: P3M2=0;
0015 75B200     644            mov     _P3M2,#0x00
0018 22         645            ret
0019            646   ;------------------------------------------------------------
0019            647   ;Allocation info for local variables in function 'Wait50us'
0019            648   ;------------------------------------------------------------
0019            649   ;------------------------------------------------------------
0019            650   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:69: void Wait50us (void)
0019            651   ;        -----------------------------------------
0019            652   ;         function Wait50us
0019            653   ;        -----------------------------------------
0019            654   _Wait50us:
0019            655   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:74: _endasm;
0019            656            
0019 7852       657             mov R0, #82
001B            658             L0:
001B D8E8       659            djnz R0, L0 ; 2 machine cycles-> 2*0.27126us*92=50us
001D            660             
001D 22         661            ret
001E            662   ;------------------------------------------------------------
001E            663   ;Allocation info for local variables in function 'waitms'
001E            664   ;------------------------------------------------------------
001E            665   ;ms                        Allocated to registers r2 r3 
001E            666   ;j                         Allocated to registers r4 r5 
001E            667   ;k                         Allocated to registers r6 
001E            668   ;------------------------------------------------------------
001E            669   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:77: void waitms (unsigned int ms)
001E            670   ;        -----------------------------------------
001E            671   ;         function waitms
001E            672   ;        -----------------------------------------
001E            673   _waitms:
001E AA82       674            mov     r2,dpl
0020 AB83       675            mov     r3,dph
0022            676   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:83: for(j=0; j<ms; j++)
0022 7C00       677            mov     r4,#0x00
0024 7D00       678            mov     r5,#0x00
0026            679   L004004?:
0026 C3         680            clr     c
0027 EC         681            mov     a,r4
0028 9A         682            subb    a,r2
0029 ED         683            mov     a,r5
002A 9B         684            subb    a,r3
002B 5001       685            jnc     L004008?
002D            686   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:84: for (k=0; k<20; k++) Wait50us();
002D 7E14       687            mov     r6,#0x14
002F            688   L004003?:
002F C002       689            push    ar2
0031 C003       690            push    ar3
0033 C004       691            push    ar4
0035 C005       692            push    ar5
0037 C006       693            push    ar6
0039 120100     694            lcall   _Wait50us
003C D006       695            pop     ar6
003E D005       696            pop     ar5
0040 D004       697            pop     ar4
0042 D003       698            pop     ar3
0044 D002       699            pop     ar2
0046 DE28       700            djnz    r6,L004003?
0048            701   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:83: for(j=0; j<ms; j++)
0048 0C         702            inc     r4
0049 BC00A8     703            cjne    r4,#0x00,L004004?
004C 0D         704            inc     r5
004D 8001       705            sjmp    L004004?
004F            706   L004008?:
004F 22         707            ret
0050            708   ;------------------------------------------------------------
0050            709   ;Allocation info for local variables in function 'LCD_pulse'
0050            710   ;------------------------------------------------------------
0050            711   ;------------------------------------------------------------
0050            712   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:87: void LCD_pulse (void)
0050            713   ;        -----------------------------------------
0050            714   ;         function LCD_pulse
0050            715   ;        -----------------------------------------
0050            716   _LCD_pulse:
0050            717   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:89: LCD_E=1;
0050 D2A5       718            setb    _P2_5
0052            719   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:90: Wait50us();
0052 120100     720            lcall   _Wait50us
0055            721   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:91: LCD_E=0;
0055 C2A5       722            clr     _P2_5
0057 22         723            ret
0058            724   ;------------------------------------------------------------
0058            725   ;Allocation info for local variables in function 'LCD_byte'
0058            726   ;------------------------------------------------------------
0058            727   ;x                         Allocated to registers 
0058            728   ;------------------------------------------------------------
0058            729   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:94: void LCD_byte (unsigned char x)
0058            730   ;        -----------------------------------------
0058            731   ;         function LCD_byte
0058            732   ;        -----------------------------------------
0058            733   _LCD_byte:
0058 8582E0     734            mov     _ACC,dpl
005B            735   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:98: LCD_D7=ACC_7;
005B A2E7       736            mov     c,_ACC_7
005D 9294       737            mov     _P1_4,c
005F            738   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:99: LCD_D6=ACC_6;
005F A2E6       739            mov     c,_ACC_6
0061 9296       740            mov     _P1_6,c
0063            741   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:100: LCD_D5=ACC_5;
0063 A2E5       742            mov     c,_ACC_5
0065 9297       743            mov     _P1_7,c
0067            744   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:101: LCD_D4=ACC_4;
0067 A2E4       745            mov     c,_ACC_4
0069 92A0       746            mov     _P2_0,c
006B            747   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:102: LCD_D3=ACC_3;
006B A2E3       748            mov     c,_ACC_3
006D 92A1       749            mov     _P2_1,c
006F            750   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:103: LCD_D2=ACC_2;
006F A2E2       751            mov     c,_ACC_2
0071 92A2       752            mov     _P2_2,c
0073            753   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:104: LCD_D1=ACC_1;
0073 A2E1       754            mov     c,_ACC_1
0075 92A3       755            mov     _P2_3,c
0077            756   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:105: LCD_D0=ACC_0;
0077 A2E0       757            mov     c,_ACC_0
0079 92A4       758            mov     _P2_4,c
007B            759   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:106: LCD_pulse();
007B 020100     760            ljmp    _LCD_pulse
007E            761   ;------------------------------------------------------------
007E            762   ;Allocation info for local variables in function 'WriteData'
007E            763   ;------------------------------------------------------------
007E            764   ;x                         Allocated to registers r2 
007E            765   ;------------------------------------------------------------
007E            766   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:109: void WriteData (unsigned char x)
007E            767   ;        -----------------------------------------
007E            768   ;         function WriteData
007E            769   ;        -----------------------------------------
007E            770   _WriteData:
007E AA82       771            mov     r2,dpl
0080            772   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:111: LCD_RS=1;
0080 D2A7       773            setb    _P2_7
0082            774   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:112: LCD_byte(x);
0082 8A82       775            mov     dpl,r2
0084 120100     776            lcall   _LCD_byte
0087            777   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:113: waitms(2);
0087 900002     778            mov     dptr,#0x0002
008A 020100     779            ljmp    _waitms
008D            780   ;------------------------------------------------------------
008D            781   ;Allocation info for local variables in function 'WriteCommand'
008D            782   ;------------------------------------------------------------
008D            783   ;x                         Allocated to registers r2 
008D            784   ;------------------------------------------------------------
008D            785   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:116: void WriteCommand (unsigned char x)
008D            786   ;        -----------------------------------------
008D            787   ;         function WriteCommand
008D            788   ;        -----------------------------------------
008D            789   _WriteCommand:
008D AA82       790            mov     r2,dpl
008F            791   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:118: LCD_RS=0;
008F C2A7       792            clr     _P2_7
0091            793   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:119: LCD_byte(x);
0091 8A82       794            mov     dpl,r2
0093 120100     795            lcall   _LCD_byte
0096            796   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:120: waitms(5);
0096 900005     797            mov     dptr,#0x0005
0099 020100     798            ljmp    _waitms
009C            799   ;------------------------------------------------------------
009C            800   ;Allocation info for local variables in function 'LCD_8BIT'
009C            801   ;------------------------------------------------------------
009C            802   ;------------------------------------------------------------
009C            803   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:123: void LCD_8BIT (void)
009C            804   ;        -----------------------------------------
009C            805   ;         function LCD_8BIT
009C            806   ;        -----------------------------------------
009C            807   _LCD_8BIT:
009C            808   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:125: LCD_E=0;  // Resting state of LCD's enable is zero
009C C2A5       809            clr     _P2_5
009E            810   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:126: LCD_RW=0; // We are only writing to the LCD in this program
009E C2A6       811            clr     _P2_6
00A0            812   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:127: waitms(20);
00A0 900014     813            mov     dptr,#0x0014
00A3 120100     814            lcall   _waitms
00A6            815   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:129: WriteCommand(0x33);
00A6 758233     816            mov     dpl,#0x33
00A9 120100     817            lcall   _WriteCommand
00AC            818   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:130: WriteCommand(0x33);
00AC 758233     819            mov     dpl,#0x33
00AF 120100     820            lcall   _WriteCommand
00B2            821   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:131: WriteCommand(0x33); // Stay in 8-bit mode
00B2 758233     822            mov     dpl,#0x33
00B5 120100     823            lcall   _WriteCommand
00B8            824   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:134: WriteCommand(0x38);
00B8 758238     825            mov     dpl,#0x38
00BB 120100     826            lcall   _WriteCommand
00BE            827   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:135: WriteCommand(0x0c);
00BE 75820C     828            mov     dpl,#0x0C
00C1 120100     829            lcall   _WriteCommand
00C4            830   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:136: WriteCommand(0x01); // Clear screen command (takes some time)
00C4 758201     831            mov     dpl,#0x01
00C7 120100     832            lcall   _WriteCommand
00CA            833   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:137: waitms(20); // Wait for clear screen command to finsih.
00CA 900014     834            mov     dptr,#0x0014
00CD 020100     835            ljmp    _waitms
00D0            836   ;------------------------------------------------------------
00D0            837   ;Allocation info for local variables in function 'LCDprint'
00D0            838   ;------------------------------------------------------------
00D0            839   ;line                      Allocated with name '_LCDprint_PARM_2'
00D0            840   ;string                    Allocated to registers r2 r3 r4 
00D0            841   ;j                         Allocated to registers r5 
00D0            842   ;------------------------------------------------------------
00D0            843   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:140: void LCDprint(char * string, unsigned char line, bit clear)
00D0            844   ;        -----------------------------------------
00D0            845   ;         function LCDprint
00D0            846   ;        -----------------------------------------
00D0            847   _LCDprint:
00D0 AA82       848            mov     r2,dpl
00D2 AB83       849            mov     r3,dph
00D4 ACF0       850            mov     r4,b
00D6            851   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:144: WriteCommand(line==2?0xc0:0x80);
00D6 7402       852            mov     a,#0x02
00D8 B5C8A8     853            cjne    a,_LCDprint_PARM_2,L010013?
00DB 7DC0       854            mov     r5,#0xC0
00DD 8001       855            sjmp    L010014?
00DF            856   L010013?:
00DF 7D80       857            mov     r5,#0x80
00E1            858   L010014?:
00E1 8D82       859            mov     dpl,r5
00E3 C002       860            push    ar2
00E5 C003       861            push    ar3
00E7 C004       862            push    ar4
00E9 120100     863            lcall   _WriteCommand
00EC            864   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:145: waitms(5);
00EC 900005     865            mov     dptr,#0x0005
00EF 120100     866            lcall   _waitms
00F2 D004       867            pop     ar4
00F4 D003       868            pop     ar3
00F6 D002       869            pop     ar2
00F8            870   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:146: for(j=0; string[j]!=0; j++)     WriteData(string[j]);// Write the message
00F8 7D00       871            mov     r5,#0x00
00FA            872   L010003?:
00FA ED         873            mov     a,r5
00FB 2A         874            add     a,r2
00FC FE         875            mov     r6,a
00FD E4         876            clr     a
00FE 3B         877            addc    a,r3
00FF FF         878            mov     r7,a
0100 8C00       879            mov     ar0,r4
0102 8E82       880            mov     dpl,r6
0104 8F83       881            mov     dph,r7
0106 88F0       882            mov     b,r0
0108 120100     883            lcall   __gptrget
010B FE         884            mov     r6,a
010C 6001       885            jz      L010006?
010E 8E82       886            mov     dpl,r6
0110 C002       887            push    ar2
0112 C003       888            push    ar3
0114 C004       889            push    ar4
0116 C005       890            push    ar5
0118 120100     891            lcall   _WriteData
011B D005       892            pop     ar5
011D D004       893            pop     ar4
011F D003       894            pop     ar3
0121 D002       895            pop     ar2
0123 0D         896            inc     r5
0124 8001       897            sjmp    L010003?
0126            898   L010006?:
0126            899   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:147: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0126 3058E8     900            jnb     _LCDprint_PARM_3,L010011?
0129 8D02       901            mov     ar2,r5
012B            902   L010007?:
012B BA1068     903            cjne    r2,#0x10,L010026?
012E            904   L010026?:
012E 5001       905            jnc     L010011?
0130 758220     906            mov     dpl,#0x20
0133 C002       907            push    ar2
0135 120100     908            lcall   _WriteData
0138 D002       909            pop     ar2
013A 0A         910            inc     r2
013B 8001       911            sjmp    L010007?
013D            912   L010011?:
013D 22         913            ret
013E            914   ;------------------------------------------------------------
013E            915   ;Allocation info for local variables in function 'Wait1S'
013E            916   ;------------------------------------------------------------
013E            917   ;------------------------------------------------------------
013E            918   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:150: void Wait1S (void)
013E            919   ;        -----------------------------------------
013E            920   ;         function Wait1S
013E            921   ;        -----------------------------------------
013E            922   _Wait1S:
013E            923   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:159: _endasm;
013E            924            
013E 7A28       925             mov R2, #40
0140            926             L3:
0140 79FA       927            mov R1, #250
0142            928             L2:
0142 78B8       929            mov R0, #184
0144            930             L1:
0144 D828       931            djnz R0, L1 ; 2 machine cycles-> 2*0.27126us*184=100us
0146 D9E8       932             djnz R1, L2 ; 100us*250=0.025s
0148 DAA8       933             djnz R2, L3 ; 0.025s*40=1s
014A            934             
014A 22         935            ret
014B            936   ;------------------------------------------------------------
014B            937   ;Allocation info for local variables in function 'InitSerialPort'
014B            938   ;------------------------------------------------------------
014B            939   ;------------------------------------------------------------
014B            940   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:162: void InitSerialPort(void)
014B            941   ;        -----------------------------------------
014B            942   ;         function InitSerialPort
014B            943   ;        -----------------------------------------
014B            944   _InitSerialPort:
014B            945   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:164: BRGCON=0x00; //Make sure the baud rate generator is off
014B 75BD00     946            mov     _BRGCON,#0x00
014E            947   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:165: BRGR1=((XTAL/BAUD)-16)/0x100;
014E 75BF00     948            mov     _BRGR1,#0x00
0151            949   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:166: BRGR0=((XTAL/BAUD)-16)%0x100;
0151 75BE30     950            mov     _BRGR0,#0x30
0154            951   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:167: BRGCON=0x03; //Turn-on the baud rate generator
0154 75BD03     952            mov     _BRGCON,#0x03
0157            953   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:168: SCON=0x52; //Serial port in mode 1, ren, txrdy, rxempty
0157 759852     954            mov     _SCON,#0x52
015A            955   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:169: P1M1=0x00; //Enable pins RxD and Txd
015A 759100     956            mov     _P1M1,#0x00
015D            957   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:170: P1M2=0x00; //Enable pins RxD and Txd
015D 759200     958            mov     _P1M2,#0x00
0160 22         959            ret
0161            960   ;------------------------------------------------------------
0161            961   ;Allocation info for local variables in function 'InitADC'
0161            962   ;------------------------------------------------------------
0161            963   ;------------------------------------------------------------
0161            964   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:173: void InitADC(void)
0161            965   ;        -----------------------------------------
0161            966   ;         function InitADC
0161            967   ;        -----------------------------------------
0161            968   _InitADC:
0161            969   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:177: P0M1 |= (P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0161 43841E     970            orl     _P0M1,#0x1E
0164            971   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:178: P0M2 &= ~(P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0164 5385E1     972            anl     _P0M2,#0xE1
0167            973   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:181: BURST1=1; //Autoscan continuous conversion mode
0167 D2C6       974            setb    _BURST1
0169            975   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:182: ADMODB = CLK0; //ADC1 clock is 7.3728MHz/2
0169 75A120     976            mov     _ADMODB,#0x20
016C            977   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:183: ADINS  = (ADI13|ADI12|ADI11|ADI10); // Select the four channels for conversion
016C 75A3F0     978            mov     _ADINS,#0xF0
016F            979   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:184: ADCON1 = (ENADC1|ADCS10); //Enable the converter and start immediately
016F 759705     980            mov     _ADCON1,#0x05
0172            981   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:185: while((ADCI1&ADCON1)==0); //Wait for first conversion to complete
0172            982   L013001?:
0172 E597       983            mov     a,_ADCON1
0174 30E368     984            jnb     acc.3,L013001?
0177 22         985            ret
0178            986   ;------------------------------------------------------------
0178            987   ;Allocation info for local variables in function 'InitTimer0'
0178            988   ;------------------------------------------------------------
0178            989   ;------------------------------------------------------------
0178            990   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:188: void InitTimer0 (void)
0178            991   ;        -----------------------------------------
0178            992   ;         function InitTimer0
0178            993   ;        -----------------------------------------
0178            994   _InitTimer0:
0178            995   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:192: TR0=0; // Stop timer 0
0178 C28C       996            clr     _TR0
017A            997   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:193: TMOD=(TMOD&0xf0)|0x01; // 16-bit timer
017A 74F0       998            mov     a,#0xF0
017C 5589       999            anl     a,_TMOD
017E 4401      1000            orl     a,#0x01
0180 F589      1001            mov     _TMOD,a
0182           1002   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:194: TH0=TIMER0_RELOAD_VALUE/0x100; // I think the RHS is 0001 0000 0000, are we dividing?
0182 758CFE    1003            mov     _TH0,#0xFE
0185           1004   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:195: TL0=TIMER0_RELOAD_VALUE%0x100; // % means modulo, apparently? ...are we modulo-ing?
0185 758A90    1005            mov     _TL0,#0x90
0188           1006   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:196: TR0=1; // Start timer 0 (bit 4 in TCON)
0188 D28C      1007            setb    _TR0
018A           1008   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:197: ET0=1; // Enable timer 0 interrupt - the interrupt controller IEN0 is bit-adressable, so we change only the bit we need
018A D2A9      1009            setb    _ET0
018C           1010   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:198: EA=1;  // Enable global interrupts
018C D2AF      1011            setb    _EA
018E 22        1012            ret
018F           1013   ;------------------------------------------------------------
018F           1014   ;Allocation info for local variables in function 'Timer0ISR'
018F           1015   ;------------------------------------------------------------
018F           1016   ;------------------------------------------------------------
018F           1017   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:202: void Timer0ISR (void) interrupt 1{
018F           1018   ;        -----------------------------------------
018F           1019   ;         function Timer0ISR
018F           1020   ;        -----------------------------------------
018F           1021   _Timer0ISR:
018F C0E0      1022            push    acc
0191 C0D0      1023            push    psw
0193 75D000    1024            mov     psw,#0x00
0196           1025   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:204: TR0=0; // Stop timer 0
0196 C28C      1026            clr     _TR0
0198           1027   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:205: TH0=TIMER0_RELOAD_VALUE/0x100;
0198 758CFE    1028            mov     _TH0,#0xFE
019B           1029   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:206: TL0=TIMER0_RELOAD_VALUE%0x100;
019B 758A90    1030            mov     _TL0,#0x90
019E           1031   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:207: TR0=1; // Start timer 0
019E D28C      1032            setb    _TR0
01A0           1033   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:209: if(++pwmcount>99) pwmcount=0;
01A0 0548      1034            inc     _pwmcount
01A2 E548      1035            mov     a,_pwmcount
01A4 249C      1036            add     a,#0xff - 0x63
01A6 5001      1037            jnc     L015002?
01A8 754800    1038            mov     _pwmcount,#0x00
01AB           1039   L015002?:
01AB           1040   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:210: P0_5=(pwm_left>pwmcount)?1:0;
01AB C3        1041            clr     c
01AC E548      1042            mov     a,_pwmcount
01AE 9508      1043            subb    a,_pwm_left
01B0 9285      1044            mov     _P0_5,c
01B2           1045   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:211: P0_6=(pwm_right>pwmcount)?1:0;
01B2 C3        1046            clr     c
01B3 E548      1047            mov     a,_pwmcount
01B5 95C8      1048            subb    a,_pwm_right
01B7 9286      1049            mov     _P0_6,c
01B9           1050   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:213: msCount++;
01B9 7401      1051            mov     a,#0x01
01BB 2508      1052            add     a,_msCount
01BD F508      1053            mov     _msCount,a
01BF E4        1054            clr     a
01C0 3509      1055            addc    a,(_msCount + 1)
01C2 F509      1056            mov     (_msCount + 1),a
01C4           1057   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:214: if(msCount==10000)
01C4 7410      1058            mov     a,#0x10
01C6 B50868    1059            cjne    a,_msCount,L015008?
01C9 7427      1060            mov     a,#0x27
01CB B50968    1061            cjne    a,(_msCount + 1),L015008?
01CE           1062   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:216: time_update_flag=1;
01CE D278      1063            setb    _time_update_flag
01D0           1064   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:217: msCount=0;
01D0 E4        1065            clr     a
01D1 F508      1066            mov     _msCount,a
01D3 F509      1067            mov     (_msCount + 1),a
01D5           1068   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:218: secs++;
01D5 05C8      1069            inc     _secs
01D7           1070   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:219: if(secs==60)
01D7 743C      1071            mov     a,#0x3C
01D9 B5C868    1072            cjne    a,_secs,L015008?
01DC           1073   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:221: secs=0;
01DC 75C800    1074            mov     _secs,#0x00
01DF           1075   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:222: mins++;
01DF 0588      1076            inc     _mins
01E1           1077   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:223: if(mins==60)
01E1 743C      1078            mov     a,#0x3C
01E3 B58868    1079            cjne    a,_mins,L015008?
01E6           1080   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:225: mins=0;
01E6 758800    1081            mov     _mins,#0x00
01E9           1082   L015008?:
01E9           1083   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:230: if(turn_time_update == 1){
01E9 3028A8    1084            jnb     _turn_time_update,L015010?
01EC           1085   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:231: turn_timer++;
01EC 7401      1086            mov     a,#0x01
01EE 2588      1087            add     a,_turn_timer
01F0 F588      1088            mov     _turn_timer,a
01F2 E4        1089            clr     a
01F3 3589      1090            addc    a,(_turn_timer + 1)
01F5 F589      1091            mov     (_turn_timer + 1),a
01F7           1092   L015010?:
01F7           1093   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:234: if(start_timer == 1){
01F7 3098E8    1094            jnb     _start_timer,L015015?
01FA           1095   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:235: action_timer++;
01FA 7401      1096            mov     a,#0x01
01FC 2548      1097            add     a,_action_timer
01FE F548      1098            mov     _action_timer,a
0200 E4        1099            clr     a
0201 3549      1100            addc    a,(_action_timer + 1)
0203 F549      1101            mov     (_action_timer + 1),a
0205           1102   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:236: if(action_timer == 5000){
0205 7488      1103            mov     a,#0x88
0207 B548E8    1104            cjne    a,_action_timer,L015015?
020A 7413      1105            mov     a,#0x13
020C B549E8    1106            cjne    a,(_action_timer + 1),L015015?
020F           1107   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:237: action_timer = 0;
020F E4        1108            clr     a
0210 F548      1109            mov     _action_timer,a
0212 F549      1110            mov     (_action_timer + 1),a
0214           1111   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:238: start_timer = 0;
0214 C298      1112            clr     _start_timer
0216           1113   L015015?:
0216 D0D0      1114            pop     psw
0218 D0E0      1115            pop     acc
021A 32        1116            reti
021B           1117   ;        eliminated unneeded push/pop dpl
021B           1118   ;        eliminated unneeded push/pop dph
021B           1119   ;        eliminated unneeded push/pop b
021B           1120   ;------------------------------------------------------------
021B           1121   ;Allocation info for local variables in function 'display_LCD'
021B           1122   ;------------------------------------------------------------
021B           1123   ;buff                      Allocated with name '_display_LCD_buff_1_96'
021B           1124   ;------------------------------------------------------------
021B           1125   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:244: void display_LCD(void){
021B           1126   ;        -----------------------------------------
021B           1127   ;         function display_LCD
021B           1128   ;        -----------------------------------------
021B           1129   _display_LCD:
021B           1130   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:247: time_update_flag=0;
021B C278      1131            clr     _time_update_flag
021D           1132   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:254: sprintf(buff, "L=%5.2f R:%5.2f", (AD1DAT1/255.0)*3.3, (AD1DAT2/255.0)*3.3); //Display Left and Right Sensor
021D 85D782    1133            mov     dpl,_AD1DAT2
0220 120100    1134            lcall   ___uchar2fs
0223 AA82      1135            mov     r2,dpl
0225 AB83      1136            mov     r3,dph
0227 ACF0      1137            mov     r4,b
0229 FD        1138            mov     r5,a
022A E4        1139            clr     a
022B C0E0      1140            push    acc
022D C0E0      1141            push    acc
022F 747F      1142            mov     a,#0x7F
0231 C0E0      1143            push    acc
0233 7443      1144            mov     a,#0x43
0235 C0E0      1145            push    acc
0237 8A82      1146            mov     dpl,r2
0239 8B83      1147            mov     dph,r3
023B 8CF0      1148            mov     b,r4
023D ED        1149            mov     a,r5
023E 120100    1150            lcall   ___fsdiv
0241 AA82      1151            mov     r2,dpl
0243 AB83      1152            mov     r3,dph
0245 ACF0      1153            mov     r4,b
0247 FD        1154            mov     r5,a
0248 E581      1155            mov     a,sp
024A 24FC      1156            add     a,#0xfc
024C F581      1157            mov     sp,a
024E C002      1158            push    ar2
0250 C003      1159            push    ar3
0252 C004      1160            push    ar4
0254 C005      1161            push    ar5
0256 903333    1162            mov     dptr,#0x3333
0259 75F053    1163            mov     b,#0x53
025C 7440      1164            mov     a,#0x40
025E 120100    1165            lcall   ___fsmul
0261 AA82      1166            mov     r2,dpl
0263 AB83      1167            mov     r3,dph
0265 ACF0      1168            mov     r4,b
0267 FD        1169            mov     r5,a
0268 E581      1170            mov     a,sp
026A 24FC      1171            add     a,#0xfc
026C F581      1172            mov     sp,a
026E 85D682    1173            mov     dpl,_AD1DAT1
0271 C002      1174            push    ar2
0273 C003      1175            push    ar3
0275 C004      1176            push    ar4
0277 C005      1177            push    ar5
0279 120100    1178            lcall   ___uchar2fs
027C AE82      1179            mov     r6,dpl
027E AF83      1180            mov     r7,dph
0280 A8F0      1181            mov     r0,b
0282 F9        1182            mov     r1,a
0283 E4        1183            clr     a
0284 C0E0      1184            push    acc
0286 C0E0      1185            push    acc
0288 747F      1186            mov     a,#0x7F
028A C0E0      1187            push    acc
028C 7443      1188            mov     a,#0x43
028E C0E0      1189            push    acc
0290 8E82      1190            mov     dpl,r6
0292 8F83      1191            mov     dph,r7
0294 88F0      1192            mov     b,r0
0296 E9        1193            mov     a,r1
0297 120100    1194            lcall   ___fsdiv
029A AE82      1195            mov     r6,dpl
029C AF83      1196            mov     r7,dph
029E A8F0      1197            mov     r0,b
02A0 F9        1198            mov     r1,a
02A1 E581      1199            mov     a,sp
02A3 24FC      1200            add     a,#0xfc
02A5 F581      1201            mov     sp,a
02A7 C006      1202            push    ar6
02A9 C007      1203            push    ar7
02AB C000      1204            push    ar0
02AD C001      1205            push    ar1
02AF 903333    1206            mov     dptr,#0x3333
02B2 75F053    1207            mov     b,#0x53
02B5 7440      1208            mov     a,#0x40
02B7 120100    1209            lcall   ___fsmul
02BA AE82      1210            mov     r6,dpl
02BC AF83      1211            mov     r7,dph
02BE A8F0      1212            mov     r0,b
02C0 F9        1213            mov     r1,a
02C1 E581      1214            mov     a,sp
02C3 24FC      1215            add     a,#0xfc
02C5 F581      1216            mov     sp,a
02C7 C006      1217            push    ar6
02C9 C007      1218            push    ar7
02CB C000      1219            push    ar0
02CD C001      1220            push    ar1
02CF 7428      1221            mov     a,#__str_0
02D1 C0E0      1222            push    acc
02D3 74B1      1223            mov     a,#(__str_0 >> 8)
02D5 C0E0      1224            push    acc
02D7 7480      1225            mov     a,#0x80
02D9 C0E0      1226            push    acc
02DB 7498      1227            mov     a,#_display_LCD_buff_1_96
02DD C0E0      1228            push    acc
02DF 74A3      1229            mov     a,#(_display_LCD_buff_1_96 >> 8)
02E1 C0E0      1230            push    acc
02E3 7440      1231            mov     a,#0x40
02E5 C0E0      1232            push    acc
02E7 120100    1233            lcall   _sprintf
02EA E581      1234            mov     a,sp
02EC 24F2      1235            add     a,#0xf2
02EE F581      1236            mov     sp,a
02F0           1237   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:255: LCDprint(buff, 1, 1);
02F0 75C801    1238            mov     _LCDprint_PARM_2,#0x01
02F3 D258      1239            setb    _LCDprint_PARM_3
02F5 90A398    1240            mov     dptr,#_display_LCD_buff_1_96
02F8 75F040    1241            mov     b,#0x40
02FB 120100    1242            lcall   _LCDprint
02FE           1243   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:256: sprintf(buff, "LM=%d RM=%d", pwm_left, pwm_right); // Display Motor Values
02FE AAC8      1244            mov     r2,_pwm_right
0300 7B00      1245            mov     r3,#0x00
0302 AC08      1246            mov     r4,_pwm_left
0304 7D00      1247            mov     r5,#0x00
0306 C002      1248            push    ar2
0308 C003      1249            push    ar3
030A C004      1250            push    ar4
030C C005      1251            push    ar5
030E 74A8      1252            mov     a,#__str_1
0310 C0E0      1253            push    acc
0312 74B1      1254            mov     a,#(__str_1 >> 8)
0314 C0E0      1255            push    acc
0316 7480      1256            mov     a,#0x80
0318 C0E0      1257            push    acc
031A 7498      1258            mov     a,#_display_LCD_buff_1_96
031C C0E0      1259            push    acc
031E 74A3      1260            mov     a,#(_display_LCD_buff_1_96 >> 8)
0320 C0E0      1261            push    acc
0322 7440      1262            mov     a,#0x40
0324 C0E0      1263            push    acc
0326 120100    1264            lcall   _sprintf
0329 E581      1265            mov     a,sp
032B 24F6      1266            add     a,#0xf6
032D F581      1267            mov     sp,a
032F           1268   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:257: LCDprint(buff, 2, 1);
032F 75C802    1269            mov     _LCDprint_PARM_2,#0x02
0332 D258      1270            setb    _LCDprint_PARM_3
0334 90A398    1271            mov     dptr,#_display_LCD_buff_1_96
0337 75F040    1272            mov     b,#0x40
033A 020100    1273            ljmp    _LCDprint
033D           1274   ;------------------------------------------------------------
033D           1275   ;Allocation info for local variables in function 'turn_left'
033D           1276   ;------------------------------------------------------------
033D           1277   ;------------------------------------------------------------
033D           1278   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:267: void turn_left(void){
033D           1279   ;        -----------------------------------------
033D           1280   ;         function turn_left
033D           1281   ;        -----------------------------------------
033D           1282   _turn_left:
033D           1283   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:268: turn_timer = 0;
033D E4        1284            clr     a
033E F588      1285            mov     _turn_timer,a
0340 F589      1286            mov     (_turn_timer + 1),a
0342           1287   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:269: turn_time_update = 1;
0342 D228      1288            setb    _turn_time_update
0344           1289   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:270: while(turn_timer < 7000){
0344           1290   L017001?:
0344 C3        1291            clr     c
0345 E588      1292            mov     a,_turn_timer
0347 9458      1293            subb    a,#0x58
0349 E589      1294            mov     a,(_turn_timer + 1)
034B 6480      1295            xrl     a,#0x80
034D 949B      1296            subb    a,#0x9b
034F 5001      1297            jnc     L017003?
0351           1298   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:271: pwm_left = 0;
0351 750800    1299            mov     _pwm_left,#0x00
0354           1300   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:272: pwm_right = 100;
0354 75C864    1301            mov     _pwm_right,#0x64
0357           1302   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:273: printf("turning left!\n");
0357 7468      1303            mov     a,#__str_2
0359 C0E0      1304            push    acc
035B 74B2      1305            mov     a,#(__str_2 >> 8)
035D C0E0      1306            push    acc
035F 7480      1307            mov     a,#0x80
0361 C0E0      1308            push    acc
0363 120100    1309            lcall   _printf
0366 1581      1310            dec     sp
0368 1581      1311            dec     sp
036A 1581      1312            dec     sp
036C 8001      1313            sjmp    L017001?
036E           1314   L017003?:
036E           1315   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:275: turn_time_update = 0;
036E C228      1316            clr     _turn_time_update
0370           1317   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:276: turn_timer = 0;
0370 E4        1318            clr     a
0371 F588      1319            mov     _turn_timer,a
0373 F589      1320            mov     (_turn_timer + 1),a
0375 22        1321            ret
0376           1322   ;------------------------------------------------------------
0376           1323   ;Allocation info for local variables in function 'turn_right'
0376           1324   ;------------------------------------------------------------
0376           1325   ;------------------------------------------------------------
0376           1326   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:278: void turn_right(void){
0376           1327   ;        -----------------------------------------
0376           1328   ;         function turn_right
0376           1329   ;        -----------------------------------------
0376           1330   _turn_right:
0376           1331   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:279: turn_timer = 0;
0376 E4        1332            clr     a
0377 F588      1333            mov     _turn_timer,a
0379 F589      1334            mov     (_turn_timer + 1),a
037B           1335   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:280: turn_time_update = 1;
037B D228      1336            setb    _turn_time_update
037D           1337   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:281: while(turn_timer < 7000){
037D           1338   L018001?:
037D C3        1339            clr     c
037E E588      1340            mov     a,_turn_timer
0380 9458      1341            subb    a,#0x58
0382 E589      1342            mov     a,(_turn_timer + 1)
0384 6480      1343            xrl     a,#0x80
0386 949B      1344            subb    a,#0x9b
0388 5001      1345            jnc     L018003?
038A           1346   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:282: pwm_left = 100;
038A 750864    1347            mov     _pwm_left,#0x64
038D           1348   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:283: pwm_right = 0;
038D 75C800    1349            mov     _pwm_right,#0x00
0390           1350   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:284: printf("turning right!\n");
0390 7468      1351            mov     a,#__str_3
0392 C0E0      1352            push    acc
0394 74B3      1353            mov     a,#(__str_3 >> 8)
0396 C0E0      1354            push    acc
0398 7480      1355            mov     a,#0x80
039A C0E0      1356            push    acc
039C 120100    1357            lcall   _printf
039F 1581      1358            dec     sp
03A1 1581      1359            dec     sp
03A3 1581      1360            dec     sp
03A5 8001      1361            sjmp    L018001?
03A7           1362   L018003?:
03A7           1363   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:286: turn_time_update = 0;
03A7 C228      1364            clr     _turn_time_update
03A9           1365   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:287: turn_timer = 0;
03A9 E4        1366            clr     a
03AA F588      1367            mov     _turn_timer,a
03AC F589      1368            mov     (_turn_timer + 1),a
03AE 22        1369            ret
03AF           1370   ;------------------------------------------------------------
03AF           1371   ;Allocation info for local variables in function 'stop'
03AF           1372   ;------------------------------------------------------------
03AF           1373   ;------------------------------------------------------------
03AF           1374   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:290: void stop(void){
03AF           1375   ;        -----------------------------------------
03AF           1376   ;         function stop
03AF           1377   ;        -----------------------------------------
03AF           1378   _stop:
03AF           1379   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:291: while(1){
03AF           1380   L019002?:
03AF           1381   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:292: pwm_left = 0;
03AF 750800    1382            mov     _pwm_left,#0x00
03B2           1383   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:293: pwm_right = 0;
03B2 75C800    1384            mov     _pwm_right,#0x00
03B5 8001      1385            sjmp    L019002?
03B7           1386   ;------------------------------------------------------------
03B7           1387   ;Allocation info for local variables in function 'execute'
03B7           1388   ;------------------------------------------------------------
03B7           1389   ;command                   Allocated to registers r2 r3 
03B7           1390   ;------------------------------------------------------------
03B7           1391   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:297: void execute(int command){
03B7           1392   ;        -----------------------------------------
03B7           1393   ;         function execute
03B7           1394   ;        -----------------------------------------
03B7           1395   _execute:
03B7 AA82      1396            mov     r2,dpl
03B9 AB83      1397            mov     r3,dph
03BB           1398   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:298: switch(command){
03BB BA02E8    1399            cjne    r2,#0x02,L020014?
03BE BB00E8    1400            cjne    r3,#0x00,L020014?
03C1 8001      1401            sjmp    L020001?
03C3           1402   L020014?:
03C3 BA0368    1403            cjne    r2,#0x03,L020015?
03C6 BB0068    1404            cjne    r3,#0x00,L020015?
03C9 8001      1405            sjmp    L020002?
03CB           1406   L020015?:
03CB           1407   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:299: case 2:
03CB BA04E8    1408            cjne    r2,#0x04,L020008?
03CE BB00E8    1409            cjne    r3,#0x00,L020008?
03D1 8001      1410            sjmp    L020003?
03D3           1411   L020001?:
03D3           1412   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:300: turn_left();
03D3           1413   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:301: break;
03D3           1414   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:302: case 3:
03D3 020100    1415            ljmp    _turn_left
03D6           1416   L020002?:
03D6           1417   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:303: turn_right();
03D6           1418   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:304: break;
03D6           1419   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:305: case 4:
03D6 020100    1420            ljmp    _turn_right
03D9           1421   L020003?:
03D9           1422   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:306: if(start == 1){
03D9           1423   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:307: start = 0;
03D9 10D868    1424            jbc     _start,L020017?
03DC 8001      1425            sjmp    L020005?
03DE           1426   L020017?:
03DE 22        1427            ret
03DF           1428   L020005?:
03DF           1429   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:310: stop();
03DF           1430   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:313: }
03DF 020100    1431            ljmp    _stop
03E2           1432   L020008?:
03E2 22        1433            ret
03E3           1434   ;------------------------------------------------------------
03E3           1435   ;Allocation info for local variables in function 'main'
03E3           1436   ;------------------------------------------------------------
03E3           1437   ;cor                       Allocated to registers r2 r3 r4 r5 
03E3           1438   ;cur_error                 Allocated with name '_main_cur_error_1_112'
03E3           1439   ;pre_error                 Allocated with name '_main_pre_error_1_112'
03E3           1440   ;thresh                    Allocated to registers 
03E3           1441   ;left                      Allocated with name '_main_left_1_112'
03E3           1442   ;right                     Allocated with name '_main_right_1_112'
03E3           1443   ;line_sensor               Allocated with name '_main_line_sensor_1_112'
03E3           1444   ;diff                      Allocated with name '_main_diff_1_112'
03E3           1445   ;line_counter              Allocated with name '_main_line_counter_1_112'
03E3           1446   ;command                   Allocated with name '_main_command_1_112'
03E3           1447   ;state                     Allocated with name '_main_state_1_112'
03E3           1448   ;------------------------------------------------------------
03E3           1449   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:316: void main (void){
03E3           1450   ;        -----------------------------------------
03E3           1451   ;         function main
03E3           1452   ;        -----------------------------------------
03E3           1453   _main:
03E3           1454   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:319: double cur_error =0;
03E3           1455   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:324: double left = (AD1DAT1/255.0)*3.3;
03E3 E4        1456            clr     a
03E4 F5E8      1457            mov     _main_cur_error_1_112,a
03E6 F5E9      1458            mov     (_main_cur_error_1_112 + 1),a
03E8 F5EA      1459            mov     (_main_cur_error_1_112 + 2),a
03EA F5EB      1460            mov     (_main_cur_error_1_112 + 3),a
03EC E5D6      1461            mov     a,_AD1DAT1
03EE           1462   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:325: double right = (AD1DAT2/255.0)*3.3;
03EE E5D7      1463            mov     a,_AD1DAT2
03F0           1464   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:326: double line_sensor = (AD1DAT3/255.0)*3.3;
03F0 E5F5      1465            mov     a,_AD1DAT3
03F2           1466   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:330: int line_counter = 0;
03F2           1467   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:331: int command = 0;
03F2 E4        1468            clr     a
03F3 F5C8      1469            mov     _main_line_counter_1_112,a
03F5 F5C9      1470            mov     (_main_line_counter_1_112 + 1),a
03F7 F518      1471            mov     _main_command_1_112,a
03F9 F519      1472            mov     (_main_command_1_112 + 1),a
03FB           1473   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:332: int state = 1;  
03FB 756801    1474            mov     _main_state_1_112,#0x01
03FE E4        1475            clr     a
03FF F569      1476            mov     (_main_state_1_112 + 1),a
0401           1477   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:335: InitPorts();
0401 120100    1478            lcall   _InitPorts
0404           1479   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:336: LCD_8BIT();
0404 120100    1480            lcall   _LCD_8BIT
0407           1481   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:337: InitSerialPort();
0407 120100    1482            lcall   _InitSerialPort
040A           1483   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:338: InitADC();
040A 120100    1484            lcall   _InitADC
040D           1485   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:339: InitTimer0();
040D 120100    1486            lcall   _InitTimer0
0410           1487   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:342: pre_error = 0;
0410 753800    1488            mov     _main_pre_error_1_112,#0x00
0413 753900    1489            mov     (_main_pre_error_1_112 + 1),#0x00
0416 753A00    1490            mov     (_main_pre_error_1_112 + 2),#0x00
0419 753B00    1491            mov     (_main_pre_error_1_112 + 3),#0x00
041C           1492   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:343: while(1)
041C           1493   L021043?:
041C           1494   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:353: left = (AD1DAT1/255.0)*3.3;
041C 85D682    1495            mov     dpl,_AD1DAT1
041F 120100    1496            lcall   ___uchar2fs
0422 AC82      1497            mov     r4,dpl
0424 AD83      1498            mov     r5,dph
0426 AAF0      1499            mov     r2,b
0428 FB        1500            mov     r3,a
0429 E4        1501            clr     a
042A C0E0      1502            push    acc
042C C0E0      1503            push    acc
042E 747F      1504            mov     a,#0x7F
0430 C0E0      1505            push    acc
0432 7443      1506            mov     a,#0x43
0434 C0E0      1507            push    acc
0436 8C82      1508            mov     dpl,r4
0438 8D83      1509            mov     dph,r5
043A 8AF0      1510            mov     b,r2
043C EB        1511            mov     a,r3
043D 120100    1512            lcall   ___fsdiv
0440 AA82      1513            mov     r2,dpl
0442 AB83      1514            mov     r3,dph
0444 ACF0      1515            mov     r4,b
0446 FD        1516            mov     r5,a
0447 E581      1517            mov     a,sp
0449 24FC      1518            add     a,#0xfc
044B F581      1519            mov     sp,a
044D C002      1520            push    ar2
044F C003      1521            push    ar3
0451 C004      1522            push    ar4
0453 C005      1523            push    ar5
0455 903333    1524            mov     dptr,#0x3333
0458 75F053    1525            mov     b,#0x53
045B 7440      1526            mov     a,#0x40
045D 120100    1527            lcall   ___fsmul
0460 858288    1528            mov     _main_left_1_112,dpl
0463 858389    1529            mov     (_main_left_1_112 + 1),dph
0466 85F08A    1530            mov     (_main_left_1_112 + 2),b
0469 F58B      1531            mov     (_main_left_1_112 + 3),a
046B E581      1532            mov     a,sp
046D 24FC      1533            add     a,#0xfc
046F F581      1534            mov     sp,a
0471           1535   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:354: right = (AD1DAT2/255.0)*3.3;
0471 85D782    1536            mov     dpl,_AD1DAT2
0474 120100    1537            lcall   ___uchar2fs
0477 AE82      1538            mov     r6,dpl
0479 AF83      1539            mov     r7,dph
047B A8F0      1540            mov     r0,b
047D F9        1541            mov     r1,a
047E E4        1542            clr     a
047F C0E0      1543            push    acc
0481 C0E0      1544            push    acc
0483 747F      1545            mov     a,#0x7F
0485 C0E0      1546            push    acc
0487 7443      1547            mov     a,#0x43
0489 C0E0      1548            push    acc
048B 8E82      1549            mov     dpl,r6
048D 8F83      1550            mov     dph,r7
048F 88F0      1551            mov     b,r0
0491 E9        1552            mov     a,r1
0492 120100    1553            lcall   ___fsdiv
0495 AE82      1554            mov     r6,dpl
0497 AF83      1555            mov     r7,dph
0499 A8F0      1556            mov     r0,b
049B F9        1557            mov     r1,a
049C E581      1558            mov     a,sp
049E 24FC      1559            add     a,#0xfc
04A0 F581      1560            mov     sp,a
04A2 C006      1561            push    ar6
04A4 C007      1562            push    ar7
04A6 C000      1563            push    ar0
04A8 C001      1564            push    ar1
04AA 903333    1565            mov     dptr,#0x3333
04AD 75F053    1566            mov     b,#0x53
04B0 7440      1567            mov     a,#0x40
04B2 120100    1568            lcall   ___fsmul
04B5 8582D8    1569            mov     _main_right_1_112,dpl
04B8 8583D9    1570            mov     (_main_right_1_112 + 1),dph
04BB 85F0DA    1571            mov     (_main_right_1_112 + 2),b
04BE F5DB      1572            mov     (_main_right_1_112 + 3),a
04C0 E581      1573            mov     a,sp
04C2 24FC      1574            add     a,#0xfc
04C4 F581      1575            mov     sp,a
04C6           1576   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:355: line_sensor = (AD1DAT3/255.0)*3.3;
04C6 85F582    1577            mov     dpl,_AD1DAT3
04C9 120100    1578            lcall   ___uchar2fs
04CC AE82      1579            mov     r6,dpl
04CE AF83      1580            mov     r7,dph
04D0 A8F0      1581            mov     r0,b
04D2 F9        1582            mov     r1,a
04D3 E4        1583            clr     a
04D4 C0E0      1584            push    acc
04D6 C0E0      1585            push    acc
04D8 747F      1586            mov     a,#0x7F
04DA C0E0      1587            push    acc
04DC 7443      1588            mov     a,#0x43
04DE C0E0      1589            push    acc
04E0 8E82      1590            mov     dpl,r6
04E2 8F83      1591            mov     dph,r7
04E4 88F0      1592            mov     b,r0
04E6 E9        1593            mov     a,r1
04E7 120100    1594            lcall   ___fsdiv
04EA AE82      1595            mov     r6,dpl
04EC AF83      1596            mov     r7,dph
04EE A8F0      1597            mov     r0,b
04F0 F9        1598            mov     r1,a
04F1 E581      1599            mov     a,sp
04F3 24FC      1600            add     a,#0xfc
04F5 F581      1601            mov     sp,a
04F7 C006      1602            push    ar6
04F9 C007      1603            push    ar7
04FB C000      1604            push    ar0
04FD C001      1605            push    ar1
04FF 903333    1606            mov     dptr,#0x3333
0502 75F053    1607            mov     b,#0x53
0505 7440      1608            mov     a,#0x40
0507 120100    1609            lcall   ___fsmul
050A 858228    1610            mov     _main_line_sensor_1_112,dpl
050D 858329    1611            mov     (_main_line_sensor_1_112 + 1),dph
0510 85F02A    1612            mov     (_main_line_sensor_1_112 + 2),b
0513 F52B      1613            mov     (_main_line_sensor_1_112 + 3),a
0515 E581      1614            mov     a,sp
0517 24FC      1615            add     a,#0xfc
0519 F581      1616            mov     sp,a
051B           1617   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:356: diff = left - right;
051B C0D8      1618            push    _main_right_1_112
051D C0D9      1619            push    (_main_right_1_112 + 1)
051F C0DA      1620            push    (_main_right_1_112 + 2)
0521 C0DB      1621            push    (_main_right_1_112 + 3)
0523 858882    1622            mov     dpl,_main_left_1_112
0526 858983    1623            mov     dph,(_main_left_1_112 + 1)
0529 858AF0    1624            mov     b,(_main_left_1_112 + 2)
052C E58B      1625            mov     a,(_main_left_1_112 + 3)
052E 120100    1626            lcall   ___fssub
0531 858278    1627            mov     _main_diff_1_112,dpl
0534 858379    1628            mov     (_main_diff_1_112 + 1),dph
0537 85F07A    1629            mov     (_main_diff_1_112 + 2),b
053A F57B      1630            mov     (_main_diff_1_112 + 3),a
053C E581      1631            mov     a,sp
053E 24FC      1632            add     a,#0xfc
0540 F581      1633            mov     sp,a
0542           1634   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:359: if(time_update_flag==1) // If the clock has been updated, refresh the display
0542 307868    1635            jnb     _time_update_flag,L021002?
0545           1636   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:361: display_LCD();
0545 120100    1637            lcall   _display_LCD
0548           1638   L021002?:
0548           1639   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:365: cor = KP*cur_error + KD*(cur_error - pre_error);
0548 C0E8      1640            push    _main_cur_error_1_112
054A C0E9      1641            push    (_main_cur_error_1_112 + 1)
054C C0EA      1642            push    (_main_cur_error_1_112 + 2)
054E C0EB      1643            push    (_main_cur_error_1_112 + 3)
0550 900000    1644            mov     dptr,#0x0000
0553 75F020    1645            mov     b,#0x20
0556 7442      1646            mov     a,#0x42
0558 120100    1647            lcall   ___fsmul
055B AE82      1648            mov     r6,dpl
055D AF83      1649            mov     r7,dph
055F A8F0      1650            mov     r0,b
0561 F9        1651            mov     r1,a
0562 E581      1652            mov     a,sp
0564 24FC      1653            add     a,#0xfc
0566 F581      1654            mov     sp,a
0568 C006      1655            push    ar6
056A C007      1656            push    ar7
056C C000      1657            push    ar0
056E C001      1658            push    ar1
0570 C038      1659            push    _main_pre_error_1_112
0572 C039      1660            push    (_main_pre_error_1_112 + 1)
0574 C03A      1661            push    (_main_pre_error_1_112 + 2)
0576 C03B      1662            push    (_main_pre_error_1_112 + 3)
0578 85E882    1663            mov     dpl,_main_cur_error_1_112
057B 85E983    1664            mov     dph,(_main_cur_error_1_112 + 1)
057E 85EAF0    1665            mov     b,(_main_cur_error_1_112 + 2)
0581 E5EB      1666            mov     a,(_main_cur_error_1_112 + 3)
0583 120100    1667            lcall   ___fssub
0586 AA82      1668            mov     r2,dpl
0588 AB83      1669            mov     r3,dph
058A ACF0      1670            mov     r4,b
058C FD        1671            mov     r5,a
058D E581      1672            mov     a,sp
058F 24FC      1673            add     a,#0xfc
0591 F581      1674            mov     sp,a
0593 C002      1675            push    ar2
0595 C003      1676            push    ar3
0597 C004      1677            push    ar4
0599 C005      1678            push    ar5
059B 900000    1679            mov     dptr,#0x0000
059E 7440      1680            mov     a,#0x40
05A0 F5F0      1681            mov     b,a
05A2 120100    1682            lcall   ___fsmul
05A5 AA82      1683            mov     r2,dpl
05A7 AB83      1684            mov     r3,dph
05A9 ACF0      1685            mov     r4,b
05AB FD        1686            mov     r5,a
05AC E581      1687            mov     a,sp
05AE 24FC      1688            add     a,#0xfc
05B0 F581      1689            mov     sp,a
05B2 D001      1690            pop     ar1
05B4 D000      1691            pop     ar0
05B6 D007      1692            pop     ar7
05B8 D006      1693            pop     ar6
05BA C002      1694            push    ar2
05BC C003      1695            push    ar3
05BE C004      1696            push    ar4
05C0 C005      1697            push    ar5
05C2 8E82      1698            mov     dpl,r6
05C4 8F83      1699            mov     dph,r7
05C6 88F0      1700            mov     b,r0
05C8 E9        1701            mov     a,r1
05C9 120100    1702            lcall   ___fsadd
05CC AA82      1703            mov     r2,dpl
05CE AB83      1704            mov     r3,dph
05D0 ACF0      1705            mov     r4,b
05D2 FD        1706            mov     r5,a
05D3 E581      1707            mov     a,sp
05D5 24FC      1708            add     a,#0xfc
05D7 F581      1709            mov     sp,a
05D9           1710   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:367: if(((1 < left) && (left < 1.2)) && ((1 < right) && (right < 1.2))){
05D9 C002      1711            push    ar2
05DB C003      1712            push    ar3
05DD C004      1713            push    ar4
05DF C005      1714            push    ar5
05E1 C088      1715            push    _main_left_1_112
05E3 C089      1716            push    (_main_left_1_112 + 1)
05E5 C08A      1717            push    (_main_left_1_112 + 2)
05E7 C08B      1718            push    (_main_left_1_112 + 3)
05E9 900000    1719            mov     dptr,#0x0000
05EC 75F080    1720            mov     b,#0x80
05EF 743F      1721            mov     a,#0x3F
05F1 120100    1722            lcall   ___fslt
05F4 AE82      1723            mov     r6,dpl
05F6 E581      1724            mov     a,sp
05F8 24FC      1725            add     a,#0xfc
05FA F581      1726            mov     sp,a
05FC D005      1727            pop     ar5
05FE D004      1728            pop     ar4
0600 D003      1729            pop     ar3
0602 D002      1730            pop     ar2
0604 EE        1731            mov     a,r6
0605 7001      1732            jnz     L021070?
0607 020100    1733            ljmp    L021018?
060A           1734   L021070?:
060A C002      1735            push    ar2
060C C003      1736            push    ar3
060E C004      1737            push    ar4
0610 C005      1738            push    ar5
0612 749A      1739            mov     a,#0x9A
0614 C0E0      1740            push    acc
0616 7499      1741            mov     a,#0x99
0618 C0E0      1742            push    acc
061A C0E0      1743            push    acc
061C 743F      1744            mov     a,#0x3F
061E C0E0      1745            push    acc
0620 858882    1746            mov     dpl,_main_left_1_112
0623 858983    1747            mov     dph,(_main_left_1_112 + 1)
0626 858AF0    1748            mov     b,(_main_left_1_112 + 2)
0629 E58B      1749            mov     a,(_main_left_1_112 + 3)
062B 120100    1750            lcall   ___fslt
062E AE82      1751            mov     r6,dpl
0630 E581      1752            mov     a,sp
0632 24FC      1753            add     a,#0xfc
0634 F581      1754            mov     sp,a
0636 D005      1755            pop     ar5
0638 D004      1756            pop     ar4
063A D003      1757            pop     ar3
063C D002      1758            pop     ar2
063E EE        1759            mov     a,r6
063F 6001      1760            jz      L021018?
0641 C002      1761            push    ar2
0643 C003      1762            push    ar3
0645 C004      1763            push    ar4
0647 C005      1764            push    ar5
0649 C0D8      1765            push    _main_right_1_112
064B C0D9      1766            push    (_main_right_1_112 + 1)
064D C0DA      1767            push    (_main_right_1_112 + 2)
064F C0DB      1768            push    (_main_right_1_112 + 3)
0651 900000    1769            mov     dptr,#0x0000
0654 75F080    1770            mov     b,#0x80
0657 743F      1771            mov     a,#0x3F
0659 120100    1772            lcall   ___fslt
065C AE82      1773            mov     r6,dpl
065E E581      1774            mov     a,sp
0660 24FC      1775            add     a,#0xfc
0662 F581      1776            mov     sp,a
0664 D005      1777            pop     ar5
0666 D004      1778            pop     ar4
0668 D003      1779            pop     ar3
066A D002      1780            pop     ar2
066C EE        1781            mov     a,r6
066D 6001      1782            jz      L021018?
066F C002      1783            push    ar2
0671 C003      1784            push    ar3
0673 C004      1785            push    ar4
0675 C005      1786            push    ar5
0677 749A      1787            mov     a,#0x9A
0679 C0E0      1788            push    acc
067B 7499      1789            mov     a,#0x99
067D C0E0      1790            push    acc
067F C0E0      1791            push    acc
0681 743F      1792            mov     a,#0x3F
0683 C0E0      1793            push    acc
0685 85D882    1794            mov     dpl,_main_right_1_112
0688 85D983    1795            mov     dph,(_main_right_1_112 + 1)
068B 85DAF0    1796            mov     b,(_main_right_1_112 + 2)
068E E5DB      1797            mov     a,(_main_right_1_112 + 3)
0690 120100    1798            lcall   ___fslt
0693 AE82      1799            mov     r6,dpl
0695 E581      1800            mov     a,sp
0697 24FC      1801            add     a,#0xfc
0699 F581      1802            mov     sp,a
069B D005      1803            pop     ar5
069D D004      1804            pop     ar4
069F D003      1805            pop     ar3
06A1 D002      1806            pop     ar2
06A3 EE        1807            mov     a,r6
06A4 6001      1808            jz      L021018?
06A6           1809   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:368: cur_error = 0;
06A6 75E800    1810            mov     _main_cur_error_1_112,#0x00
06A9 75E900    1811            mov     (_main_cur_error_1_112 + 1),#0x00
06AC 75EA00    1812            mov     (_main_cur_error_1_112 + 2),#0x00
06AF 75EB00    1813            mov     (_main_cur_error_1_112 + 3),#0x00
06B2           1814   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:369: pwm_left = 100;
06B2 750864    1815            mov     _pwm_left,#0x64
06B5           1816   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:370: pwm_right = 100;
06B5 75C864    1817            mov     _pwm_right,#0x64
06B8 020100    1818            ljmp    L021019?
06BB           1819   L021018?:
06BB           1820   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:372: else if(0.2 < diff){    
06BB C002      1821            push    ar2
06BD C003      1822            push    ar3
06BF C004      1823            push    ar4
06C1 C005      1824            push    ar5
06C3 C078      1825            push    _main_diff_1_112
06C5 C079      1826            push    (_main_diff_1_112 + 1)
06C7 C07A      1827            push    (_main_diff_1_112 + 2)
06C9 C07B      1828            push    (_main_diff_1_112 + 3)
06CB 90CCCD    1829            mov     dptr,#0xCCCD
06CE 75F04C    1830            mov     b,#0x4C
06D1 743E      1831            mov     a,#0x3E
06D3 120100    1832            lcall   ___fslt
06D6 AE82      1833            mov     r6,dpl
06D8 E581      1834            mov     a,sp
06DA 24FC      1835            add     a,#0xfc
06DC F581      1836            mov     sp,a
06DE D005      1837            pop     ar5
06E0 D004      1838            pop     ar4
06E2 D003      1839            pop     ar3
06E4 D002      1840            pop     ar2
06E6 EE        1841            mov     a,r6
06E7 6001      1842            jz      L021015?
06E9           1843   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:373: cur_error = 1;
06E9 75E800    1844            mov     _main_cur_error_1_112,#0x00
06EC 75E900    1845            mov     (_main_cur_error_1_112 + 1),#0x00
06EF 75EA80    1846            mov     (_main_cur_error_1_112 + 2),#0x80
06F2 75EB3F    1847            mov     (_main_cur_error_1_112 + 3),#0x3F
06F5           1848   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:374: pwm_left = 100 - cor;
06F5 C002      1849            push    ar2
06F7 C003      1850            push    ar3
06F9 C004      1851            push    ar4
06FB C005      1852            push    ar5
06FD 900000    1853            mov     dptr,#0x0000
0700 75F0C8    1854            mov     b,#0xC8
0703 7442      1855            mov     a,#0x42
0705 120100    1856            lcall   ___fssub
0708 AE82      1857            mov     r6,dpl
070A AF83      1858            mov     r7,dph
070C A8F0      1859            mov     r0,b
070E F9        1860            mov     r1,a
070F E581      1861            mov     a,sp
0711 24FC      1862            add     a,#0xfc
0713 F581      1863            mov     sp,a
0715 8E82      1864            mov     dpl,r6
0717 8F83      1865            mov     dph,r7
0719 88F0      1866            mov     b,r0
071B E9        1867            mov     a,r1
071C 120100    1868            lcall   ___fs2uchar
071F 858208    1869            mov     _pwm_left,dpl
0722           1870   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:375: pwm_right = 100;
0722 75C864    1871            mov     _pwm_right,#0x64
0725 020100    1872            ljmp    L021019?
0728           1873   L021015?:
0728           1874   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:377: else if(diff < -0.2){
0728 C002      1875            push    ar2
072A C003      1876            push    ar3
072C C004      1877            push    ar4
072E C005      1878            push    ar5
0730 74CD      1879            mov     a,#0xCD
0732 C0E0      1880            push    acc
0734 74CC      1881            mov     a,#0xCC
0736 C0E0      1882            push    acc
0738 744C      1883            mov     a,#0x4C
073A C0E0      1884            push    acc
073C 74BE      1885            mov     a,#0xBE
073E C0E0      1886            push    acc
0740 857882    1887            mov     dpl,_main_diff_1_112
0743 857983    1888            mov     dph,(_main_diff_1_112 + 1)
0746 857AF0    1889            mov     b,(_main_diff_1_112 + 2)
0749 E57B      1890            mov     a,(_main_diff_1_112 + 3)
074B 120100    1891            lcall   ___fslt
074E AE82      1892            mov     r6,dpl
0750 E581      1893            mov     a,sp
0752 24FC      1894            add     a,#0xfc
0754 F581      1895            mov     sp,a
0756 D005      1896            pop     ar5
0758 D004      1897            pop     ar4
075A D003      1898            pop     ar3
075C D002      1899            pop     ar2
075E EE        1900            mov     a,r6
075F 6001      1901            jz      L021012?
0761           1902   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:378: cur_error= -1;
0761 75E800    1903            mov     _main_cur_error_1_112,#0x00
0764 75E900    1904            mov     (_main_cur_error_1_112 + 1),#0x00
0767 75EA80    1905            mov     (_main_cur_error_1_112 + 2),#0x80
076A 75EBBF    1906            mov     (_main_cur_error_1_112 + 3),#0xBF
076D           1907   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:379: pwm_left = 100;
076D 750864    1908            mov     _pwm_left,#0x64
0770           1909   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:380: pwm_right = 100 + cor;
0770 E4        1910            clr     a
0771 C0E0      1911            push    acc
0773 C0E0      1912            push    acc
0775 74C8      1913            mov     a,#0xC8
0777 C0E0      1914            push    acc
0779 7442      1915            mov     a,#0x42
077B C0E0      1916            push    acc
077D 8A82      1917            mov     dpl,r2
077F 8B83      1918            mov     dph,r3
0781 8CF0      1919            mov     b,r4
0783 ED        1920            mov     a,r5
0784 120100    1921            lcall   ___fsadd
0787 AE82      1922            mov     r6,dpl
0789 AF83      1923            mov     r7,dph
078B A8F0      1924            mov     r0,b
078D F9        1925            mov     r1,a
078E E581      1926            mov     a,sp
0790 24FC      1927            add     a,#0xfc
0792 F581      1928            mov     sp,a
0794 8E82      1929            mov     dpl,r6
0796 8F83      1930            mov     dph,r7
0798 88F0      1931            mov     b,r0
079A E9        1932            mov     a,r1
079B 120100    1933            lcall   ___fs2uchar
079E 8582C8    1934            mov     _pwm_right,dpl
07A1 020100    1935            ljmp    L021019?
07A4           1936   L021012?:
07A4           1937   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:383: else if((left < 0.8) && (right < 0.8)){
07A4 C002      1938            push    ar2
07A6 C003      1939            push    ar3
07A8 C004      1940            push    ar4
07AA C005      1941            push    ar5
07AC 74CD      1942            mov     a,#0xCD
07AE C0E0      1943            push    acc
07B0 74CC      1944            mov     a,#0xCC
07B2 C0E0      1945            push    acc
07B4 744C      1946            mov     a,#0x4C
07B6 C0E0      1947            push    acc
07B8 743F      1948            mov     a,#0x3F
07BA C0E0      1949            push    acc
07BC 858882    1950            mov     dpl,_main_left_1_112
07BF 858983    1951            mov     dph,(_main_left_1_112 + 1)
07C2 858AF0    1952            mov     b,(_main_left_1_112 + 2)
07C5 E58B      1953            mov     a,(_main_left_1_112 + 3)
07C7 120100    1954            lcall   ___fslt
07CA AE82      1955            mov     r6,dpl
07CC E581      1956            mov     a,sp
07CE 24FC      1957            add     a,#0xfc
07D0 F581      1958            mov     sp,a
07D2 D005      1959            pop     ar5
07D4 D004      1960            pop     ar4
07D6 D003      1961            pop     ar3
07D8 D002      1962            pop     ar2
07DA EE        1963            mov     a,r6
07DB 7001      1964            jnz     L021076?
07DD 020100    1965            ljmp    L021008?
07E0           1966   L021076?:
07E0 C002      1967            push    ar2
07E2 C003      1968            push    ar3
07E4 C004      1969            push    ar4
07E6 C005      1970            push    ar5
07E8 74CD      1971            mov     a,#0xCD
07EA C0E0      1972            push    acc
07EC 74CC      1973            mov     a,#0xCC
07EE C0E0      1974            push    acc
07F0 744C      1975            mov     a,#0x4C
07F2 C0E0      1976            push    acc
07F4 743F      1977            mov     a,#0x3F
07F6 C0E0      1978            push    acc
07F8 85D882    1979            mov     dpl,_main_right_1_112
07FB 85D983    1980            mov     dph,(_main_right_1_112 + 1)
07FE 85DAF0    1981            mov     b,(_main_right_1_112 + 2)
0801 E5DB      1982            mov     a,(_main_right_1_112 + 3)
0803 120100    1983            lcall   ___fslt
0806 AE82      1984            mov     r6,dpl
0808 E581      1985            mov     a,sp
080A 24FC      1986            add     a,#0xfc
080C F581      1987            mov     sp,a
080E D005      1988            pop     ar5
0810 D004      1989            pop     ar4
0812 D003      1990            pop     ar3
0814 D002      1991            pop     ar2
0816 EE        1992            mov     a,r6
0817 7001      1993            jnz     L021077?
0819 020100    1994            ljmp    L021008?
081C           1995   L021077?:
081C           1996   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:384: if(pre_error>0){
081C C002      1997            push    ar2
081E C003      1998            push    ar3
0820 C004      1999            push    ar4
0822 C005      2000            push    ar5
0824 E4        2001            clr     a
0825 C0E0      2002            push    acc
0827 C0E0      2003            push    acc
0829 C0E0      2004            push    acc
082B C0E0      2005            push    acc
082D 853882    2006            mov     dpl,_main_pre_error_1_112
0830 853983    2007            mov     dph,(_main_pre_error_1_112 + 1)
0833 853AF0    2008            mov     b,(_main_pre_error_1_112 + 2)
0836 E53B      2009            mov     a,(_main_pre_error_1_112 + 3)
0838 120100    2010            lcall   ___fsgt
083B AE82      2011            mov     r6,dpl
083D E581      2012            mov     a,sp
083F 24FC      2013            add     a,#0xfc
0841 F581      2014            mov     sp,a
0843 D005      2015            pop     ar5
0845 D004      2016            pop     ar4
0847 D003      2017            pop     ar3
0849 D002      2018            pop     ar2
084B EE        2019            mov     a,r6
084C 6001      2020            jz      L021004?
084E           2021   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:385: cur_error = 5;
084E 75E800    2022            mov     _main_cur_error_1_112,#0x00
0851 75E900    2023            mov     (_main_cur_error_1_112 + 1),#0x00
0854 75EAA0    2024            mov     (_main_cur_error_1_112 + 2),#0xA0
0857 75EB40    2025            mov     (_main_cur_error_1_112 + 3),#0x40
085A           2026   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:386: pwm_left = 100 - cor;
085A C002      2027            push    ar2
085C C003      2028            push    ar3
085E C004      2029            push    ar4
0860 C005      2030            push    ar5
0862 C002      2031            push    ar2
0864 C003      2032            push    ar3
0866 C004      2033            push    ar4
0868 C005      2034            push    ar5
086A 900000    2035            mov     dptr,#0x0000
086D 75F0C8    2036            mov     b,#0xC8
0870 7442      2037            mov     a,#0x42
0872 120100    2038            lcall   ___fssub
0875 AE82      2039            mov     r6,dpl
0877 AF83      2040            mov     r7,dph
0879 A8F0      2041            mov     r0,b
087B F9        2042            mov     r1,a
087C E581      2043            mov     a,sp
087E 24FC      2044            add     a,#0xfc
0880 F581      2045            mov     sp,a
0882 8E82      2046            mov     dpl,r6
0884 8F83      2047            mov     dph,r7
0886 88F0      2048            mov     b,r0
0888 E9        2049            mov     a,r1
0889 120100    2050            lcall   ___fs2uchar
088C 858208    2051            mov     _pwm_left,dpl
088F D005      2052            pop     ar5
0891 D004      2053            pop     ar4
0893 D003      2054            pop     ar3
0895 D002      2055            pop     ar2
0897           2056   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:387: pwm_right = 100;
0897 75C864    2057            mov     _pwm_right,#0x64
089A           2058   L021004?:
089A           2059   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:389: if(pre_error<0){
089A C002      2060            push    ar2
089C C003      2061            push    ar3
089E C004      2062            push    ar4
08A0 C005      2063            push    ar5
08A2 E4        2064            clr     a
08A3 C0E0      2065            push    acc
08A5 C0E0      2066            push    acc
08A7 C0E0      2067            push    acc
08A9 C0E0      2068            push    acc
08AB 853882    2069            mov     dpl,_main_pre_error_1_112
08AE 853983    2070            mov     dph,(_main_pre_error_1_112 + 1)
08B1 853AF0    2071            mov     b,(_main_pre_error_1_112 + 2)
08B4 E53B      2072            mov     a,(_main_pre_error_1_112 + 3)
08B6 120100    2073            lcall   ___fslt
08B9 AE82      2074            mov     r6,dpl
08BB E581      2075            mov     a,sp
08BD 24FC      2076            add     a,#0xfc
08BF F581      2077            mov     sp,a
08C1 D005      2078            pop     ar5
08C3 D004      2079            pop     ar4
08C5 D003      2080            pop     ar3
08C7 D002      2081            pop     ar2
08C9 EE        2082            mov     a,r6
08CA 6001      2083            jz      L021019?
08CC           2084   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:390: cur_error = -5;
08CC 75E800    2085            mov     _main_cur_error_1_112,#0x00
08CF 75E900    2086            mov     (_main_cur_error_1_112 + 1),#0x00
08D2 75EAA0    2087            mov     (_main_cur_error_1_112 + 2),#0xA0
08D5 75EBC0    2088            mov     (_main_cur_error_1_112 + 3),#0xC0
08D8           2089   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:391: pwm_left = 100;
08D8 750864    2090            mov     _pwm_left,#0x64
08DB           2091   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:392: pwm_right = 100 + cor;
08DB E4        2092            clr     a
08DC C0E0      2093            push    acc
08DE C0E0      2094            push    acc
08E0 74C8      2095            mov     a,#0xC8
08E2 C0E0      2096            push    acc
08E4 7442      2097            mov     a,#0x42
08E6 C0E0      2098            push    acc
08E8 8A82      2099            mov     dpl,r2
08EA 8B83      2100            mov     dph,r3
08EC 8CF0      2101            mov     b,r4
08EE ED        2102            mov     a,r5
08EF 120100    2103            lcall   ___fsadd
08F2 AA82      2104            mov     r2,dpl
08F4 AB83      2105            mov     r3,dph
08F6 ACF0      2106            mov     r4,b
08F8 FD        2107            mov     r5,a
08F9 E581      2108            mov     a,sp
08FB 24FC      2109            add     a,#0xfc
08FD F581      2110            mov     sp,a
08FF 8A82      2111            mov     dpl,r2
0901 8B83      2112            mov     dph,r3
0903 8CF0      2113            mov     b,r4
0905 ED        2114            mov     a,r5
0906 120100    2115            lcall   ___fs2uchar
0909 8582C8    2116            mov     _pwm_right,dpl
090C 8001      2117            sjmp    L021019?
090E           2118   L021008?:
090E           2119   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:396: stop();
090E 120100    2120            lcall   _stop
0911           2121   L021019?:
0911           2122   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:398: pre_error = cur_error;
0911 85E838    2123            mov     _main_pre_error_1_112,_main_cur_error_1_112
0914 85E939    2124            mov     (_main_pre_error_1_112 + 1),(_main_cur_error_1_112 + 1)
0917 85EA3A    2125            mov     (_main_pre_error_1_112 + 2),(_main_cur_error_1_112 + 2)
091A 85EB3B    2126            mov     (_main_pre_error_1_112 + 3),(_main_cur_error_1_112 + 3)
091D           2127   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:402: switch(state){
091D 7401      2128            mov     a,#0x01
091F B568E8    2129            cjne    a,_main_state_1_112,L021080?
0922 E4        2130            clr     a
0923 B569E8    2131            cjne    a,(_main_state_1_112 + 1),L021080?
0926 8001      2132            sjmp    L021023?
0928           2133   L021080?:
0928 7402      2134            mov     a,#0x02
092A B56868    2135            cjne    a,_main_state_1_112,L021081?
092D E4        2136            clr     a
092E B56968    2137            cjne    a,(_main_state_1_112 + 1),L021081?
0931 8001      2138            sjmp    L021026?
0933           2139   L021081?:
0933 7403      2140            mov     a,#0x03
0935 B568E8    2141            cjne    a,_main_state_1_112,L021082?
0938 E4        2142            clr     a
0939 B569E8    2143            cjne    a,(_main_state_1_112 + 1),L021082?
093C 020100    2144            ljmp    L021029?
093F           2145   L021082?:
093F 7404      2146            mov     a,#0x04
0941 B56868    2147            cjne    a,_main_state_1_112,L021083?
0944 E4        2148            clr     a
0945 B56968    2149            cjne    a,(_main_state_1_112 + 1),L021083?
0948 020100    2150            ljmp    L021038?
094B           2151   L021083?:
094B 020100    2152            ljmp    L021043?
094E           2153   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:451: case 1:
094E           2154   L021023?:
094E           2155   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:452: if(line_sensor > HI_THRESH){
094E E4        2156            clr     a
094F C0E0      2157            push    acc
0951 C0E0      2158            push    acc
0953 C0E0      2159            push    acc
0955 743F      2160            mov     a,#0x3F
0957 C0E0      2161            push    acc
0959 852882    2162            mov     dpl,_main_line_sensor_1_112
095C 852983    2163            mov     dph,(_main_line_sensor_1_112 + 1)
095F 852AF0    2164            mov     b,(_main_line_sensor_1_112 + 2)
0962 E52B      2165            mov     a,(_main_line_sensor_1_112 + 3)
0964 120100    2166            lcall   ___fsgt
0967 AA82      2167            mov     r2,dpl
0969 E581      2168            mov     a,sp
096B 24FC      2169            add     a,#0xfc
096D F581      2170            mov     sp,a
096F EA        2171            mov     a,r2
0970 7001      2172            jnz     L021084?
0972 020100    2173            ljmp    L021043?
0975           2174   L021084?:
0975           2175   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:453: state = 2;
0975 756802    2176            mov     _main_state_1_112,#0x02
0978 E4        2177            clr     a
0979 F569      2178            mov     (_main_state_1_112 + 1),a
097B           2179   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:456: break;                          
097B 020100    2180            ljmp    L021043?
097E           2181   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:457: case 2:
097E           2182   L021026?:
097E           2183   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:458: if(line_sensor < LO_THRESH){
097E 7429      2184            mov     a,#0x29
0980 C0E0      2185            push    acc
0982 745C      2186            mov     a,#0x5C
0984 C0E0      2187            push    acc
0986 748F      2188            mov     a,#0x8F
0988 C0E0      2189            push    acc
098A 743D      2190            mov     a,#0x3D
098C C0E0      2191            push    acc
098E 852882    2192            mov     dpl,_main_line_sensor_1_112
0991 852983    2193            mov     dph,(_main_line_sensor_1_112 + 1)
0994 852AF0    2194            mov     b,(_main_line_sensor_1_112 + 2)
0997 E52B      2195            mov     a,(_main_line_sensor_1_112 + 3)
0999 120100    2196            lcall   ___fslt
099C AA82      2197            mov     r2,dpl
099E E581      2198            mov     a,sp
09A0 24FC      2199            add     a,#0xfc
09A2 F581      2200            mov     sp,a
09A4 EA        2201            mov     a,r2
09A5 7001      2202            jnz     L021085?
09A7 020100    2203            ljmp    L021043?
09AA           2204   L021085?:
09AA           2205   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:459: line_counter++;
09AA 05C8      2206            inc     _main_line_counter_1_112
09AC E4        2207            clr     a
09AD B5C868    2208            cjne    a,_main_line_counter_1_112,L021086?
09B0 05C9      2209            inc     (_main_line_counter_1_112 + 1)
09B2           2210   L021086?:
09B2           2211   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:460: start_timer = 1;
09B2 D298      2212            setb    _start_timer
09B4           2213   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:461: state = 3;
09B4 756803    2214            mov     _main_state_1_112,#0x03
09B7 E4        2215            clr     a
09B8 F569      2216            mov     (_main_state_1_112 + 1),a
09BA           2217   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:464: break;
09BA 020100    2218            ljmp    L021043?
09BD           2219   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:465: case 3:
09BD           2220   L021029?:
09BD           2221   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:466: if(start_timer == 1){
09BD 3098A8    2222            jnb     _start_timer,L021036?
09C0           2223   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:467: if(line_sensor > HI_THRESH){
09C0 E4        2224            clr     a
09C1 C0E0      2225            push    acc
09C3 C0E0      2226            push    acc
09C5 C0E0      2227            push    acc
09C7 743F      2228            mov     a,#0x3F
09C9 C0E0      2229            push    acc
09CB 852882    2230            mov     dpl,_main_line_sensor_1_112
09CE 852983    2231            mov     dph,(_main_line_sensor_1_112 + 1)
09D1 852AF0    2232            mov     b,(_main_line_sensor_1_112 + 2)
09D4 E52B      2233            mov     a,(_main_line_sensor_1_112 + 3)
09D6 120100    2234            lcall   ___fsgt
09D9 AA82      2235            mov     r2,dpl
09DB E581      2236            mov     a,sp
09DD 24FC      2237            add     a,#0xfc
09DF F581      2238            mov     sp,a
09E1 EA        2239            mov     a,r2
09E2 7001      2240            jnz     L021088?
09E4 020100    2241            ljmp    L021043?
09E7           2242   L021088?:
09E7           2243   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:468: start_timer = 0;
09E7 C298      2244            clr     _start_timer
09E9           2245   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:469: action_timer = 0;
09E9 E4        2246            clr     a
09EA F548      2247            mov     _action_timer,a
09EC F549      2248            mov     (_action_timer + 1),a
09EE           2249   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:470: state = 2;
09EE 756802    2250            mov     _main_state_1_112,#0x02
09F1 E4        2251            clr     a
09F2 F569      2252            mov     (_main_state_1_112 + 1),a
09F4 020100    2253            ljmp    L021043?
09F7           2254   L021036?:
09F7           2255   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:474: if(line_counter > 1){
09F7 C3        2256            clr     c
09F8 7401      2257            mov     a,#0x01
09FA 95C8      2258            subb    a,_main_line_counter_1_112
09FC E4        2259            clr     a
09FD 6480      2260            xrl     a,#0x80
09FF 85C9F0    2261            mov     b,(_main_line_counter_1_112 + 1)
0A02 63F080    2262            xrl     b,#0x80
0A05 95F0      2263            subb    a,b
0A07 5001      2264            jnc     L021033?
0A09           2265   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:475: command = line_counter;
0A09 85C818    2266            mov     _main_command_1_112,_main_line_counter_1_112
0A0C 85C919    2267            mov     (_main_command_1_112 + 1),(_main_line_counter_1_112 + 1)
0A0F           2268   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:476: line_counter = 0;
0A0F E4        2269            clr     a
0A10 F5C8      2270            mov     _main_line_counter_1_112,a
0A12 F5C9      2271            mov     (_main_line_counter_1_112 + 1),a
0A14           2272   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:477: state = 4;
0A14 756804    2273            mov     _main_state_1_112,#0x04
0A17 E4        2274            clr     a
0A18 F569      2275            mov     (_main_state_1_112 + 1),a
0A1A 020100    2276            ljmp    L021043?
0A1D           2277   L021033?:
0A1D           2278   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:480: state = 1;
0A1D 756801    2279            mov     _main_state_1_112,#0x01
0A20 E4        2280            clr     a
0A21 F569      2281            mov     (_main_state_1_112 + 1),a
0A23           2282   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:481: line_counter = 0;
0A23 E4        2283            clr     a
0A24 F5C8      2284            mov     _main_line_counter_1_112,a
0A26 F5C9      2285            mov     (_main_line_counter_1_112 + 1),a
0A28           2286   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:485: break;
0A28 020100    2287            ljmp    L021043?
0A2B           2288   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:486: case 4:
0A2B           2289   L021038?:
0A2B           2290   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:487: if(line_sensor > HI_THRESH){
0A2B E4        2291            clr     a
0A2C C0E0      2292            push    acc
0A2E C0E0      2293            push    acc
0A30 C0E0      2294            push    acc
0A32 743F      2295            mov     a,#0x3F
0A34 C0E0      2296            push    acc
0A36 852882    2297            mov     dpl,_main_line_sensor_1_112
0A39 852983    2298            mov     dph,(_main_line_sensor_1_112 + 1)
0A3C 852AF0    2299            mov     b,(_main_line_sensor_1_112 + 2)
0A3F E52B      2300            mov     a,(_main_line_sensor_1_112 + 3)
0A41 120100    2301            lcall   ___fsgt
0A44 AA82      2302            mov     r2,dpl
0A46 E581      2303            mov     a,sp
0A48 24FC      2304            add     a,#0xfc
0A4A F581      2305            mov     sp,a
0A4C EA        2306            mov     a,r2
0A4D 7001      2307            jnz     L021090?
0A4F 020100    2308            ljmp    L021043?
0A52           2309   L021090?:
0A52           2310   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:489: execute(command);
0A52 851882    2311            mov     dpl,_main_command_1_112
0A55 851983    2312            mov     dph,(_main_command_1_112 + 1)
0A58 120100    2313            lcall   _execute
0A5B           2314   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:490: state = 1;
0A5B 756801    2315            mov     _main_state_1_112,#0x01
0A5E E4        2316            clr     a
0A5F F569      2317            mov     (_main_state_1_112 + 1),a
0A61           2318   ;        C:\Users\Zachary Morris\Documents\GitHub\eece_284\Code\main code.c:493: }
0A61 020100    2319            ljmp    L021043?
0A64           2320            rseg R_CSEG
0A64           2321   
0000           2322            rseg R_XINIT
0000           2323   
0000           2324            rseg R_CONST
0000           2325   __str_0:
0000 4C3D2535  2326            db 'L=%5.2f R:%5.2f'
     2E326620
     523A2535
     2E3266
000F 00        2327            db 0x00
0010           2328   __str_1:
0010 4C4D3D25  2329            db 'LM=%d RM=%d'
     6420524D
     3D2564
001B 00        2330            db 0x00
001C           2331   __str_2:
001C 7475726E  2332            db 'turning left!'
     696E6720
     6C656674
     21
0029 0A        2333            db 0x0A
002A 00        2334            db 0x00
002B           2335   __str_3:
002B 7475726E  2336            db 'turning right!'
     696E6720
     72696768
     7421
0039 0A        2337            db 0x0A
003A 00        2338            db 0x00
003B           2339   
000E           2340            CSEG
000E           2341   
000E           2342   end
