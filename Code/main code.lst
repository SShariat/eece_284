0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Dec 11 2012) (MSVC)
0000              4   ; This file was generated Thu Mar 05 12:26:26 2015
0000              5   ;--------------------------------------------------------
                  5   $name main_code
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _main
0000             28            public _motor_control
0000             29            public _display_LCD
0000             30            public _Timer0ISR
0000             31            public _InitTimer0
0000             32            public _InitADC
0000             33            public _InitSerialPort
0000             34            public _Wait1S
0000             35            public _LCDport_print
0000             36            public _LCDprint
0000             37            public _LCD_8BIT
0000             38            public _WriteCommand
0000             39            public _WriteData
0000             40            public _LCD_byte
0000             41            public _LCD_pulse
0000             42            public _waitms
0000             43            public _Wait50us
0000             44            public _InitPorts
0000             45            public _LCDprint_PARM_3
0000             46            public _time_update_flag
0000             47            public _LCDprint_PARM_2
0000             48            public _pwm_right
0000             49            public _pwm_left
0000             50            public _pwmcount
0000             51            public _mins
0000             52            public _secs
0000             53            public _msCount
0000             54   ;--------------------------------------------------------
0000             55   ; Special Function Registers
0000             56   ;--------------------------------------------------------
0000             57   _ACC            DATA 0xe0
0000             58   _ADCON0         DATA 0x8e
0000             59   _ADCON1         DATA 0x97
0000             60   _ADINS          DATA 0xa3
0000             61   _ADMODA         DATA 0xc0
0000             62   _ADMODB         DATA 0xa1
0000             63   _AD0BH          DATA 0xbb
0000             64   _AD0BL          DATA 0xa6
0000             65   _AD0DAT0        DATA 0xc5
0000             66   _AD0DAT1        DATA 0xc6
0000             67   _AD0DAT2        DATA 0xc7
0000             68   _AD0DAT3        DATA 0xf4
0000             69   _AD1BH          DATA 0xc4
0000             70   _AD1BL          DATA 0xbc
0000             71   _AD1DAT0        DATA 0xd5
0000             72   _AD1DAT1        DATA 0xd6
0000             73   _AD1DAT2        DATA 0xd7
0000             74   _AD1DAT3        DATA 0xf5
0000             75   _AUXR1          DATA 0xa2
0000             76   _B              DATA 0xf0
0000             77   _BRGR0          DATA 0xbe
0000             78   _BRGR1          DATA 0xbf
0000             79   _BRGCON         DATA 0xbd
0000             80   _CCCRA          DATA 0xea
0000             81   _CCCRB          DATA 0xeb
0000             82   _CCCRC          DATA 0xec
0000             83   _CCCRD          DATA 0xed
0000             84   _CMP1           DATA 0xac
0000             85   _CMP2           DATA 0xad
0000             86   _DEECON         DATA 0xf1
0000             87   _DEEDAT         DATA 0xf2
0000             88   _DEEADR         DATA 0xf3
0000             89   _DIVM           DATA 0x95
0000             90   _DPH            DATA 0x83
0000             91   _DPL            DATA 0x82
0000             92   _FMADRH         DATA 0xe7
0000             93   _FMADRL         DATA 0xe6
0000             94   _FMCON          DATA 0xe4
0000             95   _FMDATA         DATA 0xe5
0000             96   _I2ADR          DATA 0xdb
0000             97   _I2CON          DATA 0xd8
0000             98   _I2DAT          DATA 0xda
0000             99   _I2SCLH         DATA 0xdd
0000            100   _I2SCLL         DATA 0xdc
0000            101   _I2STAT         DATA 0xd9
0000            102   _ICRAH          DATA 0xab
0000            103   _ICRAL          DATA 0xaa
0000            104   _ICRBH          DATA 0xaf
0000            105   _ICRBL          DATA 0xae
0000            106   _IEN0           DATA 0xa8
0000            107   _IEN1           DATA 0xe8
0000            108   _IP0            DATA 0xb8
0000            109   _IP0H           DATA 0xb7
0000            110   _IP1            DATA 0xf8
0000            111   _IP1H           DATA 0xf7
0000            112   _KBCON          DATA 0x94
0000            113   _KBMASK         DATA 0x86
0000            114   _KBPATN         DATA 0x93
0000            115   _OCRAH          DATA 0xef
0000            116   _OCRAL          DATA 0xee
0000            117   _OCRBH          DATA 0xfb
0000            118   _OCRBL          DATA 0xfa
0000            119   _OCRCH          DATA 0xfd
0000            120   _OCRCL          DATA 0xfc
0000            121   _OCRDH          DATA 0xff
0000            122   _OCRDL          DATA 0xfe
0000            123   _P0             DATA 0x80
0000            124   _P1             DATA 0x90
0000            125   _P2             DATA 0xa0
0000            126   _P3             DATA 0xb0
0000            127   _P0M1           DATA 0x84
0000            128   _P0M2           DATA 0x85
0000            129   _P1M1           DATA 0x91
0000            130   _P1M2           DATA 0x92
0000            131   _P2M1           DATA 0xa4
0000            132   _P2M2           DATA 0xa5
0000            133   _P3M1           DATA 0xb1
0000            134   _P3M2           DATA 0xb2
0000            135   _PCON           DATA 0x87
0000            136   _PCONA          DATA 0xb5
0000            137   _PSW            DATA 0xd0
0000            138   _PT0AD          DATA 0xf6
0000            139   _RSTSRC         DATA 0xdf
0000            140   _RTCCON         DATA 0xd1
0000            141   _RTCH           DATA 0xd2
0000            142   _RTCL           DATA 0xd3
0000            143   _SADDR          DATA 0xa9
0000            144   _SADEN          DATA 0xb9
0000            145   _SBUF           DATA 0x99
0000            146   _SCON           DATA 0x98
0000            147   _SSTAT          DATA 0xba
0000            148   _SP             DATA 0x81
0000            149   _SPCTL          DATA 0xe2
0000            150   _SPSTAT         DATA 0xe1
0000            151   _SPDAT          DATA 0xe3
0000            152   _TAMOD          DATA 0x8f
0000            153   _TCON           DATA 0x88
0000            154   _TCR20          DATA 0xc8
0000            155   _TCR21          DATA 0xf9
0000            156   _TH0            DATA 0x8c
0000            157   _TH1            DATA 0x8d
0000            158   _TH2            DATA 0xcd
0000            159   _TICR2          DATA 0xc9
0000            160   _TIFR2          DATA 0xe9
0000            161   _TISE2          DATA 0xde
0000            162   _TL0            DATA 0x8a
0000            163   _TL1            DATA 0x8b
0000            164   _TL2            DATA 0xcc
0000            165   _TMOD           DATA 0x89
0000            166   _TOR2H          DATA 0xcf
0000            167   _TOR2L          DATA 0xce
0000            168   _TPCR2H         DATA 0xcb
0000            169   _TPCR2L         DATA 0xca
0000            170   _TRIM           DATA 0x96
0000            171   _WDCON          DATA 0xa7
0000            172   _WDL            DATA 0xc1
0000            173   _WFEED1         DATA 0xc2
0000            174   _WFEED2         DATA 0xc3
0000            175   ;--------------------------------------------------------
0000            176   ; special function bits
0000            177   ;--------------------------------------------------------
0000            178   _ACC_7          BIT 0xe7
0000            179   _ACC_6          BIT 0xe6
0000            180   _ACC_5          BIT 0xe5
0000            181   _ACC_4          BIT 0xe4
0000            182   _ACC_3          BIT 0xe3
0000            183   _ACC_2          BIT 0xe2
0000            184   _ACC_1          BIT 0xe1
0000            185   _ACC_0          BIT 0xe0
0000            186   _ADMODA_7       BIT 0xc7
0000            187   _ADMODA_6       BIT 0xc6
0000            188   _ADMODA_5       BIT 0xc5
0000            189   _ADMODA_4       BIT 0xc4
0000            190   _ADMODA_3       BIT 0xc3
0000            191   _ADMODA_2       BIT 0xc2
0000            192   _ADMODA_1       BIT 0xc1
0000            193   _ADMODA_0       BIT 0xc0
0000            194   _BNDI1          BIT 0xc7
0000            195   _BURST1         BIT 0xc6
0000            196   _SCC1           BIT 0xc5
0000            197   _SCAN1          BIT 0xc4
0000            198   _BNDI0          BIT 0xc3
0000            199   _BURST0         BIT 0xc2
0000            200   _SCC0           BIT 0xc1
0000            201   _SCAN0          BIT 0xc0
0000            202   _B_7            BIT 0xf7
0000            203   _B_6            BIT 0xf6
0000            204   _B_5            BIT 0xf5
0000            205   _B_4            BIT 0xf4
0000            206   _B_3            BIT 0xf3
0000            207   _B_2            BIT 0xf2
0000            208   _B_1            BIT 0xf1
0000            209   _B_0            BIT 0xf0
0000            210   _I2CON_7        BIT 0xdf
0000            211   _I2CON_6        BIT 0xde
0000            212   _I2CON_5        BIT 0xdd
0000            213   _I2CON_4        BIT 0xdc
0000            214   _I2CON_3        BIT 0xdb
0000            215   _I2CON_2        BIT 0xda
0000            216   _I2CON_1        BIT 0xd9
0000            217   _I2CON_0        BIT 0xd8
0000            218   _I2EN           BIT 0xde
0000            219   _STA            BIT 0xdd
0000            220   _STO            BIT 0xdc
0000            221   _SI             BIT 0xdb
0000            222   _AA             BIT 0xda
0000            223   _CRSEL          BIT 0xd8
0000            224   _IEN0_7         BIT 0xaf
0000            225   _IEN0_6         BIT 0xae
0000            226   _IEN0_5         BIT 0xad
0000            227   _IEN0_4         BIT 0xac
0000            228   _IEN0_3         BIT 0xab
0000            229   _IEN0_2         BIT 0xaa
0000            230   _IEN0_1         BIT 0xa9
0000            231   _IEN0_0         BIT 0xa8
0000            232   _EA             BIT 0xaf
0000            233   _EWDRT          BIT 0xae
0000            234   _EBO            BIT 0xad
0000            235   _ES             BIT 0xac
0000            236   _ESR            BIT 0xac
0000            237   _ET1            BIT 0xab
0000            238   _EX1            BIT 0xaa
0000            239   _ET0            BIT 0xa9
0000            240   _EX0            BIT 0xa8
0000            241   _IEN1_7         BIT 0xef
0000            242   _IEN1_6         BIT 0xee
0000            243   _IEN1_5         BIT 0xed
0000            244   _IEN1_4         BIT 0xec
0000            245   _IEN1_3         BIT 0xeb
0000            246   _IEN1_2         BIT 0xea
0000            247   _IEN1_1         BIT 0xe9
0000            248   _IEN1_0         BIT 0xe8
0000            249   _EADEE          BIT 0xef
0000            250   _EST            BIT 0xee
0000            251   _ECCU           BIT 0xec
0000            252   _ESPI           BIT 0xeb
0000            253   _EC             BIT 0xea
0000            254   _EKBI           BIT 0xe9
0000            255   _EI2C           BIT 0xe8
0000            256   _IP0_7          BIT 0xbf
0000            257   _IP0_6          BIT 0xbe
0000            258   _IP0_5          BIT 0xbd
0000            259   _IP0_4          BIT 0xbc
0000            260   _IP0_3          BIT 0xbb
0000            261   _IP0_2          BIT 0xba
0000            262   _IP0_1          BIT 0xb9
0000            263   _IP0_0          BIT 0xb8
0000            264   _PWDRT          BIT 0xbe
0000            265   _PBO            BIT 0xbd
0000            266   _PS             BIT 0xbc
0000            267   _PSR            BIT 0xbc
0000            268   _PT1            BIT 0xbb
0000            269   _PX1            BIT 0xba
0000            270   _PT0            BIT 0xb9
0000            271   _PX0            BIT 0xb8
0000            272   _IP1_7          BIT 0xff
0000            273   _IP1_6          BIT 0xfe
0000            274   _IP1_5          BIT 0xfd
0000            275   _IP1_4          BIT 0xfc
0000            276   _IP1_3          BIT 0xfb
0000            277   _IP1_2          BIT 0xfa
0000            278   _IP1_1          BIT 0xf9
0000            279   _IP1_0          BIT 0xf8
0000            280   _PADEE          BIT 0xff
0000            281   _PST            BIT 0xfe
0000            282   _PCCU           BIT 0xfc
0000            283   _PSPI           BIT 0xfb
0000            284   _PC             BIT 0xfa
0000            285   _PKBI           BIT 0xf9
0000            286   _PI2C           BIT 0xf8
0000            287   _P0_7           BIT 0x87
0000            288   _P0_6           BIT 0x86
0000            289   _P0_5           BIT 0x85
0000            290   _P0_4           BIT 0x84
0000            291   _P0_3           BIT 0x83
0000            292   _P0_2           BIT 0x82
0000            293   _P0_1           BIT 0x81
0000            294   _P0_0           BIT 0x80
0000            295   _T1             BIT 0x87
0000            296   _KB7            BIT 0x87
0000            297   _CMP_1          BIT 0x86
0000            298   _KB6            BIT 0x86
0000            299   _CMPREF         BIT 0x85
0000            300   _KB5            BIT 0x85
0000            301   _CIN1A          BIT 0x84
0000            302   _KB4            BIT 0x84
0000            303   _CIN1B          BIT 0x83
0000            304   _KB3            BIT 0x83
0000            305   _CIN2A          BIT 0x82
0000            306   _KB2            BIT 0x82
0000            307   _CIN2B          BIT 0x81
0000            308   _KB1            BIT 0x81
0000            309   _CMP_2          BIT 0x80
0000            310   _KB0            BIT 0x80
0000            311   _P1_7           BIT 0x97
0000            312   _P1_6           BIT 0x96
0000            313   _P1_5           BIT 0x95
0000            314   _P1_4           BIT 0x94
0000            315   _P1_3           BIT 0x93
0000            316   _P1_2           BIT 0x92
0000            317   _P1_1           BIT 0x91
0000            318   _P1_0           BIT 0x90
0000            319   _OCC            BIT 0x97
0000            320   _OCB            BIT 0x96
0000            321   _RST            BIT 0x95
0000            322   _INT1           BIT 0x94
0000            323   _INT0           BIT 0x93
0000            324   _SDA            BIT 0x93
0000            325   _T0             BIT 0x92
0000            326   _SCL            BIT 0x92
0000            327   _RXD            BIT 0x91
0000            328   _TXD            BIT 0x90
0000            329   _P2_7           BIT 0xa7
0000            330   _P2_6           BIT 0xa6
0000            331   _P2_5           BIT 0xa5
0000            332   _P2_4           BIT 0xa4
0000            333   _P2_3           BIT 0xa3
0000            334   _P2_2           BIT 0xa2
0000            335   _P2_1           BIT 0xa1
0000            336   _P2_0           BIT 0xa0
0000            337   _ICA            BIT 0xa7
0000            338   _OCA            BIT 0xa6
0000            339   _SPICLK         BIT 0xa5
0000            340   _SS             BIT 0xa4
0000            341   _MISO           BIT 0xa3
0000            342   _MOSI           BIT 0xa2
0000            343   _OCD            BIT 0xa1
0000            344   _ICB            BIT 0xa0
0000            345   _P3_7           BIT 0xb7
0000            346   _P3_6           BIT 0xb6
0000            347   _P3_5           BIT 0xb5
0000            348   _P3_4           BIT 0xb4
0000            349   _P3_3           BIT 0xb3
0000            350   _P3_2           BIT 0xb2
0000            351   _P3_1           BIT 0xb1
0000            352   _P3_0           BIT 0xb0
0000            353   _XTAL1          BIT 0xb1
0000            354   _XTAL2          BIT 0xb0
0000            355   _PSW_7          BIT 0xd7
0000            356   _PSW_6          BIT 0xd6
0000            357   _PSW_5          BIT 0xd5
0000            358   _PSW_4          BIT 0xd4
0000            359   _PSW_3          BIT 0xd3
0000            360   _PSW_2          BIT 0xd2
0000            361   _PSW_1          BIT 0xd1
0000            362   _PSW_0          BIT 0xd0
0000            363   _CY             BIT 0xd7
0000            364   _AC             BIT 0xd6
0000            365   _F0             BIT 0xd5
0000            366   _RS1            BIT 0xd4
0000            367   _RS0            BIT 0xd3
0000            368   _OV             BIT 0xd2
0000            369   _F1             BIT 0xd1
0000            370   _P              BIT 0xd0
0000            371   _SCON_7         BIT 0x9f
0000            372   _SCON_6         BIT 0x9e
0000            373   _SCON_5         BIT 0x9d
0000            374   _SCON_4         BIT 0x9c
0000            375   _SCON_3         BIT 0x9b
0000            376   _SCON_2         BIT 0x9a
0000            377   _SCON_1         BIT 0x99
0000            378   _SCON_0         BIT 0x98
0000            379   _SM0            BIT 0x9f
0000            380   _FE             BIT 0x9f
0000            381   _SM1            BIT 0x9e
0000            382   _SM2            BIT 0x9d
0000            383   _REN            BIT 0x9c
0000            384   _TB8            BIT 0x9b
0000            385   _RB8            BIT 0x9a
0000            386   _TI             BIT 0x99
0000            387   _RI             BIT 0x98
0000            388   _TCON_7         BIT 0x8f
0000            389   _TCON_6         BIT 0x8e
0000            390   _TCON_5         BIT 0x8d
0000            391   _TCON_4         BIT 0x8c
0000            392   _TCON_3         BIT 0x8b
0000            393   _TCON_2         BIT 0x8a
0000            394   _TCON_1         BIT 0x89
0000            395   _TCON_0         BIT 0x88
0000            396   _TF1            BIT 0x8f
0000            397   _TR1            BIT 0x8e
0000            398   _TF0            BIT 0x8d
0000            399   _TR0            BIT 0x8c
0000            400   _IE1            BIT 0x8b
0000            401   _IT1            BIT 0x8a
0000            402   _IE0            BIT 0x89
0000            403   _IT0            BIT 0x88
0000            404   _TCR20_7        BIT 0xcf
0000            405   _TCR20_6        BIT 0xce
0000            406   _TCR20_5        BIT 0xcd
0000            407   _TCR20_4        BIT 0xcc
0000            408   _TCR20_3        BIT 0xcb
0000            409   _TCR20_2        BIT 0xca
0000            410   _TCR20_1        BIT 0xc9
0000            411   _TCR20_0        BIT 0xc8
0000            412   _PLEEN          BIT 0xcf
0000            413   _HLTRN          BIT 0xce
0000            414   _HLTEN          BIT 0xcd
0000            415   _ALTCD          BIT 0xcc
0000            416   _ALTAB          BIT 0xcb
0000            417   _TDIR2          BIT 0xca
0000            418   _TMOD21         BIT 0xc9
0000            419   _TMOD20         BIT 0xc8
0000            420   ;--------------------------------------------------------
0000            421   ; overlayable register banks
0000            422   ;--------------------------------------------------------
0000            423            rbank0 segment data overlay
0000            424   ;--------------------------------------------------------
0000            425   ; internal ram data
0000            426   ;--------------------------------------------------------
0000            427            rseg R_DSEG
0000            428   _msCount:
0000            429            ds 2
0002            430   _secs:
0002            431            ds 1
0003            432   _mins:
0003            433            ds 1
0004            434   _pwmcount:
0004            435            ds 1
0005            436   _pwm_left:
0005            437            ds 1
0006            438   _pwm_right:
0006            439            ds 1
0007            440   _LCDprint_PARM_2:
0007            441            ds 1
0008            442   _LCDport_print_string_2_81:
0008            443            ds 20
001C            444   _display_LCD_buff_1_96:
001C            445            ds 17
002D            446   _main_str_1_100:
002D            447            ds 17
003E            448   _main_cor_1_100:
003E            449            ds 4
0042            450   _main_pre_error_1_100:
0042            451            ds 4
0046            452   _main_new_speed_low_1_100:
0046            453            ds 4
004A            454   _main_new_speed_high_1_100:
004A            455            ds 4
004E            456   _main_left_2_101:
004E            457            ds 4
0052            458   _main_right_2_101:
0052            459            ds 4
0056            460   ;--------------------------------------------------------
0056            461   ; overlayable items in internal ram 
0056            462   ;--------------------------------------------------------
0000            463            rseg R_OSEG
0000            464   ;--------------------------------------------------------
0000            465   ; indirectly addressable internal ram data
0000            466   ;--------------------------------------------------------
0000            467            rseg R_ISEG
0000            468   ;--------------------------------------------------------
0000            469   ; absolute internal ram data
0000            470   ;--------------------------------------------------------
0000            471            DSEG
0000            472   ;--------------------------------------------------------
0000            473   ; bit data
0000            474   ;--------------------------------------------------------
0000            475            rseg R_BSEG
0000            476   _time_update_flag:
0000            477            DBIT    1
0001            478   _LCDprint_PARM_3:
0001            479            DBIT    1
0002            480   ;--------------------------------------------------------
0002            481   ; paged external ram data
0002            482   ;--------------------------------------------------------
0000            483            rseg R_PSEG
0000            484   ;--------------------------------------------------------
0000            485   ; external ram data
0000            486   ;--------------------------------------------------------
0000            487            rseg R_XSEG
FFC8            488            XSEG at 0xffc8
FFC8            489   _BODCFG: ds 1
FFC9            490            public _BODCFG
0000            491            rseg R_XSEG
FFDE            492            XSEG at 0xffde
FFDE            493   _CLKCON: ds 1
FFDF            494            public _CLKCON
0000            495            rseg R_XSEG
FFE1            496            XSEG at 0xffe1
FFE1            497   _PGACON1: ds 1
FFE2            498            public _PGACON1
0000            499            rseg R_XSEG
FFE4            500            XSEG at 0xffe4
FFE4            501   _PGACON1B: ds 1
FFE5            502            public _PGACON1B
0000            503            rseg R_XSEG
FFE3            504            XSEG at 0xffe3
FFE3            505   _PGA1TRIM8X16X: ds 1
FFE4            506            public _PGA1TRIM8X16X
0000            507            rseg R_XSEG
FFE2            508            XSEG at 0xffe2
FFE2            509   _PGA1TRIM2X4X: ds 1
FFE3            510            public _PGA1TRIM2X4X
0000            511            rseg R_XSEG
FFCA            512            XSEG at 0xffca
FFCA            513   _PGACON0: ds 1
FFCB            514            public _PGACON0
0000            515            rseg R_XSEG
FFCE            516            XSEG at 0xffce
FFCE            517   _PGACON0B: ds 1
FFCF            518            public _PGACON0B
0000            519            rseg R_XSEG
FFCD            520            XSEG at 0xffcd
FFCD            521   _PGA0TRIM8X16X: ds 1
FFCE            522            public _PGA0TRIM8X16X
0000            523            rseg R_XSEG
FFCC            524            XSEG at 0xffcc
FFCC            525   _PGA0TRIM2X4X: ds 1
FFCD            526            public _PGA0TRIM2X4X
0000            527            rseg R_XSEG
FFBF            528            XSEG at 0xffbf
FFBF            529   _RTCDATH: ds 1
FFC0            530            public _RTCDATH
0000            531            rseg R_XSEG
FFBE            532            XSEG at 0xffbe
FFBE            533   _RTCDATL: ds 1
FFBF            534            public _RTCDATL
0000            535            rseg R_XSEG
0000            536   ;--------------------------------------------------------
0000            537   ; absolute external ram data
0000            538   ;--------------------------------------------------------
FFBF            539            XSEG
FFBF            540   ;--------------------------------------------------------
FFBF            541   ; external initialized ram data
FFBF            542   ;--------------------------------------------------------
0000            543            rseg R_IXSEG
0000            544            rseg R_HOME
0000            545            rseg R_GSINIT
0000            546            rseg R_CSEG
0000            547   ;--------------------------------------------------------
0000            548   ; Reset entry point and interrupt vectors
0000            549   ;--------------------------------------------------------
0000            550            CSEG at 0x0000
0000 020100     551            ljmp    _crt0
000B            552            CSEG at 0x000b
000B 020100     553            ljmp    _Timer0ISR
000E            554   ;--------------------------------------------------------
000E            555   ; global & static initialisations
000E            556   ;--------------------------------------------------------
0000            557            rseg R_HOME
0000            558            rseg R_GSINIT
0000            559            rseg R_GSINIT
0000            560   ;--------------------------------------------------------
0000            561   ; data variables initialization
0000            562   ;--------------------------------------------------------
0000            563            rseg R_DINIT
0000            564   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:34: volatile int msCount=0; // Volatiles can be changed by stuff outside our program, like memory registers
0000 E4         565            clr     a
0001 F5E0       566            mov     _msCount,a
0003 F5E1       567            mov     (_msCount + 1),a
0005            568   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:35: volatile unsigned char secs=0, mins=0; // They are like global variables, kinda 
0005 75A000     569            mov     _secs,#0x00
0008            570   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:35: volatile bit time_update_flag=0;
0008 756000     571            mov     _mins,#0x00
000B            572   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:36: volatile unsigned char pwmcount;
000B C210       573            clr     _time_update_flag
000D            574            ; The linker places a 'ret' at the end of segment R_DINIT.
000D            575   ;--------------------------------------------------------
000D            576   ; code
000D            577   ;--------------------------------------------------------
0000            578            rseg R_CSEG
0000            579   ;------------------------------------------------------------
0000            580   ;Allocation info for local variables in function 'InitPorts'
0000            581   ;------------------------------------------------------------
0000            582   ;------------------------------------------------------------
0000            583   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:41: void InitPorts(void)
0000            584   ;        -----------------------------------------
0000            585   ;         function InitPorts
0000            586   ;        -----------------------------------------
0000            587   _InitPorts:
0000            588            using   0
0000            589   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:43: P0M1=0x1E;
0000 75841E     590            mov     _P0M1,#0x1E
0003            591   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:44: P0M2=0x00;
0003 758500     592            mov     _P0M2,#0x00
0006            593   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:45: P1M1=0;
0006 759100     594            mov     _P1M1,#0x00
0009            595   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:46: P1M2=0;
0009 759200     596            mov     _P1M2,#0x00
000C            597   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:47: P2M1=0;
000C 75A400     598            mov     _P2M1,#0x00
000F            599   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:48: P2M2=0;
000F 75A500     600            mov     _P2M2,#0x00
0012            601   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:49: P3M1=0;
0012 75B100     602            mov     _P3M1,#0x00
0015            603   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:50: P3M2=0;
0015 75B200     604            mov     _P3M2,#0x00
0018 22         605            ret
0019            606   ;------------------------------------------------------------
0019            607   ;Allocation info for local variables in function 'Wait50us'
0019            608   ;------------------------------------------------------------
0019            609   ;------------------------------------------------------------
0019            610   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:53: void Wait50us (void)
0019            611   ;        -----------------------------------------
0019            612   ;         function Wait50us
0019            613   ;        -----------------------------------------
0019            614   _Wait50us:
0019            615   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:58: _endasm;
0019            616            
0019 7852       617                mov R0, #82
001B            618            L0:
001B D8C0       619            djnz R0, L0 ; 2 machine cycles-> 2*0.27126us*92=50us
001D            620                
001D 22         621            ret
001E            622   ;------------------------------------------------------------
001E            623   ;Allocation info for local variables in function 'waitms'
001E            624   ;------------------------------------------------------------
001E            625   ;ms                        Allocated to registers r2 r3 
001E            626   ;j                         Allocated to registers r4 r5 
001E            627   ;k                         Allocated to registers r6 
001E            628   ;------------------------------------------------------------
001E            629   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:61: void waitms (unsigned int ms)
001E            630   ;        -----------------------------------------
001E            631   ;         function waitms
001E            632   ;        -----------------------------------------
001E            633   _waitms:
001E AA82       634            mov     r2,dpl
0020 AB83       635            mov     r3,dph
0022            636   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:67: for(j=0; j<ms; j++)
0022 7C00       637            mov     r4,#0x00
0024 7D00       638            mov     r5,#0x00
0026            639   L004004?:
0026 C3         640            clr     c
0027 EC         641            mov     a,r4
0028 9A         642            subb    a,r2
0029 ED         643            mov     a,r5
002A 9B         644            subb    a,r3
002B 5001       645            jnc     L004008?
002D            646   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:68: for (k=0; k<20; k++) Wait50us();
002D 7E14       647            mov     r6,#0x14
002F            648   L004003?:
002F C002       649            push    ar2
0031 C003       650            push    ar3
0033 C004       651            push    ar4
0035 C005       652            push    ar5
0037 C006       653            push    ar6
0039 120100     654            lcall   _Wait50us
003C D006       655            pop     ar6
003E D005       656            pop     ar5
0040 D004       657            pop     ar4
0042 D003       658            pop     ar3
0044 D002       659            pop     ar2
0046 DE00       660            djnz    r6,L004003?
0048            661   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:67: for(j=0; j<ms; j++)
0048 0C         662            inc     r4
0049 BC0080     663            cjne    r4,#0x00,L004004?
004C 0D         664            inc     r5
004D 8001       665            sjmp    L004004?
004F            666   L004008?:
004F 22         667            ret
0050            668   ;------------------------------------------------------------
0050            669   ;Allocation info for local variables in function 'LCD_pulse'
0050            670   ;------------------------------------------------------------
0050            671   ;------------------------------------------------------------
0050            672   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:71: void LCD_pulse (void)
0050            673   ;        -----------------------------------------
0050            674   ;         function LCD_pulse
0050            675   ;        -----------------------------------------
0050            676   _LCD_pulse:
0050            677   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:73: LCD_E=1;
0050 D2A5       678            setb    _P2_5
0052            679   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:74: Wait50us();
0052 120100     680            lcall   _Wait50us
0055            681   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:75: LCD_E=0;
0055 C2A5       682            clr     _P2_5
0057 22         683            ret
0058            684   ;------------------------------------------------------------
0058            685   ;Allocation info for local variables in function 'LCD_byte'
0058            686   ;------------------------------------------------------------
0058            687   ;x                         Allocated to registers 
0058            688   ;------------------------------------------------------------
0058            689   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:78: void LCD_byte (unsigned char x)
0058            690   ;        -----------------------------------------
0058            691   ;         function LCD_byte
0058            692   ;        -----------------------------------------
0058            693   _LCD_byte:
0058 8582E0     694            mov     _ACC,dpl
005B            695   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:82: LCD_D7=ACC_7;
005B A2E7       696            mov     c,_ACC_7
005D 9294       697            mov     _P1_4,c
005F            698   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:83: LCD_D6=ACC_6;
005F A2E6       699            mov     c,_ACC_6
0061 9296       700            mov     _P1_6,c
0063            701   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:84: LCD_D5=ACC_5;
0063 A2E5       702            mov     c,_ACC_5
0065 9297       703            mov     _P1_7,c
0067            704   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:85: LCD_D4=ACC_4;
0067 A2E4       705            mov     c,_ACC_4
0069 92A0       706            mov     _P2_0,c
006B            707   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:86: LCD_D3=ACC_3;
006B A2E3       708            mov     c,_ACC_3
006D 92A1       709            mov     _P2_1,c
006F            710   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:87: LCD_D2=ACC_2;
006F A2E2       711            mov     c,_ACC_2
0071 92A2       712            mov     _P2_2,c
0073            713   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:88: LCD_D1=ACC_1;
0073 A2E1       714            mov     c,_ACC_1
0075 92A3       715            mov     _P2_3,c
0077            716   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:89: LCD_D0=ACC_0;
0077 A2E0       717            mov     c,_ACC_0
0079 92A4       718            mov     _P2_4,c
007B            719   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:90: LCD_pulse();
007B 020100     720            ljmp    _LCD_pulse
007E            721   ;------------------------------------------------------------
007E            722   ;Allocation info for local variables in function 'WriteData'
007E            723   ;------------------------------------------------------------
007E            724   ;x                         Allocated to registers r2 
007E            725   ;------------------------------------------------------------
007E            726   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:93: void WriteData (unsigned char x)
007E            727   ;        -----------------------------------------
007E            728   ;         function WriteData
007E            729   ;        -----------------------------------------
007E            730   _WriteData:
007E AA82       731            mov     r2,dpl
0080            732   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:95: LCD_RS=1;
0080 D2A7       733            setb    _P2_7
0082            734   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:96: LCD_byte(x);
0082 8A82       735            mov     dpl,r2
0084 120100     736            lcall   _LCD_byte
0087            737   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:97: waitms(2);
0087 900002     738            mov     dptr,#0x0002
008A 020100     739            ljmp    _waitms
008D            740   ;------------------------------------------------------------
008D            741   ;Allocation info for local variables in function 'WriteCommand'
008D            742   ;------------------------------------------------------------
008D            743   ;x                         Allocated to registers r2 
008D            744   ;------------------------------------------------------------
008D            745   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:100: void WriteCommand (unsigned char x)
008D            746   ;        -----------------------------------------
008D            747   ;         function WriteCommand
008D            748   ;        -----------------------------------------
008D            749   _WriteCommand:
008D AA82       750            mov     r2,dpl
008F            751   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:102: LCD_RS=0;
008F C2A7       752            clr     _P2_7
0091            753   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:103: LCD_byte(x);
0091 8A82       754            mov     dpl,r2
0093 120100     755            lcall   _LCD_byte
0096            756   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:104: waitms(5);
0096 900005     757            mov     dptr,#0x0005
0099 020100     758            ljmp    _waitms
009C            759   ;------------------------------------------------------------
009C            760   ;Allocation info for local variables in function 'LCD_8BIT'
009C            761   ;------------------------------------------------------------
009C            762   ;------------------------------------------------------------
009C            763   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:107: void LCD_8BIT (void)
009C            764   ;        -----------------------------------------
009C            765   ;         function LCD_8BIT
009C            766   ;        -----------------------------------------
009C            767   _LCD_8BIT:
009C            768   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:109: LCD_E=0;  // Resting state of LCD's enable is zero
009C C2A5       769            clr     _P2_5
009E            770   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:110: LCD_RW=0; // We are only writing to the LCD in this program
009E C2A6       771            clr     _P2_6
00A0            772   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:111: waitms(20);
00A0 900014     773            mov     dptr,#0x0014
00A3 120100     774            lcall   _waitms
00A6            775   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:113: WriteCommand(0x33);
00A6 758233     776            mov     dpl,#0x33
00A9 120100     777            lcall   _WriteCommand
00AC            778   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:114: WriteCommand(0x33);
00AC 758233     779            mov     dpl,#0x33
00AF 120100     780            lcall   _WriteCommand
00B2            781   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:115: WriteCommand(0x33); // Stay in 8-bit mode
00B2 758233     782            mov     dpl,#0x33
00B5 120100     783            lcall   _WriteCommand
00B8            784   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:118: WriteCommand(0x38);
00B8 758238     785            mov     dpl,#0x38
00BB 120100     786            lcall   _WriteCommand
00BE            787   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:119: WriteCommand(0x0c);
00BE 75820C     788            mov     dpl,#0x0C
00C1 120100     789            lcall   _WriteCommand
00C4            790   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:120: WriteCommand(0x01); // Clear screen command (takes some time)
00C4 758201     791            mov     dpl,#0x01
00C7 120100     792            lcall   _WriteCommand
00CA            793   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:121: waitms(20); // Wait for clear screen command to finsih.
00CA 900014     794            mov     dptr,#0x0014
00CD 020100     795            ljmp    _waitms
00D0            796   ;------------------------------------------------------------
00D0            797   ;Allocation info for local variables in function 'LCDprint'
00D0            798   ;------------------------------------------------------------
00D0            799   ;line                      Allocated with name '_LCDprint_PARM_2'
00D0            800   ;string                    Allocated to registers r2 r3 r4 
00D0            801   ;j                         Allocated to registers r5 
00D0            802   ;------------------------------------------------------------
00D0            803   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:124: void LCDprint(char * string, unsigned char line, bit clear)
00D0            804   ;        -----------------------------------------
00D0            805   ;         function LCDprint
00D0            806   ;        -----------------------------------------
00D0            807   _LCDprint:
00D0 AA82       808            mov     r2,dpl
00D2 AB83       809            mov     r3,dph
00D4 ACF0       810            mov     r4,b
00D6            811   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:128: WriteCommand(line==2?0xc0:0x80);
00D6 7402       812            mov     a,#0x02
00D8 B56080     813            cjne    a,_LCDprint_PARM_2,L010013?
00DB 7DC0       814            mov     r5,#0xC0
00DD 8001       815            sjmp    L010014?
00DF            816   L010013?:
00DF 7D80       817            mov     r5,#0x80
00E1            818   L010014?:
00E1 8D82       819            mov     dpl,r5
00E3 C002       820            push    ar2
00E5 C003       821            push    ar3
00E7 C004       822            push    ar4
00E9 120100     823            lcall   _WriteCommand
00EC            824   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:129: waitms(5);
00EC 900005     825            mov     dptr,#0x0005
00EF 120100     826            lcall   _waitms
00F2 D004       827            pop     ar4
00F4 D003       828            pop     ar3
00F6 D002       829            pop     ar2
00F8            830   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:130: for(j=0; string[j]!=0; j++)       WriteData(string[j]);// Write the message
00F8 7D00       831            mov     r5,#0x00
00FA            832   L010003?:
00FA ED         833            mov     a,r5
00FB 2A         834            add     a,r2
00FC FE         835            mov     r6,a
00FD E4         836            clr     a
00FE 3B         837            addc    a,r3
00FF FF         838            mov     r7,a
0100 8C00       839            mov     ar0,r4
0102 8E82       840            mov     dpl,r6
0104 8F83       841            mov     dph,r7
0106 88F0       842            mov     b,r0
0108 120100     843            lcall   __gptrget
010B FE         844            mov     r6,a
010C 6001       845            jz      L010006?
010E 8E82       846            mov     dpl,r6
0110 C002       847            push    ar2
0112 C003       848            push    ar3
0114 C004       849            push    ar4
0116 C005       850            push    ar5
0118 120100     851            lcall   _WriteData
011B D005       852            pop     ar5
011D D004       853            pop     ar4
011F D003       854            pop     ar3
0121 D002       855            pop     ar2
0123 0D         856            inc     r5
0124 8001       857            sjmp    L010003?
0126            858   L010006?:
0126            859   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:131: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0126 30C0C0     860            jnb     _LCDprint_PARM_3,L010011?
0129 8D02       861            mov     ar2,r5
012B            862   L010007?:
012B BA1040     863            cjne    r2,#0x10,L010026?
012E            864   L010026?:
012E 5001       865            jnc     L010011?
0130 758220     866            mov     dpl,#0x20
0133 C002       867            push    ar2
0135 120100     868            lcall   _WriteData
0138 D002       869            pop     ar2
013A 0A         870            inc     r2
013B 8001       871            sjmp    L010007?
013D            872   L010011?:
013D 22         873            ret
013E            874   ;------------------------------------------------------------
013E            875   ;Allocation info for local variables in function 'LCDport_print'
013E            876   ;------------------------------------------------------------
013E            877   ;string                    Allocated with name '_LCDport_print_string_2_81'
013E            878   ;------------------------------------------------------------
013E            879   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:134: void LCDport_print(void){
013E            880   ;        -----------------------------------------
013E            881   ;         function LCDport_print
013E            882   ;        -----------------------------------------
013E            883   _LCDport_print:
013E            884   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:135: while(1){
013E            885   L011002?:
013E            886   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:137: char string[20]  = "something";
013E 75E073     887            mov     _LCDport_print_string_2_81,#0x73
0141 75E16F     888            mov     (_LCDport_print_string_2_81 + 0x0001),#0x6F
0144 75E26D     889            mov     (_LCDport_print_string_2_81 + 0x0002),#0x6D
0147 75E365     890            mov     (_LCDport_print_string_2_81 + 0x0003),#0x65
014A 75E474     891            mov     (_LCDport_print_string_2_81 + 0x0004),#0x74
014D 75E568     892            mov     (_LCDport_print_string_2_81 + 0x0005),#0x68
0150 75E669     893            mov     (_LCDport_print_string_2_81 + 0x0006),#0x69
0153 75E76E     894            mov     (_LCDport_print_string_2_81 + 0x0007),#0x6E
0156 75E867     895            mov     (_LCDport_print_string_2_81 + 0x0008),#0x67
0159 75E900     896            mov     (_LCDport_print_string_2_81 + 0x0009),#0x00
015C            897   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:141: LCDprint(string, 2,1);
015C 756002     898            mov     _LCDprint_PARM_2,#0x02
015F D2C0       899            setb    _LCDprint_PARM_3
0161 90A3E0     900            mov     dptr,#_LCDport_print_string_2_81
0164 75F040     901            mov     b,#0x40
0167 120100     902            lcall   _LCDprint
016A 8001       903            sjmp    L011002?
016C            904   ;------------------------------------------------------------
016C            905   ;Allocation info for local variables in function 'Wait1S'
016C            906   ;------------------------------------------------------------
016C            907   ;------------------------------------------------------------
016C            908   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:145: void Wait1S (void)
016C            909   ;        -----------------------------------------
016C            910   ;         function Wait1S
016C            911   ;        -----------------------------------------
016C            912   _Wait1S:
016C            913   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:154: _endasm;
016C            914            
016C 7A28       915             mov R2, #40
016E            916            L3:
016E 79FA       917            mov R1, #250
0170            918            L2:
0170 78B8       919            mov R0, #184
0172            920            L1:
0172 D840       921            djnz R0, L1 ; 2 machine cycles-> 2*0.27126us*184=100us
0174 D900       922                djnz R1, L2 ; 100us*250=0.025s
0176 DAC0       923                djnz R2, L3 ; 0.025s*40=1s
0178            924                
0178 22         925            ret
0179            926   ;------------------------------------------------------------
0179            927   ;Allocation info for local variables in function 'InitSerialPort'
0179            928   ;------------------------------------------------------------
0179            929   ;------------------------------------------------------------
0179            930   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:157: void InitSerialPort(void)
0179            931   ;        -----------------------------------------
0179            932   ;         function InitSerialPort
0179            933   ;        -----------------------------------------
0179            934   _InitSerialPort:
0179            935   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:159: BRGCON=0x00; //Make sure the baud rate generator is off
0179 75BD00     936            mov     _BRGCON,#0x00
017C            937   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:160: BRGR1=((XTAL/BAUD)-16)/0x100;
017C 75BF00     938            mov     _BRGR1,#0x00
017F            939   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:161: BRGR0=((XTAL/BAUD)-16)%0x100;
017F 75BE30     940            mov     _BRGR0,#0x30
0182            941   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:162: BRGCON=0x03; //Turn-on the baud rate generator
0182 75BD03     942            mov     _BRGCON,#0x03
0185            943   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:163: SCON=0x52; //Serial port in mode 1, ren, txrdy, rxempty
0185 759852     944            mov     _SCON,#0x52
0188            945   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:164: P1M1=0x00; //Enable pins RxD and Txd
0188 759100     946            mov     _P1M1,#0x00
018B            947   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:165: P1M2=0x00; //Enable pins RxD and Txd
018B 759200     948            mov     _P1M2,#0x00
018E 22         949            ret
018F            950   ;------------------------------------------------------------
018F            951   ;Allocation info for local variables in function 'InitADC'
018F            952   ;------------------------------------------------------------
018F            953   ;------------------------------------------------------------
018F            954   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:168: void InitADC(void)
018F            955   ;        -----------------------------------------
018F            956   ;         function InitADC
018F            957   ;        -----------------------------------------
018F            958   _InitADC:
018F            959   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:172: P0M1 |= (P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
018F 43841E     960            orl     _P0M1,#0x1E
0192            961   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:173: P0M2 &= ~(P0M1_4 | P0M1_3 | P0M1_2 | P0M1_1);
0192 5385E1     962            anl     _P0M2,#0xE1
0195            963   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:176: BURST1=1; //Autoscan continuous conversion mode
0195 D2C6       964            setb    _BURST1
0197            965   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:177: ADMODB = CLK0; //ADC1 clock is 7.3728MHz/2
0197 75A120     966            mov     _ADMODB,#0x20
019A            967   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:178: ADINS  = (ADI13|ADI12|ADI11|ADI10); // Select the four channels for conversion
019A 75A3F0     968            mov     _ADINS,#0xF0
019D            969   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:179: ADCON1 = (ENADC1|ADCS10); //Enable the converter and start immediately
019D 759705     970            mov     _ADCON1,#0x05
01A0            971   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:180: while((ADCI1&ADCON1)==0); //Wait for first conversion to complete
01A0            972   L014001?:
01A0 E597       973            mov     a,_ADCON1
01A2 30E380     974            jnb     acc.3,L014001?
01A5 22         975            ret
01A6            976   ;------------------------------------------------------------
01A6            977   ;Allocation info for local variables in function 'InitTimer0'
01A6            978   ;------------------------------------------------------------
01A6            979   ;------------------------------------------------------------
01A6            980   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:183: void InitTimer0 (void)
01A6            981   ;        -----------------------------------------
01A6            982   ;         function InitTimer0
01A6            983   ;        -----------------------------------------
01A6            984   _InitTimer0:
01A6            985   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:187: TR0=0; // Stop timer 0
01A6 C28C       986            clr     _TR0
01A8            987   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:188: TMOD=(TMOD&0xf0)|0x01; // 16-bit timer
01A8 74F0       988            mov     a,#0xF0
01AA 5589       989            anl     a,_TMOD
01AC 4401       990            orl     a,#0x01
01AE F589       991            mov     _TMOD,a
01B0            992   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:189: TH0=TIMER0_RELOAD_VALUE/0x100; // I think the RHS is 0001 0000 0000, are we dividing?
01B0 758CFE     993            mov     _TH0,#0xFE
01B3            994   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:190: TL0=TIMER0_RELOAD_VALUE%0x100; // % means modulo, apparently? ...are we modulo-ing?
01B3 758A90     995            mov     _TL0,#0x90
01B6            996   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:191: TR0=1; // Start timer 0 (bit 4 in TCON)
01B6 D28C       997            setb    _TR0
01B8            998   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:192: ET0=1; // Enable timer 0 interrupt - the interrupt controller IEN0 is bit-adressable, so we change only the bit we need
01B8 D2A9       999            setb    _ET0
01BA           1000   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:193: EA=1;  // Enable global interrupts
01BA D2AF      1001            setb    _EA
01BC 22        1002            ret
01BD           1003   ;------------------------------------------------------------
01BD           1004   ;Allocation info for local variables in function 'Timer0ISR'
01BD           1005   ;------------------------------------------------------------
01BD           1006   ;------------------------------------------------------------
01BD           1007   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:197: void Timer0ISR (void) interrupt 1
01BD           1008   ;        -----------------------------------------
01BD           1009   ;         function Timer0ISR
01BD           1010   ;        -----------------------------------------
01BD           1011   _Timer0ISR:
01BD C0E0      1012            push    acc
01BF C0D0      1013            push    psw
01C1 75D000    1014            mov     psw,#0x00
01C4           1015   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:200: TR0=0; // Stop timer 0
01C4 C28C      1016            clr     _TR0
01C6           1017   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:201: TH0=TIMER0_RELOAD_VALUE/0x100;
01C6 758CFE    1018            mov     _TH0,#0xFE
01C9           1019   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:202: TL0=TIMER0_RELOAD_VALUE%0x100;
01C9 758A90    1020            mov     _TL0,#0x90
01CC           1021   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:203: TR0=1; // Start timer 0
01CC D28C      1022            setb    _TR0
01CE           1023   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:205: if(++pwmcount>99) pwmcount=0;
01CE 0520      1024            inc     _pwmcount
01D0 E520      1025            mov     a,_pwmcount
01D2 249C      1026            add     a,#0xff - 0x63
01D4 5001      1027            jnc     L016002?
01D6 752000    1028            mov     _pwmcount,#0x00
01D9           1029   L016002?:
01D9           1030   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:206: P0_5=(pwm_left>pwmcount)?1:0;
01D9 C3        1031            clr     c
01DA E520      1032            mov     a,_pwmcount
01DC 95E0      1033            subb    a,_pwm_left
01DE 9285      1034            mov     _P0_5,c
01E0           1035   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:207: P0_6=(pwm_right>pwmcount)?1:0;
01E0 C3        1036            clr     c
01E1 E520      1037            mov     a,_pwmcount
01E3 95A0      1038            subb    a,_pwm_right
01E5 9286      1039            mov     _P0_6,c
01E7           1040   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:209: msCount++;
01E7 7401      1041            mov     a,#0x01
01E9 25E0      1042            add     a,_msCount
01EB F5E0      1043            mov     _msCount,a
01ED E4        1044            clr     a
01EE 35E1      1045            addc    a,(_msCount + 1)
01F0 F5E1      1046            mov     (_msCount + 1),a
01F2           1047   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:210: if(msCount==10000)
01F2 7410      1048            mov     a,#0x10
01F4 B5E080    1049            cjne    a,_msCount,L016009?
01F7 7427      1050            mov     a,#0x27
01F9 B5E180    1051            cjne    a,(_msCount + 1),L016009?
01FC           1052   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:212: time_update_flag=1;
01FC D210      1053            setb    _time_update_flag
01FE           1054   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:213: msCount=0;
01FE E4        1055            clr     a
01FF F5E0      1056            mov     _msCount,a
0201 F5E1      1057            mov     (_msCount + 1),a
0203           1058   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:214: secs++;
0203 05A0      1059            inc     _secs
0205           1060   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:215: if(secs==60)
0205 743C      1061            mov     a,#0x3C
0207 B5A080    1062            cjne    a,_secs,L016009?
020A           1063   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:217: secs=0;
020A 75A000    1064            mov     _secs,#0x00
020D           1065   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:218: mins++;
020D 0560      1066            inc     _mins
020F           1067   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:219: if(mins==60)
020F 743C      1068            mov     a,#0x3C
0211 B56080    1069            cjne    a,_mins,L016009?
0214           1070   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:221: mins=0;
0214 756000    1071            mov     _mins,#0x00
0217           1072   L016009?:
0217 D0D0      1073            pop     psw
0219 D0E0      1074            pop     acc
021B 32        1075            reti
021C           1076   ;        eliminated unneeded push/pop dpl
021C           1077   ;        eliminated unneeded push/pop dph
021C           1078   ;        eliminated unneeded push/pop b
021C           1079   ;------------------------------------------------------------
021C           1080   ;Allocation info for local variables in function 'display_LCD'
021C           1081   ;------------------------------------------------------------
021C           1082   ;buff                      Allocated with name '_display_LCD_buff_1_96'
021C           1083   ;------------------------------------------------------------
021C           1084   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:228: void display_LCD(void){
021C           1085   ;        -----------------------------------------
021C           1086   ;         function display_LCD
021C           1087   ;        -----------------------------------------
021C           1088   _display_LCD:
021C           1089   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:231: sprintf (buff, "V0: %4.2fV", (AD1DAT0*3.3)/255.0); // Prints 4 digits with 2 decimals, appended by V
021C 85D582    1090            mov     dpl,_AD1DAT0
021F 120100    1091            lcall   ___uchar2fs
0222 AA82      1092            mov     r2,dpl
0224 AB83      1093            mov     r3,dph
0226 ACF0      1094            mov     r4,b
0228 FD        1095            mov     r5,a
0229 C002      1096            push    ar2
022B C003      1097            push    ar3
022D C004      1098            push    ar4
022F C005      1099            push    ar5
0231 903333    1100            mov     dptr,#0x3333
0234 75F053    1101            mov     b,#0x53
0237 7440      1102            mov     a,#0x40
0239 120100    1103            lcall   ___fsmul
023C AA82      1104            mov     r2,dpl
023E AB83      1105            mov     r3,dph
0240 ACF0      1106            mov     r4,b
0242 FD        1107            mov     r5,a
0243 E581      1108            mov     a,sp
0245 24FC      1109            add     a,#0xfc
0247 F581      1110            mov     sp,a
0249 E4        1111            clr     a
024A C0E0      1112            push    acc
024C C0E0      1113            push    acc
024E 747F      1114            mov     a,#0x7F
0250 C0E0      1115            push    acc
0252 7443      1116            mov     a,#0x43
0254 C0E0      1117            push    acc
0256 8A82      1118            mov     dpl,r2
0258 8B83      1119            mov     dph,r3
025A 8CF0      1120            mov     b,r4
025C ED        1121            mov     a,r5
025D 120100    1122            lcall   ___fsdiv
0260 AA82      1123            mov     r2,dpl
0262 AB83      1124            mov     r3,dph
0264 ACF0      1125            mov     r4,b
0266 FD        1126            mov     r5,a
0267 E581      1127            mov     a,sp
0269 24FC      1128            add     a,#0xfc
026B F581      1129            mov     sp,a
026D C002      1130            push    ar2
026F C003      1131            push    ar3
0271 C004      1132            push    ar4
0273 C005      1133            push    ar5
0275 74C0      1134            mov     a,#__str_1
0277 C0E0      1135            push    acc
0279 74B0      1136            mov     a,#(__str_1 >> 8)
027B C0E0      1137            push    acc
027D 7480      1138            mov     a,#0x80
027F C0E0      1139            push    acc
0281 7430      1140            mov     a,#_display_LCD_buff_1_96
0283 C0E0      1141            push    acc
0285 74A4      1142            mov     a,#(_display_LCD_buff_1_96 >> 8)
0287 C0E0      1143            push    acc
0289 7440      1144            mov     a,#0x40
028B C0E0      1145            push    acc
028D 120100    1146            lcall   _sprintf
0290 E581      1147            mov     a,sp
0292 24F6      1148            add     a,#0xf6
0294 F581      1149            mov     sp,a
0296           1150   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:232: LCDprint(buff, 1, 1);
0296 756001    1151            mov     _LCDprint_PARM_2,#0x01
0299 D2C0      1152            setb    _LCDprint_PARM_3
029B 90A430    1153            mov     dptr,#_display_LCD_buff_1_96
029E 75F040    1154            mov     b,#0x40
02A1 120100    1155            lcall   _LCDprint
02A4           1156   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:234: sprintf (buff, "V1: %4.2fV", (AD1DAT1*3.3)/255.0);
02A4 85D682    1157            mov     dpl,_AD1DAT1
02A7 120100    1158            lcall   ___uchar2fs
02AA AA82      1159            mov     r2,dpl
02AC AB83      1160            mov     r3,dph
02AE ACF0      1161            mov     r4,b
02B0 FD        1162            mov     r5,a
02B1 C002      1163            push    ar2
02B3 C003      1164            push    ar3
02B5 C004      1165            push    ar4
02B7 C005      1166            push    ar5
02B9 903333    1167            mov     dptr,#0x3333
02BC 75F053    1168            mov     b,#0x53
02BF 7440      1169            mov     a,#0x40
02C1 120100    1170            lcall   ___fsmul
02C4 AA82      1171            mov     r2,dpl
02C6 AB83      1172            mov     r3,dph
02C8 ACF0      1173            mov     r4,b
02CA FD        1174            mov     r5,a
02CB E581      1175            mov     a,sp
02CD 24FC      1176            add     a,#0xfc
02CF F581      1177            mov     sp,a
02D1 E4        1178            clr     a
02D2 C0E0      1179            push    acc
02D4 C0E0      1180            push    acc
02D6 747F      1181            mov     a,#0x7F
02D8 C0E0      1182            push    acc
02DA 7443      1183            mov     a,#0x43
02DC C0E0      1184            push    acc
02DE 8A82      1185            mov     dpl,r2
02E0 8B83      1186            mov     dph,r3
02E2 8CF0      1187            mov     b,r4
02E4 ED        1188            mov     a,r5
02E5 120100    1189            lcall   ___fsdiv
02E8 AA82      1190            mov     r2,dpl
02EA AB83      1191            mov     r3,dph
02EC ACF0      1192            mov     r4,b
02EE FD        1193            mov     r5,a
02EF E581      1194            mov     a,sp
02F1 24FC      1195            add     a,#0xfc
02F3 F581      1196            mov     sp,a
02F5 C002      1197            push    ar2
02F7 C003      1198            push    ar3
02F9 C004      1199            push    ar4
02FB C005      1200            push    ar5
02FD 7440      1201            mov     a,#__str_2
02FF C0E0      1202            push    acc
0301 74B1      1203            mov     a,#(__str_2 >> 8)
0303 C0E0      1204            push    acc
0305 7480      1205            mov     a,#0x80
0307 C0E0      1206            push    acc
0309 7430      1207            mov     a,#_display_LCD_buff_1_96
030B C0E0      1208            push    acc
030D 74A4      1209            mov     a,#(_display_LCD_buff_1_96 >> 8)
030F C0E0      1210            push    acc
0311 7440      1211            mov     a,#0x40
0313 C0E0      1212            push    acc
0315 120100    1213            lcall   _sprintf
0318 E581      1214            mov     a,sp
031A 24F6      1215            add     a,#0xf6
031C F581      1216            mov     sp,a
031E           1217   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:235: LCDprint(buff, 2, 1);
031E 756002    1218            mov     _LCDprint_PARM_2,#0x02
0321 D2C0      1219            setb    _LCDprint_PARM_3
0323 90A430    1220            mov     dptr,#_display_LCD_buff_1_96
0326 75F040    1221            mov     b,#0x40
0329 020100    1222            ljmp    _LCDprint
032C           1223   ;------------------------------------------------------------
032C           1224   ;Allocation info for local variables in function 'motor_control'
032C           1225   ;------------------------------------------------------------
032C           1226   ;------------------------------------------------------------
032C           1227   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:240: void motor_control(void){
032C           1228   ;        -----------------------------------------
032C           1229   ;         function motor_control
032C           1230   ;        -----------------------------------------
032C           1231   _motor_control:
032C           1232   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:241: }
032C 22        1233            ret
032D           1234   ;------------------------------------------------------------
032D           1235   ;Allocation info for local variables in function 'main'
032D           1236   ;------------------------------------------------------------
032D           1237   ;str                       Allocated with name '_main_str_1_100'
032D           1238   ;threshold                 Allocated to registers 
032D           1239   ;p                         Allocated to registers 
032D           1240   ;d                         Allocated to registers r2 r3 r4 r5 
032D           1241   ;k_p                       Allocated to registers 
032D           1242   ;k_d                       Allocated to registers 
032D           1243   ;cor                       Allocated with name '_main_cor_1_100'
032D           1244   ;cur_error                 Allocated to registers r6 r7 r0 r1 
032D           1245   ;pre_error                 Allocated with name '_main_pre_error_1_100'
032D           1246   ;dt                        Allocated to registers 
032D           1247   ;def_speed                 Allocated to registers 
032D           1248   ;new_speed_low             Allocated with name '_main_new_speed_low_1_100'
032D           1249   ;new_speed_high            Allocated with name '_main_new_speed_high_1_100'
032D           1250   ;left                      Allocated with name '_main_left_2_101'
032D           1251   ;right                     Allocated with name '_main_right_2_101'
032D           1252   ;voltage                   Allocated to registers r6 r7 r0 r1 
032D           1253   ;------------------------------------------------------------
032D           1254   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:244: void main (void)
032D           1255   ;        -----------------------------------------
032D           1256   ;         function main
032D           1257   ;        -----------------------------------------
032D           1258   _main:
032D           1259   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:262: InitPorts();
032D 120100    1260            lcall   _InitPorts
0330           1261   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:263: LCD_8BIT();
0330 120100    1262            lcall   _LCD_8BIT
0333           1263   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:264: InitSerialPort();
0333 120100    1264            lcall   _InitSerialPort
0336           1265   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:265: InitADC();
0336 120100    1266            lcall   _InitADC
0339           1267   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:266: InitTimer0();
0339 120100    1268            lcall   _InitTimer0
033C           1269   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:268: pre_error = 0;
033C 750000    1270            mov     _main_pre_error_1_100,#0x00
033F 750100    1271            mov     (_main_pre_error_1_100 + 1),#0x00
0342 750200    1272            mov     (_main_pre_error_1_100 + 2),#0x00
0345 750300    1273            mov     (_main_pre_error_1_100 + 3),#0x00
0348           1274   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:269: while(1)
0348           1275   L019019?:
0348           1276   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:272: double left = (AD1DAT1/255.0)*3.3;
0348 85D682    1277            mov     dpl,_AD1DAT1
034B 120100    1278            lcall   ___uchar2fs
034E AE82      1279            mov     r6,dpl
0350 AF83      1280            mov     r7,dph
0352 A8F0      1281            mov     r0,b
0354 F9        1282            mov     r1,a
0355 E4        1283            clr     a
0356 C0E0      1284            push    acc
0358 C0E0      1285            push    acc
035A 747F      1286            mov     a,#0x7F
035C C0E0      1287            push    acc
035E 7443      1288            mov     a,#0x43
0360 C0E0      1289            push    acc
0362 8E82      1290            mov     dpl,r6
0364 8F83      1291            mov     dph,r7
0366 88F0      1292            mov     b,r0
0368 E9        1293            mov     a,r1
0369 120100    1294            lcall   ___fsdiv
036C AE82      1295            mov     r6,dpl
036E AF83      1296            mov     r7,dph
0370 A8F0      1297            mov     r0,b
0372 F9        1298            mov     r1,a
0373 E581      1299            mov     a,sp
0375 24FC      1300            add     a,#0xfc
0377 F581      1301            mov     sp,a
0379 C006      1302            push    ar6
037B C007      1303            push    ar7
037D C000      1304            push    ar0
037F C001      1305            push    ar1
0381 903333    1306            mov     dptr,#0x3333
0384 75F053    1307            mov     b,#0x53
0387 7440      1308            mov     a,#0x40
0389 120100    1309            lcall   ___fsmul
038C 8582F0    1310            mov     _main_left_2_101,dpl
038F 8583F1    1311            mov     (_main_left_2_101 + 1),dph
0392 85F0F2    1312            mov     (_main_left_2_101 + 2),b
0395 F5F3      1313            mov     (_main_left_2_101 + 3),a
0397 E581      1314            mov     a,sp
0399 24FC      1315            add     a,#0xfc
039B F581      1316            mov     sp,a
039D           1317   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:273: double right = (AD1DAT2/255.0)*3.3;
039D 85D782    1318            mov     dpl,_AD1DAT2
03A0 120100    1319            lcall   ___uchar2fs
03A3 AE82      1320            mov     r6,dpl
03A5 AF83      1321            mov     r7,dph
03A7 A8F0      1322            mov     r0,b
03A9 F9        1323            mov     r1,a
03AA E4        1324            clr     a
03AB C0E0      1325            push    acc
03AD C0E0      1326            push    acc
03AF 747F      1327            mov     a,#0x7F
03B1 C0E0      1328            push    acc
03B3 7443      1329            mov     a,#0x43
03B5 C0E0      1330            push    acc
03B7 8E82      1331            mov     dpl,r6
03B9 8F83      1332            mov     dph,r7
03BB 88F0      1333            mov     b,r0
03BD E9        1334            mov     a,r1
03BE 120100    1335            lcall   ___fsdiv
03C1 AE82      1336            mov     r6,dpl
03C3 AF83      1337            mov     r7,dph
03C5 A8F0      1338            mov     r0,b
03C7 F9        1339            mov     r1,a
03C8 E581      1340            mov     a,sp
03CA 24FC      1341            add     a,#0xfc
03CC F581      1342            mov     sp,a
03CE C006      1343            push    ar6
03D0 C007      1344            push    ar7
03D2 C000      1345            push    ar0
03D4 C001      1346            push    ar1
03D6 903333    1347            mov     dptr,#0x3333
03D9 75F053    1348            mov     b,#0x53
03DC 7440      1349            mov     a,#0x40
03DE 120100    1350            lcall   ___fsmul
03E1 858240    1351            mov     _main_right_2_101,dpl
03E4 858341    1352            mov     (_main_right_2_101 + 1),dph
03E7 85F042    1353            mov     (_main_right_2_101 + 2),b
03EA F543      1354            mov     (_main_right_2_101 + 3),a
03EC E581      1355            mov     a,sp
03EE 24FC      1356            add     a,#0xfc
03F0 F581      1357            mov     sp,a
03F2           1358   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:274: double voltage = (AD1DAT0/255.0)*3.3;
03F2 85D582    1359            mov     dpl,_AD1DAT0
03F5 120100    1360            lcall   ___uchar2fs
03F8 AE82      1361            mov     r6,dpl
03FA AF83      1362            mov     r7,dph
03FC A8F0      1363            mov     r0,b
03FE F9        1364            mov     r1,a
03FF E4        1365            clr     a
0400 C0E0      1366            push    acc
0402 C0E0      1367            push    acc
0404 747F      1368            mov     a,#0x7F
0406 C0E0      1369            push    acc
0408 7443      1370            mov     a,#0x43
040A C0E0      1371            push    acc
040C 8E82      1372            mov     dpl,r6
040E 8F83      1373            mov     dph,r7
0410 88F0      1374            mov     b,r0
0412 E9        1375            mov     a,r1
0413 120100    1376            lcall   ___fsdiv
0416 AE82      1377            mov     r6,dpl
0418 AF83      1378            mov     r7,dph
041A A8F0      1379            mov     r0,b
041C F9        1380            mov     r1,a
041D E581      1381            mov     a,sp
041F 24FC      1382            add     a,#0xfc
0421 F581      1383            mov     sp,a
0423 C006      1384            push    ar6
0425 C007      1385            push    ar7
0427 C000      1386            push    ar0
0429 C001      1387            push    ar1
042B 903333    1388            mov     dptr,#0x3333
042E 75F053    1389            mov     b,#0x53
0431 7440      1390            mov     a,#0x40
0433 120100    1391            lcall   ___fsmul
0436 AE82      1392            mov     r6,dpl
0438 AF83      1393            mov     r7,dph
043A A8F0      1394            mov     r0,b
043C F9        1395            mov     r1,a
043D E581      1396            mov     a,sp
043F 24FC      1397            add     a,#0xfc
0441 F581      1398            mov     sp,a
0443           1399   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:277: if(time_update_flag==1) // If the clock has been updated, refresh the display
0443           1400   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:279: time_update_flag=0;
0443 1010C0    1401            jbc     _time_update_flag,L019031?
0446 8001      1402            sjmp    L019002?
0448           1403   L019031?:
0448           1404   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:280: sprintf(str, "V=%5.2f", voltage); // Display the voltage at pin P0.1
0448 C006      1405            push    ar6
044A C007      1406            push    ar7
044C C000      1407            push    ar0
044E C001      1408            push    ar1
0450 7440      1409            mov     a,#__str_3
0452 C0E0      1410            push    acc
0454 74B2      1411            mov     a,#(__str_3 >> 8)
0456 C0E0      1412            push    acc
0458 7480      1413            mov     a,#0x80
045A C0E0      1414            push    acc
045C 7470      1415            mov     a,#_main_str_1_100
045E C0E0      1416            push    acc
0460 74A4      1417            mov     a,#(_main_str_1_100 >> 8)
0462 C0E0      1418            push    acc
0464 7440      1419            mov     a,#0x40
0466 C0E0      1420            push    acc
0468 120100    1421            lcall   _sprintf
046B E581      1422            mov     a,sp
046D 24F6      1423            add     a,#0xf6
046F F581      1424            mov     sp,a
0471           1425   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:281: LCDprint(str, 1, 1);
0471 756001    1426            mov     _LCDprint_PARM_2,#0x01
0474 D2C0      1427            setb    _LCDprint_PARM_3
0476 90A470    1428            mov     dptr,#_main_str_1_100
0479 75F040    1429            mov     b,#0x40
047C 120100    1430            lcall   _LCDprint
047F           1431   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:282: sprintf(str, "%02d:%02d", mins, secs); // Display the clock
047F AEA0      1432            mov     r6,_secs
0481 7F00      1433            mov     r7,#0x00
0483 A860      1434            mov     r0,_mins
0485 7900      1435            mov     r1,#0x00
0487 C006      1436            push    ar6
0489 C007      1437            push    ar7
048B C000      1438            push    ar0
048D C001      1439            push    ar1
048F 7480      1440            mov     a,#__str_4
0491 C0E0      1441            push    acc
0493 74B2      1442            mov     a,#(__str_4 >> 8)
0495 C0E0      1443            push    acc
0497 7480      1444            mov     a,#0x80
0499 C0E0      1445            push    acc
049B 7470      1446            mov     a,#_main_str_1_100
049D C0E0      1447            push    acc
049F 74A4      1448            mov     a,#(_main_str_1_100 >> 8)
04A1 C0E0      1449            push    acc
04A3 7440      1450            mov     a,#0x40
04A5 C0E0      1451            push    acc
04A7 120100    1452            lcall   _sprintf
04AA E581      1453            mov     a,sp
04AC 24F6      1454            add     a,#0xf6
04AE F581      1455            mov     sp,a
04B0           1456   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:283: LCDprint(str, 2, 1);
04B0 756002    1457            mov     _LCDprint_PARM_2,#0x02
04B3 D2C0      1458            setb    _LCDprint_PARM_3
04B5 90A470    1459            mov     dptr,#_main_str_1_100
04B8 75F040    1460            mov     b,#0x40
04BB 120100    1461            lcall   _LCDprint
04BE           1462   L019002?:
04BE           1463   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:310: cur_error = left - right;
04BE C040      1464            push    _main_right_2_101
04C0 C041      1465            push    (_main_right_2_101 + 1)
04C2 C042      1466            push    (_main_right_2_101 + 2)
04C4 C043      1467            push    (_main_right_2_101 + 3)
04C6 85F082    1468            mov     dpl,_main_left_2_101
04C9 85F183    1469            mov     dph,(_main_left_2_101 + 1)
04CC 85F2F0    1470            mov     b,(_main_left_2_101 + 2)
04CF E5F3      1471            mov     a,(_main_left_2_101 + 3)
04D1 120100    1472            lcall   ___fssub
04D4 AE82      1473            mov     r6,dpl
04D6 AF83      1474            mov     r7,dph
04D8 A8F0      1475            mov     r0,b
04DA F9        1476            mov     r1,a
04DB E581      1477            mov     a,sp
04DD 24FC      1478            add     a,#0xfc
04DF F581      1479            mov     sp,a
04E1           1480   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:314: d = k_d*(cur_error - pre_error)/dt;
04E1 C006      1481            push    ar6
04E3 C007      1482            push    ar7
04E5 C000      1483            push    ar0
04E7 C001      1484            push    ar1
04E9 C000      1485            push    _main_pre_error_1_100
04EB C001      1486            push    (_main_pre_error_1_100 + 1)
04ED C002      1487            push    (_main_pre_error_1_100 + 2)
04EF C003      1488            push    (_main_pre_error_1_100 + 3)
04F1 8E82      1489            mov     dpl,r6
04F3 8F83      1490            mov     dph,r7
04F5 88F0      1491            mov     b,r0
04F7 E9        1492            mov     a,r1
04F8 120100    1493            lcall   ___fssub
04FB AA82      1494            mov     r2,dpl
04FD AB83      1495            mov     r3,dph
04FF ACF0      1496            mov     r4,b
0501 FD        1497            mov     r5,a
0502 E581      1498            mov     a,sp
0504 24FC      1499            add     a,#0xfc
0506 F581      1500            mov     sp,a
0508 746F      1501            mov     a,#0x6F
050A C0E0      1502            push    acc
050C 7412      1503            mov     a,#0x12
050E C0E0      1504            push    acc
0510 7483      1505            mov     a,#0x83
0512 C0E0      1506            push    acc
0514 743A      1507            mov     a,#0x3A
0516 C0E0      1508            push    acc
0518 8A82      1509            mov     dpl,r2
051A 8B83      1510            mov     dph,r3
051C 8CF0      1511            mov     b,r4
051E ED        1512            mov     a,r5
051F 120100    1513            lcall   ___fsdiv
0522 AA82      1514            mov     r2,dpl
0524 AB83      1515            mov     r3,dph
0526 ACF0      1516            mov     r4,b
0528 FD        1517            mov     r5,a
0529 E581      1518            mov     a,sp
052B 24FC      1519            add     a,#0xfc
052D F581      1520            mov     sp,a
052F D001      1521            pop     ar1
0531 D000      1522            pop     ar0
0533 D007      1523            pop     ar7
0535 D006      1524            pop     ar6
0537           1525   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:316: cor = p + d;
0537 C006      1526            push    ar6
0539 C007      1527            push    ar7
053B C000      1528            push    ar0
053D C001      1529            push    ar1
053F C002      1530            push    ar2
0541 C003      1531            push    ar3
0543 C004      1532            push    ar4
0545 C005      1533            push    ar5
0547 8E82      1534            mov     dpl,r6
0549 8F83      1535            mov     dph,r7
054B 88F0      1536            mov     b,r0
054D E9        1537            mov     a,r1
054E 120100    1538            lcall   ___fsadd
0551 8582B0    1539            mov     _main_cor_1_100,dpl
0554 8583B1    1540            mov     (_main_cor_1_100 + 1),dph
0557 85F0B2    1541            mov     (_main_cor_1_100 + 2),b
055A F5B3      1542            mov     (_main_cor_1_100 + 3),a
055C E581      1543            mov     a,sp
055E 24FC      1544            add     a,#0xfc
0560 F581      1545            mov     sp,a
0562           1546   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:319: new_speed_low = def_speed - cor;
0562 C0B0      1547            push    _main_cor_1_100
0564 C0B1      1548            push    (_main_cor_1_100 + 1)
0566 C0B2      1549            push    (_main_cor_1_100 + 2)
0568 C0B3      1550            push    (_main_cor_1_100 + 3)
056A 900000    1551            mov     dptr,#0x0000
056D 75F0C8    1552            mov     b,#0xC8
0570 7442      1553            mov     a,#0x42
0572 120100    1554            lcall   ___fssub
0575 858250    1555            mov     _main_new_speed_low_1_100,dpl
0578 858351    1556            mov     (_main_new_speed_low_1_100 + 1),dph
057B 85F052    1557            mov     (_main_new_speed_low_1_100 + 2),b
057E F553      1558            mov     (_main_new_speed_low_1_100 + 3),a
0580 E581      1559            mov     a,sp
0582 24FC      1560            add     a,#0xfc
0584 F581      1561            mov     sp,a
0586           1562   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:320: new_speed_high = def_speed + cor;
0586 C0B0      1563            push    _main_cor_1_100
0588 C0B1      1564            push    (_main_cor_1_100 + 1)
058A C0B2      1565            push    (_main_cor_1_100 + 2)
058C C0B3      1566            push    (_main_cor_1_100 + 3)
058E 900000    1567            mov     dptr,#0x0000
0591 75F0C8    1568            mov     b,#0xC8
0594 7442      1569            mov     a,#0x42
0596 120100    1570            lcall   ___fsadd
0599 8582A0    1571            mov     _main_new_speed_high_1_100,dpl
059C 8583A1    1572            mov     (_main_new_speed_high_1_100 + 1),dph
059F 85F0A2    1573            mov     (_main_new_speed_high_1_100 + 2),b
05A2 F5A3      1574            mov     (_main_new_speed_high_1_100 + 3),a
05A4 E581      1575            mov     a,sp
05A6 24FC      1576            add     a,#0xfc
05A8 F581      1577            mov     sp,a
05AA           1578   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:323: if(new_speed_low<0){
05AA E4        1579            clr     a
05AB C0E0      1580            push    acc
05AD C0E0      1581            push    acc
05AF C0E0      1582            push    acc
05B1 C0E0      1583            push    acc
05B3 855082    1584            mov     dpl,_main_new_speed_low_1_100
05B6 855183    1585            mov     dph,(_main_new_speed_low_1_100 + 1)
05B9 8552F0    1586            mov     b,(_main_new_speed_low_1_100 + 2)
05BC E553      1587            mov     a,(_main_new_speed_low_1_100 + 3)
05BE 120100    1588            lcall   ___fslt
05C1 AA82      1589            mov     r2,dpl
05C3 E581      1590            mov     a,sp
05C5 24FC      1591            add     a,#0xfc
05C7 F581      1592            mov     sp,a
05C9 D001      1593            pop     ar1
05CB D000      1594            pop     ar0
05CD D007      1595            pop     ar7
05CF D006      1596            pop     ar6
05D1 EA        1597            mov     a,r2
05D2 6001      1598            jz      L019004?
05D4           1599   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:324: new_speed_low = 0;
05D4 755000    1600            mov     _main_new_speed_low_1_100,#0x00
05D7 755100    1601            mov     (_main_new_speed_low_1_100 + 1),#0x00
05DA 755200    1602            mov     (_main_new_speed_low_1_100 + 2),#0x00
05DD 755300    1603            mov     (_main_new_speed_low_1_100 + 3),#0x00
05E0           1604   L019004?:
05E0           1605   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:327: if(new_speed_high>100){
05E0 C006      1606            push    ar6
05E2 C007      1607            push    ar7
05E4 C000      1608            push    ar0
05E6 C001      1609            push    ar1
05E8 E4        1610            clr     a
05E9 C0E0      1611            push    acc
05EB C0E0      1612            push    acc
05ED 74C8      1613            mov     a,#0xC8
05EF C0E0      1614            push    acc
05F1 7442      1615            mov     a,#0x42
05F3 C0E0      1616            push    acc
05F5 85A082    1617            mov     dpl,_main_new_speed_high_1_100
05F8 85A183    1618            mov     dph,(_main_new_speed_high_1_100 + 1)
05FB 85A2F0    1619            mov     b,(_main_new_speed_high_1_100 + 2)
05FE E5A3      1620            mov     a,(_main_new_speed_high_1_100 + 3)
0600 120100    1621            lcall   ___fsgt
0603 AA82      1622            mov     r2,dpl
0605 E581      1623            mov     a,sp
0607 24FC      1624            add     a,#0xfc
0609 F581      1625            mov     sp,a
060B D001      1626            pop     ar1
060D D000      1627            pop     ar0
060F D007      1628            pop     ar7
0611 D006      1629            pop     ar6
0613 EA        1630            mov     a,r2
0614 6001      1631            jz      L019006?
0616           1632   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:328: new_speed_high = 100;
0616 75A000    1633            mov     _main_new_speed_high_1_100,#0x00
0619 75A100    1634            mov     (_main_new_speed_high_1_100 + 1),#0x00
061C 75A2C8    1635            mov     (_main_new_speed_high_1_100 + 2),#0xC8
061F 75A342    1636            mov     (_main_new_speed_high_1_100 + 3),#0x42
0622           1637   L019006?:
0622           1638   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:333: if(cur_error > 0){                
0622 C006      1639            push    ar6
0624 C007      1640            push    ar7
0626 C000      1641            push    ar0
0628 C001      1642            push    ar1
062A E4        1643            clr     a
062B C0E0      1644            push    acc
062D C0E0      1645            push    acc
062F C0E0      1646            push    acc
0631 C0E0      1647            push    acc
0633 8E82      1648            mov     dpl,r6
0635 8F83      1649            mov     dph,r7
0637 88F0      1650            mov     b,r0
0639 E9        1651            mov     a,r1
063A 120100    1652            lcall   ___fsgt
063D AA82      1653            mov     r2,dpl
063F E581      1654            mov     a,sp
0641 24FC      1655            add     a,#0xfc
0643 F581      1656            mov     sp,a
0645 D001      1657            pop     ar1
0647 D000      1658            pop     ar0
0649 D007      1659            pop     ar7
064B D006      1660            pop     ar6
064D EA        1661            mov     a,r2
064E 6001      1662            jz      L019016?
0650           1663   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:334: pwm_left = new_speed_low;
0650 855082    1664            mov     dpl,_main_new_speed_low_1_100
0653 855183    1665            mov     dph,(_main_new_speed_low_1_100 + 1)
0656 8552F0    1666            mov     b,(_main_new_speed_low_1_100 + 2)
0659 E553      1667            mov     a,(_main_new_speed_low_1_100 + 3)
065B C006      1668            push    ar6
065D C007      1669            push    ar7
065F C000      1670            push    ar0
0661 C001      1671            push    ar1
0663 120100    1672            lcall   ___fs2uchar
0666 8582E0    1673            mov     _pwm_left,dpl
0669           1674   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:335: pwm_right = new_speed_high;               
0669 85A082    1675            mov     dpl,_main_new_speed_high_1_100
066C 85A183    1676            mov     dph,(_main_new_speed_high_1_100 + 1)
066F 85A2F0    1677            mov     b,(_main_new_speed_high_1_100 + 2)
0672 E5A3      1678            mov     a,(_main_new_speed_high_1_100 + 3)
0674 120100    1679            lcall   ___fs2uchar
0677 8582A0    1680            mov     _pwm_right,dpl
067A D001      1681            pop     ar1
067C D000      1682            pop     ar0
067E D007      1683            pop     ar7
0680 D006      1684            pop     ar6
0682 020100    1685            ljmp    L019017?
0685           1686   L019016?:
0685           1687   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:337: else if (cur_error < 0){
0685 C006      1688            push    ar6
0687 C007      1689            push    ar7
0689 C000      1690            push    ar0
068B C001      1691            push    ar1
068D E4        1692            clr     a
068E C0E0      1693            push    acc
0690 C0E0      1694            push    acc
0692 C0E0      1695            push    acc
0694 C0E0      1696            push    acc
0696 8E82      1697            mov     dpl,r6
0698 8F83      1698            mov     dph,r7
069A 88F0      1699            mov     b,r0
069C E9        1700            mov     a,r1
069D 120100    1701            lcall   ___fslt
06A0 AA82      1702            mov     r2,dpl
06A2 E581      1703            mov     a,sp
06A4 24FC      1704            add     a,#0xfc
06A6 F581      1705            mov     sp,a
06A8 D001      1706            pop     ar1
06AA D000      1707            pop     ar0
06AC D007      1708            pop     ar7
06AE D006      1709            pop     ar6
06B0 EA        1710            mov     a,r2
06B1 6001      1711            jz      L019013?
06B3           1712   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:338: pwm_left = new_speed_high;
06B3 85A082    1713            mov     dpl,_main_new_speed_high_1_100
06B6 85A183    1714            mov     dph,(_main_new_speed_high_1_100 + 1)
06B9 85A2F0    1715            mov     b,(_main_new_speed_high_1_100 + 2)
06BC E5A3      1716            mov     a,(_main_new_speed_high_1_100 + 3)
06BE C006      1717            push    ar6
06C0 C007      1718            push    ar7
06C2 C000      1719            push    ar0
06C4 C001      1720            push    ar1
06C6 120100    1721            lcall   ___fs2uchar
06C9 8582E0    1722            mov     _pwm_left,dpl
06CC           1723   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:339: pwm_right = new_speed_low;
06CC 855082    1724            mov     dpl,_main_new_speed_low_1_100
06CF 855183    1725            mov     dph,(_main_new_speed_low_1_100 + 1)
06D2 8552F0    1726            mov     b,(_main_new_speed_low_1_100 + 2)
06D5 E553      1727            mov     a,(_main_new_speed_low_1_100 + 3)
06D7 120100    1728            lcall   ___fs2uchar
06DA 8582A0    1729            mov     _pwm_right,dpl
06DD D001      1730            pop     ar1
06DF D000      1731            pop     ar0
06E1 D007      1732            pop     ar7
06E3 D006      1733            pop     ar6
06E5 8001      1734            sjmp    L019017?
06E7           1735   L019013?:
06E7           1736   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:343: if(pre_error > 0){
06E7 C006      1737            push    ar6
06E9 C007      1738            push    ar7
06EB C000      1739            push    ar0
06ED C001      1740            push    ar1
06EF E4        1741            clr     a
06F0 C0E0      1742            push    acc
06F2 C0E0      1743            push    acc
06F4 C0E0      1744            push    acc
06F6 C0E0      1745            push    acc
06F8 850082    1746            mov     dpl,_main_pre_error_1_100
06FB 850183    1747            mov     dph,(_main_pre_error_1_100 + 1)
06FE 8502F0    1748            mov     b,(_main_pre_error_1_100 + 2)
0701 E503      1749            mov     a,(_main_pre_error_1_100 + 3)
0703 120100    1750            lcall   ___fsgt
0706 AA82      1751            mov     r2,dpl
0708 E581      1752            mov     a,sp
070A 24FC      1753            add     a,#0xfc
070C F581      1754            mov     sp,a
070E D001      1755            pop     ar1
0710 D000      1756            pop     ar0
0712 D007      1757            pop     ar7
0714 D006      1758            pop     ar6
0716 EA        1759            mov     a,r2
0717 6001      1760            jz      L019010?
0719           1761   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:344: pwm_left = 100;
0719 75E064    1762            mov     _pwm_left,#0x64
071C           1763   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:345: pwm_right = 20;
071C 75A014    1764            mov     _pwm_right,#0x14
071F 8001      1765            sjmp    L019017?
0721           1766   L019010?:
0721           1767   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:347: else if (pre_error < 0){
0721 C006      1768            push    ar6
0723 C007      1769            push    ar7
0725 C000      1770            push    ar0
0727 C001      1771            push    ar1
0729 E4        1772            clr     a
072A C0E0      1773            push    acc
072C C0E0      1774            push    acc
072E C0E0      1775            push    acc
0730 C0E0      1776            push    acc
0732 850082    1777            mov     dpl,_main_pre_error_1_100
0735 850183    1778            mov     dph,(_main_pre_error_1_100 + 1)
0738 8502F0    1779            mov     b,(_main_pre_error_1_100 + 2)
073B E503      1780            mov     a,(_main_pre_error_1_100 + 3)
073D 120100    1781            lcall   ___fslt
0740 AA82      1782            mov     r2,dpl
0742 E581      1783            mov     a,sp
0744 24FC      1784            add     a,#0xfc
0746 F581      1785            mov     sp,a
0748 D001      1786            pop     ar1
074A D000      1787            pop     ar0
074C D007      1788            pop     ar7
074E D006      1789            pop     ar6
0750 EA        1790            mov     a,r2
0751 6001      1791            jz      L019017?
0753           1792   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:348: pwm_right = 100;
0753 75A064    1793            mov     _pwm_right,#0x64
0756           1794   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:349: pwm_left = 20;
0756 75E014    1795            mov     _pwm_left,#0x14
0759           1796   L019017?:
0759           1797   ;        C:\Users\r6z8\Documents\GitHub\eece_284\Code\main code.c:352: pre_error = cur_error;
0759 8E00      1798            mov     _main_pre_error_1_100,r6
075B 8F01      1799            mov     (_main_pre_error_1_100 + 1),r7
075D 8802      1800            mov     (_main_pre_error_1_100 + 2),r0
075F 8903      1801            mov     (_main_pre_error_1_100 + 3),r1
0761 020100    1802            ljmp    L019019?
0764           1803            rseg R_CSEG
0764           1804   
0000           1805            rseg R_XINIT
0000           1806   
0000           1807            rseg R_CONST
0000           1808   __str_1:
0000 56303A20  1809            db 'V0: %4.2fV'
     25342E32
     6656
000A 00        1810            db 0x00
000B           1811   __str_2:
000B 56313A20  1812            db 'V1: %4.2fV'
     25342E32
     6656
0015 00        1813            db 0x00
0016           1814   __str_3:
0016 563D2535  1815            db 'V=%5.2f'
     2E3266
001D 00        1816            db 0x00
001E           1817   __str_4:
001E 25303264  1818            db '%02d:%02d'
     3A253032
     64
0027 00        1819            db 0x00
0028           1820   
000E           1821            CSEG
000E           1822   
000E           1823   end
